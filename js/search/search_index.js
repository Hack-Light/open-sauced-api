var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.016,1,2.576]],["body/modules/AppModule.html",[0,1.224,1,5.145,2,1.212,3,1.94,4,2.668,5,2.668,6,4.026,7,0.02,8,4.026,9,4.026,10,4.026,11,4.026,12,4.026,13,4.026,14,3.734,15,4.026,16,2.053,17,1.351,18,1.212,19,0.202,20,0.183,21,0.145,22,3.109,23,2.626,24,0.895,25,4.466,26,3.109,27,5.712,28,0.454,29,3.109,30,0.852,31,0.691,32,0.508,33,0.481,34,5.226,35,0.895,36,2.161,37,0.492,38,3.109,39,0.538,40,1.612,41,1.093,42,5.226,43,5.405,44,2.668,45,4.466,46,3.109,47,3.833,48,2.378,49,3.109,50,2.161,51,3.833,52,5.226,53,0.988,54,4.466,55,3.109,56,3.109,57,2.378,58,2.378,59,2.378,60,3.109,61,4.466,62,3.109,63,4.466,64,3.109,65,4.466,66,3.109,67,3.109,68,1.054,69,1.279,70,1.837,71,1.843,72,2.053,73,2.668,74,1.94,75,1.988,76,1.94,77,1.988,78,1.94,79,1.988,80,1.94,81,1.988,82,3.109,83,3.109,84,3.109,85,3.109,86,3.109,87,3.109,88,2.668,89,2.161,90,3.109,91,4.466,92,2.378,93,2.668,94,3.104,95,3.109,96,3.109,97,2.668,98,3.109,99,3.97,100,3.109,101,4.466,102,3.109,103,3.109,104,3.109,105,2.668,106,3.109,107,3.109,108,3.109,109,3.109,110,3.109,111,2.161,112,3.109,113,3.109,114,1.837,115,1.279,116,3.109,117,2.161,118,1.151,119,3.109,120,3.109,121,4.466,122,3.109,123,3.109,124,3.109,125,3.109,126,2.668,127,3.109,128,3.109,129,2.378,130,3.109,131,3.109,132,3.109,133,3.109,134,3.109,135,3.109,136,3.109,137,3.109,138,3.109,139,3.109,140,3.109,141,3.109,142,3.109,143,2.378,144,2.378,145,2.668,146,2.668,147,3.109,148,2.378,149,2.161,150,0.941,151,1.516,152,0.202,153,0.074,154,0.895,155,0.895,156,3.109,157,3.109,158,0.011,159,0.011]],["title/controllers/AuthController.html",[160,1.121,161,2.576]],["body/controllers/AuthController.html",[7,0.02,19,0.217,20,0.196,21,0.155,24,1.351,28,0.793,30,1.488,31,0.841,32,0.734,33,0.841,35,1.564,37,0.431,39,0.577,50,2.317,114,1.931,150,1.009,152,0.217,153,0.079,154,0.96,155,0.96,158,0.012,159,0.012,160,1.009,161,3.262,162,2.862,163,1.729,164,3.472,165,0.355,166,2.297,167,5.432,168,6.214,169,6.214,170,3.334,171,5.059,172,1.348,173,3.334,174,4.694,175,3.341,176,2.596,177,4.028,178,3.334,179,3.334,180,3.334,181,2.063,182,2.386,183,3.334,184,1.115,185,3.334,186,5.895,187,4.097,188,5.898,189,4.694,190,4.694,191,5.895,192,2.562,193,3.334,194,2.724,195,3.334,196,3.334,197,4.097,198,3.334,199,3.334,200,3.334,201,3.334,202,2.132,203,3.769,204,3.005,205,2.874,206,3.056,207,1.729,208,0.87,209,1.533,210,2.862,211,1.977,212,3.334,213,4.097,214,3.334,215,3.334,216,3.221,217,3.334,218,3.334,219,3.334,220,1.533,221,3.334,222,3.472,223,2.816,224,3.334,225,1.65,226,3.775,227,4.028,228,4.028,229,4.028,230,1.83,231,1.931,232,2.862,233,2.862,234,1.42,235,3.59,236,5.059,237,4.662,238,1.3,239,4.662,240,2.862,241,2.55,242,1.533,243,2.317,244,2.317,245,3.472,246,3.775,247,4.694,248,1.3,249,3.334,250,2.55,251,2.862,252,3.334,253,1.417,254,3.334,255,3.334,256,3.334,257,1.351,258,3.334,259,3.334,260,3.334]],["title/modules/AuthModule.html",[0,1.016,6,2.369]],["body/modules/AuthModule.html",[0,1.644,2,1.883,3,2.607,6,4.809,7,0.019,14,4.244,16,2.758,17,2.098,18,1.883,19,0.314,20,0.284,21,0.225,23,2.758,37,0.466,39,0.835,88,4.143,150,1.815,151,2.925,152,0.314,153,0.114,158,0.015,159,0.015,161,4.537,209,3.458,210,4.143,261,4.143,262,4.143,263,4.828,264,4.143,265,4.809,266,4.828,267,3.11,268,6,269,3.692,270,4.828,271,4.828]],["title/modules/ContributionModule.html",[0,1.016,8,2.369]],["body/modules/ContributionModule.html",[0,1.661,2,1.915,3,2.635,7,0.02,8,4.742,16,2.788,17,2.134,18,1.915,19,0.32,20,0.289,21,0.229,23,2.258,37,0.474,39,0.849,40,2.546,41,1.727,68,1.431,69,2.02,72,2.788,150,1.834,151,2.956,152,0.32,153,0.116,158,0.015,159,0.015,267,3.143,272,4.214,273,4.214,274,4.214,275,4.47,276,2.403,277,4.911,278,4.572,279,3.755,280,2.258,281,4.214,282,1.102,283,4.911,284,2.911]],["title/classes/ContributionPageOptionsDto.html",[153,0.088,285,2.369]],["body/classes/ContributionPageOptionsDto.html",[7,0.02,19,0.28,20,0.253,21,0.2,28,0.956,32,0.745,33,1.109,37,0.403,152,0.363,153,0.132,158,0.014,159,0.014,165,0.457,172,1.624,184,0.964,208,1.12,230,2.173,231,2.292,285,3.562,286,2.227,287,4.261,288,2.08,289,2.747,290,3.082,291,2.443,292,1.527,293,2.681,294,4.729,295,3.562,296,4.261,297,5.185,298,2.422,299,3.008,300,5.307,301,4.261,302,4.729,303,3.872,304,4.296,305,4.296,306,4.261,307,4.261,308,3.666,309,3.286,310,3.286,311,5.307,312,3.687,313,3.666,314,2.747,315,3.286,316,3.687,317,3.286,318,3.687,319,3.872,320,3.286,321,4.261,322,2.986,323,2.986,324,1.867,325,3.872,326,3.872,327,4.261,328,4.261,329,4.296]],["title/injectables/ContributionService.html",[275,2.198,330,0.967]],["body/injectables/ContributionService.html",[7,0.02,19,0.284,20,0.256,21,0.203,24,1.618,28,0.821,30,1.54,31,0.87,32,0.64,33,0.87,35,1.254,37,0.468,39,0.753,41,1.531,53,1.384,72,2.002,115,1.791,118,2.08,152,0.284,153,0.103,154,1.618,155,1.254,158,0.014,159,0.014,165,0.463,166,2.08,182,2.08,184,1.076,225,2.394,248,2.192,253,1.136,275,3.332,279,3.33,285,4.204,288,1.384,291,2.188,297,3.33,300,3.737,313,2.582,314,2.784,323,3.026,324,1.892,330,1.466,331,1.892,332,3.737,333,4.759,334,4.354,335,2.091,336,4.354,337,5.62,338,3.33,339,4.457,340,4.354,341,3.33,342,2.409,343,1.892,344,2.257,345,3.737,346,3.33,347,3.899,348,3.33,349,3.737,350,4.354,351,3.443,352,4.354,353,3.737,354,3.737,355,4.354,356,3.737,357,3.737,358,4.354,359,3.737,360,3.737,361,3.906,362,3.737,363,3.737,364,3.737]],["title/classes/DatabaseLoggerMiddleware.html",[94,2.576,153,0.088]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.02,19,0.412,20,0.206,21,0.163,24,1.397,28,0.999,30,2.048,31,1.038,32,0.764,33,1.038,35,1.932,36,4.395,37,0.363,39,0.605,53,1.112,57,2.675,58,2.675,59,2.675,94,3.873,117,4.395,118,1.796,126,5.166,152,0.316,153,0.083,155,1.884,158,0.012,159,0.012,165,0.372,184,0.964,241,2.675,250,2.675,253,1.649,286,1.813,292,1.33,293,2.063,298,1.622,299,1.608,341,4.603,365,5.962,366,2.675,367,4.165,368,5.573,369,6.711,370,5.573,371,5.573,372,5.573,373,5.573,374,5.573,375,5.573,376,4.853,377,3.497,378,3.497,379,5.573,380,5.759,381,2.628,382,3.497,383,3.497,384,3.497,385,3.497,386,3.497,387,3.547,388,3.497,389,3.497,390,4.262,391,3.497,392,3.497,393,2.366,394,3.497,395,3.497,396,3.497,397,3.497,398,3.497,399,4.183,400,3.497,401,5.573,402,4.853,403,3.497,404,5.573,405,3.497,406,3.497,407,3.497]],["title/entities/DbContribution.html",[72,1.704,408,1.178]],["body/entities/DbContribution.html",[7,0.02,19,0.185,20,0.168,21,0.133,28,0.982,31,0.848,32,0.821,33,0.945,37,0.357,53,0.905,68,1.294,69,1.171,72,1.926,114,2.255,115,1.171,152,0.185,153,0.067,158,0.011,159,0.011,165,0.303,172,1.669,181,1.206,184,1.121,192,1.821,208,0.743,230,1.938,231,2.045,234,1.767,238,2.138,242,3.439,257,1.866,282,1.312,290,1.575,292,1.148,298,2.166,326,3.455,327,3.801,328,4.467,335,1.332,381,1.927,393,3.159,408,1.332,409,2.444,410,2.75,411,2.848,412,4.467,413,3.379,414,2.912,415,3.476,416,3.25,417,2.444,418,4.192,419,4.192,420,4.192,421,4.192,422,2.848,423,3.204,424,4.19,425,3.204,426,4.19,427,2.848,428,4.192,429,2.848,430,3.359,431,2.318,432,3.427,433,3.167,434,4.299,435,2.043,436,2.842,437,2.672,438,1.575,439,3.359,440,3.585,441,3.032,442,2.848,443,1.575,444,2.842,445,2.848,446,2.672,447,2.848,448,2.848,449,2.842,450,3.596,451,3.204,452,2.848,453,2.848,454,1.689,455,2.848,456,2.484,457,2.848,458,2.848,459,2.848,460,2.043,461,2.172,462,2.172,463,1.575,464,2.848,465,3.204,466,4.19,467,3.596,468,2.848,469,2.848,470,3.379,471,3.204,472,2.178,473,2.484,474,2.484,475,2.318,476,2.318,477,2.318,478,2.75,479,3.494,480,2.75,481,1.575,482,1.388,483,1.575,484,1.821,485,2.848,486,2.178,487,1.689,488,2.848,489,2.172,490,1.575,491,1.979,492,2.848,493,2.444]],["title/entities/DbRepo.html",[68,0.875,408,1.178]],["body/entities/DbRepo.html",[7,0.02,19,0.119,20,0.22,21,0.085,28,1.015,31,0.918,32,0.831,33,0.918,37,0.376,53,0.579,68,0.699,70,1.773,71,1.079,72,1.982,73,1.562,74,1.873,76,1.873,78,1.873,80,1.873,114,2.498,115,0.749,152,0.119,153,0.043,158,0.008,159,0.008,165,0.194,172,1.725,181,1.542,184,1.174,192,1.286,208,0.475,230,1.459,231,1.539,234,1.435,238,1.154,242,3.481,257,1.967,290,1.007,292,0.811,294,1.392,298,2.212,335,2.157,381,2.178,393,2.893,408,0.941,410,2.07,412,3.627,413,3.484,414,2.057,415,3.497,416,3.31,418,4.538,419,4.538,420,4.538,421,3.887,423,4.27,428,4.538,430,3.076,431,2.07,432,3.194,433,2.635,434,2.755,435,1.443,436,1.535,437,1.443,438,1.007,439,3.076,440,3.282,441,2.812,443,1.007,444,2.635,446,2.101,449,2.234,454,1.079,456,1.755,460,2.101,461,2.234,462,2.234,463,1.007,465,2.264,470,3.536,471,2.264,472,1.392,473,1.755,474,1.755,475,1.637,476,1.637,477,1.637,478,3.193,479,3.536,480,2.384,481,1.007,482,0.887,483,1.007,484,2.392,486,1.392,487,1.079,489,0.943,490,1.007,494,1.562,495,3.741,496,3.741,497,3.296,498,4.743,499,3.741,500,3.032,501,3.741,502,3.627,503,3.627,504,3.627,505,3.627,506,3.249,507,3.627,508,2.312,509,3.627,510,4.07,511,2.96,512,1.82,513,1.82,514,1.82,515,2.96,516,2.264,517,2.96,518,2.057,519,2.635,520,1.82,521,1.82,522,2.264,523,2.96,524,2.96,525,1.82,526,1.82,527,1.82,528,1.755,529,1.892,530,2.264,531,2.96,532,2.057,533,2.96,534,1.392,535,1.82,536,1.82,537,1.82,538,2.96,539,1.82,540,4.31,541,1.82,542,1.82,543,2.96,544,1.82,545,2.96,546,1.82,547,1.82,548,1.82,549,2.264,550,1.82,551,1.82,552,2.96,553,1.82,554,2.96,555,1.82,556,2.96,557,1.82,558,2.96,559,1.82,560,1.82,561,1.82,562,1.82,563,1.82,564,1.82,565,2.96,566,1.82,567,1.82,568,1.82,569,1.82,570,1.535,571,1.82,572,1.82,573,1.82,574,1.82,575,4.362,576,1.82,577,1.82,578,1.82,579,1.82,580,0.887,581,1.562,582,1.562,583,1.82,584,1.82,585,1.82,586,1.82,587,1.82,588,1.82,589,1.755,590,1.82,591,1.82,592,1.265,593,1.82,594,1.82]],["title/entities/DbRepoToUserStargazers.html",[80,1.61,408,1.178]],["body/entities/DbRepoToUserStargazers.html",[7,0.02,19,0.215,20,0.194,21,0.154,28,0.985,31,0.836,32,0.8,33,0.994,37,0.403,53,1.051,68,1.386,70,2.415,71,1.959,80,2.026,114,1.919,115,1.359,152,0.215,153,0.078,158,0.012,159,0.012,165,0.351,172,1.674,181,1.901,184,1.111,192,2.026,208,0.862,230,2.108,231,2.223,234,1.998,238,1.819,242,3.443,257,1.783,282,1.39,292,1.278,298,1.963,335,1.483,393,3.133,408,1.483,410,2.99,411,3.019,413,2.99,415,3.389,430,3.332,431,2.58,432,3.389,433,3.044,435,2.274,436,2.418,437,2.274,438,1.828,439,3.332,440,3.555,441,3.248,443,1.828,444,2.418,446,3.133,449,2.418,454,2.765,456,3.481,460,2.274,461,2.418,462,2.418,463,1.828,470,2.99,473,3.205,474,3.205,475,2.58,476,2.58,477,2.58,478,3.248,479,3.248,480,2.99,481,1.828,482,1.611,483,1.828,487,1.959,489,1.713,490,1.828,508,3.019,595,2.836,596,4.915,597,3.305,598,3.305,599,2.297,600,3.305,601,3.305,602,3.305,603,2.297,604,3.305,605,3.305,606,3.305,607,3.305,608,2.297,609,3.305,610,3.241,611,2.297,612,3.305,613,2.297,614,1.959,615,3.305,616,2.836]],["title/entities/DbRepoToUserStars.html",[76,1.61,408,1.178]],["body/entities/DbRepoToUserStars.html",[7,0.02,19,0.215,20,0.194,21,0.154,28,0.985,31,0.836,32,0.8,33,0.994,37,0.403,53,1.051,68,1.386,70,2.415,71,1.959,76,2.026,114,1.919,115,1.359,152,0.215,153,0.078,158,0.012,159,0.012,165,0.351,172,1.674,181,1.901,184,1.111,192,2.026,208,0.862,230,2.108,231,2.223,234,1.998,238,1.819,242,3.443,257,1.783,282,1.39,292,1.278,298,1.963,335,1.483,393,3.133,408,1.483,410,2.99,411,3.019,413,2.99,415,3.389,430,3.332,431,2.58,432,3.389,433,3.044,435,2.274,436,2.418,437,2.274,438,1.828,439,3.332,440,3.555,441,3.248,443,1.828,444,2.418,446,3.133,449,2.418,454,2.765,456,3.481,460,2.274,461,2.418,462,2.418,463,1.828,470,2.99,473,3.205,474,3.205,475,2.58,476,2.58,477,2.58,478,3.248,479,3.248,480,2.99,481,1.828,482,1.611,483,1.828,487,1.959,489,1.713,490,1.828,508,3.019,599,2.297,603,2.297,608,2.297,610,3.241,611,2.297,613,2.297,614,1.959,617,2.836,618,4.466,619,3.305,620,3.305,621,3.305,622,3.305,623,3.305,624,3.305,625,3.305,626,3.305,627,3.305,628,3.305,629,3.305,630,3.305,631,2.836]],["title/entities/DbRepoToUserSubmissions.html",[78,1.61,408,1.178]],["body/entities/DbRepoToUserSubmissions.html",[7,0.02,19,0.204,20,0.184,21,0.146,28,0.989,31,0.812,32,0.8,33,1.029,37,0.395,53,0.996,68,1.353,70,2.358,71,1.857,78,1.951,114,2.496,115,1.288,152,0.204,153,0.074,158,0.011,159,0.011,165,0.333,172,1.681,181,1.872,184,1.092,192,1.951,208,0.817,230,2.046,231,2.159,234,1.967,238,1.751,242,3.448,257,1.818,282,1.362,292,1.23,298,2.028,335,1.427,393,3.078,408,1.427,410,2.903,411,2.958,413,3.17,415,3.426,430,3.273,431,2.483,432,3.351,433,3.273,435,2.189,436,2.327,437,2.189,438,1.732,439,3.273,440,3.493,441,3.17,443,1.732,444,2.327,446,3.078,449,2.327,454,2.662,456,3.398,460,2.189,461,2.327,462,2.327,463,1.732,470,3.17,473,3.111,474,3.111,475,2.483,476,2.483,477,2.483,478,3.17,479,3.356,480,2.903,481,1.732,482,1.527,483,1.732,487,1.857,489,1.624,490,1.732,508,2.958,519,2.327,528,2.662,529,2.87,534,2.395,589,2.662,599,2.177,603,2.177,608,2.177,610,3.12,611,2.177,613,2.177,614,1.857,632,2.688,633,4.503,634,5.087,635,3.132,636,3.132,637,3.132,638,4.489,639,4.489,640,3.132,641,3.132,642,3.132,643,3.132,644,3.132,645,3.132,646,3.132,647,3.132,648,3.132,649,3.132,650,2.688]],["title/entities/DbRepoToUserVotes.html",[74,1.61,408,1.178]],["body/entities/DbRepoToUserVotes.html",[7,0.02,19,0.215,20,0.194,21,0.154,28,0.985,31,0.836,32,0.8,33,0.994,37,0.403,53,1.051,68,1.386,70,2.415,71,1.959,74,2.026,114,1.919,115,1.359,152,0.215,153,0.078,158,0.012,159,0.012,165,0.351,172,1.674,181,1.901,184,1.111,192,2.026,208,0.862,230,2.108,231,2.223,234,1.998,238,1.819,242,3.443,257,1.783,282,1.39,292,1.278,298,1.963,335,1.483,393,3.133,408,1.483,410,2.99,411,3.019,413,2.99,415,3.389,430,3.332,431,2.58,432,3.389,433,3.044,435,2.274,436,2.418,437,2.274,438,1.828,439,3.332,440,3.555,441,3.248,443,1.828,444,2.418,446,3.133,449,2.418,454,2.765,456,3.481,460,2.274,461,2.418,462,2.418,463,1.828,470,2.99,473,3.205,474,3.205,475,2.58,476,2.58,477,2.58,478,3.248,479,3.248,480,2.99,481,1.828,482,1.611,483,1.828,487,1.959,489,1.713,490,1.828,508,3.019,599,2.297,603,2.297,608,2.297,610,3.241,611,2.297,613,2.297,614,1.959,651,2.836,652,4.466,653,3.305,654,3.305,655,3.305,656,3.305,657,3.305,658,3.305,659,3.305,660,3.305,661,3.305,662,3.305,663,3.305,664,3.305,665,2.836]],["title/entities/DbUser.html",[70,1.525,408,1.178]],["body/entities/DbUser.html",[7,0.02,19,0.153,20,0.138,21,0.109,28,1.015,31,0.683,32,0.814,33,0.878,37,0.398,53,0.745,68,1.172,69,0.964,70,1.488,74,2.158,75,1.498,76,2.158,77,1.498,78,2.158,79,1.498,80,2.158,81,1.498,114,2.879,115,0.964,152,0.153,153,0.056,155,1.041,158,0.009,159,0.009,165,0.249,172,1.725,181,1.95,184,1.056,187,2.513,192,1.571,197,2.513,208,0.611,226,3.73,230,1.722,231,1.817,234,1.336,238,2.093,242,3.486,243,1.628,245,2.824,246,3.07,257,1.842,282,0.812,290,1.296,292,0.991,298,2.21,381,1.272,393,2.765,408,1.15,410,2.443,413,3.378,414,2.513,415,3.452,416,2.945,417,2.011,418,2.766,419,2.766,420,2.766,421,2.766,423,2.766,428,2.766,430,2.941,431,2.001,432,3.12,433,2.575,435,1.763,436,1.875,437,1.763,438,1.296,439,2.941,440,3.138,441,2.747,443,1.296,444,2.575,446,1.763,449,1.875,460,1.763,461,1.875,462,1.875,463,1.296,470,3.466,471,2.766,472,1.792,475,2.001,476,2.001,477,2.001,478,3.378,479,3.466,480,2.443,481,1.296,482,1.142,483,1.296,486,1.792,489,1.215,490,1.296,491,1.628,497,2.513,502,4.105,503,4.105,504,4.105,505,4.105,510,4.606,519,1.875,528,3.794,529,3.903,530,4.67,532,3.942,534,3.798,575,4.868,580,2.153,614,1.389,666,2.011,667,4.417,668,4.417,669,4.417,670,4.105,671,4.417,672,2.343,673,2.343,674,2.343,675,2.343,676,2.343,677,2.343,678,4.262,679,2.343,680,3.617,681,2.343,682,2.766,683,3.617,684,3.617,685,3.617,686,3.104,687,2.343,688,2.343,689,2.343,690,3.617,691,2.343,692,2.343,693,3.617,694,2.343,695,3.617,696,2.343,697,3.617,698,2.343,699,3.617,700,2.343,701,3.617,702,2.343,703,2.766,704,2.343,705,2.343,706,2.343,707,2.343]],["title/controllers/HealthController.html",[160,1.121,708,2.576]],["body/controllers/HealthController.html",[7,0.02,19,0.259,20,0.234,21,0.185,24,1.523,28,0.773,35,1.523,37,0.413,39,0.687,43,5.107,44,3.409,48,3.038,111,2.76,144,3.038,148,4.047,149,4.593,150,1.201,152,0.259,153,0.094,154,1.143,155,1.957,158,0.013,159,0.013,160,1.201,163,2.059,165,0.422,166,2.502,172,1.313,175,3.29,205,2.901,206,3.085,207,2.059,208,1.036,220,3.19,223,2.743,253,1.38,293,1.47,399,3.677,519,3.29,589,3.762,708,3.677,709,3.409,710,5.833,711,6.797,712,3.972,713,5.291,714,5.291,715,3.972,716,3.972,717,5.291,718,3.972,719,5.291,720,5.291,721,5.291,722,5.95,723,5.291,724,5.291,725,3.972,726,3.972,727,3.972,728,3.972,729,3.972,730,4.541,731,5.291,732,3.972,733,3.972,734,3.972,735,3.972,736,3.972,737,3.972,738,5.291,739,3.972,740,3.972,741,3.972,742,3.972,743,3.972,744,3.972,745,3.972,746,3.972,747,3.972,748,3.972,749,3.972,750,3.972,751,3.972,752,3.972,753,3.972,754,3.972]],["title/modules/HealthModule.html",[0,1.016,9,2.369]],["body/modules/HealthModule.html",[0,1.794,2,2.176,7,0.019,9,4.187,19,0.363,20,0.328,21,0.26,23,2.566,37,0.453,39,0.965,47,5.62,48,4.268,150,1.981,152,0.363,153,0.132,158,0.017,159,0.017,708,4.831,755,5.581,756,5.581]],["title/injectables/HttpLoggerMiddleware.html",[89,2.576,330,0.967]],["body/injectables/HttpLoggerMiddleware.html",[7,0.02,19,0.29,20,0.262,21,0.208,24,1.641,28,0.833,30,1.22,31,0.689,32,0.507,33,0.689,35,1.282,36,3.094,37,0.432,39,0.77,57,3.405,58,3.405,59,3.405,89,4.371,117,4.609,118,2.11,146,4.893,152,0.371,153,0.106,155,1.811,158,0.014,159,0.014,165,0.473,225,2.332,253,1.64,292,1.562,298,1.906,299,2.047,330,1.487,331,1.934,366,3.405,367,3.821,380,4.893,518,4.609,757,5.397,758,4.371,759,4.452,760,4.955,761,6.196,762,6.631,763,4.452,764,5.701,765,4.452,766,5.701,767,3.405,768,3.405,769,4.452,770,4.452,771,3.821,772,4.452,773,4.452,774,5.701,775,6.631,776,5.701,777,3.821,778,4.452,779,4.452,780,4.452,781,4.452,782,4.452,783,4.452]],["title/classes/PageDto.html",[153,0.088,343,1.61]],["body/classes/PageDto.html",[7,0.02,19,0.304,20,0.274,21,0.217,28,0.938,30,1.277,31,0.721,32,0.82,33,0.721,37,0.439,99,4.08,152,0.304,153,0.152,154,1.69,158,0.015,159,0.015,165,0.496,172,1.457,208,1.216,286,2.417,288,1.482,292,1.608,293,2.627,322,3.24,343,2.551,347,4.32,348,3.565,784,4.001,785,6.09,786,4.605,787,4.662,788,5.316,789,5.87,790,4.662,791,4.662,792,4.662,793,4.662,794,4.662,795,4.662,796,4.914,797,6.425,798,6.425,799,4.001,800,4.662,801,4.001,802,4.662,803,4.662]],["title/classes/PageMetaDto.html",[153,0.088,347,2.198]],["body/classes/PageMetaDto.html",[7,0.02,19,0.248,20,0.224,21,0.177,28,1.002,30,1.042,31,0.588,32,0.781,33,0.588,37,0.335,99,3.571,114,2.114,152,0.248,153,0.09,154,1.479,158,0.013,159,0.013,165,0.404,172,1.665,184,1.272,208,0.991,238,2.54,257,1.932,286,1.971,288,2.311,291,1.337,292,1.408,293,2.766,295,3.721,308,3.696,347,3.047,361,4.526,415,3.543,518,3.571,528,3.696,529,3.985,530,4.768,786,2.43,796,5.247,804,4.85,805,3.263,806,5.82,807,5.82,808,5.82,809,3.802,810,4.333,811,5.138,812,5.759,813,5.138,814,3.802,815,5.35,816,5.35,817,5.138,818,3.802,819,5.138,820,3.802,821,4.41,822,3.802,823,4.41,824,3.802,825,3.802,826,4.995,827,3.802,828,4.41,829,3.802,830,3.802,831,3.802,832,3.802,833,3.802,834,3.802]],["title/interfaces/PageMetaParameters.html",[810,2.576,835,2.576]],["body/interfaces/PageMetaParameters.html",[7,0.019,19,0.358,20,0.323,21,0.256,32,0.739,37,0.358,152,0.358,158,0.016,159,0.016,165,0.585,184,1.195,288,1.748,291,2.641,292,1.779,324,2.389,361,4.96,786,3.514,804,3.821,810,4.511,835,3.821,836,5.497,837,4.718]],["title/classes/PageOptionsDto.html",[153,0.088,291,1.303]],["body/classes/PageOptionsDto.html",[7,0.02,19,0.273,20,0.247,21,0.195,28,0.947,32,0.785,33,1.068,37,0.422,152,0.273,153,0.145,158,0.014,159,0.014,165,0.446,172,1.516,184,1.216,208,1.093,238,1.635,253,1.093,286,2.173,288,1.943,289,2.68,291,1.928,292,1.502,293,2.669,295,3.906,296,4.673,298,2.41,299,2.809,301,3.206,302,4.193,306,5.144,307,4.193,308,4.275,309,4.193,310,3.206,313,4.168,314,3.906,315,3.206,317,3.206,319,4.504,320,3.206,321,4.957,322,2.913,325,2.913,346,3.206,799,3.597,804,4.675,826,3.597,828,3.597,838,5.483,839,5.244,840,4.192,841,4.192,842,4.192,843,4.192,844,4.192,845,6.11,846,4.192,847,4.192,848,4.192,849,5.483,850,5.483,851,4.192,852,4.192]],["title/controllers/RepoContributionsController.html",[160,1.121,278,2.576]],["body/controllers/RepoContributionsController.html",[7,0.02,19,0.245,20,0.222,21,0.176,24,1.47,28,0.746,30,1.4,31,0.79,32,0.707,33,0.79,35,1.47,37,0.454,39,0.652,72,2.664,150,1.14,152,0.245,153,0.089,154,1.085,155,1.47,158,0.013,159,0.013,160,1.14,163,1.954,165,0.401,166,2.238,172,1.268,175,3.22,182,2.299,184,1.002,204,3.205,205,2.825,206,3.004,207,1.954,208,0.983,220,2.348,223,2.648,225,1.796,234,1.879,248,1.992,253,1.332,257,1.47,275,3.435,276,1.937,278,3.55,279,2.882,280,1.733,281,3.234,282,1.649,285,4.376,288,1.198,291,2.354,293,1.891,324,1.637,343,1.637,344,1.954,349,3.234,381,2.354,387,3.004,434,2.409,484,3.971,570,3.22,580,1.837,853,4.973,854,3.234,855,6.492,856,6.492,857,3.769,858,3.769,859,3.028,860,5.331,861,6.212,862,5.108,863,5.108,864,3.683,865,3.769,866,3.769,867,3.769,868,5.108,869,3.769,870,2.234,871,1.954,872,2.234,873,1.837,874,2.234,875,2.234,876,2.234,877,3.769,878,5.108,879,2.234,880,2.825,881,2.234,882,5.108,883,5.108,884,3.769,885,2.234,886,2.234,887,2.234]],["title/controllers/RepoController.html",[160,1.121,888,2.576]],["body/controllers/RepoController.html",[7,0.02,19,0.247,20,0.223,21,0.177,24,1.476,28,0.849,30,1.592,31,0.899,32,0.763,33,0.899,35,1.673,37,0.447,39,0.656,68,1.536,150,1.147,152,0.247,153,0.09,154,1.091,155,1.091,158,0.013,159,0.013,160,1.147,163,1.965,165,0.403,166,2.363,172,1.442,175,3.476,182,2.482,184,1.005,204,3.215,205,3.036,206,3.228,207,1.965,208,0.989,220,1.743,223,3.013,234,1.758,253,1.516,257,1.476,276,1.943,282,1.587,288,1.205,291,1.803,293,1.403,324,1.647,333,4.975,335,1.98,338,2.899,343,1.647,344,1.965,381,2.358,387,2.659,570,3.228,580,2.833,859,3.976,864,3.692,870,2.247,871,1.965,872,2.247,873,1.848,874,2.247,875,2.247,876,2.247,879,2.247,881,2.247,885,2.247,886,2.247,887,2.247,888,3.564,889,3.253,890,4.975,891,5.583,892,3.036,893,3.791,894,3.278,895,2.423,896,3.791,897,2.899,898,3.791,899,3.791,900,5.128,901,3.791,902,3.253,903,3.791,904,3.791,905,3.791,906,3.253,907,2.899,908,3.253,909,3.791,910,3.791,911,3.791,912,2.423,913,2.423]],["title/modules/RepoModule.html",[0,1.016,10,2.369]],["body/modules/RepoModule.html",[0,1.706,2,1.999,3,2.705,7,0.019,10,4.699,16,2.862,17,2.227,18,1.999,19,0.334,20,0.301,21,0.239,23,2.356,37,0.465,39,0.886,40,2.657,41,1.802,68,1.21,150,1.883,151,3.035,152,0.334,153,0.121,158,0.016,159,0.016,267,3.227,276,2.533,888,4.659,906,4.399,907,3.92,914,4.399,915,4.399,916,5.125,917,5.125,918,5.125,919,5.125]],["title/classes/RepoPageOptionsDto.html",[153,0.088,892,1.807]],["body/classes/RepoPageOptionsDto.html",[7,0.02,19,0.27,20,0.244,21,0.193,28,0.943,31,0.843,32,0.735,33,1.101,37,0.396,152,0.355,153,0.129,158,0.014,159,0.014,165,0.441,172,1.602,184,0.942,208,1.082,230,2.125,231,2.241,286,2.152,288,2.053,289,2.654,290,3.014,291,2.42,292,1.493,293,2.664,294,4.651,295,3.483,296,4.166,298,2.406,299,2.969,301,4.166,302,4.651,303,4.874,306,4.166,307,4.166,308,3.606,309,3.175,310,3.175,311,5.219,312,3.562,313,3.606,314,2.654,315,3.175,316,3.562,317,3.175,318,3.562,319,3.786,320,3.175,321,4.166,322,2.885,323,2.885,324,1.804,325,3.786,497,3.786,506,3.483,507,4.166,509,4.166,892,2.656,920,4.166,921,5.219,922,4.151,923,4.151,924,4.166,925,3.786,926,4.166,927,4.166,928,3.786,929,4.151]],["title/injectables/RepoService.html",[276,1.239,330,0.967]],["body/injectables/RepoService.html",[7,0.02,19,0.197,20,0.178,21,0.141,24,1.263,28,0.912,30,1.711,31,0.997,32,0.711,33,0.927,35,1.725,37,0.429,39,0.524,41,1.066,53,0.964,68,0.716,72,2.017,74,1.317,76,1.317,78,1.317,80,1.317,115,1.247,118,2.09,129,3.941,152,0.197,153,0.072,154,1.263,155,0.873,158,0.011,159,0.011,165,0.322,166,2.246,181,0.873,182,2.311,184,1.08,194,2.569,225,2.456,234,1.812,248,2.202,253,1.562,276,1.466,282,1.345,288,0.964,291,1.812,298,1.014,299,1.394,303,2.107,313,1.798,314,1.938,323,2.107,324,1.317,330,1.144,331,1.317,333,3.941,335,1.795,338,2.319,341,3.354,342,1.677,343,1.317,344,1.572,345,2.602,346,2.319,347,3.348,348,2.319,351,3.562,353,2.602,354,2.602,356,2.602,357,2.602,359,2.602,360,2.602,361,3.048,362,2.602,363,2.602,364,2.602,381,2.545,408,1.638,484,2.804,493,2.602,506,2.804,570,2.274,616,2.602,631,2.602,650,2.602,665,2.602,788,2.319,880,3.455,890,3.941,891,4.422,892,2.753,897,2.319,902,2.602,907,2.319,908,2.602,921,2.602,924,2.319,925,2.107,926,2.319,927,2.319,928,2.107,930,2.602,931,3.348,932,5.153,933,3.032,934,3.032,935,4.386,936,3.032,937,5.153,938,3.032,939,3.032,940,3.032,941,3.032,942,4.846,943,5.153,944,3.032,945,5.153,946,3.055,947,3.032,948,4.386,949,3.032,950,4.386,951,3.032,952,3.032,953,3.032,954,3.032,955,3.032,956,2.601,957,3.032,958,3.032,959,3.032,960,3.032,961,3.032,962,3.032,963,3.032,964,5.991,965,5.991,966,2.602,967,2.319,968,2.602,969,3.032,970,3.032,971,3.032,972,3.032,973,3.032,974,3.055,975,3.032,976,2.601,977,2.601,978,3.032,979,3.032,980,3.032,981,3.032,982,3.032,983,3.032,984,3.032,985,3.032,986,3.032]],["title/controllers/RepoStarController.html",[160,1.121,987,2.576]],["body/controllers/RepoStarController.html",[7,0.02,19,0.164,20,0.148,21,0.118,24,1.102,28,0.811,30,1.521,31,0.859,32,0.782,33,0.859,35,1.959,37,0.432,39,0.437,68,1.092,69,1.038,76,2.411,77,1.614,150,0.764,152,0.164,153,0.06,154,0.727,155,1.102,158,0.01,159,0.01,160,0.764,163,1.309,165,0.268,166,2.318,172,1.377,175,3.384,176,2.118,181,1.102,182,2.416,184,1.244,194,3.012,202,1.614,203,3.734,204,3.07,205,2.848,206,3.028,207,1.309,208,0.658,209,1.161,220,1.76,222,3.548,223,2.877,225,1.815,234,1.891,248,2.013,253,1.447,257,1.936,276,1.546,280,1.161,282,1.689,288,0.803,291,1.346,293,1.417,324,1.097,343,1.097,344,1.309,381,2.365,387,1.985,506,1.614,570,3.241,580,2.255,618,5.073,859,3.87,864,3.061,870,1.497,871,1.309,872,1.497,873,1.231,874,1.497,875,1.497,876,1.497,879,2.27,880,2.856,881,2.27,885,2.27,886,2.27,887,2.27,892,2.517,894,2.448,895,1.614,912,1.614,913,1.614,987,2.661,988,5.013,989,2.166,990,5.55,991,5.55,992,5.55,993,5.55,994,5.55,995,2.524,996,2.524,997,3.948,998,3.948,999,5.163,1000,5.163,1001,3.588,1002,3.241,1003,3.061,1004,2.524,1005,2.524,1006,2.524,1007,2.524,1008,2.524,1009,2.524,1010,4.467,1011,2.524,1012,2.524,1013,2.524,1014,3.948,1015,2.524,1016,2.524,1017,2.524,1018,2.524,1019,1.614,1020,1.754,1021,3.857,1022,2.743,1023,2.166,1024,1.754,1025,1.754,1026,1.754,1027,1.754,1028,2.524,1029,2.524,1030,3.829,1031,2.524,1032,2.524,1033,3.829,1034,2.524]],["title/controllers/RepoStargazeController.html",[160,1.121,1035,2.576]],["body/controllers/RepoStargazeController.html",[7,0.02,19,0.166,20,0.15,21,0.119,24,1.112,28,0.815,30,1.529,31,0.863,32,0.784,33,0.863,35,1.964,37,0.433,39,0.442,68,1.1,69,1.051,80,2.424,81,1.633,150,0.773,152,0.166,153,0.061,154,0.735,155,1.112,158,0.01,159,0.01,160,0.773,163,1.324,165,0.272,166,2.323,172,1.384,175,3.394,176,2.137,181,1.112,182,2.424,184,1.246,194,3.016,202,1.633,203,3.751,204,3.086,205,2.861,206,3.042,207,1.324,208,0.666,209,1.174,220,1.776,222,3.566,223,2.892,225,1.826,234,1.898,248,2.026,253,1.455,257,1.941,276,1.557,280,1.174,282,1.698,288,0.812,291,1.358,293,1.43,324,1.11,343,1.11,344,1.324,381,2.371,387,2.003,570,3.253,580,2.272,596,3.563,859,3.882,864,3.08,870,1.514,871,1.324,872,1.514,873,1.245,874,1.514,875,1.514,876,1.514,879,2.291,880,2.873,881,2.291,885,2.291,886,2.291,887,2.291,892,2.532,894,2.47,895,1.633,912,1.633,913,1.633,968,2.192,1001,3.61,1002,3.253,1019,1.633,1020,1.775,1021,3.877,1024,1.775,1025,1.775,1026,1.775,1027,1.775,1035,2.685,1036,5.036,1037,2.192,1038,5.579,1039,5.579,1040,5.579,1041,5.579,1042,5.579,1043,2.554,1044,2.554,1045,3.863,1046,6.89,1047,5.194,1048,4.458,1049,2.554,1050,2.554,1051,2.554,1052,2.554,1053,2.554,1054,2.554,1055,5.036,1056,2.554,1057,2.554,1058,2.554,1059,3.863,1060,2.554,1061,2.554,1062,2.554,1063,2.554,1064,2.762,1065,2.192,1066,2.554,1067,2.554,1068,3.863,1069,3.863,1070,2.554,1071,2.554,1072,3.863,1073,3.863,1074,2.554]],["title/controllers/RepoSubmitController.html",[160,1.121,1075,2.576]],["body/controllers/RepoSubmitController.html",[7,0.02,19,0.164,20,0.148,21,0.118,24,1.102,28,0.811,30,1.521,31,0.859,32,0.782,33,0.859,35,1.959,37,0.432,39,0.437,68,1.092,69,1.038,78,2.411,79,1.614,150,0.764,152,0.164,153,0.06,154,0.727,155,1.102,158,0.01,159,0.01,160,0.764,163,1.309,165,0.268,166,2.318,172,1.377,175,3.384,176,2.118,181,1.102,182,2.416,184,1.244,194,3.012,202,1.614,203,3.734,204,3.07,205,2.848,206,3.028,207,1.309,208,0.658,209,1.161,220,1.76,222,3.548,223,2.877,225,1.815,234,1.891,248,2.013,253,1.447,257,1.936,276,1.546,280,1.161,282,1.689,288,0.803,291,1.346,293,1.417,324,1.097,343,1.097,344,1.309,381,2.365,387,1.985,570,3.241,580,2.255,634,5.564,859,3.87,864,3.061,870,1.497,871,1.309,872,1.497,873,1.231,874,1.497,875,1.497,876,1.497,879,2.27,880,2.856,881,2.27,885,2.27,886,2.27,887,2.27,892,2.517,894,2.448,895,1.614,912,1.614,913,1.614,967,1.93,997,3.948,998,3.948,1001,3.588,1002,3.241,1003,3.061,1014,3.948,1019,1.614,1020,1.754,1021,3.857,1024,1.754,1025,1.754,1026,1.754,1027,1.754,1075,2.661,1076,5.013,1077,2.166,1078,5.55,1079,5.55,1080,5.55,1081,5.55,1082,5.55,1083,2.524,1084,2.524,1085,5.163,1086,5.163,1087,2.524,1088,2.524,1089,2.524,1090,2.524,1091,2.524,1092,2.524,1093,5.013,1094,2.524,1095,2.524,1096,2.524,1097,2.524,1098,2.524,1099,2.524,1100,2.524,1101,2.743,1102,2.166,1103,1.93,1104,2.524,1105,2.524,1106,3.829,1107,2.524,1108,2.524,1109,3.829,1110,2.524]],["title/controllers/RepoVoteController.html",[160,1.121,1111,2.576]],["body/controllers/RepoVoteController.html",[7,0.02,19,0.164,20,0.148,21,0.118,24,1.102,28,0.811,30,1.521,31,0.859,32,0.782,33,0.859,35,1.959,37,0.432,39,0.437,68,1.092,69,1.038,74,2.411,75,1.614,150,0.764,152,0.164,153,0.06,154,0.727,155,1.102,158,0.01,159,0.01,160,0.764,163,1.309,165,0.268,166,2.318,172,1.377,175,3.384,176,2.118,181,1.102,182,2.416,184,1.244,194,3.012,202,1.614,203,3.734,204,3.07,205,2.848,206,3.028,207,1.309,208,0.658,209,1.161,220,1.76,222,3.548,223,2.877,225,1.815,234,1.891,248,2.013,253,1.447,257,1.936,276,1.546,280,1.161,282,1.689,288,0.803,291,1.346,293,1.417,324,1.097,343,1.097,344,1.309,381,2.365,387,1.985,570,3.241,580,2.255,652,5.073,859,3.87,864,3.061,870,1.497,871,1.309,872,1.497,873,1.231,874,1.497,875,1.497,876,1.497,879,2.27,880,2.856,881,2.27,885,2.27,886,2.27,887,2.27,892,2.517,894,2.448,895,1.614,912,1.614,913,1.614,966,2.166,997,3.948,998,3.948,1001,3.588,1002,3.241,1003,3.061,1014,3.948,1019,1.614,1020,1.754,1021,3.857,1024,1.754,1025,1.754,1026,1.754,1027,1.754,1111,2.661,1112,5.013,1113,2.166,1114,5.55,1115,5.55,1116,5.55,1117,5.55,1118,5.55,1119,2.524,1120,2.524,1121,5.163,1122,5.163,1123,2.524,1124,2.524,1125,2.524,1126,2.524,1127,2.524,1128,2.524,1129,4.467,1130,2.524,1131,2.524,1132,2.524,1133,2.524,1134,2.524,1135,2.524,1136,2.524,1137,2.743,1138,2.166,1139,2.524,1140,2.524,1141,3.829,1142,2.524,1143,2.524,1144,3.829,1145,2.524]],["title/modules/StarModule.html",[0,1.016,11,2.369]],["body/modules/StarModule.html",[0,1.661,2,1.915,3,2.635,7,0.02,11,4.742,16,2.788,17,2.134,18,1.915,19,0.32,20,0.289,21,0.229,23,2.258,37,0.474,39,0.849,40,2.546,41,1.727,68,1.431,69,2.02,76,2.635,77,3.139,150,1.834,151,2.956,152,0.32,153,0.116,158,0.015,159,0.015,267,3.143,276,2.403,280,2.258,282,1.102,284,2.911,987,4.572,1022,4.47,1023,4.214,1146,4.214,1147,4.214,1148,4.214,1149,4.911,1150,4.911]],["title/injectables/StarService.html",[330,0.967,1022,2.198]],["body/injectables/StarService.html",[7,0.02,19,0.257,20,0.232,21,0.184,24,1.516,28,0.924,30,1.624,31,0.917,32,0.675,33,0.917,35,1.706,37,0.412,39,0.682,41,1.386,53,1.253,76,1.713,77,2.52,118,2.194,152,0.257,153,0.093,154,1.516,155,1.135,158,0.013,159,0.013,165,0.419,166,2.267,182,2.342,184,1.264,194,2.985,225,2.318,248,2.467,253,1.65,282,1.182,330,1.373,331,1.713,335,2.011,339,4.554,342,2.18,351,3.499,411,1.922,508,1.922,618,2.739,931,3.751,946,2.337,956,3.121,974,3.121,976,3.121,977,3.514,1002,2.729,1003,2.337,1010,4.026,1022,3.121,1151,3.382,1152,5.928,1153,5.928,1154,3.941,1155,3.941,1156,5.264,1157,3.941,1158,3.941,1159,3.941,1160,3.941,1161,3.941,1162,2.739,1163,3.941,1164,3.941,1165,2.739,1166,5.264,1167,5.264,1168,6.782,1169,5.264,1170,3.659,1171,3.941,1172,3.941,1173,2.739,1174,3.941]],["title/modules/StargazeModule.html",[0,1.016,12,2.369]],["body/modules/StargazeModule.html",[0,1.661,2,1.915,3,2.635,7,0.02,12,4.742,16,2.788,17,2.134,18,1.915,19,0.32,20,0.289,21,0.229,23,2.258,37,0.474,39,0.849,40,2.546,41,1.727,68,1.431,69,2.02,80,2.635,81,3.139,150,1.834,151,2.956,152,0.32,153,0.116,158,0.015,159,0.015,267,3.143,276,2.403,280,2.258,282,1.102,284,2.911,1035,4.572,1064,4.47,1065,4.214,1175,4.214,1176,4.214,1177,4.214,1178,4.911,1179,4.911]],["title/injectables/StargazeService.html",[330,0.967,1064,2.198]],["body/injectables/StargazeService.html",[7,0.02,19,0.257,20,0.232,21,0.184,24,1.516,28,0.924,30,1.624,31,0.917,32,0.675,33,0.917,35,1.706,37,0.412,39,0.682,41,1.386,53,1.253,80,1.713,81,2.52,118,2.194,152,0.257,153,0.093,154,1.516,155,1.135,158,0.013,159,0.013,165,0.419,166,2.267,182,2.342,184,1.264,194,2.985,225,2.318,248,2.467,253,1.65,282,1.331,330,1.373,331,1.713,335,2.011,339,4.554,342,2.18,351,3.499,411,1.922,508,1.922,931,3.751,946,2.337,956,3.121,974,3.121,976,3.121,977,3.514,1002,2.729,1048,4.518,1055,3.382,1064,3.121,1162,2.739,1165,2.739,1170,3.659,1173,2.739,1180,3.382,1181,5.928,1182,5.928,1183,3.941,1184,3.941,1185,5.264,1186,3.941,1187,3.941,1188,3.941,1189,3.941,1190,3.941,1191,3.941,1192,3.941,1193,5.264,1194,5.264,1195,6.782,1196,5.264,1197,3.941,1198,3.941,1199,3.941]],["title/modules/SubmitModule.html",[0,1.016,13,2.369]],["body/modules/SubmitModule.html",[0,1.661,2,1.915,3,2.635,7,0.02,13,4.742,16,2.788,17,2.134,18,1.915,19,0.32,20,0.289,21,0.229,23,2.258,37,0.474,39,0.849,40,2.546,41,1.727,68,1.431,69,2.02,78,2.635,79,3.139,150,1.834,151,2.956,152,0.32,153,0.116,158,0.015,159,0.015,267,3.143,276,2.403,280,2.258,282,1.102,284,2.911,1075,4.572,1101,4.47,1102,4.214,1200,4.214,1201,4.214,1202,4.214,1203,4.911,1204,4.911]],["title/injectables/SubmitService.html",[330,0.967,1101,2.198]],["body/injectables/SubmitService.html",[7,0.02,19,0.257,20,0.232,21,0.184,24,1.516,28,0.924,30,1.624,31,0.917,32,0.675,33,0.917,35,1.706,37,0.412,39,0.682,41,1.386,53,1.253,78,1.713,79,2.52,118,2.194,152,0.257,153,0.093,154,1.516,155,1.135,158,0.013,159,0.013,165,0.419,166,2.267,182,2.342,184,1.264,194,2.985,225,2.318,248,2.467,253,1.65,282,1.182,330,1.373,331,1.713,335,2.011,339,4.554,342,2.18,351,3.499,411,1.922,508,1.922,931,3.751,946,2.337,956,3.121,974,3.121,976,3.121,977,3.514,1002,2.729,1003,2.337,1101,3.121,1103,3.014,1162,2.739,1165,2.739,1170,3.659,1173,2.739,1205,3.382,1206,5.928,1207,5.928,1208,3.941,1209,3.941,1210,5.264,1211,3.941,1212,3.941,1213,3.941,1214,3.941,1215,3.941,1216,3.941,1217,3.941,1218,5.264,1219,5.264,1220,6.782,1221,5.264,1222,5.264,1223,3.941,1224,3.941,1225,3.941]],["title/classes/SupabaseAuthDto.html",[153,0.088,213,2.576]],["body/classes/SupabaseAuthDto.html",[7,0.019,19,0.193,20,0.174,21,0.138,28,1.004,31,0.667,32,0.783,33,1.131,37,0.193,114,2.296,152,0.193,153,0.07,158,0.011,159,0.011,164,4.444,165,0.315,172,1.706,176,3.846,181,2.105,184,0.745,192,1.872,208,0.772,211,4.252,213,2.995,226,4.442,227,5.092,228,4.361,229,4.361,230,1.982,231,2.09,234,1.537,235,3.886,236,3.698,237,4.361,238,2.646,239,3.698,245,3.249,246,3.532,257,1.979,286,1.534,292,1.181,293,2.791,319,4.778,381,2.522,414,2.995,415,3.59,416,2.555,432,3.194,433,3.396,435,2.101,436,3.396,437,3.194,446,2.101,449,2.894,489,3.396,491,2.995,528,3.31,529,3.569,614,2.555,670,3.295,678,3.698,682,4.269,703,3.295,796,3.295,812,2.539,1226,5.966,1227,2.539,1228,6.786,1229,4.309,1230,4.309,1231,2.959,1232,2.959,1233,4.309,1234,2.959,1235,2.959,1236,2.959,1237,5.582,1238,2.959,1239,2.959,1240,4.309,1241,2.959,1242,2.959,1243,2.959,1244,2.959]],["title/injectables/SupabaseGuard.html",[209,1.704,330,0.967]],["body/injectables/SupabaseGuard.html",[7,0.019,19,0.371,20,0.335,21,0.266,37,0.432,39,0.987,152,0.371,153,0.135,158,0.017,159,0.017,209,3.05,269,4.362,290,3.155,330,1.73,331,2.478,1245,4.895,1246,5.704,1247,5.704]],["title/injectables/SupabaseStrategy.html",[265,2.369,330,0.967]],["body/injectables/SupabaseStrategy.html",[7,0.02,19,0.309,20,0.279,21,0.221,24,1.709,28,0.946,30,1.627,31,0.919,32,0.676,33,0.919,35,1.709,36,3.3,37,0.442,39,0.821,50,3.3,152,0.309,153,0.113,154,1.865,158,0.015,159,0.015,164,3.035,165,0.505,166,2.166,171,5.826,181,1.709,211,3.52,242,2.73,253,1.238,265,3.796,269,3.631,290,2.626,330,1.548,331,2.063,399,3.3,1248,4.074,1249,6.479,1250,6.479,1251,4.748,1252,4.748,1253,6.479,1254,4.748,1255,5.938,1256,4.748,1257,4.748,1258,5.938,1259,4.748,1260,4.748,1261,4.748,1262,5.938,1263,4.748,1264,4.748,1265,4.748,1266,4.748,1267,4.748,1268,4.748,1269,4.748,1270,4.748,1271,4.748,1272,4.748,1273,4.748,1274,4.748]],["title/modules/UserModule.html",[0,1.016,14,2.198]],["body/modules/UserModule.html",[0,1.716,2,2.019,3,2.721,7,0.019,14,4.367,16,2.879,17,2.249,18,2.019,19,0.337,20,0.304,21,0.241,23,2.38,37,0.456,39,0.895,40,2.684,41,1.82,70,2.576,151,3.053,152,0.337,153,0.123,158,0.016,159,0.016,216,4.499,267,3.247,284,3.069,1275,4.443,1276,4.443,1277,4.443,1278,5.177,1279,4.443,1280,5.177]],["title/injectables/UserService.html",[216,2.198,330,0.967]],["body/injectables/UserService.html",[7,0.02,19,0.225,20,0.203,21,0.161,24,1.385,28,0.952,30,1.725,31,0.974,32,0.717,33,0.974,35,1.812,37,0.41,39,0.598,41,1.215,53,1.098,70,1.979,99,3.344,114,1.421,118,2.413,152,0.225,153,0.082,154,1.385,155,0.995,158,0.012,159,0.012,165,0.367,166,2.391,181,2.041,182,2.216,184,1.226,187,2.401,192,2.091,197,2.401,216,2.853,225,2.214,230,1.347,232,2.965,233,2.965,234,2.145,235,3.68,241,4.579,245,2.209,246,3.344,248,2.542,250,4.579,251,5.139,253,1.642,330,1.255,331,1.501,335,1.904,342,1.911,351,1.911,381,1.215,390,2.642,532,3.344,670,2.642,880,3.482,890,4.234,897,2.642,931,3.55,942,4.752,946,2.853,956,2.853,974,2.049,976,2.049,977,3.283,1279,2.965,1281,2.965,1282,5.537,1283,5.537,1284,5.537,1285,3.455,1286,3.455,1287,4.812,1288,3.455,1289,3.455,1290,3.455,1291,3.455,1292,3.455,1293,3.455,1294,3.455,1295,3.455,1296,3.455,1297,3.455,1298,3.455,1299,3.455,1300,3.455,1301,4.812,1302,3.455,1303,4.812,1304,5.537,1305,2.965,1306,4.812,1307,3.455,1308,3.455,1309,2.965,1310,3.455,1311,3.455,1312,4.812,1313,4.812]],["title/modules/VoteModule.html",[0,1.016,15,2.369]],["body/modules/VoteModule.html",[0,1.661,2,1.915,3,2.635,7,0.02,15,4.742,16,2.788,17,2.134,18,1.915,19,0.32,20,0.289,21,0.229,23,2.258,37,0.474,39,0.849,40,2.546,41,1.727,68,1.431,69,2.02,74,2.635,75,3.139,150,1.834,151,2.956,152,0.32,153,0.116,158,0.015,159,0.015,267,3.143,276,2.403,280,2.258,282,1.102,284,2.911,1111,4.572,1137,4.47,1138,4.214,1314,4.214,1315,4.214,1316,4.214,1317,4.911,1318,4.911]],["title/injectables/VoteService.html",[330,0.967,1137,2.198]],["body/injectables/VoteService.html",[7,0.02,19,0.257,20,0.232,21,0.184,24,1.516,28,0.924,30,1.624,31,0.917,32,0.675,33,0.917,35,1.706,37,0.412,39,0.682,41,1.386,53,1.253,74,1.713,75,2.52,118,2.194,152,0.257,153,0.093,154,1.516,155,1.135,158,0.013,159,0.013,165,0.419,166,2.267,182,2.342,184,1.264,194,2.985,225,2.318,248,2.467,253,1.65,282,1.182,330,1.373,331,1.713,335,2.011,339,4.554,342,2.18,351,3.499,411,1.922,508,1.922,652,2.739,931,3.751,946,2.337,956,3.121,974,3.121,976,3.121,977,3.514,1002,2.729,1003,2.337,1129,4.026,1137,3.121,1162,2.739,1165,2.739,1170,3.659,1173,2.739,1319,3.382,1320,5.928,1321,5.928,1322,3.941,1323,3.941,1324,5.264,1325,3.941,1326,3.941,1327,3.941,1328,3.941,1329,3.941,1330,3.941,1331,3.941,1332,5.264,1333,5.264,1334,6.782,1335,5.264,1336,3.941,1337,3.941,1338,3.941]],["title/changelog.html",[1339,2.154,1340,2.37,1341,2.66]],["body/changelog.html",[3,1.931,7,0.019,18,0.384,21,0.17,31,0.611,32,0.269,51,0.845,53,1.256,68,0.414,70,0.721,72,0.806,74,1.247,76,1.247,78,1.247,80,1.247,92,1.34,97,1.504,111,2.533,115,1.987,117,0.685,118,1.062,129,1.81,143,1.34,144,1.34,145,1.504,149,0.685,158,0.004,159,0.004,160,1.275,164,1.835,172,0.435,176,3.043,177,3.616,181,1.664,187,1.994,188,2.463,192,2.343,197,1.218,211,1.95,220,1.676,226,1.218,234,0.53,238,1.813,240,1.504,242,0.806,243,1.218,244,1.218,245,1.12,253,0.748,257,0.504,282,1.388,292,1.56,295,1.513,298,0.586,299,0.453,308,0.584,325,1.218,326,1.218,335,1.256,387,0.511,390,1.34,393,0.854,408,1.749,412,0.753,416,0.584,425,1.34,430,0.908,432,0.48,434,1.835,435,0.48,437,2.167,444,1.227,451,1.34,460,3.554,461,3.112,462,1.227,465,2.195,482,2.682,484,1.835,502,1.34,503,1.34,504,1.34,505,1.34,516,1.81,519,0.908,522,1.34,528,1.039,532,1.645,549,3.02,580,2.167,596,1.34,618,1.218,633,1.504,634,0.753,652,1.994,686,3.128,703,1.34,710,0.845,730,0.845,758,1.218,760,1.994,761,2.463,767,0.753,777,2.463,786,1.835,816,1.504,821,0.845,823,2.031,860,2.463,873,1.399,925,0.685,928,0.685,967,1.34,1010,1.34,1019,1.835,1093,1.504,1103,1.34,1129,1.34,1305,0.845,1309,3.616,1339,0.685,1341,2.031,1342,1.504,1343,2.367,1344,2.823,1345,2.367,1346,0.845,1347,3.128,1348,2.87,1349,4.721,1350,5.502,1351,4.993,1352,2.367,1353,0.985,1354,6.284,1355,2.823,1356,0.985,1357,0.985,1358,6.126,1359,0.985,1360,3.389,1361,6.178,1362,0.985,1363,0.985,1364,0.985,1365,0.845,1366,0.985,1367,4.285,1368,4.649,1369,6.83,1370,0.985,1371,0.985,1372,3.949,1373,0.985,1374,0.985,1375,0.985,1376,0.985,1377,2.367,1378,0.985,1379,0.985,1380,0.985,1381,2.367,1382,0.985,1383,4.018,1384,1.752,1385,2.463,1386,1.752,1387,1.752,1388,1.752,1389,6.284,1390,6.375,1391,1.752,1392,1.752,1393,1.752,1394,3.289,1395,3.289,1396,0.985,1397,2.87,1398,1.752,1399,1.752,1400,1.752,1401,1.752,1402,4.445,1403,1.752,1404,1.752,1405,1.752,1406,1.752,1407,1.752,1408,3.289,1409,4.524,1410,1.752,1411,1.752,1412,6.284,1413,6.331,1414,3.99,1415,1.752,1416,1.752,1417,1.752,1418,1.752,1419,2.87,1420,4.993,1421,1.752,1422,1.752,1423,1.752,1424,1.752,1425,1.752,1426,1.752,1427,1.752,1428,2.367,1429,2.367,1430,3.289,1431,4.214,1432,1.752,1433,1.752,1434,2.031,1435,1.752,1436,1.752,1437,4.214,1438,1.752,1439,0.985,1440,2.367,1441,1.504,1442,1.752,1443,1.752,1444,2.823,1445,2.87,1446,2.87,1447,1.504,1448,1.752,1449,1.504,1450,1.752,1451,3.645,1452,3.128,1453,1.752,1454,1.504,1455,1.752,1456,1.752,1457,1.752,1458,1.752,1459,1.752,1460,1.752,1461,2.463,1462,1.752,1463,1.504,1464,2.87,1465,4.285,1466,1.752,1467,2.031,1468,2.87,1469,1.752,1470,1.752,1471,1.752,1472,1.752,1473,1.752,1474,1.752,1475,1.504,1476,2.031,1477,1.752,1478,1.752,1479,5.86,1480,3.949,1481,3.289,1482,3.289,1483,1.752,1484,1.752,1485,2.463,1486,1.504,1487,1.752,1488,1.752,1489,1.752,1490,1.752,1491,3.645,1492,1.752,1493,1.752,1494,1.752,1495,1.752,1496,1.752,1497,1.752,1498,1.752,1499,1.752,1500,1.752,1501,1.752,1502,1.752,1503,1.752,1504,1.752,1505,3.99,1506,1.752,1507,1.752,1508,1.752,1509,1.752,1510,1.752,1511,3.289,1512,1.752,1513,1.752,1514,1.752,1515,1.752,1516,2.367,1517,1.752,1518,1.752,1519,1.752,1520,4.831,1521,1.752,1522,1.504,1523,1.752,1524,1.752,1525,2.367,1526,1.752,1527,1.752,1528,2.87,1529,1.752,1530,2.367,1531,2.367,1532,1.752,1533,1.752,1534,1.504,1535,3.645,1536,3.645,1537,1.752,1538,1.752,1539,1.752,1540,1.752,1541,2.87,1542,3.645,1543,1.752,1544,1.752,1545,1.752,1546,1.752,1547,1.752,1548,1.752,1549,1.752,1550,2.367,1551,1.752,1552,1.752,1553,1.752,1554,1.752,1555,1.752,1556,1.752,1557,1.752,1558,1.752,1559,1.752,1560,5.502,1561,1.752,1562,1.752,1563,1.752,1564,1.752,1565,1.752,1566,1.752,1567,1.752,1568,1.752,1569,1.752,1570,1.752,1571,1.752,1572,3.645,1573,1.34,1574,1.752,1575,1.752,1576,2.463,1577,1.752,1578,1.752,1579,2.463,1580,1.752,1581,1.752,1582,1.752,1583,1.752,1584,1.752,1585,1.752,1586,1.752,1587,1.752,1588,3.289,1589,1.752,1590,1.752,1591,1.752,1592,1.752,1593,1.752,1594,1.752,1595,1.752,1596,1.752,1597,2.367,1598,1.752,1599,2.87,1600,1.752,1601,0.985,1602,0.985,1603,0.985,1604,4.993,1605,0.985,1606,0.985,1607,0.985,1608,0.985,1609,0.985,1610,4.445,1611,0.985,1612,0.985,1613,0.985,1614,0.985,1615,0.985,1616,2.87,1617,0.985,1618,0.985,1619,0.985,1620,1.752,1621,1.752,1622,2.367,1623,0.985,1624,2.367,1625,0.985,1626,1.752,1627,0.985,1628,0.985,1629,0.985,1630,0.985,1631,3.645,1632,2.463,1633,2.87,1634,1.752,1635,2.367,1636,1.752,1637,1.752,1638,1.752,1639,1.752,1640,1.752,1641,1.752,1642,3.645,1643,1.752,1644,1.752,1645,1.752,1646,1.752,1647,3.289,1648,6.564,1649,0.985,1650,0.985,1651,0.985,1652,4.145,1653,0.985,1654,0.985,1655,0.985,1656,0.985,1657,0.985,1658,0.985,1659,3.389,1660,0.985,1661,0.985,1662,0.985,1663,0.985,1664,2.031,1665,1.34,1666,0.985,1667,0.985,1668,0.985,1669,0.985,1670,0.985,1671,0.985,1672,0.985,1673,0.985,1674,0.845,1675,1.504,1676,0.985,1677,0.985,1678,0.845,1679,0.985,1680,0.985,1681,3.815,1682,0.985,1683,0.985,1684,0.985,1685,0.985,1686,1.504,1687,0.985,1688,0.985,1689,0.985,1690,0.845,1691,0.845,1692,0.985,1693,0.985,1694,0.985,1695,0.985,1696,0.985,1697,0.985,1698,0.985,1699,0.985,1700,3.616,1701,0.985,1702,0.985,1703,0.985,1704,0.985,1705,1.752,1706,0.985,1707,0.985,1708,0.985,1709,0.985,1710,0.845,1711,0.985,1712,0.985,1713,0.985,1714,0.985,1715,0.985,1716,3.289,1717,1.752,1718,0.753,1719,0.985,1720,0.985,1721,0.985,1722,0.985,1723,0.985,1724,0.985,1725,0.985,1726,0.985,1727,0.985,1728,0.985,1729,0.985,1730,0.985,1731,0.985,1732,0.985,1733,0.985,1734,0.985,1735,0.985,1736,0.985,1737,0.985,1738,0.985,1739,0.985,1740,0.985,1741,2.031,1742,0.985,1743,0.985,1744,0.985,1745,0.985,1746,0.985,1747,0.985,1748,0.985,1749,0.985,1750,0.985,1751,0.985,1752,0.985,1753,0.985,1754,0.985,1755,0.985,1756,0.985,1757,0.985,1758,2.367,1759,0.985,1760,0.985,1761,0.985,1762,0.985,1763,0.985,1764,0.985,1765,0.985,1766,0.845,1767,0.985,1768,0.985,1769,0.985,1770,0.845,1771,0.985,1772,0.985,1773,1.752,1774,0.985,1775,0.985,1776,0.985,1777,0.985,1778,0.985,1779,0.985,1780,0.985,1781,0.985,1782,1.504,1783,0.985,1784,0.985,1785,0.985,1786,0.985,1787,1.752,1788,1.752,1789,1.752,1790,1.504,1791,1.752,1792,0.985,1793,2.367,1794,0.985,1795,0.985,1796,1.752,1797,1.752,1798,0.985,1799,0.985,1800,0.985,1801,0.985,1802,0.985,1803,0.985,1804,0.985,1805,0.985,1806,0.985,1807,0.985,1808,0.985,1809,0.985,1810,0.985,1811,0.985,1812,1.752,1813,0.985,1814,0.985,1815,0.985,1816,0.985,1817,0.845,1818,0.985,1819,0.985,1820,0.985,1821,0.985,1822,0.985,1823,0.985,1824,0.985,1825,0.985,1826,0.985,1827,0.985,1828,0.985,1829,0.985,1830,0.985,1831,0.985,1832,0.985,1833,0.985,1834,0.985,1835,0.985,1836,0.985,1837,0.985,1838,0.985,1839,0.845,1840,0.845,1841,0.985,1842,0.985,1843,0.985,1844,0.985,1845,0.985,1846,0.985,1847,0.985,1848,0.985,1849,0.985,1850,0.985,1851,0.985,1852,0.985,1853,0.985,1854,0.985]],["title/coverage.html",[1855,3.862]],["body/coverage.html",[7,0.02,21,0.174,32,0.424,68,0.879,70,1.532,72,1.713,74,1.618,76,1.618,78,1.618,80,1.618,89,2.589,94,2.589,118,1.379,153,0.162,158,0.013,159,0.013,160,2.101,161,2.589,162,3.197,164,2.381,181,1.072,194,1.532,209,1.713,213,2.589,216,2.208,244,2.589,265,2.381,275,2.208,276,1.245,278,2.589,285,2.381,287,2.849,288,1.611,289,3.682,291,1.31,330,1.857,332,3.197,343,1.618,347,2.208,365,3.197,366,3.876,408,2.17,409,3.197,416,4.566,446,1.816,494,3.197,595,3.197,617,3.197,632,3.197,651,3.197,666,3.197,708,2.589,709,3.197,757,3.197,768,2.849,784,3.197,786,2.381,804,4.003,805,3.197,810,2.589,835,2.589,837,3.197,853,3.197,854,3.197,871,1.931,873,1.816,888,2.589,889,3.197,892,1.816,920,2.849,930,3.197,987,2.589,988,3.197,989,3.197,1022,2.208,1035,2.589,1036,3.197,1037,3.197,1064,2.208,1075,2.589,1076,3.197,1077,3.197,1101,2.208,1111,2.589,1112,3.197,1113,3.197,1137,2.208,1151,3.197,1180,3.197,1205,3.197,1226,3.197,1227,3.197,1245,3.197,1248,3.197,1281,3.197,1319,3.197,1383,2.589,1441,3.197,1675,5.549,1855,2.849,1856,3.725,1857,6.466,1858,3.725,1859,7.334,1860,3.876,1861,3.197,1862,3.197,1863,6.466,1864,3.725,1865,3.725,1866,3.197,1867,3.197,1868,3.197,1869,3.197,1870,6.671,1871,3.197,1872,3.197,1873,5.068,1874,6.182,1875,3.725]],["title/miscellaneous/enumerations.html",[1876,1.607,1877,3.824]],["body/miscellaneous/enumerations.html",[7,0.02,31,0.933,158,0.015,159,0.015,165,0.517,230,2.67,231,2.817,287,3.72,288,2.177,289,4.377,297,4.61,299,3.526,303,4.189,313,3.574,326,4.189,327,4.61,328,4.61,497,4.189,506,3.854,507,4.61,509,4.61,581,5.173,582,5.173,920,3.72,924,4.61,925,4.189,926,4.61,927,4.61,928,4.189,1876,2.522,1877,4.174,1878,4.864,1879,4.864,1880,6.028,1881,4.864,1882,4.864]],["title/miscellaneous/functions.html",[1876,1.607,1883,3.824]],["body/miscellaneous/functions.html",[7,0.017,158,0.017,159,0.017,165,0.627,1871,5.063,1872,6.102,1876,3.059,1883,5.063,1884,5.9]],["title/index.html",[165,0.33,1339,2.154,1340,2.37]],["body/index.html",[7,0.018,17,1.369,18,1.229,20,0.185,21,0.21,93,3.869,105,2.704,111,3.994,118,1.166,148,2.41,149,4.227,158,0.011,159,0.011,211,3.606,220,1.449,243,3.134,244,2.19,282,1.012,288,1.002,298,1.507,299,1.449,335,1.434,381,1.108,425,3.448,434,2.014,451,2.41,500,2.014,516,4.395,518,2.19,519,3.377,522,2.41,549,2.41,589,3.408,592,2.19,758,3.659,760,3.134,788,2.41,839,2.704,1342,2.704,1344,5.219,1349,4.932,1355,2.704,1360,2.704,1361,3.869,1365,3.869,1367,4.519,1383,2.19,1385,3.869,1409,4.932,1414,2.704,1434,2.704,1447,2.704,1449,3.869,1452,4.519,1454,2.704,1461,4.519,1463,2.704,1465,3.448,1467,2.704,1475,3.869,1476,2.704,1485,5.219,1486,5.219,1522,2.704,1573,2.41,1576,2.704,1579,4.932,1632,3.869,1652,2.704,1659,4.932,1664,2.704,1681,5.429,1686,2.704,1690,2.704,1691,6.362,1700,4.932,1710,2.704,1718,2.41,1741,3.869,1766,3.869,1770,4.519,1782,2.704,1817,2.704,1839,6.136,1840,2.704,1855,2.41,1885,3.151,1886,3.151,1887,4.509,1888,3.151,1889,3.151,1890,4.509,1891,5.59,1892,2.704,1893,3.151,1894,3.151,1895,3.151,1896,3.151,1897,3.151,1898,3.151,1899,3.151,1900,3.151,1901,3.151,1902,3.151,1903,3.151,1904,3.151,1905,3.151,1906,3.151,1907,3.151,1908,3.151,1909,3.151,1910,3.151,1911,4.509,1912,3.151,1913,3.151,1914,4.509,1915,3.151,1916,3.151,1917,3.151,1918,3.151,1919,6.514,1920,3.151,1921,3.151,1922,3.151,1923,2.704,1924,4.509,1925,3.151,1926,3.151,1927,3.151,1928,3.151,1929,3.151,1930,3.151,1931,3.151,1932,3.151,1933,3.151,1934,4.509,1935,3.151,1936,3.151,1937,4.509,1938,3.151,1939,3.151,1940,3.151,1941,3.151,1942,3.151,1943,3.151,1944,3.151,1945,3.151,1946,4.509,1947,3.151,1948,4.509,1949,4.509,1950,3.151,1951,3.151,1952,3.151,1953,3.151,1954,3.151,1955,3.151,1956,3.151,1957,3.151,1958,3.151,1959,3.151,1960,3.151,1961,3.151,1962,3.151,1963,3.151,1964,4.509,1965,4.509,1966,3.151,1967,2.704,1968,3.151,1969,3.151,1970,3.151,1971,4.509,1972,3.151,1973,3.151,1974,4.509,1975,4.509,1976,3.151,1977,3.151,1978,3.151,1979,2.704,1980,3.151,1981,3.151,1982,4.509,1983,3.151,1984,4.509,1985,4.509,1986,3.151,1987,3.151,1988,3.151,1989,3.151,1990,3.151,1991,3.151,1992,4.509,1993,4.509,1994,3.151,1995,3.151,1996,3.151,1997,3.151,1998,3.151,1999,3.151,2000,3.151,2001,3.151,2002,3.151,2003,3.151,2004,3.151,2005,4.509,2006,3.151,2007,3.151,2008,3.151,2009,3.151,2010,3.151,2011,3.151,2012,3.151,2013,3.151,2014,3.151,2015,3.151,2016,3.151,2017,3.151,2018,3.151,2019,3.151,2020,3.151,2021,4.509,2022,3.151,2023,3.151,2024,3.151,2025,3.151,2026,3.151,2027,3.151]],["title/license.html",[500,1.981,1339,2.154,1340,2.37]],["body/license.html",[7,0.015,18,1.926,158,0.015,159,0.015,439,3.419,450,4.238,460,2.408,500,3.157,519,2.56,589,2.928,592,3.432,682,3.777,758,4.229,767,3.777,1383,3.432,1678,4.238,1718,4.654,1891,4.238,1892,6.372,1923,4.238,1967,5.222,1979,4.238,2028,6.595,2029,4.939,2030,6.085,2031,4.939,2032,4.939,2033,4.939,2034,4.939,2035,4.939,2036,4.939,2037,4.939,2038,4.939,2039,4.939,2040,4.939,2041,4.939,2042,4.939,2043,4.939,2044,4.939,2045,4.939,2046,4.939,2047,4.939,2048,6.085,2049,4.939,2050,4.939,2051,4.939,2052,4.939,2053,4.939,2054,4.939,2055,6.085,2056,6.085,2057,4.939,2058,4.939,2059,4.939,2060,4.939,2061,4.939,2062,4.939,2063,4.939,2064,4.939,2065,4.939,2066,4.939,2067,4.939,2068,4.939,2069,4.939,2070,4.939,2071,4.939,2072,4.939,2073,4.939,2074,4.939,2075,4.939,2076,4.939,2077,4.939,2078,4.939,2079,4.939,2080,4.939,2081,4.939,2082,4.939]],["title/modules.html",[2,1.97]],["body/modules.html",[1,3.741,2,2.099,6,3.441,7,0.016,8,3.441,9,3.441,10,3.441,11,3.441,12,3.441,13,3.441,14,3.191,15,3.441,158,0.016,159,0.016,2083,7.529,2084,7.529,2085,7.529,2086,7.567,2087,4.619,2088,5.382]],["title/overview.html",[2089,4.334]],["body/overview.html",[1,5.237,2,1.521,3,2.271,4,3.347,5,3.347,6,4.631,7,0.02,8,4.487,9,3.769,10,4.322,11,4.487,12,4.487,13,4.487,14,4.095,15,4.487,16,2.403,17,1.694,18,1.521,115,1.604,150,1.18,158,0.013,159,0.013,209,3.175,216,4.095,238,2.038,261,3.347,262,3.347,264,3.347,265,4.415,272,3.347,273,3.347,274,3.347,275,4.095,276,2.439,286,2.022,308,2.312,331,1.694,835,2.71,914,3.347,915,3.347,1022,4.095,1064,4.095,1101,4.095,1137,4.095,1146,3.347,1147,3.347,1148,3.347,1175,3.347,1176,3.347,1177,3.347,1200,3.347,1201,3.347,1202,3.347,1275,3.347,1276,3.347,1277,3.347,1314,3.347,1315,3.347,1316,3.347,1790,4.486,2089,3.347,2090,3.9]],["title/properties.html",[292,1.221,2091,3.099]],["body/properties.html",[7,0.019,50,3.764,92,4.142,158,0.016,159,0.016,211,3.211,257,1.559,292,1.484,335,1.722,467,5.522,491,3.764,500,3.463,519,3.336,589,3.815,592,3.764,1346,4.648,1347,4.648,1444,4.648,1465,4.142,1534,4.648,1674,4.648,2087,4.648,2092,5.416,2093,5.416,2094,5.416,2095,5.416,2096,5.416,2097,5.416,2098,5.416,2099,5.416,2100,5.416,2101,5.416,2102,5.416,2103,5.416,2104,5.416,2105,5.416,2106,5.416,2107,5.416,2108,5.416]],["title/miscellaneous/typealiases.html",[1876,1.607,2109,4.456]],["body/miscellaneous/typealiases.html",[7,0.017,32,0.672,158,0.017,159,0.017,165,0.627,1860,4.512,1876,3.059,2110,5.9,2111,6.764,2112,5.063]],["title/miscellaneous/variables.html",[1665,3.407,1876,1.607]],["body/miscellaneous/variables.html",[7,0.02,32,0.523,118,1.701,143,4.449,158,0.015,159,0.015,165,0.489,181,1.675,184,0.795,194,2.393,205,2.24,225,2.045,253,1.517,257,1.323,292,1.259,298,2.314,299,3.182,381,2.244,399,4.043,482,3.112,760,4.043,768,4.449,771,3.944,785,3.944,801,3.944,815,3.944,871,3.016,873,2.836,1505,3.944,1573,3.514,1665,3.514,1860,3.514,1861,3.944,1862,4.992,1866,3.944,1867,4.992,1868,3.944,1869,4.992,1876,2.382,2112,4.992,2113,4.595,2114,4.595,2115,4.595,2116,4.595,2117,4.595,2118,4.595,2119,4.595,2120,4.595,2121,4.595,2122,5.817,2123,4.595,2124,4.595,2125,5.817,2126,4.595,2127,4.595,2128,5.817,2129,4.595,2130,4.595,2131,4.595,2132,5.817,2133,5.817,2134,5.817,2135,5.817,2136,4.595,2137,4.595]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":416,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":1909,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":1859,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1858,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1863,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1857,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1870,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1874,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1873,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1864,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1865,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":1443,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":1607,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":1395,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":1460,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1382,"title":{},"body":{"changelog.html":{}}}],["04082d7",{"_index":1568,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":1647,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":1604,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1648,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":461,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["0848443",{"_index":1756,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":1420,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":1519,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":308,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":1833,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":1830,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":1828,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":1824,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":1439,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":1429,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":1419,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":1396,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":1381,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":1346,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.2.0",{"_index":1821,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":1815,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":1810,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":1807,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":1805,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":1778,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":1772,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":1740,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":1736,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":1733,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":1730,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":1725,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":1723,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":1715,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":1712,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":1768,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":1765,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":1762,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":1760,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":1757,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":1753,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":1750,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":1747,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":1707,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":1703,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":1655,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":1651,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":1649,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":1685,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":1680,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":1677,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":1673,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":1670,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":1667,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":1663,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":1658,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":1631,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":1628,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":1623,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":1479,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"overview.html":{}}}],["100",{"_index":817,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["10})@column({default",{"_index":704,"title":{},"body":{"entities/DbUser.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(500)@isoptional",{"_index":310,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["11756",{"_index":587,"title":{},"body":{"entities/DbRepo.html":{}}}],["11756})@column({type",{"_index":562,"title":{},"body":{"entities/DbRepo.html":{}}}],["12",{"_index":1624,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":485,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":447,"title":{},"body":{"entities/DbContribution.html":{}}}],["127.0.0.1",{"_index":1908,"title":{},"body":{"index.html":{}}}],["13",{"_index":1348,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":489,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":452,"title":{},"body":{"entities/DbContribution.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":438,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["14",{"_index":1494,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":1546,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":488,"title":{},"body":{"entities/DbContribution.html":{}}}],["155e99e",{"_index":1473,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":427,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":1440,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":1802,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":1514,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":1811,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":1638,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":1622,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":437,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":613,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["196})@primarygeneratedcolumn",{"_index":599,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["1bbeaf6",{"_index":1584,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":1478,"title":{},"body":{"changelog.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":317,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["20",{"_index":1516,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":436,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":460,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{},"license.html":{}}}],["2073883",{"_index":1458,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":1669,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":1679,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":1520,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":1518,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":490,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":463,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:39.000000",{"_index":588,"title":{},"body":{"entities/DbRepo.html":{}}}],["22:04:39.000000'})@column({type",{"_index":550,"title":{},"body":{"entities/DbRepo.html":{}}}],["22d3cc1",{"_index":1774,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":1716,"title":{},"body":{"changelog.html":{}}}],["237133",{"_index":614,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":608,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["237133})@primarycolumn('bigint",{"_index":676,"title":{},"body":{"entities/DbUser.html":{}}}],["24",{"_index":1525,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":1545,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1616,"title":{},"body":{"changelog.html":{}}}],["255",{"_index":421,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["26",{"_index":1614,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":1430,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":1854,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":1827,"title":{},"body":{"changelog.html":{}}}],["274",{"_index":584,"title":{},"body":{"entities/DbRepo.html":{}}}],["274})@column({type",{"_index":536,"title":{},"body":{"entities/DbRepo.html":{}}}],["28",{"_index":462,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["29",{"_index":1610,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":1507,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":1543,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":1844,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":1729,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":1533,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":1480,"title":{},"body":{"changelog.html":{}}}],["3001",{"_index":1916,"title":{},"body":{"index.html":{}}}],["31e4d60",{"_index":1662,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1432,"title":{},"body":{"changelog.html":{}}}],["3282435",{"_index":1552,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":1509,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":1767,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":1829,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":1407,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":1359,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":1561,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":1370,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":1794,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":1357,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":780,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":1388,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":1386,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":1393,"title":{},"body":{"changelog.html":{}}}],["4552c66",{"_index":1641,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":1448,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":707,"title":{},"body":{"entities/DbUser.html":{}}}],["498})@column({type",{"_index":691,"title":{},"body":{"entities/DbUser.html":{}}}],["4b264d5",{"_index":1453,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":1459,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":585,"title":{},"body":{"entities/DbRepo.html":{}}}],["50",{"_index":306,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["500",{"_index":777,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5385049",{"_index":1376,"title":{},"body":{"changelog.html":{}}}],["5473",{"_index":586,"title":{},"body":{"entities/DbRepo.html":{}}}],["5473})@column({type",{"_index":573,"title":{},"body":{"entities/DbRepo.html":{}}}],["5699f6a",{"_index":1433,"title":{},"body":{"changelog.html":{}}}],["57568598",{"_index":583,"title":{},"body":{"entities/DbRepo.html":{}}}],["57568598})@column({type",{"_index":571,"title":{},"body":{"entities/DbRepo.html":{}}}],["58bf922",{"_index":1846,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":1540,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":1500,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":1838,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":1692,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":1791,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":560,"title":{},"body":{"entities/DbRepo.html":{}}}],["607cf5d",{"_index":1809,"title":{},"body":{"changelog.html":{}}}],["618225f",{"_index":1549,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":1567,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":1804,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":1646,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":1818,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":1406,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":1696,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":540,"title":{},"body":{"entities/DbRepo.html":{}}}],["673dca9",{"_index":1657,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":1592,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":1600,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":1418,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":1666,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1790,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["71359796",{"_index":487,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["71359796})@column",{"_index":603,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["71359796})@column({type",{"_index":458,"title":{},"body":{"entities/DbContribution.html":{}}}],["71359796})@primarycolumn('bigint",{"_index":526,"title":{},"body":{"entities/DbRepo.html":{}}}],["7249714",{"_index":1578,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":1832,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":1411,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":1746,"title":{},"body":{"changelog.html":{}}}],["79bf61d",{"_index":1689,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":1672,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":1850,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":1735,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":1777,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":2090,"title":{},"body":{"overview.html":{}}}],["8080:3001",{"_index":1949,"title":{},"body":{"index.html":{}}}],["81e8bbc",{"_index":1786,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":1580,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":1564,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":1466,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":1706,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":1587,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":1771,"title":{},"body":{"changelog.html":{}}}],["911df68",{"_index":1742,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":1566,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":1749,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":1484,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":1371,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":1380,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a08abfd",{"_index":1544,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":1795,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":1387,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":1688,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":1650,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":1397,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":2054,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":1816,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":1814,"title":{},"body":{"changelog.html":{}}}],["accessing",{"_index":1743,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":838,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["action",{"_index":2077,"title":{},"body":{"license.html":{}}}],["activity",{"_index":690,"title":{},"body":{"entities/DbUser.html":{}}}],["adapter",{"_index":1364,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":1361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["add_table_nametest",{"_index":1996,"title":{},"body":{"index.html":{}}}],["added",{"_index":1475,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adding",{"_index":1988,"title":{},"body":{"index.html":{}}}],["additional",{"_index":1569,"title":{},"body":{"changelog.html":{}}}],["addorderby(`\"${orderfield",{"_index":356,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":358,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":986,"title":{},"body":{"injectables/RepoService.html":{}}}],["adds",{"_index":1014,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["addselect(qb",{"_index":964,"title":{},"body":{"injectables/RepoService.html":{}}}],["adjust",{"_index":1434,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":1798,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1501,"title":{},"body":{"changelog.html":{}}}],["advised",{"_index":1959,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":1554,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":1422,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":1645,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":1728,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":943,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":2110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":948,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":950,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":949,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":951,"title":{},"body":{"injectables/RepoService.html":{}}}],["allof",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":1487,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":1002,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":2046,"title":{},"body":{"license.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":1194,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":1167,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":1219,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":1333,"title":{},"body":{"injectables/VoteService.html":{}}}],["api",{"_index":1465,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["api.opensauced.pizza",{"_index":1887,"title":{},"body":{"index.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":1950,"title":{},"body":{"index.html":{}}}],["api_host",{"_index":1906,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiconfig",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["apiconflictresponse",{"_index":1021,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apidocs",{"_index":1634,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":478,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@column({default",{"_index":674,"title":{},"body":{"entities/DbUser.html":{}}}],["apihideproperty()@column({type",{"_index":542,"title":{},"body":{"entities/DbRepo.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":443,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":454,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":510,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["apimodelproperty",{"_index":479,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelproperty({description",{"_index":413,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelpropertyoptional",{"_index":480,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelpropertyoptional({description",{"_index":431,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apinotfoundresponse",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiokresponse",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apipaginatedresponse",{"_index":871,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":878,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":912,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiproperty",{"_index":796,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apiproperty({description",{"_index":812,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apiproperty({type",{"_index":794,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":319,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apipropertyoptional({description",{"_index":1228,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["apipropertyoptional({enum",{"_index":301,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":307,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["apitags",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"authentication",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":726,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"repository",{"_index":876,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["app",{"_index":1915,"title":{},"body":{"index.html":{}}}],["app.opensauced",{"_index":680,"title":{},"body":{"entities/DbUser.html":{}}}],["appearing",{"_index":1571,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":1912,"title":{},"body":{"index.html":{}}}],["apply",{"_index":1994,"title":{},"body":{"index.html":{}}}],["apply(httploggermiddleware",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":638,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":1489,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":2081,"title":{},"body":{"license.html":{}}}],["array",{"_index":801,"title":{},"body":{"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["artifact",{"_index":1758,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":582,"title":{},"body":{"entities/DbRepo.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":1968,"title":{},"body":{"index.html":{}}}],["assign",{"_index":1751,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":2037,"title":{},"body":{"license.html":{}}}],["async",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":1822,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":1481,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/supabase.guard",{"_index":1024,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["auth/supabase.user.decorator",{"_index":1025,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["authcontroller",{"_index":161,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1249,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":1252,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["authguard",{"_index":1246,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":1247,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2107,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":2071,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":982,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":983,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2088,"title":{},"body":{"modules.html":{}}}],["await",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["b0169e7",{"_index":1504,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":1392,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":1684,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":1724,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":1471,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":1557,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":1820,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":1676,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":1803,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":1759,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":1562,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":1353,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":1490,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":1714,"title":{},"body":{"changelog.html":{}}}],["backed",{"_index":1972,"title":{},"body":{"index.html":{}}}],["backend",{"_index":2094,"title":{},"body":{"properties.html":{}}}],["badge",{"_index":1537,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":1637,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":1683,"title":{},"body":{"changelog.html":{}}}],["baseentity",{"_index":471,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["baseline",{"_index":1792,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":931,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":1701,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":1825,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":1711,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":1781,"title":{},"body":{"changelog.html":{}}}],["beautiful",{"_index":1378,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":1960,"title":{},"body":{"index.html":{}}}],["being",{"_index":1924,"title":{},"body":{"index.html":{}}}],["below",{"_index":2022,"title":{},"body":{"index.html":{}}}],["beneficial",{"_index":1926,"title":{},"body":{"index.html":{}}}],["beta",{"_index":685,"title":{},"body":{"entities/DbUser.html":{}}}],["beta.1",{"_index":1347,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.10",{"_index":1613,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":1612,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":1611,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":1609,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":1608,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":1606,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":1605,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":1603,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":1602,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":1601,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":1394,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":1428,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":1621,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":1620,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":1619,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":1618,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":1617,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":1615,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":1888,"title":{},"body":{"index.html":{}}}],["better",{"_index":1408,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":1399,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":428,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["binaries",{"_index":1893,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":528,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":1872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":451,"title":{},"body":{"entities/DbContribution.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":1956,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":1498,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":2086,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2083,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1389,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":2103,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1349,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":956,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builds",{"_index":1946,"title":{},"body":{"index.html":{}}}],["business",{"_index":1933,"title":{},"body":{"index.html":{}}}],["c",{"_index":2029,"title":{},"body":{"license.html":{}}}],["c013b70",{"_index":1722,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":1726,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":1784,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":1559,"title":{},"body":{"changelog.html":{}}}],["capabilities",{"_index":1356,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":1925,"title":{},"body":{"index.html":{}}}],["catch",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":1799,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":1835,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":1732,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":1761,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":1654,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":1599,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":1341,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1344,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channel",{"_index":2020,"title":{},"body":{"index.html":{}}}],["character",{"_index":418,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["charge",{"_index":2034,"title":{},"body":{"license.html":{}}}],["check",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":1282,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":1289,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["checks",{"_index":1834,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":1625,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":1913,"title":{},"body":{"index.html":{}}}],["claim",{"_index":2074,"title":{},"body":{"license.html":{}}}],["class",{"_index":153,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":286,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"overview.html":{}}}],["clc",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":782,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":403,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":779,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":1550,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":2001,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":768,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":2096,"title":{},"body":{"properties.html":{}}}],["closes",{"_index":1358,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":272,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":274,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_providers",{"_index":273,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":914,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":915,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_providers",{"_index":916,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_stargazemodule",{"_index":1175,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":1176,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_providers",{"_index":1177,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":1146,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":1148,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_providers",{"_index":1147,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_submitmodule",{"_index":1200,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":1202,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_providers",{"_index":1201,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1275,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1276,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1277,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":1314,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":1315,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_providers",{"_index":1316,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["code",{"_index":1367,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collection",{"_index":816,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["colorize",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":470,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["column(\"text",{"_index":590,"title":{},"body":{"entities/DbRepo.html":{}}}],["column('text",{"_index":520,"title":{},"body":{"entities/DbRepo.html":{}}}],["command",{"_index":1919,"title":{},"body":{"index.html":{}}}],["commands",{"_index":1969,"title":{},"body":{"index.html":{}}}],["comments",{"_index":1776,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":1837,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":1961,"title":{},"body":{"index.html":{}}}],["common/constants/order",{"_index":345,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":872,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["common/dtos/page",{"_index":323,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["common/dtos/page.dto",{"_index":344,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["common/middleware/database",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":2012,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1966,"title":{},"body":{"index.html":{}}}],["completing",{"_index":1472,"title":{},"body":{"changelog.html":{}}}],["complexity",{"_index":2097,"title":{},"body":{"properties.html":{}}}],["component",{"_index":1817,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["concurrency",{"_index":1693,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":2053,"title":{},"body":{"license.html":{}}}],["config",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["config/api.config",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["config/endpoint.config",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["configservice.get(\"db.connection",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.database",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.host",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.maxqueryexecutiontime",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.password",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.port",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.username",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1793,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1970,"title":{},"body":{"index.html":{}}}],["confirmation",{"_index":1230,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":1162,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"you",{"_index":1170,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["connect",{"_index":1971,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1979,"title":{},"body":{"index.html":{},"license.html":{}}}],["console.log",{"_index":1556,"title":{},"body":{"changelog.html":{}}}],["const",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":848,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(contributionrepository",{"_index":334,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(data",{"_index":787,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(reporepository",{"_index":933,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":1183,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":1154,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":1208,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":1322,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(undefined",{"_index":809,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userrepository",{"_index":1285,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":1901,"title":{},"body":{"index.html":{}}}],["container",{"_index":1652,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contents",{"_index":1719,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":1412,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":2078,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":2007,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":424,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":2005,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":434,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":279,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.repo",{"_index":511,"title":{},"body":{"entities/DbRepo.html":{}}}],["contribution.service",{"_index":281,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{}}}],["contribution/contribution.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":297,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":300,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":285,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":337,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":484,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":283,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":854,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":869,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":865,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":962,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":924,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":275,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":328,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":160,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"health",{"_index":725,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"repos",{"_index":875,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controllers",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":2015,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2048,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1718,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copying",{"_index":1978,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":2028,"title":{},"body":{"license.html":{}}}],["correct",{"_index":1369,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":1463,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":326,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":1575,"title":{},"body":{"changelog.html":{}}}],["couple",{"_index":1963,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1855,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":1305,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["created",{"_index":1788,"title":{},"body":{"changelog.html":{}}}],["created_at",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":476,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["createparamdecorator",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":1745,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":435,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["current",{"_index":821,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["customprops",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":1943,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":1548,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":1565,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":1699,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":1474,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":1595,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":1636,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":2075,"title":{},"body":{"license.html":{}}}],["data",{"_index":785,"title":{},"body":{"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["databaseloggermiddleware",{"_index":94,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["datasource",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":430,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["date().tostring",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{}}}],["date.now",{"_index":772,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["db",{"_index":1845,"title":{},"body":{"changelog.html":{}}}],["db:changesif",{"_index":1991,"title":{},"body":{"index.html":{}}}],["db:commit",{"_index":1995,"title":{},"body":{"index.html":{}}}],["db:push",{"_index":2000,"title":{},"body":{"index.html":{}}}],["db:resetpush",{"_index":1999,"title":{},"body":{"index.html":{}}}],["db:startmake",{"_index":1987,"title":{},"body":{"index.html":{}}}],["dbc66f3",{"_index":1547,"title":{},"body":{"changelog.html":{}}}],["dbconfig",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["dbcontribution",{"_index":72,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":863,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbrepo",{"_index":68,"title":{"entities/DbRepo.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":80,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":1047,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":76,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":1000,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":78,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":1086,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":74,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":1122,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":900,"title":{},"body":{"controllers/RepoController.html":{}}}],["dbuser",{"_index":70,"title":{"entities/DbUser.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dd5e668",{"_index":1630,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":1403,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":2038,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2082,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1713,"title":{},"body":{"changelog.html":{}}}],["decorator",{"_index":1813,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["default",{"_index":298,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1019,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["delete(\"/:id/star",{"_index":1032,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":1071,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":1108,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":1143,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":1034,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":1074,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":1110,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":1145,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":996,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1044,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1084,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1120,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1006,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1051,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1089,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1125,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["deleted_at",{"_index":410,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["deletedatecolumn",{"_index":475,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["demo",{"_index":1694,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["deploy",{"_index":1491,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":1632,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deps",{"_index":1843,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":581,"title":{},"body":{"entities/DbRepo.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["designed",{"_index":2095,"title":{},"body":{"properties.html":{}}}],["developer",{"_index":1704,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":1486,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagram",{"_index":2004,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":1635,"title":{},"body":{"changelog.html":{}}}],["difference",{"_index":1990,"title":{},"body":{"index.html":{}}}],["digital",{"_index":1535,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":346,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":1880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disable",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["discord.find",{"_index":2016,"title":{},"body":{"index.html":{}}}],["disk",{"_index":728,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":724,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1447,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["distribute",{"_index":2044,"title":{},"body":{"license.html":{}}}],["dit",{"_index":1951,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1681,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":1898,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":1787,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":1482,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":1626,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":1639,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":1383,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1345,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":1687,"title":{},"body":{"changelog.html":{}}}],["dot",{"_index":2092,"title":{},"body":{"properties.html":{}}}],["down",{"_index":1512,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":1152,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":1158,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":1181,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":1187,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":1038,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":1043,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":1039,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":1050,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":990,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":995,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":991,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":1005,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":1206,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":1212,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":1078,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":1083,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":1079,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":1088,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":1320,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":1326,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":1114,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":1119,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":1115,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":1124,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dry",{"_index":1690,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dtos",{"_index":1582,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":349,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/repo",{"_index":908,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["duration",{"_index":770,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":1867,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":1955,"title":{},"body":{"index.html":{}}}],["e",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["e0d38ca",{"_index":1529,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":1764,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":1702,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":1515,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":1586,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":1462,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":1823,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":800,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":1640,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":1671,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":1524,"title":{},"body":{"changelog.html":{}}}],["email",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["emoji",{"_index":1436,"title":{},"body":{"changelog.html":{}}}],["encounter",{"_index":1922,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":2006,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1431,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints",{"_index":730,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":714,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":1848,"title":{},"body":{"changelog.html":{}}}],["entities",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"changelog.html":{},"overview.html":{}}}],["entities/repo.entity",{"_index":907,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entity",{"_index":408,"title":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":325,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":1877,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":302,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["env",{"_index":1385,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":1664,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":1886,"title":{},"body":{"index.html":{}}}],["error",{"_index":390,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["errors",{"_index":1452,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["eslint",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["event",{"_index":1678,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["everything",{"_index":1992,"title":{},"body":{"index.html":{}}}],["everywhere",{"_index":1379,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":415,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["exception/responses",{"_index":1426,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["executioncontext",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":998,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["explain",{"_index":1851,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":1731,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":767,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":1697,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":290,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["extra",{"_index":1551,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":1259,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1272,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":1271,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f0304d4",{"_index":1627,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":1563,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":1590,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":1425,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":1574,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":1739,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":1401,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":1438,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":1508,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":1450,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":1517,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":1510,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":1493,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["false})@column({default",{"_index":534,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{}}}],["fastify",{"_index":1362,"title":{},"body":{"changelog.html":{}}}],["fc74284",{"_index":1366,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":1427,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":1808,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":1496,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":1752,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":686,"title":{},"body":{"entities/DbUser.html":{},"changelog.html":{}}}],["features",{"_index":1354,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":1424,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":1503,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":1644,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1923,"title":{},"body":{"index.html":{},"license.html":{}}}],["find",{"_index":868,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findall",{"_index":333,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findall(pageoptionsdto",{"_index":338,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findallbyownerandrepo",{"_index":855,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":857,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid",{"_index":856,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":866,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findalluserstargazed",{"_index":1040,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":1053,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":992,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":1008,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":1080,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":1091,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":1116,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":1127,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyid",{"_index":890,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":897,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":891,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":902,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["finds",{"_index":859,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["fine",{"_index":1993,"title":{},"body":{"index.html":{}}}],["first",{"_index":1449,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fitness",{"_index":2067,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1957,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":1390,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":529,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["flight",{"_index":1763,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":1936,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1046,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["followed",{"_index":1055,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["following",{"_index":1891,"title":{},"body":{"index.html":{},"license.html":{}}}],["follows",{"_index":1068,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows'})@apiokresponse({description",{"_index":1059,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["fork",{"_index":531,"title":{},"body":{"entities/DbRepo.html":{}}}],["formatit",{"_index":1958,"title":{},"body":{"index.html":{}}}],["forroutes(`v${version.charat(0",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":864,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":1001,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["free",{"_index":2033,"title":{},"body":{"license.html":{}}}],["from(entity",{"_index":953,"title":{},"body":{"injectables/RepoService.html":{}}}],["full",{"_index":522,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":495,"title":{},"body":{"entities/DbRepo.html":{}}}],["function",{"_index":1441,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":1513,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":1883,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2051,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":1415,"title":{},"body":{"changelog.html":{}}}],["generated",{"_index":1467,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generation",{"_index":1773,"title":{},"body":{"changelog.html":{}}}],["get(\"/:id",{"_index":909,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:id/contributions",{"_index":877,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo",{"_index":910,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":884,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/list",{"_index":911,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":1066,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":1028,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":1104,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":1139,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/service",{"_index":729,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/web",{"_index":742,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":898,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":867,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":903,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":858,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":893,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1054,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1009,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1092,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1128,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":712,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":716,"title":{},"body":{"controllers/HealthController.html":{}}}],["getdomain",{"_index":1869,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":843,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getting",{"_index":1339,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["ghcr.io/open",{"_index":1952,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":2105,"title":{},"body":{"properties.html":{}}}],["github",{"_index":465,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"changelog.html":{}}}],["granted",{"_index":2032,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2087,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["guard",{"_index":1532,"title":{},"body":{"changelog.html":{}}}],["guarded",{"_index":1027,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":1523,"title":{},"body":{"changelog.html":{}}}],["guide",{"_index":2009,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":2010,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1302,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":1521,"title":{},"body":{"changelog.html":{}}}],["has_stars_data",{"_index":667,"title":{},"body":{"entities/DbUser.html":{}}}],["hasnextpage",{"_index":806,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":807,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":1495,"title":{},"body":{"changelog.html":{}}}],["health",{"_index":710,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":756,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":722,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":719,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":708,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":9,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":713,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":717,"title":{},"body":{"controllers/HealthController.html":{}}}],["hereby",{"_index":2031,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":1446,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":1464,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":2072,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":2101,"title":{},"body":{"properties.html":{}}}],["host",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["hot",{"_index":1526,"title":{},"body":{"changelog.html":{}}}],["http",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["httpcode",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":720,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":89,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["https://app.opensauced.pizza",{"_index":593,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://app.opensauced.pizza'})@column({type",{"_index":566,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://github.com/open",{"_index":467,"title":{},"body":{"entities/DbContribution.html":{},"properties.html":{}}}],["httpstatus",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apiokresponse({type",{"_index":899,"title":{},"body":{"controllers/RepoController.html":{}}}],["identifier",{"_index":446,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identify",{"_index":517,"title":{},"body":{"entities/DbRepo.html":{}}}],["ignore",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":2002,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":1779,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1351,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":367,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":2063,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":1372,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":1797,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":2057,"title":{},"body":{"license.html":{}}}],["including",{"_index":1967,"title":{},"body":{"index.html":{},"license.html":{}}}],["increase",{"_index":1391,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":165,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1237,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":530,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["information",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["information'})@apiokresponse({type",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["inherited",{"_index":311,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["initial",{"_index":1836,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":330,"title":{"injectables/ContributionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":331,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectrepository",{"_index":342,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":350,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbrepo",{"_index":947,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":1191,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":1163,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":1216,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":1330,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbuser",{"_index":1298,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":981,"title":{},"body":{"injectables/RepoService.html":{}}}],["insights",{"_index":703,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["insights_role",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insights_role_id",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["inspection",{"_index":1727,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":1911,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1894,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1974,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1710,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["integration",{"_index":1413,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":2099,"title":{},"body":{"properties.html":{}}}],["interface",{"_index":835,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":836,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["is_accepted",{"_index":633,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_fork",{"_index":496,"title":{},"body":{"entities/DbRepo.html":{}}}],["is_onboarded",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":668,"title":{},"body":{"entities/DbUser.html":{}}}],["is_private",{"_index":669,"title":{},"body":{"entities/DbUser.html":{}}}],["is_waitlisted",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":797,"title":{},"body":{"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":790,"title":{},"body":{"classes/PageDto.html":{}}}],["isenum",{"_index":320,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":329,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":852,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":929,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":845,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["issues",{"_index":497,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["item",{"_index":880,"title":{},"body":{"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":883,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":361,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/RepoService.html":{}}}],["items",{"_index":815,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":591,"title":{},"body":{"entities/DbRepo.html":{}}}],["javascript'})@column({type",{"_index":539,"title":{},"body":{"entities/DbRepo.html":{}}}],["job",{"_index":1660,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":1785,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":2014,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":474,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["js",{"_index":1297,"title":{},"body":{"injectables/UserService.html":{}}}],["json.stringify(parameters",{"_index":407,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["jwt",{"_index":1261,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":1907,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":2100,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2062,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":1900,"title":{},"body":{"index.html":{}}}],["language",{"_index":498,"title":{},"body":{"entities/DbRepo.html":{}}}],["last",{"_index":449,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_fetched_contributors_at",{"_index":499,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_merged_at",{"_index":327,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["latest",{"_index":1497,"title":{},"body":{"changelog.html":{}}}],["leave",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":961,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":959,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":960,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":420,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["level",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["levelfirst",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":1941,"title":{},"body":{"index.html":{}}}],["liability",{"_index":2076,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2073,"title":{},"body":{"license.html":{}}}],["lib",{"_index":1935,"title":{},"body":{"index.html":{}}}],["license",{"_index":500,"title":{"license.html":{}},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":295,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{}}}],["limit(pageoptionsdto.limit",{"_index":360,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":2040,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2064,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1405,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{}}}],["link",{"_index":1539,"title":{},"body":{"changelog.html":{}}}],["linked",{"_index":565,"title":{},"body":{"entities/DbRepo.html":{}}}],["links",{"_index":1633,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":1451,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":1365,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":1954,"title":{},"body":{"index.html":{}}}],["list",{"_index":1505,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listing",{"_index":860,"title":{},"body":{"controllers/RepoContributionsController.html":{},"changelog.html":{}}}],["live",{"_index":1885,"title":{},"body":{"index.html":{}}}],["load",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":969,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":972,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":973,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":971,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":970,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":1485,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["localhost",{"_index":1910,"title":{},"body":{"index.html":{}}}],["localhost:54321",{"_index":1986,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1985,"title":{},"body":{"index.html":{}}}],["log",{"_index":369,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(level",{"_index":378,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["logger(`http",{"_index":764,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":366,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":763,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":389,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:16",{"_index":392,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":384,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:24",{"_index":395,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":382,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:39",{"_index":397,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":377,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:8",{"_index":386,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":765,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["loggermodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":1355,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["logic",{"_index":1934,"title":{},"body":{"index.html":{}}}],["login",{"_index":670,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["logmigration",{"_index":370,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":383,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery",{"_index":371,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":385,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":372,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":388,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":373,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":391,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild",{"_index":374,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":394,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["machines",{"_index":1895,"title":{},"body":{"index.html":{}}}],["main",{"_index":1492,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":1377,"title":{},"body":{"changelog.html":{}}}],["managed",{"_index":1502,"title":{},"body":{"changelog.html":{}}}],["managing",{"_index":1981,"title":{},"body":{"index.html":{}}}],["manual",{"_index":1456,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":1576,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":473,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["matching",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":832,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":846,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(500",{"_index":851,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":309,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["maxqueryexecutiontime",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["mechanics",{"_index":1417,"title":{},"body":{"changelog.html":{}}}],["memory",{"_index":727,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":723,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":1384,"title":{},"body":{"changelog.html":{}}}],["merchantability",{"_index":2066,"title":{},"body":{"license.html":{}}}],["merge",{"_index":450,"title":{},"body":{"entities/DbContribution.html":{},"license.html":{}}}],["message",{"_index":380,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["messageformat",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":786,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":348,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"injectables/RepoService.html":{}}}],["meta.dto.ts",{"_index":805,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":820,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":818,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":824,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":814,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":811,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":822,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1643,"title":{},"body":{"changelog.html":{}}}],["method",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["methods",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":1363,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":1476,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["migrations",{"_index":1982,"title":{},"body":{"index.html":{}}}],["min",{"_index":847,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":850,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimal",{"_index":1352,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":849,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minor",{"_index":1796,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1876,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1964,"title":{},"body":{"index.html":{}}}],["mit",{"_index":592,"title":{},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["mit'})@column({type",{"_index":546,"title":{},"body":{"entities/DbRepo.html":{}}}],["mkdocs",{"_index":1705,"title":{},"body":{"changelog.html":{}}}],["mocking",{"_index":1945,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1921,"title":{},"body":{"index.html":{}}}],["model",{"_index":482,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":2042,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1593,"title":{},"body":{"changelog.html":{}}}],["mount",{"_index":1754,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":1720,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":1932,"title":{},"body":{"index.html":{}}}],["much",{"_index":1455,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1589,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":1442,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":1890,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1939,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1782,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestjs",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/utils/cli",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["nestjs/passport",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":481,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["nestjs/terminus",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":398,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(\"sql",{"_index":376,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":766,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":1253,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":1306,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":518,"title":{},"body":{"entities/DbRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"index.html":{}}}],["nextfunction",{"_index":762,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":1841,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":1896,"title":{},"body":{"index.html":{}}}],["non",{"_index":1445,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":2070,"title":{},"body":{"license.html":{}}}],["notable",{"_index":1343,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":1904,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":946,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":1173,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":2055,"title":{},"body":{"license.html":{}}}],["now",{"_index":441,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["npm",{"_index":1839,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":1897,"title":{},"body":{"index.html":{}}}],["null",{"_index":1301,"title":{},"body":{"injectables/UserService.html":{}}}],["number",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["oas3",{"_index":2093,"title":{},"body":{"properties.html":{}}}],["obtaining",{"_index":2036,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":1536,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":2025,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":359,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["onboarded",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onetomany",{"_index":575,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["open",{"_index":519,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_issues",{"_index":671,"title":{},"body":{"entities/DbUser.html":{}}}],["openapi",{"_index":1572,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":1962,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1527,"title":{},"body":{"changelog.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operationid",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["opted",{"_index":683,"title":{},"body":{"entities/DbUser.html":{}}}],["optional",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["options",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["options.dto",{"_index":324,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["options.dto.ts",{"_index":289,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:15",{"_index":842,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":305,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":840,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":923,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":841,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":844,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.interface",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["order",{"_index":1461,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["orderby",{"_index":294,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":984,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":296,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["orderdirectionenum",{"_index":313,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":985,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":314,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["orderfield",{"_index":353,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["origin",{"_index":466,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":774,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":2080,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1738,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":1661,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":2089,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":2018,"title":{},"body":{"index.html":{}}}],["owner",{"_index":570,"title":{},"body":{"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owner}/${repo",{"_index":979,"title":{},"body":{"injectables/RepoService.html":{}}}],["p",{"_index":1948,"title":{},"body":{"index.html":{}}}],["package",{"_index":2091,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["page",{"_index":288,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["pagecount",{"_index":808,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":343,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":364,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pagemetadto",{"_index":347,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":795,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":810,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":291,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":829,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":354,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":357,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":827,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto:15",{"_index":318,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pageoptionsdto:27",{"_index":312,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pageoptionsdto:32",{"_index":316,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pages",{"_index":823,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginated",{"_index":873,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":894,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["paginating",{"_index":861,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":1812,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":870,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"id",{"_index":879,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"owner",{"_index":885,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":886,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["parameters.dto",{"_index":825,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":837,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["particular",{"_index":2068,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1260,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1258,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["per",{"_index":819,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":1847,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":2030,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2049,"title":{},"body":{"license.html":{}}}],["person",{"_index":2035,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2050,"title":{},"body":{"license.html":{}}}],["pid,hostname,context",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["pipelines",{"_index":1853,"title":{},"body":{"changelog.html":{}}}],["pizzas",{"_index":1435,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":2008,"title":{},"body":{"index.html":{}}}],["port",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["portions",{"_index":2059,"title":{},"body":{"license.html":{}}}],["post",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/onboarding",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/waitlist",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":1973,"title":{},"body":{"index.html":{}}}],["postonboarding",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":1534,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["prefix",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["prerequisites",{"_index":1889,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":1800,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":1947,"title":{},"body":{"index.html":{}}}],["previous",{"_index":813,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["primarycolumn",{"_index":472,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["primarycolumn(\"bigint",{"_index":486,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["primarygeneratedcolumn",{"_index":610,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["print",{"_index":1668,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":2011,"title":{},"body":{"index.html":{}}}],["process",{"_index":1737,"title":{},"body":{"changelog.html":{}}}],["process.env.domain",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":1267,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":1270,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":1265,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":1770,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["profile",{"_index":684,"title":{},"body":{"entities/DbUser.html":{}}}],["programming",{"_index":538,"title":{},"body":{"entities/DbRepo.html":{}}}],["project",{"_index":516,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["promise",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proper",{"_index":1642,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":1717,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":292,"title":{"properties.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":483,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["provide",{"_index":1674,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":2060,"title":{},"body":{"license.html":{}}}],["providers",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["public",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["public.users",{"_index":1477,"title":{},"body":{"changelog.html":{}}}],["publicuser",{"_index":1303,"title":{},"body":{"injectables/UserService.html":{}}}],["publish",{"_index":2043,"title":{},"body":{"license.html":{}}}],["pull",{"_index":425,"title":{},"body":{"entities/DbContribution.html":{},"changelog.html":{},"index.html":{}}}],["purpose",{"_index":2069,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1695,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":549,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["pushed_at",{"_index":501,"title":{},"body":{"entities/DbRepo.html":{}}}],["put",{"_index":1020,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["put(\"/:id/star",{"_index":1029,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":1067,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":1105,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":1140,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":1031,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":1070,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":1107,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":1142,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1013,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1058,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1096,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1132,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1017,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1062,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1099,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1135,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["quality",{"_index":1953,"title":{},"body":{"index.html":{}}}],["query",{"_index":387,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":351,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getcount",{"_index":362,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["querybuilder.getmany",{"_index":363,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["querybuilder.getone",{"_index":976,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.where(\"id",{"_index":1300,"title":{},"body":{"injectables/UserService.html":{}}}],["questions",{"_index":2013,"title":{},"body":{"index.html":{}}}],["rate",{"_index":1404,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":1744,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":1940,"title":{},"body":{"index.html":{}}}],["readme",{"_index":1437,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":293,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{}}}],["received",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1368,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":1538,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":456,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["registration",{"_index":1229,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":1653,"title":{},"body":{"changelog.html":{}}}],["relation",{"_index":1570,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":1819,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":1588,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1409,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["remaining",{"_index":1581,"title":{},"body":{"changelog.html":{}}}],["remote",{"_index":1975,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1444,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["removed",{"_index":1003,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removes",{"_index":997,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["rename",{"_index":1560,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":282,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":904,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":493,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":455,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":918,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":611,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["repo.id",{"_index":963,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":616,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":601,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":631,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":622,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":650,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":641,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotouservotes",{"_index":665,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":656,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":906,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{}}}],["repo.to.user.stargazers.entity",{"_index":579,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.stars.entity",{"_index":577,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.submissions.entity",{"_index":578,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.votes.entity",{"_index":576,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.user",{"_index":693,"title":{},"body":{"entities/DbUser.html":{}}}],["repo/dtos/repo",{"_index":1026,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo/entities/repo.entity",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["repo/repo.service",{"_index":280,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo_id",{"_index":411,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":278,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":888,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repoid",{"_index":339,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repomodule",{"_index":10,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":303,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":921,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repopageoptionsdto",{"_index":892,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["reporepository",{"_index":935,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":1929,"title":{},"body":{"index.html":{}}}],["repos",{"_index":580,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["reposervice",{"_index":276,"title":{"injectables/RepoService.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"coverage.html":{},"overview.html":{}}}],["repository",{"_index":335,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":987,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":1035,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":1185,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":1156,"title":{},"body":{"injectables/StarService.html":{}}}],["reposubmitcontroller",{"_index":1075,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":1210,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotouserstargazers",{"_index":502,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstargazers.repo",{"_index":552,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstargazers.user",{"_index":695,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouserstars",{"_index":503,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstars.repo",{"_index":554,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstars.user",{"_index":697,"title":{},"body":{"entities/DbUser.html":{}}}],["repotousersubmissions",{"_index":504,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotousersubmissions.repo",{"_index":556,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotousersubmissions.user",{"_index":699,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouservotes",{"_index":505,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouservotes.repo",{"_index":558,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouservotes.user",{"_index":701,"title":{},"body":{"entities/DbUser.html":{}}}],["repovotecontroller",{"_index":1111,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":1324,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":2024,"title":{},"body":{"index.html":{}}}],["representing",{"_index":433,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":1255,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["request",{"_index":760,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user?.user_metadata.sub",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestmethod",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":426,"title":{},"body":{"entities/DbContribution.html":{}}}],["requirements",{"_index":1849,"title":{},"body":{"changelog.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"index.html":{},"overview.html":{}}}],["response",{"_index":761,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["response.decorator",{"_index":874,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["response.decorator.ts",{"_index":1862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":1227,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":1244,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":1242,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":1234,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":1231,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":1241,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":1232,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":1243,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":1238,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":1239,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":1236,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":1235,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.on(\"finish",{"_index":773,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":2039,"title":{},"body":{"license.html":{}}}],["results",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve/update",{"_index":1421,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":1769,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":1423,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":2041,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":1597,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["route",{"_index":1598,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":1931,"title":{},"body":{"index.html":{}}}],["rules",{"_index":1528,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1691,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":1748,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":1741,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced",{"_index":589,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced'})@column({type",{"_index":524,"title":{},"body":{"entities/DbRepo.html":{}}}],["sauced/api.opensauced.pizza",{"_index":1342,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":2102,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":2106,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":2104,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":492,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":468,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/open",{"_index":523,"title":{},"body":{"entities/DbRepo.html":{}}}],["sauced/triage",{"_index":1902,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1573,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":1594,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":1780,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1789,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":1840,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["see",{"_index":2003,"title":{},"body":{"index.html":{}}}],["select",{"_index":444,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":952,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(['repo.id",{"_index":958,"title":{},"body":{"injectables/RepoService.html":{}}}],["selectquerybuilder",{"_index":942,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":2047,"title":{},"body":{"license.html":{}}}],["servers",{"_index":1400,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":1585,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["settings",{"_index":1980,"title":{},"body":{"index.html":{}}}],["shall",{"_index":2056,"title":{},"body":{"license.html":{}}}],["short",{"_index":515,"title":{},"body":{"entities/DbRepo.html":{}}}],["sign",{"_index":1240,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["simple",{"_index":1530,"title":{},"body":{"changelog.html":{}}}],["simplest",{"_index":1997,"title":{},"body":{"index.html":{}}}],["singleline",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":839,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["slow",{"_index":1374,"title":{},"body":{"changelog.html":{}}}],["soft",{"_index":1541,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":1892,"title":{},"body":{"index.html":{},"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["sources",{"_index":533,"title":{},"body":{"entities/DbRepo.html":{}}}],["spdx",{"_index":545,"title":{},"body":{"entities/DbRepo.html":{}}}],["spec",{"_index":1734,"title":{},"body":{"changelog.html":{}}}],["split",{"_index":1553,"title":{},"body":{"changelog.html":{}}}],["sql",{"_index":1373,"title":{},"body":{"changelog.html":{}}}],["src/.../api",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":1878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../endpoint.config.ts",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1884,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":1881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":2112,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:109",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:83",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":1226,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":1245,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":1248,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":1251,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":1257,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":1254,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":1882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":1861,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/page",{"_index":804,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":784,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":793,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":789,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/middleware/database",{"_index":365,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":757,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":1866,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":1868,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":409,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":457,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":448,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":459,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":429,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":453,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":442,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":464,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":445,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":422,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":469,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":277,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":332,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":336,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":340,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":287,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":853,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":709,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":715,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":718,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":755,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1871,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/repo/dtos/repo",{"_index":920,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":494,"title":{},"body":{"entities/DbRepo.html":{},"coverage.html":{}}}],["src/repo/entities/repo.entity.ts:103",{"_index":513,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:113",{"_index":564,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:123",{"_index":551,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:131",{"_index":544,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:138",{"_index":514,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:148",{"_index":548,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:158",{"_index":525,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:165",{"_index":521,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:175",{"_index":541,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:185",{"_index":547,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:195",{"_index":567,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:203",{"_index":569,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:207",{"_index":512,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:211",{"_index":559,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:215",{"_index":555,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:219",{"_index":557,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:223",{"_index":553,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:36",{"_index":527,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:46",{"_index":572,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:56",{"_index":537,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:66",{"_index":561,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:76",{"_index":574,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:86",{"_index":563,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:93",{"_index":535,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":595,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":600,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":609,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":604,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":597,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":605,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":598,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":607,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":602,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":617,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":621,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":628,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":624,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":619,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":625,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":620,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":627,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":623,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":632,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":637,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":647,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":643,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":640,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":635,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":644,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":636,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":646,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":642,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":651,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":655,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":662,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":658,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":653,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":659,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":654,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":661,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":657,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":889,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:21",{"_index":901,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":905,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:48",{"_index":896,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":917,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":930,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:12",{"_index":934,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":944,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:28",{"_index":936,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:52",{"_index":939,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:67",{"_index":940,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:82",{"_index":938,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":988,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":1149,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":1151,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":1157,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":1161,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":1159,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":1155,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":1036,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":1178,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":1180,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":1186,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":1190,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":1188,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":1184,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/submit/repo",{"_index":1076,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":1203,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":1205,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":1211,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":1215,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":1213,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":1209,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/user/user.entity.ts",{"_index":666,"title":{},"body":{"entities/DbUser.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:102",{"_index":679,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:109",{"_index":688,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:116",{"_index":705,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:120",{"_index":694,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:124",{"_index":702,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:128",{"_index":698,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:132",{"_index":700,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:136",{"_index":696,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:27",{"_index":677,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:37",{"_index":692,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:44",{"_index":675,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:51",{"_index":687,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:58",{"_index":681,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:68",{"_index":672,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:78",{"_index":706,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:88",{"_index":689,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:95",{"_index":673,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.module.ts",{"_index":1278,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1281,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":1288,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1291,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":1290,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1293,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":1295,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1286,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":1112,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":1317,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":1319,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":1325,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":1329,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:45",{"_index":1327,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":1323,"title":{},"body":{"injectables/VoteService.html":{}}}],["stable",{"_index":1783,"title":{},"body":{"changelog.html":{}}}],["staff",{"_index":639,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":618,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":999,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":1150,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":989,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":1004,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":1007,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":1011,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":1015,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":1018,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":1023,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":1153,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":1160,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":1168,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":1169,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":596,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":1179,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":1037,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":1049,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":1052,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":1056,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":1060,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":1063,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":1065,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":1182,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":1189,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":1506,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":1195,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":1196,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":12,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":1041,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":1057,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":1042,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":1061,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":968,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":927,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":1064,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":11,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":993,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":1012,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":994,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":1016,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":1010,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":506,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":928,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":1022,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":1914,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1917,"title":{},"body":{"index.html":{}}}],["started",{"_index":1340,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":771,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1856,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1686,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":532,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":775,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":776,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":1531,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":1555,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":381,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(user_name",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":375,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":396,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["structure",{"_index":1766,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":2098,"title":{},"body":{"properties.html":{}}}],["studio",{"_index":1984,"title":{},"body":{"index.html":{}}}],["stuff",{"_index":1457,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":1558,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":1360,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["subdomain",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":2052,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2045,"title":{},"body":{"license.html":{}}}],["submission",{"_index":634,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":1085,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":967,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":926,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":1103,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":1204,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":1077,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":1087,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":1090,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":1094,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":1097,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":1100,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":1102,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":1207,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":1214,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":1222,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":1220,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":1221,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":13,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":1081,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":1095,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":1082,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":1098,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":1101,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":1093,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":945,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount",{"_index":932,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":941,"title":{},"body":{"injectables/RepoService.html":{}}}],["subscribers",{"_index":507,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["substantial",{"_index":2058,"title":{},"body":{"license.html":{}}}],["successful",{"_index":1483,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suite",{"_index":1918,"title":{},"body":{"index.html":{}}}],["summary",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["supabase",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":1296,"title":{},"body":{"injectables/UserService.html":{}}}],["supabase>=0.18.0",{"_index":1899,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":213,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":2111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":1262,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":209,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":1269,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":1266,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":1268,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":265,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":1264,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1263,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":1274,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.validate(user",{"_index":1273,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["support",{"_index":2084,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2085,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1402,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":1398,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1350,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":788,"title":{},"body":{"classes/PageDto.html":{},"injectables/RepoService.html":{},"index.html":{}}}],["table",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["tables",{"_index":1577,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1875,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1682,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":1656,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1542,"title":{},"body":{"changelog.html":{}}}],["take",{"_index":1708,"title":{},"body":{"changelog.html":{}}}],["target",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["targets",{"_index":1410,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":955,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1903,"title":{},"body":{"index.html":{}}}],["tech",{"_index":1709,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":2108,"title":{},"body":{"properties.html":{}}}],["temporary",{"_index":1468,"title":{},"body":{"changelog.html":{}}}],["terminusmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":1700,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":1930,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1659,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":1928,"title":{},"body":{"index.html":{}}}],["text",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":862,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":895,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["thing",{"_index":1983,"title":{},"body":{"index.html":{}}}],["this.basequerybuilder",{"_index":974,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":739,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":741,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":754,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":746,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":750,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":752,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":748,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":744,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":734,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":736,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":352,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":882,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.data",{"_index":802,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":732,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":740,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":737,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findonebyid(id",{"_index":1304,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":834,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":833,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":731,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":753,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":745,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":749,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":751,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":747,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":743,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.itemcount",{"_index":830,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":828,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger.debug(message",{"_index":406,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":402,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":778,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":400,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":783,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":405,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":781,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":404,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":733,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":735,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":803,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":826,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":831,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":957,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":913,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":881,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":887,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":1192,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":1197,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":1198,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":1199,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":1164,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":1171,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":1172,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":1174,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":1217,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":1223,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":1224,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":1225,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":1331,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":1336,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":1337,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":1338,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":1073,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":1069,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":1033,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":1030,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":401,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":1109,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":1106,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":965,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.userrepository.create",{"_index":1307,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":1299,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":1144,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":1141,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":738,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":977,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":393,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["timeout",{"_index":1375,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":432,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["tld",{"_index":1826,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_timestamp(0",{"_index":543,"title":{},"body":{"entities/DbRepo.html":{}}}],["token",{"_index":1698,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":1942,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2079,"title":{},"body":{"license.html":{}}}],["total",{"_index":423,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["transformer",{"_index":799,"title":{},"body":{"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1416,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":792,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":791,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{}}}],["type",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2109,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":721,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":368,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":284,"title":{},"body":{"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":919,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forrootasync",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1579,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":1965,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":1801,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1977,"title":{},"body":{"index.html":{}}}],["unable",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["unblock",{"_index":1852,"title":{},"body":{"changelog.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":304,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":315,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":922,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["undo",{"_index":1596,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":1048,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":1072,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":1045,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unique",{"_index":414,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":1938,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":399,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/SupabaseStrategy.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1511,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["updated",{"_index":2027,"title":{},"body":{"index.html":{}}}],["updated_at",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":477,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["updateonboarding",{"_index":1283,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":1292,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatewaitliststatus",{"_index":1284,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":1294,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":412,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"changelog.html":{}}}],["url(`https://${subdomain",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":1629,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":758,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":759,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["usefactory",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["useguards(supabaseguard",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["user",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":678,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apiokresponse({type",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.entity",{"_index":1279,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.repos",{"_index":594,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repos)@joincolumn({name",{"_index":568,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repotouserstargazers",{"_index":615,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":606,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":630,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":626,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":649,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":645,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":664,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":660,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.service",{"_index":1280,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.entity",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_id",{"_index":508,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["user_metadata",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodule",{"_index":14,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["userrelations",{"_index":937,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":980,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepository",{"_index":1287,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"changelog.html":{},"index.html":{}}}],["users_to_repos_stargazers",{"_index":612,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":629,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":648,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":663,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["userservice",{"_index":216,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utc:hh:mm:ss.l",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":769,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["validate",{"_index":1250,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":1256,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":798,"title":{},"body":{"classes/PageDto.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["value",{"_index":299,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1583,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":1675,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":1665,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":419,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["verify",{"_index":1831,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":1842,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":1499,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":1976,"title":{},"body":{"index.html":{}}}],["videos",{"_index":2017,"title":{},"body":{"index.html":{}}}],["view",{"_index":1469,"title":{},"body":{"changelog.html":{}}}],["visual",{"_index":2023,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":1470,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":2021,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":2026,"title":{},"body":{"index.html":{}}}],["visually",{"_index":1989,"title":{},"body":{"index.html":{}}}],["vite",{"_index":1488,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":1944,"title":{},"body":{"index.html":{}}}],["void",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":1721,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":1755,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":491,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":417,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{}}}],["vortex/api.opensauced.pizza",{"_index":1806,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":1233,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":652,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":1121,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":1318,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":1113,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":1123,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":1126,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":1130,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":1133,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":1136,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":1138,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":1321,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":1328,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":1129,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":1334,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":1335,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":15,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":1117,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":1131,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":1118,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":1134,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":966,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":925,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":1137,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["waitlist",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":379,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["warranties",{"_index":2065,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2061,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1920,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":509,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":1927,"title":{},"body":{"index.html":{}}}],["way",{"_index":1998,"title":{},"body":{"index.html":{}}}],["web",{"_index":711,"title":{},"body":{"controllers/HealthController.html":{}}}],["where(\"contribution.repo_id",{"_index":355,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":1193,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":1166,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":1218,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":1332,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":978,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":975,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":954,"title":{},"body":{"injectables/RepoService.html":{}}}],["whether",{"_index":682,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":1905,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":1165,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":439,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"license.html":{}}}],["work",{"_index":1591,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":1414,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":1522,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":1937,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1454,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yaml",{"_index":1775,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":341,"title":{},"body":{"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{}}}],["youtube",{"_index":2019,"title":{},"body":{"index.html":{}}}],["zone",{"_index":440,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { RepoModule } from \"./repo/repo.module\";\nimport apiConfig from \"./config/api.config\";\nimport dbConfig from \"./config/database.config\";\nimport endpointConfig from \"./config/endpoint.config\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { version } from \"../package.json\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        apiConfig,\n        dbConfig,\n        endpointConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: configService.get(\"db.connection\"),\n        host: configService.get(\"db.host\"),\n        port: configService.get(\"db.port\"),\n        username: configService.get(\"db.username\"),\n        password: configService.get(\"db.password\"),\n        database: configService.get(\"db.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n        ],\n        synchronize: false,\n        logger: (new DatabaseLoggerMiddleware),\n        maxQueryExecutionTime: configService.get(\"db.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {\n  constructor (private dataSource: DataSource) {}\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v${version.charAt(0)}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (private userService: UserService) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let onboarded = false;\n    let insights_role = 10;\n    let waitlisted = false;\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role_id } = await this.userService.checkAddUser(user);\n\n      onboarded = is_onboarded;\n      insights_role = insights_role_id;\n      waitlisted = is_waitlisted;\n    } catch (e) {\n      // leave onboarded as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      is_onboarded: onboarded,\n      insights_role,\n      is_waitlisted: waitlisted,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateOnboarding(userId);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [PassportModule, UserModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nContributionService \n\nContributionService \n\n\n\nContributionModule\n\nContributionModule\n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbContribution,\n  ])],\n  controllers: [RepoContributionsController],\n  providers: [RepoService, ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution)\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger(\"SQL\")\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger = new NestLogger(\"SQL\");\n\n  logQuery (query: string, parameters?: unknown[]) {\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[]) {\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[]) {\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string) {\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepo.html":{"url":"entities/DbRepo.html","title":"entity - DbRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributions\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_fork\n                            \n                            \n                                    Public\n                                issues\n                            \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_contributors_at\n                            \n                            \n                                    Public\n                                license\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pushed_at\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                stars\n                            \n                            \n                                    Public\n                                subscribers\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                watchers\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbContribution[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, contribution => contribution.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository short description', example: '🍕This is a project to identify your next open source contribution! 🍕'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:165\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository full name', example: 'open-sauced/open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:158\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_fork\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating fork status, false for sources', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of issues', example: 274})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository programming language', example: 'JavaScript'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:175\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_contributors_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        license\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository SPDX license', example: 'MIT'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository unique name', example: 'open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pushed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last push', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:219\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:211\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of stars', example: 5})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of subscribers', example: 11756})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository GitHub linked URL', example: 'https://app.opensauced.pizza'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:195\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Owner user identifier', example: 57568598})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        watchers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of watchers', example: 5473})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:76\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  JoinColumn,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbContribution } from \"../../contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({\n  name: \"repos\",\n  orderBy: {\n    stars: \"DESC\",\n    name: \"ASC\",\n  },\n})\nexport class DbRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Owner user identifier\",\n    example: 57568598,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of issues\",\n    example: 274,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public issues: number;\n\n  @ApiModelProperty({\n    description: \"Total number of stars\",\n    example: 5,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public stars: number;\n\n  @ApiModelProperty({\n    description: \"Total number of watchers\",\n    example: 5473,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public watchers: number;\n\n  @ApiModelProperty({\n    description: \"Total number of subscribers\",\n    example: 11756,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public subscribers: number;\n\n  @ApiModelProperty({\n    description: \"Flag indicating fork status, false for sources\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_fork: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last push\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pushed_at?: Date;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_contributors_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Repository unique name\",\n    example: \"open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Repository full name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public full_name: string;\n\n  @ApiModelProperty({\n    description: \"Repository short description\",\n    example: \"🍕This is a project to identify your next open source contribution! 🍕\",\n  })\n  @Column(\"text\")\n  public description: string;\n\n  @ApiModelProperty({\n    description: \"Repository programming language\",\n    example: \"JavaScript\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public language: string;\n\n  @ApiModelProperty({\n    description: \"Repository SPDX license\",\n    example: \"MIT\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public license: string;\n\n  @ApiModelProperty({\n    description: \"Repository GitHub linked URL\",\n    example: \"https://app.opensauced.pizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbContribution, contribution => contribution.repo)\n  public contributions: DbContribution[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.repo)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.repo)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.repo)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.repo)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUser.html":{"url":"entities/DbUser.html","title":"entity - DbUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                has_stars_data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_onboarded\n                            \n                            \n                                    Public\n                                is_open_sauced_member\n                            \n                            \n                                    Public\n                                is_private\n                            \n                            \n                                    Public\n                                is_waitlisted\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                open_issues\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        has_stars_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({default: false, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's onboarding status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_open_sauced_member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating app.opensauced user status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating whether user opted to have a private profile (beta feature', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's waitlist status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User unique login name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open_issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of open issues user has across public activity', example: 498})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repo => repo.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insights Role', example: 10})@Column({default: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  OneToMany,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users\" })\nexport class DbUser extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of open issues user has across public activity\",\n    example: 498,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public open_issues: number;\n\n  @ApiHideProperty()\n  @Column({\n    default: false,\n    select: false,\n  })\n  public has_stars_data: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating whether user opted to have a private profile (beta feature\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_private: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating app.opensauced user status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_open_sauced_member: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"User unique login name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public login: string;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's onboarding status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_onboarded: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's waitlist status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_waitlisted: boolean;\n\n  @ApiModelProperty({\n    description: \"Insights Role\",\n    example: 10,\n  })\n  @Column({ default: 10 })\n  public role: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepo, repo => repo.user)\n  public repos: DbRepo[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.user)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.user)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.user)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.user)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsInt, IsOptional, Max, Min } from \"class-validator\";\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(500)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\") id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoService \n\nRepoService \n\n\n\nRepoModule\n\nRepoModule\n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo])],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo)\n    private repoRepository: Repository,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\n\nStarService \n\nStarService \n\n\n\nStarModule\n\nStarModule\n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStars,\n  ])],\n  controllers: [RepoStarController],\n  providers: [RepoService, StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars)\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nStargazeService \n\nStargazeService \n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStargazers,\n  ])],\n  controllers: [RepoStargazeController],\n  providers: [RepoService, StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers)\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_SubmitModule_exports\n\n\n\n\nSubmitService \n\nSubmitService \n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nRepoService\n\nRepoService\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserSubmissions,\n  ])],\n  controllers: [RepoSubmitController],\n  providers: [RepoService, SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions)\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n    ]),\n  ],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser)\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const { user_metadata: { sub: id, user_name } } = user;\n\n    try {\n      const publicUser = await this.findOneById(id as number);\n\n      return publicUser;\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id: id as number,\n        login: user_name as string,\n        created_at: new Date().toString(), // eslint-disable-line\n      });\n\n      // return new user\n      return newUser;\n    }\n  }\n\n  async updateOnboarding (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_onboarded: true, is_waitlisted: false });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nVoteService \n\nVoteService \n\n\n\nVoteModule\n\nVoteModule\n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nRepoService\n\nRepoService\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserVotes,\n  ])],\n  controllers: [RepoVoteController],\n  providers: [RepoService, VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes)\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Nest Supabase API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\nsupabase>=0.18.0\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database commands\nThe API is configured to connect to a local Docker backed PostGres instance however \nyou can also connect to a remote Supabase instance by logging in via the UI and \ncopying the connection string from the settings page.\nManaging supabase migrations\nFirst thing we have to do for local development is start the studio locally at localhost:54321:\nnpm run db:startMake changes\nIf we are adding a new table structure, first do it visually in the Supabase Studio and test locally.\nCheck the migration difference with the following command:\nnpm run db:changesIf everything is fine we can run the following command to apply the changes to the database:\nnpm run db:commit add_table_nameTest changes\nSimplest way to test the migrations are working is to reset the local database:\nnpm run db:resetPush changes\nIf everything is fine we can push the changes to the remote database:\nnpm run db:push🔑 Supabase structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.15.0-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user?.user_metadata.sub as string;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
