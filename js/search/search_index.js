var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.017,1,3.034]],["body/modules/AppModule.html",[0,1.141,1,6.185,2,1.167,3,1.85,4,2.757,5,2.757,6,4.667,7,0.012,8,4.667,9,4.145,10,4.667,11,4.667,12,4.667,13,4.667,14,4.667,15,4.386,16,4.667,17,4.667,18,4.145,19,4.386,20,4.667,21,1.917,22,1.25,23,1.167,24,0.098,25,0.098,26,0.079,27,3.152,28,2.522,29,0.795,30,4.663,31,3.152,32,6.134,33,0.303,34,3.152,35,0.748,36,0.592,37,0.374,38,0.385,39,5.55,40,0.795,41,2.302,42,0.295,43,3.152,44,0.477,45,1.511,46,0.959,47,5.55,48,5.005,49,2.302,50,4.663,51,3.152,52,4.078,53,2.496,54,3.152,55,2.302,56,4.078,57,5.55,58,0.846,59,4.663,60,3.152,61,3.152,62,2.496,63,2.496,64,2.496,65,3.152,66,4.663,67,3.152,68,4.663,69,3.152,70,4.663,71,3.152,72,4.663,73,3.152,74,3.152,75,1.512,76,1.511,77,2.065,78,1.906,79,2.435,80,2.757,81,2.331,82,2.146,83,2.331,84,2.146,85,2.331,86,2.146,87,2.331,88,2.146,89,3.152,90,3.152,91,3.152,92,3.152,93,3.152,94,3.152,95,2.496,96,2.302,97,3.152,98,4.663,99,2.496,100,2.757,101,3.405,102,3.152,103,3.152,104,2.549,105,3.152,106,2.82,107,3.152,108,2.331,109,0.889,110,2.82,111,2.757,112,2.82,113,2.984,114,3.152,115,2.496,116,1.809,117,3.152,118,3.405,119,2.757,120,2.984,121,2.496,122,2.677,123,3.152,124,2.146,125,3.152,126,2.757,127,3.152,128,3.521,129,3.152,130,4.663,131,3.152,132,3.152,133,3.152,134,2.757,135,3.152,136,2.146,137,3.152,138,3.152,139,3.152,140,2.302,141,3.152,142,3.152,143,1.85,144,1.091,145,3.152,146,2.146,147,1.022,148,3.152,149,3.152,150,4.663,151,3.152,152,3.152,153,3.152,154,3.152,155,2.757,156,3.152,157,3.152,158,2.496,159,3.152,160,3.152,161,3.152,162,3.152,163,3.152,164,3.152,165,3.152,166,3.152,167,3.152,168,3.152,169,3.152,170,3.152,171,3.152,172,2.496,173,2.496,174,2.757,175,2.496,176,3.152,177,2.496,178,2.302,179,0.929,180,1.344,181,0.108,182,0.037,183,0.795,184,0.795,185,3.152,186,3.152,187,0.007,188,0.007]],["title/controllers/AuthController.html",[189,1.151,190,3.034]],["body/controllers/AuthController.html",[7,0.012,24,0.075,25,0.075,26,0.06,29,0.955,33,0.619,35,1.528,36,0.872,37,0.618,38,0.787,40,1.625,42,0.263,44,0.363,55,1.752,77,2.356,78,1.451,108,1.199,109,1.584,110,2.288,112,1.451,147,1.227,179,0.707,181,0.083,182,0.028,183,0.605,184,1.342,187,0.005,188,0.005,189,0.664,190,2.763,191,2.098,192,1.104,193,3.191,194,0.183,195,2.195,196,4.686,197,5.791,198,5.791,199,5.791,200,5.791,201,5.791,202,5.791,203,2.399,204,5.634,205,1.151,206,2.399,207,3.784,208,3.592,209,3.486,210,4.873,211,2.399,212,2.399,213,2.399,214,2.622,215,2.399,216,2.399,217,3.784,218,4.653,219,4.686,220,4.686,221,5.327,222,2.763,223,2.399,224,2.399,225,1.043,226,5.287,227,3.218,228,2.399,229,5.571,230,3.623,231,5.017,232,3.239,233,2.399,234,2.562,235,2.399,236,2.399,237,3.885,238,2.399,239,2.399,240,5.295,241,4.19,242,2.399,243,3.922,244,4.653,245,3.784,246,4.099,247,4.686,248,2.399,249,2.399,250,4.19,251,2.399,252,3.623,253,2.399,254,2.399,255,2.399,256,4.875,257,1.752,258,2.399,259,2.399,260,2.399,261,1.9,262,1.752,263,1.377,264,3.832,265,3.885,266,3.219,267,2.956,268,3.2,269,1.104,270,0.535,271,1.104,272,2.098,273,1.535,274,2.399,275,4.229,276,2.399,277,2.399,278,2.69,279,2.098,280,2.999,281,2.098,282,2.834,283,2.098,284,2.834,285,2.098,286,4.686,287,2.098,288,2.098,289,2.098,290,1.752,291,2.399,292,2.399,293,2.399,294,1.023,295,2.399,296,3.698,297,3.087,298,2.399,299,2.031,300,3.191,301,3.784,302,3.309,303,3.309,304,1.354,305,1.614,306,3.309,307,4.686,308,1.112,309,2.997,310,4.686,311,1.752,312,2.098,313,1.633,314,0.858,315,1.633,316,1.752,317,2.577,318,2.763,319,3.309,320,2.577,321,2.577,322,2.577,323,2.577,324,2.421,325,1.891,326,2.158,327,2.399,328,1.633,329,1.752,330,2.399,331,1.528,332,2.399,333,2.399,334,2.399,335,2.399,336,1.372,337,2.399,338,2.399,339,2.399,340,0.624,341,2.399,342,2.399,343,2.399,344,2.399,345,2.399,346,2.997,347,2.399,348,4.099,349,0.587,350,2.399,351,2.399,352,2.399,353,2.399,354,2.399,355,2.399,356,2.399,357,2.399,358,2.399,359,2.399,360,2.399,361,2.399,362,3.784,363,2.399,364,2.399]],["title/modules/AuthModule.html",[0,1.017,6,2.83]],["body/modules/AuthModule.html",[0,1.593,2,1.894,3,2.584,6,5.855,7,0.012,9,4.815,18,4.815,19,5.095,21,2.678,22,2.03,23,1.894,24,0.16,25,0.16,26,0.128,28,2.678,42,0.284,44,0.775,95,4.052,109,0.975,110,3.094,111,4.475,115,4.052,179,1.92,180,2.778,181,0.176,182,0.06,187,0.009,188,0.009,190,5.232,271,3.881,272,4.475,365,4.475,366,4.475,367,4.475,368,4.475,369,5.095,370,5.741,371,5.117,372,2.884,373,6.513,374,4.052,375,5.117,376,5.117,377,4.475]],["title/modules/ContributionModule.html",[0,1.017,8,2.83]],["body/modules/ContributionModule.html",[0,1.684,2,2.069,3,2.731,7,0.012,8,5.717,21,2.83,22,2.217,23,2.069,24,0.174,25,0.174,26,0.139,28,2.298,42,0.284,44,0.847,45,2.679,46,1.701,75,2.232,76,2.679,79,3.594,179,2.029,180,2.936,181,0.192,182,0.065,187,0.01,188,0.01,340,1.455,372,3.049,378,4.889,379,4.889,380,4.889,381,5.458,382,3.347,383,5.59,384,5.447,385,4.427,386,2.919,387,4.889,388,5.59,389,3.056]],["title/classes/ContributionPageOptionsDto.html",[182,0.048,390,2.83]],["body/classes/ContributionPageOptionsDto.html",[7,0.012,24,0.153,25,0.153,26,0.122,33,0.714,37,0.595,38,0.993,42,0.242,181,0.218,182,0.074,187,0.009,188,0.009,194,0.375,205,1.327,225,0.865,270,1.094,304,2.269,305,2.705,390,4.319,391,1.947,392,5.023,393,2.189,394,2.969,395,2.607,396,2.638,397,1.371,398,2.84,399,5.564,400,3.836,401,4.319,402,6.089,403,2.577,404,3.419,405,6.145,406,4.319,407,4.784,408,4.631,409,4.909,410,4.909,411,3.641,412,4.319,413,3.368,414,3.343,415,3.343,416,4.784,417,3.585,418,4.033,419,2.969,420,3.343,421,3.585,422,3.343,423,3.585,424,4.058,425,3.887,426,4.319,427,2.563,428,2.563,429,1.88,430,4.631,431,4.631,432,5.023,433,5.023,434,4.909]],["title/injectables/ContributionService.html",[381,2.659,435,0.926]],["body/injectables/ContributionService.html",[7,0.012,24,0.155,25,0.155,26,0.124,29,1.614,33,0.615,35,1.517,36,0.811,37,0.513,38,0.782,40,1.255,42,0.28,44,0.753,46,1.513,58,1.335,79,2.597,144,1.721,147,2.074,181,0.171,182,0.058,183,1.614,184,1.255,187,0.009,188,0.009,194,0.379,195,1.958,214,2.214,225,0.964,299,2.349,326,2.142,331,1.18,381,4.093,385,3.939,390,5.082,393,1.466,396,2.368,402,3.939,405,4.35,418,2.855,419,3.008,428,2.597,429,1.905,435,1.426,436,1.905,437,4.35,438,5.599,439,4.974,440,2.27,441,4.974,442,6.396,443,3.939,444,4.536,445,4.974,446,3.632,447,2.29,448,2.045,449,2.29,450,4.35,451,3.939,452,4.08,453,3.183,454,4.35,455,4.974,456,3.533,457,4.974,458,4.35,459,4.35,460,4.974,461,4.35,462,4.35,463,4.974,464,3.387,465,3.387,466,3.868,467,3.387,468,3.387,469,3.387]],["title/classes/CreateInsightDto.html",[182,0.048,470,2.83]],["body/classes/CreateInsightDto.html",[7,0.012,24,0.165,25,0.165,26,0.132,33,0.699,36,0.998,37,0.666,42,0.229,128,3.817,143,2.097,181,0.182,182,0.078,187,0.009,188,0.009,194,0.403,205,1.3,225,0.992,270,1.179,336,1.622,349,1.867,391,2.097,393,2.25,397,1.437,413,2.534,427,2.76,440,2.023,470,4.528,471,6.675,472,4.187,473,6.229,474,5.312,475,3.977,476,4.528,477,3.861,478,5.197,479,2.689,480,3.861,481,5.287,482,3.514,483,4.173,484,4.855,485,4.187,486,5.287,487,4.624,488,5.287,489,4.173,490,5.266,491,5.266,492,4.187,493,5.287,494,5.287]],["title/classes/CreateUserHighlightDto.html",[182,0.048,495,2.83]],["body/classes/CreateUserHighlightDto.html",[7,0.012,24,0.16,25,0.16,26,0.128,33,0.69,37,0.663,38,0.799,42,0.225,109,1.44,181,0.177,182,0.076,187,0.009,188,0.009,194,0.392,205,1.284,270,1.147,314,2.961,325,3.899,336,1.601,349,2.064,391,2.04,397,1.412,424,4.181,426,4.449,427,2.685,475,3.572,479,2.67,489,3.926,491,5.984,495,4.449,496,6.609,497,4.498,498,5.635,499,5.312,500,4.449,501,5.518,502,6.822,503,3.266,504,5.143,505,5.143,506,4.073,507,5.143,508,5.143,509,5.715,510,5.143,511,5.143,512,4.498,513,2.812]],["title/modules/CustomerModule.html",[0,1.017,9,2.513]],["body/modules/CustomerModule.html",[0,1.738,2,2.178,3,2.817,7,0.012,9,5.041,21,2.92,22,2.334,23,2.178,24,0.184,25,0.184,26,0.147,28,2.419,42,0.273,44,0.891,45,2.82,46,1.79,113,4.545,180,3.029,181,0.202,182,0.069,187,0.01,188,0.01,284,5.191,372,3.145,389,3.217,514,5.146,515,5.146,516,5.146,517,5.884,518,5.146,519,5.884]],["title/injectables/CustomerService.html",[284,2.513,435,0.926]],["body/injectables/CustomerService.html",[7,0.012,24,0.152,25,0.152,26,0.122,29,1.595,33,0.738,35,1.758,36,0.94,37,0.594,38,0.906,40,1.87,42,0.255,44,0.74,46,1.486,58,1.311,113,3.126,181,0.168,182,0.057,183,1.595,184,1.233,187,0.009,188,0.009,194,0.373,195,2.27,225,1.073,234,2.348,284,3.823,299,1.923,308,1.899,331,1.758,349,1.924,435,1.41,436,1.871,440,2.255,447,2.249,456,3.705,518,4.272,520,4.272,521,6.131,522,3.705,523,7.01,524,7.01,525,4.885,526,4.885,527,6.322,528,4.885,529,6.483,530,4.885,531,3.227,532,4.885,533,4.885,534,4.885,535,4.885,536,4.885,537,4.885,538,4.885,539,3.301,540,4.885,541,3.301,542,4.885,543,4.885]],["title/classes/DatabaseLoggerMiddleware.html",[101,3.034,182,0.048]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.012,24,0.224,25,0.125,26,0.1,29,1.399,33,0.746,35,2.007,36,0.966,37,0.61,38,0.931,40,1.922,41,5.249,42,0.218,44,0.608,58,1.078,62,3.18,63,3.18,64,3.18,101,4.638,146,4.895,147,1.798,155,5.991,181,0.191,182,0.047,184,1.875,187,0.008,188,0.008,194,0.306,225,0.866,313,2.734,328,2.734,331,1.705,349,2.07,391,1.593,397,1.198,398,2.198,403,1.741,404,1.849,446,5.002,531,3.154,544,6.892,545,3.18,546,4.849,547,6.352,548,7.618,549,6.352,550,6.352,551,6.352,552,6.352,553,6.352,554,6.352,555,5.545,556,4.015,557,4.015,558,6.352,559,6.663,560,4.015,561,4.015,562,4.015,563,4.015,564,4.015,565,4.053,566,4.015,567,4.015,568,5.03,569,4.015,570,4.015,571,2.28,572,4.015,573,4.015,574,4.015,575,4.015,576,4.015,577,4.015,578,6.352,579,5.545,580,4.015,581,6.352,582,4.015,583,4.015,584,4.015]],["title/entities/DbContribution.html",[79,2.17,585,1.115]],["body/entities/DbContribution.html",[7,0.012,24,0.102,25,0.102,26,0.082,33,0.734,36,0.793,37,0.655,38,0.85,42,0.215,58,0.881,75,2.028,76,1.573,79,2.508,109,0.916,143,2.481,144,1.136,181,0.113,182,0.038,187,0.007,188,0.007,194,0.25,205,1.365,225,1.005,232,2.212,270,0.732,304,2.033,305,2.423,308,1.579,314,3.031,325,3.327,336,1.642,340,1.732,349,1.53,395,1.349,397,1.038,403,2.313,431,4.149,432,4.5,433,5.271,440,1.461,479,2.708,571,3.028,585,1.29,586,2.871,587,2.967,588,3.064,589,3.202,590,3.508,591,4.002,592,2.871,593,4.259,594,4.259,595,4.259,596,4.567,597,3.282,598,3.805,599,4.804,600,3.508,601,3.805,602,3.282,603,4.567,604,3.282,605,3.262,606,2.303,607,3.531,608,3.202,609,5.2,610,2.128,611,3.419,612,2.395,613,2.77,614,1.573,615,3.391,616,3.53,617,2.998,618,3.282,619,1.985,620,3.419,621,3.282,622,2.667,623,3.282,624,3.282,625,3.419,626,4.202,627,3.805,628,2.871,629,3.282,630,1.985,631,3.282,632,2.905,633,3.282,634,3.282,635,3.282,636,2.212,637,2.758,638,2.758,639,1.985,640,3.282,641,3.508,642,4.804,643,4.202,644,3.282,645,3.282,646,3.202,647,2.626,648,1.794,649,2.905,650,2.905,651,2.508,652,2.303,653,2.626,654,2.967,655,3.307,656,2.724,657,1.511,658,1.4,659,1.511,660,2.235,661,3.282,662,2.1,663,1.985,664,2.397,665,2.212,666,1.985,667,2.397,668,3.282,669,2.871]],["title/entities/DbCustomer.html",[113,2.659,585,1.115]],["body/entities/DbCustomer.html",[7,0.012,24,0.173,25,0.173,26,0.138,33,0.658,36,0.703,37,0.595,42,0.235,58,1.487,109,1.305,113,4.38,116,3.929,144,1.917,181,0.191,182,0.065,187,0.01,188,0.01,194,0.423,205,1.224,225,0.934,308,1.891,314,2.906,336,1.526,346,5.421,349,1.675,395,2.277,397,1.479,411,3.929,479,2.599,529,6.497,585,1.837,589,3.152,593,4.661,594,4.661,595,4.661,622,2.919,646,3.152,647,3.742,648,3.028,655,3.42,657,2.55,658,2.362,659,2.55,662,3.544,670,4.844,671,4.045,672,5.539,673,4.844,674,5.539,675,5.539,676,2.768,677,4.844]],["title/entities/DbInsight.html",[104,2.272,585,1.115]],["body/entities/DbInsight.html",[7,0.012,24,0.104,25,0.104,26,0.083,33,0.737,36,0.888,37,0.646,38,0.855,42,0.217,58,0.898,104,2.662,106,3.816,108,1.671,109,0.928,143,2.776,144,1.157,181,0.115,182,0.039,187,0.007,188,0.007,194,0.255,205,1.371,225,0.861,270,0.746,304,2.055,305,2.45,308,1.591,314,3.035,336,1.683,349,1.544,393,1.86,395,1.375,397,1.053,403,2.325,474,4.194,479,2.744,482,2.905,483,4.457,484,3.556,492,2.648,499,3.316,503,2.434,513,2.662,571,2.878,585,1.307,587,2.999,589,3.223,593,4.296,594,4.296,595,4.296,596,3.556,605,3.1,606,2.753,607,3.48,608,3.223,610,2.157,612,2.681,613,3.1,614,1.603,615,3.223,616,3.355,617,3.355,622,2.077,625,2.662,636,3.223,646,3.223,647,2.662,648,2.662,651,2.543,652,2.334,653,2.662,654,2.543,655,3.326,656,3.024,657,1.54,658,1.426,659,1.54,665,2.644,676,2.434,678,2.925,679,5.744,680,2.753,681,5.744,682,2.278,683,3.344,684,3.857,685,2.648,686,3.344,687,2.925,688,3.344,689,3.816,690,4.607,691,4.87,692,3.556,693,3.344,694,3.344,695,3.344,696,3.344,697,2.648,698,4.259,699,4.87,700,3.344,701,4.259,702,3.344,703,4.259,704,3.344,705,3.857,706,2.925,707,3.344,708,2.14,709,3.344,710,3.857,711,3.116,712,2.14,713,2.648]],["title/entities/DbInsightRepo.html",[106,2.513,585,1.115]],["body/entities/DbInsightRepo.html",[7,0.012,24,0.128,25,0.128,26,0.102,33,0.719,36,0.714,37,0.625,38,0.845,42,0.238,58,1.101,104,3.779,106,3.403,144,1.42,181,0.141,182,0.048,187,0.008,188,0.008,194,0.313,205,1.337,225,1.02,270,0.915,304,2.298,308,1.878,314,3.007,336,1.615,340,1.947,395,1.687,397,1.216,403,2.171,479,2.683,483,4.489,571,2.842,585,1.511,587,3.354,588,2.957,589,2.957,605,3.061,606,2.697,607,3.456,608,3.182,610,2.492,612,2.648,613,3.061,614,1.966,615,3.182,616,3.313,617,3.313,622,2.4,630,2.481,632,3.403,636,3.182,646,2.957,647,3.077,648,3.077,649,3.403,650,3.403,651,2.938,652,2.697,654,2.938,655,3.182,656,3.079,657,1.889,658,1.75,659,1.889,665,2.591,676,3.21,684,4.457,685,3.249,687,3.588,708,3.601,711,3.601,714,6.701,715,3.249,716,6.335,717,4.102,718,4.102,719,4.102,720,4.102,721,4.102,722,4.102,723,4.102,724,4.102,725,3.588,726,4.102]],["title/entities/DbRepo.html",[75,1.347,585,1.115]],["body/entities/DbRepo.html",[7,0.012,24,0.06,25,0.126,26,0.048,33,0.759,36,0.833,37,0.665,38,0.892,42,0.219,58,0.518,75,1.029,77,2.076,78,1.166,79,2.447,80,1.687,81,2.343,83,2.343,85,2.343,87,2.343,109,1.123,143,2.926,144,0.668,181,0.066,182,0.022,187,0.004,188,0.004,194,0.147,205,1.411,225,1.033,232,1.461,270,0.43,304,1.447,305,1.725,308,1.229,314,3.067,325,2.589,336,1.702,349,1.681,395,0.793,397,0.686,399,1.527,403,2.478,440,2.305,479,2.694,482,1.461,500,2.161,503,2.785,513,1.735,571,2.999,585,0.852,587,2.112,589,3.221,590,2.318,591,3.938,593,4.47,594,4.47,595,4.47,596,4.069,598,4.874,603,4.794,605,3.231,606,1.938,607,3.403,608,2.566,609,3.192,610,1.406,611,1.735,612,1.216,613,1.406,614,0.924,615,3.359,616,3.497,617,2.671,619,1.166,620,3.756,622,1.999,625,2.562,630,1.166,632,1.919,636,2.158,637,2.69,638,2.69,639,1.166,641,2.318,646,3.43,647,1.735,648,1.054,649,1.919,650,1.919,651,1.657,652,1.521,653,1.735,654,3.587,655,3.272,656,2.247,657,0.888,658,0.822,659,0.888,660,2.754,662,1.234,663,1.166,665,0.888,666,1.166,680,0.924,682,2.055,689,1.919,690,2.318,692,1.408,697,4.103,701,2.776,710,4.413,727,1.687,728,3.537,729,4.044,730,3.783,731,5.181,732,4.044,733,4.044,734,4.044,735,4.044,736,3.528,737,4.044,738,4.103,739,4.103,740,4.103,741,4.103,742,3.795,743,4.103,744,4.103,745,3.174,746,1.929,747,1.929,748,1.929,749,2.513,750,3.174,751,2.318,752,1.929,753,1.929,754,2.513,755,3.174,756,3.174,757,1.929,758,1.929,759,1.929,760,3.174,761,2.031,762,3.174,763,1.929,764,1.929,765,1.929,766,3.174,767,1.687,768,4.099,769,1.929,770,4.099,771,6.154,772,1.929,773,1.929,774,1.929,775,1.929,776,3.174,777,1.929,778,1.929,779,1.929,780,2.513,781,1.929,782,1.929,783,3.174,784,1.929,785,3.174,786,1.929,787,3.174,788,1.929,789,3.174,790,1.929,791,1.929,792,1.929,793,1.929,794,1.929,795,1.929,796,3.174,797,1.929,798,1.929,799,1.929,800,1.929,801,1.822,802,1.929,803,1.929,804,1.929,805,1.929,806,1.929,807,1.929,808,1.929,809,1.929,810,1.527,811,1.687,812,1.929,813,1.929,814,1.527,815,1.929,816,1.929,817,1.929,818,1.527,819,1.408,820,1.929,821,1.929]],["title/entities/DbRepoToUserStargazers.html",[87,2.077,585,1.115]],["body/entities/DbRepoToUserStargazers.html",[7,0.012,24,0.119,25,0.119,26,0.095,33,0.736,36,0.782,37,0.639,38,0.893,42,0.242,58,1.019,75,2.168,77,2.961,78,2.297,87,2.666,108,1.898,109,1.43,143,2.116,144,1.315,181,0.131,182,0.044,187,0.007,188,0.007,194,0.29,205,1.369,225,0.996,232,2.456,270,0.847,304,2.206,305,2.629,308,1.779,314,3.033,336,1.57,340,1.833,397,1.153,403,2.1,440,1.623,479,2.642,571,3.003,585,1.432,587,3.219,588,3.243,589,2.839,605,3.235,606,2.557,607,3.493,608,3.079,610,2.362,611,2.916,612,2.043,613,2.362,614,1.82,615,3.363,616,3.501,617,3.205,619,2.297,620,2.916,622,3.115,625,2.916,630,3.226,632,4.044,636,2.456,637,3.062,638,3.062,639,2.297,646,2.839,649,3.729,650,3.729,651,2.785,652,2.557,653,2.916,654,3.491,655,3.079,656,2.955,657,1.749,658,1.62,659,1.749,663,2.297,665,1.749,666,2.297,676,1.898,682,2.794,708,2.43,711,3.413,822,3.322,823,5.784,824,3.798,825,3.798,826,2.773,827,3.798,828,3.798,829,3.798,830,2.773,831,3.798,832,3.798,833,3.798,834,3.798,835,3.798,836,3.798,837,2.773,838,3.798,839,3.322]],["title/entities/DbRepoToUserStars.html",[83,2.077,585,1.115]],["body/entities/DbRepoToUserStars.html",[7,0.012,24,0.119,25,0.119,26,0.095,33,0.736,36,0.782,37,0.639,38,0.893,42,0.242,58,1.019,75,2.168,77,2.961,78,2.297,83,2.666,108,1.898,109,1.43,143,2.116,144,1.315,181,0.131,182,0.044,187,0.007,188,0.007,194,0.29,205,1.369,225,0.996,232,2.456,270,0.847,304,2.206,305,2.629,308,1.779,314,3.033,336,1.57,340,1.833,397,1.153,403,2.1,440,1.623,479,2.642,571,3.003,585,1.432,587,3.219,588,3.243,589,2.839,605,3.235,606,2.557,607,3.493,608,3.079,610,2.362,611,2.916,612,2.043,613,2.362,614,1.82,615,3.363,616,3.501,617,3.205,619,2.297,620,2.916,622,3.115,625,2.916,630,3.226,632,4.044,636,2.456,637,3.062,638,3.062,639,2.297,646,2.839,649,3.729,650,3.729,651,2.785,652,2.557,653,2.916,654,3.491,655,3.079,656,2.955,657,1.749,658,1.62,659,1.749,663,2.297,665,1.749,666,2.297,676,1.898,682,2.794,708,2.43,711,3.413,826,2.773,830,2.773,837,2.773,840,3.322,841,5.333,842,3.798,843,3.798,844,3.798,845,3.798,846,3.798,847,3.798,848,3.798,849,3.798,850,3.798,851,3.798,852,3.798,853,3.798,854,3.322]],["title/entities/DbRepoToUserSubmissions.html",[85,2.077,585,1.115]],["body/entities/DbRepoToUserSubmissions.html",[7,0.012,24,0.112,25,0.112,26,0.09,33,0.739,36,0.76,37,0.639,38,0.923,42,0.238,58,0.967,75,2.118,77,2.892,78,2.179,85,2.568,108,1.801,109,1.408,143,2.739,144,1.247,181,0.124,182,0.042,187,0.007,188,0.007,194,0.275,205,1.374,225,0.979,232,2.366,270,0.803,304,2.143,305,2.555,308,1.753,314,3.038,336,1.601,340,1.797,397,1.111,403,2.169,440,1.563,479,2.67,482,2.366,503,2.568,513,2.81,571,2.952,585,1.379,587,3.128,588,3.179,589,3.007,605,3.18,606,2.463,607,3.454,608,3.306,610,2.276,611,2.81,612,1.968,613,2.276,614,1.727,615,3.306,616,3.441,617,3.13,619,2.179,620,2.81,622,3.062,625,2.81,630,3.108,632,3.95,636,2.366,637,2.95,638,2.95,639,2.179,646,3.007,649,3.623,650,3.623,651,2.683,652,2.463,653,2.81,654,3.41,655,3.179,656,2.871,657,1.659,658,1.537,659,1.659,663,2.179,665,1.659,666,2.179,676,1.801,682,2.739,689,3.108,692,2.631,708,2.306,711,3.289,826,2.631,830,2.631,837,2.631,855,3.151,856,5.239,857,5.983,858,3.603,859,3.603,860,3.603,861,5.139,862,5.139,863,3.603,864,3.603,865,3.603,866,3.603,867,3.603,868,3.603,869,3.603,870,3.603,871,3.603,872,3.603,873,3.151]],["title/entities/DbRepoToUserVotes.html",[81,2.077,585,1.115]],["body/entities/DbRepoToUserVotes.html",[7,0.012,24,0.119,25,0.119,26,0.095,33,0.736,36,0.782,37,0.639,38,0.893,42,0.242,58,1.019,75,2.168,77,2.961,78,2.297,81,2.666,108,1.898,109,1.43,143,2.116,144,1.315,181,0.131,182,0.044,187,0.007,188,0.007,194,0.29,205,1.369,225,0.996,232,2.456,270,0.847,304,2.206,305,2.629,308,1.779,314,3.033,336,1.57,340,1.833,397,1.153,403,2.1,440,1.623,479,2.642,571,3.003,585,1.432,587,3.219,588,3.243,589,2.839,605,3.235,606,2.557,607,3.493,608,3.079,610,2.362,611,2.916,612,2.043,613,2.362,614,1.82,615,3.363,616,3.501,617,3.205,619,2.297,620,2.916,622,3.115,625,2.916,630,3.226,632,4.044,636,2.456,637,3.062,638,3.062,639,2.297,646,2.839,649,3.729,650,3.729,651,2.785,652,2.557,653,2.916,654,3.491,655,3.079,656,2.955,657,1.749,658,1.62,659,1.749,663,2.297,665,1.749,666,2.297,676,1.898,682,2.794,708,2.43,711,3.413,826,2.773,830,2.773,837,2.773,874,3.322,875,5.333,876,3.798,877,3.798,878,3.798,879,3.798,880,3.798,881,3.798,882,3.798,883,3.798,884,3.798,885,3.798,886,3.798,887,3.798,888,3.322]],["title/entities/DbSubscription.html",[120,2.659,585,1.115]],["body/entities/DbSubscription.html",[7,0.012,24,0.079,25,0.079,26,0.063,33,0.737,36,0.322,37,0.66,38,0.946,42,0.167,58,0.682,109,0.754,120,2.532,143,1.57,144,0.879,181,0.087,182,0.03,187,0.006,188,0.006,194,0.194,205,1.37,225,0.749,270,0.566,304,1.74,308,1.411,314,3.035,336,1.692,349,1.665,395,1.044,397,0.855,403,2.467,413,1.217,479,2.752,482,2.528,500,4.292,571,3.18,585,1.062,589,2.74,603,4.009,605,3.659,606,3.352,607,3.693,608,3.617,610,2.431,611,4.294,612,3.009,613,3.479,614,1.217,615,3.562,616,3.708,617,3.708,620,2.164,622,2.341,628,5.954,646,3.494,647,2.164,648,1.389,652,1.897,654,2.066,655,2.902,656,3.427,657,1.169,658,1.083,659,1.169,665,3.22,682,1.929,761,3.808,770,2.221,889,5.649,890,2.221,891,4.252,892,4.252,893,4.252,894,4.252,895,4.252,896,4.252,897,3.551,898,4.252,899,4.712,900,4.252,901,4.252,902,3.958,903,2.54,904,4.971,905,2.54,906,3.958,907,2.54,908,2.54,909,4.009,910,5.49,911,6.303,912,2.54,913,4.348,914,2.54,915,2.54,916,2.54,917,2.54,918,2.54,919,3.461,920,2.54,921,2.54,922,2.54,923,2.54,924,2.54,925,4.252,926,2.54,927,5.49,928,2.54,929,2.54,930,2.54,931,2.54,932,2.221,933,2.54,934,2.54,935,2.54,936,2.54]],["title/entities/DbUser.html",[77,1.84,585,1.115]],["body/entities/DbUser.html",[7,0.012,24,0.058,25,0.058,26,0.047,33,0.761,36,0.771,37,0.663,38,0.964,42,0.209,58,0.501,75,1.49,76,0.895,77,1.369,81,2.297,82,1.272,83,2.297,84,1.272,85,2.297,86,1.272,87,2.297,88,1.272,109,1.556,143,3.142,144,0.646,181,0.064,182,0.022,184,0.78,187,0.004,188,0.004,194,0.143,205,1.416,225,0.829,230,2.105,231,4.969,232,1.423,237,2.257,243,3.175,252,3.467,256,2.257,270,0.416,300,3.467,304,1.415,305,1.686,308,0.938,314,3.008,315,1.272,317,2.693,318,2.888,320,3.467,321,3.467,322,2.693,323,3.467,324,2.53,325,2.545,336,1.703,340,0.804,349,1.842,395,0.768,397,0.668,398,2.781,403,2.323,411,3.149,479,2.762,482,3.517,503,1.545,571,2.498,585,0.83,587,2.065,589,3.466,590,2.257,591,2.941,592,1.634,593,5.127,594,5.127,595,5.127,596,4.436,598,2.448,601,2.448,603,2.257,605,2.43,606,1.482,607,2.875,608,2.116,610,1.369,611,1.69,612,1.95,613,1.369,614,0.895,615,2.526,616,2.63,617,2.203,619,1.13,620,3,622,1.318,625,1.69,636,1.423,637,1.774,638,1.774,639,1.13,646,3.493,647,1.69,648,1.021,651,1.614,652,1.482,653,1.69,654,3.172,655,3.493,656,1.895,657,0.86,658,0.797,659,0.86,662,1.195,664,2.257,665,0.86,666,1.13,667,1.364,671,1.364,673,1.634,676,0.933,677,1.634,680,1.895,689,3.674,690,4.436,692,3.356,697,4.033,710,4.345,712,1.978,730,2.257,738,4.033,739,4.033,740,4.033,741,4.033,761,3.511,767,1.634,814,1.479,818,1.479,937,1.634,938,3.132,939,3.954,940,3.458,941,3.954,942,4.033,943,3.954,944,3.132,945,4.033,946,2.888,947,1.868,948,1.868,949,1.868,950,1.868,951,1.868,952,1.868,953,2.941,954,3.458,955,1.868,956,2.105,957,1.868,958,3.091,959,1.868,960,1.868,961,1.868,962,1.868,963,1.868,964,3.091,965,3.091,966,1.868,967,4.02,968,1.868,969,3.091,970,1.868,971,2.257,972,3.091,973,3.091,974,2.703,975,1.868,976,1.868,977,2.703,978,2.703,979,1.868,980,1.868,981,1.868,982,1.868,983,2.448,984,1.868,985,3.091,986,1.868,987,3.091,988,2.703,989,1.868,990,3.091,991,1.868,992,3.091,993,1.868,994,3.091,995,1.868,996,3.091,997,1.868,998,3.091,999,1.868,1000,1.868,1001,1.868,1002,4.02,1003,1.868,1004,1.868,1005,2.448,1006,1.868,1007,1.868,1008,1.868,1009,1.868,1010,1.868,1011,1.634,1012,1.634,1013,1.479,1014,1.479,1015,1.634]],["title/entities/DbUserHighlight.html",[122,2.385,585,1.115]],["body/entities/DbUserHighlight.html",[7,0.012,24,0.109,25,0.183,26,0.087,33,0.733,36,0.442,37,0.64,38,0.968,42,0.173,58,0.935,109,1.226,122,2.879,143,2.332,144,1.205,181,0.12,182,0.041,187,0.007,188,0.007,194,0.266,205,1.363,225,0.877,304,2.103,305,2.507,308,1.394,314,3.029,325,3.406,336,1.7,349,1.736,395,1.432,397,1.084,403,2.229,479,2.759,482,2.961,498,5.634,499,4.641,500,3.415,501,4.696,502,3.046,503,2.507,509,5.624,512,4.386,571,2.918,585,1.346,587,3.069,589,3.268,600,4.696,605,3.508,606,2.817,607,3.508,608,3.268,610,2.221,613,3.143,614,1.669,615,3.268,616,3.402,617,3.082,622,2.742,646,2.309,647,2.742,648,1.904,651,2.619,652,2.404,653,2.742,655,3.368,656,3.082,657,1.603,658,1.485,659,1.603,662,2.229,665,2.706,671,2.543,676,2.507,682,2.332,684,3.972,685,2.758,705,3.972,706,3.046,954,3.046,971,3.662,1016,6.77,1017,3.046,1018,6.815,1019,6.208,1020,5.621,1021,3.483,1022,3.483,1023,5.016,1024,3.691,1025,3.483,1026,3.483,1027,3.483,1028,5.016,1029,3.483,1030,3.483,1031,3.483,1032,3.483,1033,3.483,1034,3.483,1035,3.046,1036,3.483,1037,3.483,1038,3.046,1039,5.878]],["title/entities/DbUserRepo.html",[112,2.513,585,1.115]],["body/entities/DbUserRepo.html",[7,0.012,24,0.149,25,0.149,26,0.119,33,0.707,36,0.607,37,0.611,38,0.762,42,0.215,58,1.284,109,1.491,110,4.613,112,3.772,144,1.656,181,0.165,182,0.056,187,0.009,188,0.009,194,0.365,205,1.315,225,1.067,304,2.483,308,1.646,314,2.988,336,1.64,340,1.914,395,1.967,397,1.348,403,1.959,479,2.705,571,2.564,585,1.674,588,3.195,589,3.195,605,2.762,606,2.293,607,3.257,608,2.872,610,2.762,612,2.389,613,2.762,614,2.293,615,2.872,616,2.99,617,2.99,622,3.335,636,2.872,646,2.203,647,3.41,648,2.616,652,2.99,655,3.386,656,2.99,657,2.203,658,2.04,659,2.203,662,3.062,665,2.203,671,3.494,676,3.468,682,2.753,715,3.789,1035,5.455,1038,5.455,1040,4.881,1041,4.785,1042,4.785,1043,4.785,1044,4.785,1045,4.785]],["title/controllers/HealthController.html",[189,1.151,1046,3.034]],["body/controllers/HealthController.html",[7,0.012,24,0.142,25,0.142,26,0.113,29,1.522,33,0.58,40,1.522,42,0.248,44,0.689,48,4.943,49,3.32,53,3.601,140,3.32,173,3.601,177,4.777,178,5.478,179,1.34,181,0.156,182,0.053,183,1.147,184,1.946,187,0.008,188,0.008,189,1.259,192,2.093,194,0.347,195,2.346,205,1.078,208,3.455,267,2.998,268,3.244,269,2.093,270,1.014,294,3.355,297,2.891,331,1.431,398,1.574,503,3.603,513,3.941,531,2.777,1046,4.405,1047,3.977,1048,6.744,1049,7.711,1050,4.547,1051,6.032,1052,6.032,1053,4.547,1054,4.547,1055,6.032,1056,4.547,1057,6.032,1058,6.032,1059,6.032,1060,6.769,1061,6.032,1062,6.032,1063,4.547,1064,4.547,1065,4.547,1066,4.547,1067,4.547,1068,5.275,1069,6.032,1070,4.547,1071,4.547,1072,4.547,1073,4.547,1074,4.547,1075,4.547,1076,6.032,1077,4.547,1078,4.547,1079,4.547,1080,4.547,1081,4.547,1082,4.547,1083,4.547,1084,4.547,1085,4.547,1086,4.547,1087,4.547,1088,4.547,1089,4.547,1090,4.547,1091,4.547,1092,4.547]],["title/modules/HealthModule.html",[0,1.017,10,2.83]],["body/modules/HealthModule.html",[0,1.814,2,2.342,7,0.012,10,5.05,24,0.197,25,0.197,26,0.158,28,2.601,42,0.271,44,0.958,52,6.486,53,5.011,179,2.186,181,0.218,182,0.074,187,0.01,188,0.01,1046,5.745,1093,6.328,1094,6.328]],["title/injectables/HttpLoggerMiddleware.html",[96,3.034,435,0.926]],["body/injectables/HttpLoggerMiddleware.html",[7,0.012,24,0.159,25,0.159,26,0.127,29,1.636,33,0.623,35,1.205,36,0.645,37,0.407,38,0.621,40,1.282,41,3.711,42,0.259,44,0.77,62,4.025,63,4.025,64,4.025,96,5.215,146,5.123,147,2.103,175,5.136,181,0.223,182,0.059,184,1.802,187,0.009,188,0.009,194,0.388,299,2.289,331,1.694,397,1.402,403,2.037,404,2.34,435,1.446,436,1.947,545,4.025,546,4.445,559,5.672,751,5.494,1024,4.637,1095,6.246,1096,5.215,1097,5.082,1098,7.153,1099,7.524,1100,5.082,1101,6.485,1102,5.082,1103,6.485,1104,4.025,1105,4.025,1106,5.082,1107,5.082,1108,4.445,1109,5.082,1110,5.082,1111,6.485,1112,7.524,1113,6.485,1114,4.445,1115,5.082,1116,5.082,1117,5.082,1118,5.082,1119,5.082,1120,5.082]],["title/controllers/InsightController.html",[189,1.151,1121,3.034]],["body/controllers/InsightController.html",[7,0.012,24,0.136,25,0.136,26,0.109,29,1.482,33,0.565,35,1.393,36,0.745,37,0.593,38,0.718,40,1.482,42,0.268,44,0.662,104,3.627,109,1.265,147,1.417,179,1.288,181,0.15,182,0.051,183,1.102,184,1.102,187,0.008,188,0.008,189,1.21,192,2.012,194,0.333,195,2.111,205,1.05,208,3.401,209,3.067,214,2.456,221,4.289,225,1.094,234,2.553,257,3.19,263,2.508,264,3.372,265,4.289,266,3.316,267,2.938,268,3.18,269,2.012,270,0.974,271,2.012,294,1.863,296,2.508,297,2.815,299,1.329,308,1.756,326,1.967,331,1.036,336,1.582,393,2.247,398,1.512,483,4.432,712,2.796,1024,2.508,1121,4.289,1122,3.821,1123,7.403,1124,7.403,1125,4.369,1126,3.821,1127,3.372,1128,3.821,1129,5.137,1130,4.369,1131,5.874,1132,5.137,1133,4.369,1134,4.369,1135,3.821,1136,4.289,1137,4.289,1138,3.821,1139,4.652,1140,3.46,1141,4.518,1142,4.369,1143,2.642,1144,2.281,1145,5.137,1146,5.874,1147,4.652,1148,2.642,1149,2.642,1150,3.46,1151,3.46,1152,3.19,1153,4.013,1154,3.46,1155,4.369,1156,3.821,1157,3.821,1158,2.389,1159,3.211,1160,5.137,1161,3.821,1162,3.821,1163,2.094,1164,4.369]],["title/classes/InsightPageOptionsDto.html",[182,0.048,1165,2.83]],["body/classes/InsightPageOptionsDto.html",[7,0.012,24,0.173,25,0.173,26,0.139,33,0.715,37,0.596,38,0.994,42,0.191,181,0.191,182,0.065,187,0.01,188,0.01,194,0.424,205,1.33,225,0.936,391,2.205,393,2.193,394,3.362,395,2.821,396,2.723,397,1.483,398,2.814,400,4.149,401,4.672,403,2.553,404,3.426,406,3.785,407,3.785,411,3.938,412,4.672,413,3.567,414,3.785,415,3.785,416,5.067,417,4.059,418,4.272,419,3.362,420,3.785,421,4.059,422,3.785,423,4.059,428,2.903,429,2.129,1165,4.672,1166,4.862]],["title/injectables/InsightRepoService.html",[435,0.926,1167,2.659]],["body/injectables/InsightRepoService.html",[7,0.012,24,0.166,25,0.166,26,0.133,29,1.685,33,0.701,35,1.731,36,0.926,37,0.585,38,0.892,40,1.685,42,0.263,44,0.806,46,1.62,58,1.429,106,3.22,108,2.661,181,0.183,182,0.062,183,1.685,184,1.343,187,0.009,188,0.009,194,0.406,195,2.227,225,1.136,308,1.584,331,1.584,435,1.489,436,2.039,440,2.328,444,4.393,447,2.451,531,3.075,588,2.451,716,4.656,1167,4.274,1168,6.692,1169,4.656,1170,7.298,1171,7.298,1172,5.324,1173,5.324,1174,6.679,1175,5.324,1176,5.324,1177,7.298,1178,5.324,1179,5.324,1180,4.656,1181,5.324,1182,5.324,1183,5.324]],["title/modules/InsightsModule.html",[0,1.017,11,2.83]],["body/modules/InsightsModule.html",[0,1.648,2,1.999,3,2.673,7,0.012,11,5.723,21,2.77,22,2.142,23,1.999,24,0.169,25,0.169,26,0.135,28,2.22,42,0.285,44,0.818,45,2.588,46,1.643,104,3.684,106,4.075,108,2.699,109,1.029,179,1.986,180,2.874,181,0.186,182,0.063,187,0.009,188,0.009,372,2.984,389,2.952,483,2.952,1121,5.363,1152,3.943,1153,5.135,1154,4.277,1167,5.434,1180,4.723,1184,4.723,1185,4.723,1186,4.723,1187,5.4,1188,5.363,1189,6.738,1190,3.943]],["title/injectables/InsightsService.html",[435,0.926,1153,2.513]],["body/injectables/InsightsService.html",[7,0.012,24,0.126,25,0.126,26,0.101,29,1.403,33,0.733,35,1.765,36,0.944,37,0.596,38,0.91,40,1.878,42,0.262,44,0.61,46,1.226,58,1.082,104,3.04,144,1.395,147,2.064,181,0.139,182,0.047,183,1.403,184,1.017,187,0.008,188,0.008,194,0.308,195,2.293,214,2.375,225,1.076,234,2.411,299,2.32,308,1.843,311,5.434,326,2.132,331,1.765,349,1.557,393,1.188,396,2.132,428,2.105,429,1.544,435,1.24,436,1.544,440,2.087,447,1.856,448,1.657,449,1.856,452,3.751,453,2.58,456,3.429,464,2.745,465,2.745,466,3.363,467,2.745,468,2.745,469,2.745,483,4.069,522,3.429,531,2.93,539,2.105,541,2.105,725,4.863,1152,2.944,1153,3.363,1163,1.932,1165,4.672,1191,3.525,1192,6.365,1193,5.041,1194,4.073,1195,6.365,1196,6.365,1197,4.031,1198,4.031,1199,5.56,1200,4.031,1201,4.031,1202,4.031,1203,4.334,1204,3.192,1205,4.031,1206,2.58,1207,4.031,1208,4.031,1209,4.031,1210,4.031,1211,4.031,1212,3.04,1213,3.525,1214,4.031,1215,3.04,1216,5.56,1217,4.031,1218,5.56,1219,5.56,1220,3.323,1221,2.944,1222,4.031,1223,4.031,1224,4.031,1225,4.031]],["title/classes/PageDto.html",[182,0.048,448,1.708]],["body/classes/PageDto.html",[7,0.012,24,0.166,25,0.166,26,0.133,33,0.701,35,1.261,36,0.674,37,0.654,38,0.65,42,0.263,128,3.829,181,0.183,182,0.085,183,1.683,187,0.009,188,0.009,194,0.406,205,1.193,270,1.185,391,2.108,393,1.567,397,1.442,398,2.783,427,2.775,448,2.743,452,4.511,453,3.401,476,3.619,478,4.965,489,3.986,1226,4.648,1227,6.367,1228,5.556,1229,5.315,1230,5.753,1231,6.672,1232,5.315,1233,5.315,1234,5.315,1235,5.315,1236,5.315,1237,5.315,1238,7.292,1239,4.648,1240,5.315,1241,5.315,1242,5.315]],["title/classes/PageMetaDto.html",[182,0.048,452,2.272]],["body/classes/PageMetaDto.html",[7,0.012,24,0.136,25,0.136,26,0.109,33,0.748,35,1.033,36,0.553,37,0.624,38,0.532,42,0.202,128,3.365,143,2.325,181,0.15,182,0.051,183,1.479,187,0.008,188,0.008,194,0.332,205,1.362,225,1.136,270,0.971,336,1.698,391,1.728,393,2.427,396,1.459,397,1.267,398,2.929,400,4.007,413,3.397,452,3.205,466,4.473,475,4.164,479,2.758,482,3.263,489,4.255,612,2.833,689,4.286,690,5.175,751,4.281,909,4.281,983,4.643,1228,2.967,1243,5.778,1244,3.81,1245,6.626,1246,6.626,1247,6.626,1248,4.357,1249,5.175,1250,5.862,1251,5.862,1252,4.357,1253,6.198,1254,6.198,1255,4.357,1256,5.862,1257,4.357,1258,4.357,1259,5.127,1260,4.357,1261,4.357,1262,5.794,1263,4.357,1264,5.127,1265,4.357,1266,4.357,1267,4.357,1268,4.357,1269,4.357,1270,4.357]],["title/interfaces/PageMetaParameters.html",[1249,3.034,1271,3.034]],["body/interfaces/PageMetaParameters.html",[7,0.012,24,0.195,25,0.195,26,0.156,37,0.589,42,0.214,181,0.214,187,0.01,188,0.01,194,0.476,225,1.067,393,1.838,396,2.845,397,1.589,429,2.389,466,4.884,1228,4.247,1243,4.554,1249,5.37,1271,4.554,1272,6.237,1273,5.454]],["title/classes/PageOptionsDto.html",[182,0.048,396,1.392]],["body/classes/PageOptionsDto.html",[7,0.012,24,0.15,25,0.15,26,0.12,33,0.707,37,0.627,38,0.956,42,0.253,181,0.165,182,0.081,187,0.009,188,0.009,194,0.366,205,1.241,225,1.087,270,1.068,331,1.137,391,1.901,393,2.047,394,2.898,396,2.091,397,1.349,398,2.827,400,4.2,401,4.729,403,2.565,404,3.198,406,3.263,407,4.252,411,4.38,412,4.252,413,3.915,414,4.252,415,3.263,418,4.574,419,4.2,420,3.263,422,3.263,424,4.709,425,3.795,426,5.011,427,2.502,430,3.499,451,3.795,612,1.835,1239,4.191,1243,5.572,1262,4.191,1264,4.191,1274,5.461,1275,6.074,1276,4.792,1277,4.792,1278,4.792,1279,4.792,1280,4.792,1281,6.945,1282,4.792,1283,4.792,1284,4.792,1285,6.244,1286,6.244,1287,4.792,1288,4.792]],["title/controllers/RepoContributionsController.html",[189,1.151,384,3.034]],["body/controllers/RepoContributionsController.html",[7,0.012,24,0.135,25,0.135,26,0.108,29,1.471,33,0.56,35,1.382,36,0.739,37,0.566,38,0.712,40,1.471,42,0.272,44,0.654,79,3.444,179,1.273,181,0.149,182,0.05,183,1.09,184,1.471,187,0.008,188,0.008,189,1.196,192,1.989,194,0.33,195,2.104,205,1.042,208,3.385,214,2.444,225,0.9,266,3.297,267,2.921,268,3.162,269,1.989,270,0.963,294,2.486,297,2.794,299,1.773,308,1.675,326,1.952,331,1.382,336,1.299,340,2.165,349,1.859,381,4.221,382,2.712,384,4.256,385,3.421,386,2.255,387,3.778,390,5.288,393,1.273,396,2.545,398,2.017,429,1.654,448,1.776,449,1.989,454,3.778,565,3.444,609,2.941,660,4.809,680,2.07,801,4.054,1127,3.346,1144,2.255,1158,3.861,1159,2.361,1220,3.043,1289,5.769,1290,3.778,1291,7.374,1292,7.374,1293,4.319,1294,4.319,1295,5.157,1296,7.062,1297,5.828,1298,5.828,1299,4.319,1300,4.319,1301,4.319,1302,5.097,1303,4.319,1304,2.255,1305,2.479,1306,2.159,1307,2.479,1308,2.764,1309,2.764,1310,4.319,1311,5.828,1312,2.764,1313,5.828,1314,5.828,1315,4.319,1316,2.764,1317,2.764,1318,2.764]],["title/controllers/RepoController.html",[189,1.151,1319,3.034]],["body/controllers/RepoController.html",[7,0.012,24,0.136,25,0.136,26,0.108,29,1.476,33,0.636,35,1.569,36,0.839,37,0.61,38,0.809,40,1.669,42,0.268,44,0.658,75,2.396,179,1.28,181,0.149,182,0.051,183,1.096,184,1.096,187,0.008,188,0.008,189,1.203,192,2,194,0.331,195,2.219,205,1.183,208,3.648,214,2.634,225,0.902,266,3.306,267,3.135,268,3.393,269,2,270,0.969,294,1.853,297,3.171,308,1.569,331,1.569,336,1.304,340,2.085,349,1.862,382,2.72,393,1.28,396,1.96,398,1.504,429,1.664,438,5.851,440,2.153,443,3.44,448,1.786,449,2,565,3.055,680,3.171,801,4.063,1126,3.799,1127,4.369,1128,3.799,1144,2.268,1157,3.799,1158,3.87,1159,2.375,1190,3.172,1194,4.728,1206,2.78,1304,2.268,1305,2.494,1306,2.171,1307,2.494,1308,2.78,1309,2.78,1312,2.78,1316,2.78,1317,2.78,1318,2.78,1319,4.272,1320,3.799,1321,6.462,1322,3.87,1323,4.344,1324,3.984,1325,2.958,1326,4.344,1327,5.851,1328,4.344,1329,3.799,1330,4.344,1331,4.344,1332,4.344,1333,3.44,1334,3.799,1335,4.344,1336,4.344,1337,2.958,1338,2.958]],["title/modules/RepoModule.html",[0,1.017,12,2.83]],["body/modules/RepoModule.html",[0,1.727,2,2.157,3,2.801,7,0.012,12,5.665,21,2.903,22,2.312,23,2.157,24,0.182,25,0.182,26,0.145,28,2.396,42,0.278,44,0.882,45,2.793,46,1.773,75,1.89,179,2.081,180,3.011,181,0.2,182,0.068,187,0.01,188,0.01,372,3.127,382,3.525,1190,4.255,1319,5.548,1333,4.615,1339,5.096,1340,5.827,1341,5.096,1342,5.827,1343,5.827,1344,5.827]],["title/classes/RepoPageOptionsDto.html",[182,0.048,1322,2.272]],["body/classes/RepoPageOptionsDto.html",[7,0.012,24,0.148,25,0.148,26,0.118,33,0.705,36,0.787,37,0.588,38,0.986,42,0.238,181,0.213,182,0.072,187,0.009,188,0.009,194,0.362,205,1.311,225,0.846,270,1.058,304,2.22,305,2.646,391,1.883,393,2.161,394,2.871,395,2.551,396,2.614,397,1.341,398,2.822,399,5.475,400,3.753,401,4.225,403,2.561,404,3.376,406,4.225,407,4.708,408,5.805,411,3.562,412,4.225,413,3.314,414,3.232,415,3.232,416,4.708,417,3.466,418,3.968,419,2.871,420,3.232,421,3.466,422,3.232,423,3.466,424,3.971,425,3.759,426,4.225,427,2.478,428,2.478,429,1.818,430,4.531,730,4.531,742,4.225,743,4.914,744,4.914,1322,3.393,1345,4.914,1346,6.046,1347,4.747,1348,4.747,1349,4.914,1350,4.531,1351,4.914,1352,4.914,1353,4.531,1354,4.747]],["title/injectables/RepoService.html",[382,1.708,435,0.926]],["body/injectables/RepoService.html",[7,0.012,24,0.109,25,0.109,26,0.087,29,1.267,33,0.683,35,1.684,36,0.928,37,0.569,38,0.833,40,1.72,42,0.258,44,0.528,46,1.061,58,0.936,75,1.131,79,2.621,81,1.743,83,1.743,85,1.743,87,1.743,109,0.665,144,1.207,147,2.086,158,4.658,181,0.12,182,0.041,183,1.267,184,0.88,187,0.007,188,0.007,194,0.266,195,2.112,214,2.458,225,0.969,234,2.378,299,2.41,308,1.617,326,2.155,331,1.617,340,1.774,349,2.006,382,2.064,393,1.028,396,1.97,403,1.095,404,1.605,408,2.546,418,2.001,419,2.109,428,1.821,429,1.335,435,1.119,436,1.335,438,4.658,440,1.957,443,2.761,446,3.665,447,1.605,448,1.433,449,1.605,450,3.049,451,2.761,452,3.517,453,2.231,456,3.657,458,3.049,459,3.049,461,3.049,462,3.049,464,2.374,465,2.374,466,3.036,467,2.374,468,2.374,469,2.374,522,3.216,539,3.071,541,2.621,585,1.579,660,3.418,669,3.049,742,3.418,801,2.881,839,3.049,854,3.049,873,3.049,888,3.049,1163,2.406,1194,3.764,1203,4.381,1206,2.231,1212,3.215,1215,2.744,1220,3.708,1230,2.546,1321,5.144,1322,3.517,1329,3.049,1333,2.761,1334,3.049,1346,3.049,1349,2.761,1350,2.546,1351,2.761,1352,2.761,1353,2.546,1355,3.049,1356,5.882,1357,3.487,1358,3.487,1359,5.02,1360,3.487,1361,5.882,1362,3.487,1363,3.487,1364,3.487,1365,3.487,1366,5.882,1367,3.487,1368,5.882,1369,3.487,1370,3.487,1371,5.02,1372,3.487,1373,5.02,1374,3.487,1375,3.487,1376,3.487,1377,3.487,1378,3.487,1379,3.487,1380,3.487,1381,3.487,1382,3.487,1383,3.487,1384,3.487,1385,3.487,1386,6.818,1387,6.818,1388,3.049,1389,2.761,1390,3.049,1391,3.487,1392,3.487,1393,3.487,1394,3.487,1395,3.487,1396,3.487,1397,3.487,1398,3.487,1399,3.487,1400,3.487,1401,3.487,1402,3.487,1403,3.487,1404,3.487,1405,3.487]],["title/controllers/RepoStarController.html",[189,1.151,1406,3.034]],["body/controllers/RepoStarController.html",[7,0.012,24,0.091,25,0.091,26,0.073,29,1.11,33,0.609,35,1.502,36,0.803,37,0.625,38,0.774,40,1.949,42,0.259,44,0.441,75,1.718,76,1.397,83,3.165,84,1.985,109,0.838,179,0.859,181,0.1,182,0.034,183,0.735,184,1.11,187,0.006,188,0.006,189,0.807,192,1.342,194,0.222,195,2.179,205,1.132,208,3.556,209,2.297,214,2.568,225,1.112,234,2.779,263,1.673,264,3.822,266,3.165,267,2.948,268,3.191,269,1.342,270,0.65,271,1.342,294,1.876,296,3.635,297,3.035,299,1.795,308,1.687,326,1.976,331,1.502,336,1.703,340,2.216,349,1.869,382,2.178,386,1.522,393,0.859,396,1.473,398,1.522,429,1.116,448,1.198,449,1.342,565,2.297,680,2.539,742,1.985,801,4.084,841,6.04,1127,4.259,1136,4.308,1143,1.763,1144,1.522,1148,1.763,1149,1.763,1158,3.226,1159,2.405,1220,3.08,1304,1.522,1305,1.673,1306,1.457,1307,1.673,1308,1.865,1309,1.865,1312,2.815,1316,2.815,1317,2.815,1318,2.815,1322,3.226,1324,2.995,1325,1.985,1337,1.985,1338,1.985,1406,3.212,1407,5.822,1408,2.549,1409,6.332,1410,6.332,1411,6.332,1412,6.332,1413,6.332,1414,2.915,1415,2.915,1416,4.672,1417,5.9,1418,5.9,1419,4.308,1420,4.084,1421,3.775,1422,2.915,1423,2.915,1424,2.915,1425,2.915,1426,2.915,1427,2.915,1428,5.272,1429,2.915,1430,2.915,1431,2.915,1432,4.017,1433,2.915,1434,2.915,1435,2.915,1436,2.915,1437,2.128,1438,4.624,1439,3.39,1440,2.549,1441,2.128,1442,2.128,1443,2.915,1444,2.915,1445,4.399,1446,2.915,1447,2.915,1448,4.399,1449,2.915]],["title/controllers/RepoStargazeController.html",[189,1.151,1450,3.034]],["body/controllers/RepoStargazeController.html",[7,0.012,24,0.092,25,0.092,26,0.074,29,1.12,33,0.612,35,1.51,36,0.807,37,0.627,38,0.778,40,1.954,42,0.26,44,0.447,75,1.73,76,1.413,87,3.181,88,2.008,109,0.846,179,0.869,181,0.101,182,0.034,183,0.744,184,1.12,187,0.006,188,0.006,189,0.817,192,1.358,194,0.225,195,2.184,205,1.138,208,3.567,209,2.317,214,2.576,225,1.114,234,2.782,263,1.693,264,3.838,266,3.181,267,2.961,268,3.205,269,1.358,270,0.657,271,1.358,294,1.892,296,3.653,297,3.05,299,1.805,308,1.693,326,1.988,331,1.51,336,1.707,340,2.228,349,1.873,382,2.193,386,1.54,393,0.869,396,1.486,398,1.536,429,1.13,448,1.212,449,1.358,565,2.317,680,2.557,801,4.098,823,4.225,1127,4.272,1143,1.783,1144,1.54,1148,1.783,1149,1.783,1158,3.245,1159,2.426,1220,3.099,1304,1.54,1305,1.693,1306,1.474,1307,1.693,1308,1.887,1309,1.887,1312,2.839,1316,2.839,1317,2.839,1318,2.839,1322,3.245,1324,3.021,1325,2.008,1337,2.008,1338,2.008,1390,2.579,1419,4.334,1420,4.098,1437,2.153,1438,4.647,1441,2.153,1442,2.153,1450,3.24,1451,5.848,1452,2.579,1453,6.364,1454,6.364,1455,6.364,1456,6.364,1457,6.364,1458,2.949,1459,2.949,1460,4.437,1461,7.82,1462,5.935,1463,5.19,1464,2.949,1465,2.949,1466,2.949,1467,2.949,1468,2.949,1469,2.949,1470,5.848,1471,2.949,1472,2.949,1473,2.949,1474,4.437,1475,2.949,1476,2.949,1477,2.949,1478,2.949,1479,3.414,1480,2.579,1481,2.949,1482,2.949,1483,4.437,1484,4.437,1485,2.949,1486,2.949,1487,4.437,1488,4.437,1489,2.949]],["title/controllers/RepoSubmitController.html",[189,1.151,1490,3.034]],["body/controllers/RepoSubmitController.html",[7,0.012,24,0.091,25,0.091,26,0.073,29,1.11,33,0.609,35,1.502,36,0.803,37,0.625,38,0.774,40,1.949,42,0.259,44,0.441,75,1.718,76,1.397,85,3.165,86,1.985,109,0.838,179,0.859,181,0.1,182,0.034,183,0.735,184,1.11,187,0.006,188,0.006,189,0.807,192,1.342,194,0.222,195,2.179,205,1.132,208,3.556,209,2.297,214,2.568,225,1.112,234,2.779,263,1.673,264,3.822,266,3.165,267,2.948,268,3.191,269,1.342,270,0.65,271,1.342,294,1.876,296,3.635,297,3.035,299,1.795,308,1.687,326,1.976,331,1.502,336,1.703,340,2.216,349,1.869,382,2.178,386,1.522,393,0.859,396,1.473,398,1.522,429,1.116,448,1.198,449,1.342,565,2.297,680,2.539,801,4.084,857,6.53,1127,4.259,1136,4.308,1143,1.763,1144,1.522,1148,1.763,1149,1.763,1158,3.226,1159,2.405,1220,3.08,1304,1.522,1305,1.673,1306,1.457,1307,1.673,1308,1.865,1309,1.865,1312,2.815,1316,2.815,1317,2.815,1318,2.815,1322,3.226,1324,2.995,1325,1.985,1337,1.985,1338,1.985,1389,2.308,1416,4.672,1419,4.308,1420,4.084,1421,3.775,1432,4.017,1437,2.128,1438,4.624,1441,2.128,1442,2.128,1490,3.212,1491,5.822,1492,2.549,1493,6.332,1494,6.332,1495,6.332,1496,6.332,1497,6.332,1498,2.915,1499,2.915,1500,5.9,1501,5.9,1502,2.915,1503,2.915,1504,2.915,1505,2.915,1506,2.915,1507,2.915,1508,5.822,1509,2.915,1510,2.915,1511,2.915,1512,2.915,1513,2.915,1514,2.915,1515,2.915,1516,3.39,1517,2.549,1518,2.308,1519,2.915,1520,2.915,1521,4.399,1522,2.915,1523,2.915,1524,4.399,1525,2.915]],["title/controllers/RepoVoteController.html",[189,1.151,1526,3.034]],["body/controllers/RepoVoteController.html",[7,0.012,24,0.091,25,0.091,26,0.073,29,1.11,33,0.609,35,1.502,36,0.803,37,0.625,38,0.774,40,1.949,42,0.259,44,0.441,75,1.718,76,1.397,81,3.165,82,1.985,109,0.838,179,0.859,181,0.1,182,0.034,183,0.735,184,1.11,187,0.006,188,0.006,189,0.807,192,1.342,194,0.222,195,2.179,205,1.132,208,3.556,209,2.297,214,2.568,225,1.112,234,2.779,263,1.673,264,3.822,266,3.165,267,2.948,268,3.191,269,1.342,270,0.65,271,1.342,294,1.876,296,3.635,297,3.035,299,1.795,308,1.687,326,1.976,331,1.502,336,1.703,340,2.216,349,1.869,382,2.178,386,1.522,393,0.859,396,1.473,398,1.522,429,1.116,448,1.198,449,1.342,565,2.297,680,2.539,801,4.084,875,6.04,1127,4.259,1136,4.308,1143,1.763,1144,1.522,1148,1.763,1149,1.763,1158,3.226,1159,2.405,1220,3.08,1304,1.522,1305,1.673,1306,1.457,1307,1.673,1308,1.865,1309,1.865,1312,2.815,1316,2.815,1317,2.815,1318,2.815,1322,3.226,1324,2.995,1325,1.985,1337,1.985,1338,1.985,1388,2.549,1416,4.672,1419,4.308,1420,4.084,1421,3.775,1432,4.017,1437,2.128,1438,4.624,1441,2.128,1442,2.128,1526,3.212,1527,5.822,1528,2.549,1529,6.332,1530,6.332,1531,6.332,1532,6.332,1533,6.332,1534,2.915,1535,2.915,1536,5.9,1537,5.9,1538,2.915,1539,2.915,1540,2.915,1541,2.915,1542,2.915,1543,2.915,1544,5.272,1545,2.915,1546,2.915,1547,2.915,1548,2.915,1549,2.915,1550,2.915,1551,2.915,1552,3.39,1553,2.549,1554,2.915,1555,2.915,1556,4.399,1557,2.915,1558,2.915,1559,4.399,1560,2.915]],["title/modules/StarModule.html",[0,1.017,13,2.83]],["body/modules/StarModule.html",[0,1.684,2,2.069,3,2.731,7,0.012,13,5.717,21,2.83,22,2.217,23,2.069,24,0.174,25,0.174,26,0.139,28,2.298,42,0.284,44,0.847,45,2.679,46,1.701,75,2.232,76,2.679,83,3.441,84,3.806,179,2.029,180,2.936,181,0.192,182,0.065,187,0.01,188,0.01,340,1.455,372,3.049,382,3.347,386,2.919,389,3.056,1406,5.447,1439,5.458,1440,4.889,1561,4.889,1562,4.889,1563,4.889,1564,5.59,1565,5.59]],["title/injectables/StarService.html",[435,0.926,1439,2.659]],["body/injectables/StarService.html",[7,0.012,24,0.141,25,0.141,26,0.113,29,1.514,33,0.691,35,1.6,36,0.855,37,0.54,38,0.824,40,1.702,42,0.247,44,0.683,46,1.373,58,1.211,83,2.255,84,3.073,147,2.187,181,0.155,182,0.053,183,1.514,184,1.139,187,0.008,188,0.008,194,0.344,195,2.131,214,2.488,225,1.129,234,2.754,299,2.277,326,2.408,331,1.705,340,1.562,435,1.338,436,1.729,440,2.187,444,4.635,447,2.078,456,3.592,522,3.592,539,3.134,541,3.134,588,2.078,682,1.79,841,3.295,1163,3.232,1212,2.467,1215,3.281,1420,3.445,1421,2.888,1428,4.753,1439,3.841,1566,3.947,1567,6.744,1568,6.744,1569,4.513,1570,4.513,1571,6.002,1572,4.513,1573,4.513,1574,4.513,1575,4.513,1576,4.513,1577,3.295,1578,4.513,1579,4.513,1580,3.295,1581,6.002,1582,6.002,1583,7.695,1584,6.002,1585,4.383,1586,4.513,1587,4.513,1588,3.295,1589,4.513]],["title/modules/StargazeModule.html",[0,1.017,14,2.83]],["body/modules/StargazeModule.html",[0,1.684,2,2.069,3,2.731,7,0.012,14,5.717,21,2.83,22,2.217,23,2.069,24,0.174,25,0.174,26,0.139,28,2.298,42,0.284,44,0.847,45,2.679,46,1.701,75,2.232,76,2.679,87,3.441,88,3.806,179,2.029,180,2.936,181,0.192,182,0.065,187,0.01,188,0.01,340,1.455,372,3.049,382,3.347,386,2.919,389,3.056,1450,5.447,1479,5.458,1480,4.889,1590,4.889,1591,4.889,1592,4.889,1593,5.59,1594,5.59]],["title/injectables/StargazeService.html",[435,0.926,1479,2.659]],["body/injectables/StargazeService.html",[7,0.012,24,0.141,25,0.141,26,0.113,29,1.514,33,0.691,35,1.6,36,0.855,37,0.54,38,0.824,40,1.702,42,0.247,44,0.683,46,1.373,58,1.211,87,2.255,88,3.073,147,2.187,181,0.155,182,0.053,183,1.514,184,1.139,187,0.008,188,0.008,194,0.344,195,2.131,214,2.488,225,1.129,234,2.754,299,2.277,326,2.408,331,1.705,340,1.755,435,1.338,436,1.729,440,2.187,444,4.635,447,2.078,456,3.592,522,3.592,539,3.134,541,3.134,588,2.078,682,1.79,1163,3.232,1212,2.467,1215,3.281,1420,3.445,1463,5.249,1470,3.947,1479,3.841,1577,3.295,1580,3.295,1585,4.383,1588,3.295,1595,3.947,1596,6.744,1597,6.744,1598,4.513,1599,4.513,1600,6.002,1601,4.513,1602,4.513,1603,4.513,1604,4.513,1605,4.513,1606,4.513,1607,4.513,1608,6.002,1609,6.002,1610,7.695,1611,6.002,1612,4.513,1613,4.513,1614,4.513]],["title/modules/StripeModule.html",[0,1.017,369,2.659]],["body/modules/StripeModule.html",[0,1.767,2,2.239,3,2.865,7,0.012,21,2.969,22,2.399,23,2.239,24,0.189,25,0.189,26,0.151,28,2.487,42,0.248,44,0.916,180,3.08,181,0.208,182,0.071,187,0.01,188,0.01,282,5.209,369,5.364,372,3.198,1615,5.29,1616,5.29,1617,5.29,1618,6.049,1619,6.049]],["title/injectables/StripeService.html",[282,2.513,435,0.926]],["body/injectables/StripeService.html",[7,0.012,24,0.15,25,0.15,26,0.12,29,1.582,33,0.735,35,1.652,36,0.884,37,0.591,38,0.935,40,1.582,42,0.24,44,0.73,48,5.723,49,3.522,116,4.581,147,1.564,181,0.166,182,0.056,183,1.582,184,1.861,187,0.009,188,0.009,194,0.368,195,2.17,210,3.819,225,0.95,234,1.615,243,4.033,282,3.792,299,1.467,308,1.652,326,1.615,331,1.652,346,5.517,349,1.917,397,1.355,413,2.312,435,1.398,436,1.847,446,3.522,521,6.093,531,2.887,636,2.22,664,3.522,897,3.522,899,3.819,904,3.522,919,4.218,1274,5.483,1620,4.218,1621,6.967,1622,6.967,1623,4.823,1624,6.27,1625,4.823,1626,4.823,1627,4.823,1628,4.823,1629,4.823,1630,4.823,1631,6.967,1632,4.823,1633,4.823,1634,4.218,1635,4.823,1636,4.823,1637,4.823,1638,4.823,1639,4.823,1640,4.823,1641,4.823,1642,4.823,1643,4.218,1644,4.823,1645,4.823,1646,4.823,1647,4.823,1648,4.823,1649,4.823]],["title/modules/StripeSubscriptionModule.html",[0,1.017,15,2.659]],["body/modules/StripeSubscriptionModule.html",[0,1.736,2,2.173,3,2.814,7,0.012,15,5.332,21,2.917,22,2.329,23,2.173,24,0.183,25,0.183,26,0.147,28,2.414,42,0.272,44,0.889,45,2.815,46,1.786,116,3.371,118,4.288,120,3.758,121,4.651,180,3.026,181,0.202,182,0.069,187,0.01,188,0.01,372,3.142,889,4.288,1650,5.136,1651,5.136,1652,5.136,1653,5.492,1654,5.873,1655,5.136,1656,5.873]],["title/injectables/StripeSubscriptionService.html",[435,0.926,1653,2.659]],["body/injectables/StripeSubscriptionService.html",[7,0.012,24,0.173,25,0.173,26,0.139,29,1.731,33,0.715,35,1.627,36,0.87,37,0.55,38,0.839,40,1.731,42,0.267,44,0.842,46,1.691,58,1.492,116,3.191,120,3.557,121,4.403,181,0.191,182,0.065,183,1.731,184,1.403,187,0.01,188,0.01,194,0.424,195,2.06,311,5.434,331,1.627,435,1.53,436,2.129,440,2.364,447,2.559,522,3.883,531,2.559,889,5.674,904,5.01,1653,4.39,1657,4.862,1658,7.442,1659,5.559,1660,5.559,1661,6.861,1662,5.559,1663,5.559,1664,5.559,1665,5.559,1666,5.559,1667,5.559]],["title/modules/StripeWebHookModule.html",[0,1.017,16,2.83]],["body/modules/StripeWebHookModule.html",[0,1.661,2,2.024,3,2.694,7,0.012,9,4.897,15,5.181,16,5.814,18,4.897,21,2.792,22,2.169,23,2.024,24,0.171,25,0.171,26,0.136,28,2.792,42,0.278,44,0.828,95,4.331,115,4.331,116,3.139,118,3.993,119,4.783,179,2.002,180,2.332,181,0.188,182,0.064,187,0.01,188,0.01,369,5.181,372,3.008,377,4.783,1668,4.783,1669,4.783,1670,5.469,1671,5.734,1672,3.993,1673,5.469,1674,5.469]],["title/controllers/StripeWebhookController.html",[189,1.151,1671,2.83]],["body/controllers/StripeWebhookController.html",[7,0.012,24,0.114,25,0.114,26,0.091,29,1.311,33,0.499,35,1.233,36,0.659,37,0.416,38,0.635,40,1.311,42,0.265,44,0.554,48,4.412,49,2.673,109,0.99,116,3.468,118,2.673,146,3.539,147,2.253,179,1.079,181,0.126,182,0.043,183,0.923,184,1.947,187,0.007,188,0.007,189,1.013,192,1.685,194,0.279,195,1.998,205,0.654,234,2.203,262,2.673,267,2.301,269,1.685,270,0.816,278,3.468,279,3.201,282,3.654,283,3.201,284,3.654,285,3.201,294,1.561,299,2.47,304,1.31,308,1.233,313,2.492,326,2.417,328,2.492,329,3.795,331,0.868,348,5.284,349,1.937,411,2.101,477,5.27,531,2.393,612,1.99,682,1.452,761,3.325,891,3.201,892,3.201,893,3.201,894,3.201,895,3.201,896,3.201,897,2.673,898,3.201,899,2.898,900,3.201,901,3.201,904,5.27,925,3.201,1163,2.896,1653,3.867,1655,3.201,1671,3.539,1672,4.412,1675,4.785,1676,2.898,1677,6.043,1678,6.043,1679,3.66,1680,6.578,1681,3.66,1682,3.66,1683,5.753,1684,3.66,1685,3.66,1686,6.043,1687,5.753,1688,2.898,1689,3.66,1690,2.898,1691,2.673,1692,4.545,1693,4.545,1694,4.545,1695,4.545,1696,3.66,1697,3.66,1698,3.66,1699,6.043,1700,3.66,1701,3.66,1702,3.66,1703,3.66,1704,3.66,1705,3.66,1706,3.66,1707,3.201,1708,3.66,1709,3.66,1710,6.043,1711,3.66,1712,5.197,1713,3.66,1714,3.66,1715,3.66,1716,3.66,1717,3.66,1718,3.66,1719,3.66,1720,3.66,1721,3.66,1722,3.66,1723,3.66,1724,3.66,1725,3.66,1726,3.66,1727,3.66,1728,3.66,1729,3.66,1730,5.197,1731,3.66,1732,3.66,1733,3.66,1734,3.66,1735,3.66,1736,3.66,1737,6.043,1738,3.66,1739,3.66,1740,3.66,1741,6.043,1742,3.66,1743,2.898,1744,3.66,1745,3.66,1746,3.66,1747,3.66,1748,5.197,1749,3.66,1750,3.66,1751,3.66,1752,3.66,1753,3.66,1754,3.66,1755,3.66,1756,3.66,1757,3.66,1758,3.66]],["title/modules/SubmitModule.html",[0,1.017,17,2.83]],["body/modules/SubmitModule.html",[0,1.684,2,2.069,3,2.731,7,0.012,17,5.717,21,2.83,22,2.217,23,2.069,24,0.174,25,0.174,26,0.139,28,2.298,42,0.284,44,0.847,45,2.679,46,1.701,75,2.232,76,2.679,85,3.441,86,3.806,179,2.029,180,2.936,181,0.192,182,0.065,187,0.01,188,0.01,340,1.455,372,3.049,382,3.347,386,2.919,389,3.056,1490,5.447,1516,5.458,1517,4.889,1759,4.889,1760,4.889,1761,4.889,1762,5.59,1763,5.59]],["title/injectables/SubmitService.html",[435,0.926,1516,2.659]],["body/injectables/SubmitService.html",[7,0.012,24,0.141,25,0.141,26,0.113,29,1.514,33,0.691,35,1.6,36,0.855,37,0.54,38,0.824,40,1.702,42,0.247,44,0.683,46,1.373,58,1.211,85,2.255,86,3.073,147,2.187,181,0.155,182,0.053,183,1.514,184,1.139,187,0.008,188,0.008,194,0.344,195,2.131,214,2.488,225,1.129,234,2.754,299,2.277,326,2.408,331,1.705,340,1.562,435,1.338,436,1.729,440,2.187,444,4.635,447,2.078,456,3.592,522,3.592,539,3.134,541,3.134,588,2.078,682,1.79,1163,3.232,1212,2.467,1215,3.281,1420,3.445,1421,2.888,1516,3.841,1518,3.574,1577,3.295,1580,3.295,1585,4.383,1588,3.295,1764,3.947,1765,6.744,1766,6.744,1767,4.513,1768,4.513,1769,6.002,1770,4.513,1771,4.513,1772,4.513,1773,4.513,1774,4.513,1775,4.513,1776,4.513,1777,6.002,1778,6.002,1779,7.695,1780,6.002,1781,6.002,1782,4.513,1783,4.513,1784,4.513]],["title/classes/SupabaseAuthDto.html",[182,0.048,275,3.034]],["body/classes/SupabaseAuthDto.html",[7,0.012,24,0.084,25,0.084,26,0.067,33,0.763,36,0.854,37,0.636,38,1.025,42,0.093,109,1.604,143,2.564,181,0.093,182,0.032,187,0.006,188,0.006,193,5.437,194,0.206,205,1.419,209,3.92,225,0.566,231,5.483,232,1.911,243,3.347,270,0.602,273,5.007,275,3.031,300,4.583,302,4.421,303,4.421,304,1.809,305,2.156,308,1.199,309,4.003,317,3.442,318,3.691,319,4.421,320,4.169,321,4.169,322,3.442,323,4.169,324,3.235,325,2.526,336,1.769,349,2.024,391,1.071,397,0.897,398,2.973,424,5.079,475,1.477,479,2.819,482,2.976,489,2.269,506,6.243,571,1.706,590,3.031,591,2.656,607,3.076,608,3.198,610,1.838,611,3.798,612,2.786,613,3.076,622,1.77,625,3.101,665,3.198,667,3.031,676,2.074,689,3.431,712,2.656,942,3.287,946,4.142,953,2.656,956,2.826,967,3.63,971,4.142,977,3.63,978,3.63,1005,3.287,1012,3.63,1013,3.287,1014,3.287,1015,3.63,1785,6.983,1786,2.362,1787,2.701,1788,2.701,1789,4.151,1790,4.151,1791,2.701,1792,2.701,1793,2.701,1794,4.151,1795,2.701,1796,2.701,1797,2.701,1798,5.673,1799,4.151,1800,2.701,1801,4.151,1802,2.701,1803,4.151,1804,2.701,1805,2.701,1806,2.701,1807,2.701,1808,2.701,1809,2.701,1810,4.151,1811,2.701,1812,2.701]],["title/injectables/SupabaseGuard.html",[271,1.913,435,0.926]],["body/injectables/SupabaseGuard.html",[7,0.012,24,0.202,25,0.202,26,0.161,42,0.258,44,0.979,181,0.222,182,0.075,187,0.011,188,0.011,271,3.457,374,5.118,395,2.657,435,1.674,436,2.476,1813,5.652,1814,6.463,1815,6.463]],["title/injectables/SupabaseStrategy.html",[370,2.83,435,0.926]],["body/injectables/SupabaseStrategy.html",[7,0.012,24,0.169,25,0.169,26,0.135,29,1.702,33,0.707,35,1.6,36,0.856,37,0.541,38,0.824,40,1.702,41,3.95,42,0.265,44,0.819,55,3.95,109,1.286,181,0.186,182,0.063,183,1.855,187,0.009,188,0.009,193,3.684,194,0.413,195,2.035,204,6.731,273,4.317,314,2.414,331,1.283,370,4.593,374,4.284,395,2.224,435,1.504,436,2.072,531,2.491,1683,5.9,1816,4.731,1817,7.351,1818,7.351,1819,5.41,1820,5.41,1821,7.351,1822,5.41,1823,5.41,1824,5.41,1825,6.746,1826,5.41,1827,5.41,1828,5.41,1829,6.746,1830,5.41,1831,5.41,1832,5.41,1833,5.41,1834,5.41,1835,5.41,1836,5.41,1837,5.41,1838,5.41,1839,5.41,1840,5.41,1841,5.41]],["title/classes/UpdateInsightDto.html",[182,0.048,1141,2.83]],["body/classes/UpdateInsightDto.html",[7,0.012,24,0.178,25,0.178,26,0.143,33,0.724,36,0.956,37,0.656,42,0.197,128,3.282,181,0.197,182,0.067,187,0.01,188,0.01,194,0.436,205,1.347,222,4.175,225,0.78,349,1.707,391,2.268,393,2.057,395,2.869,397,1.508,416,5.13,440,1.739,470,5.573,472,4.528,473,5.967,474,5.097,475,4.119,476,3.893,477,4.175,478,3.893,479,2.524,480,4.175,482,3.213,483,3.816,484,4.175,485,4.528,487,5,1141,4.753,1151,4.528,1842,5,1843,5.717,1844,5.717,1845,5.717]],["title/classes/UpdateUserDto.html",[182,0.048,240,2.83]],["body/classes/UpdateUserDto.html",[7,0.012,24,0.116,25,0.116,26,0.093,33,0.744,36,0.886,37,0.682,38,0.994,42,0.18,109,1.583,136,3.572,143,1.471,181,0.128,182,0.061,187,0.007,188,0.007,194,0.283,205,1.384,240,3.572,243,3.817,256,6.01,270,0.827,314,3.046,320,4.754,321,4.754,322,4.145,323,4.754,324,3.895,325,3.489,336,1.726,349,2.099,391,1.471,397,1.134,424,4.871,426,5.183,427,1.937,475,2.868,479,2.782,482,3.047,489,3.328,490,4.155,491,5.901,506,5.901,571,2.157,814,2.938,945,5.529,946,3.831,953,3.357,956,3.572,1002,5.787,1005,4.155,1011,3.244,1013,2.938,1014,2.938,1846,5.73,1847,3.244,1848,4.588,1849,3.709,1850,3.709,1851,5.246,1852,3.709,1853,3.709,1854,3.709,1855,3.709,1856,3.709,1857,3.709,1858,6.087,1859,3.709,1860,3.709,1861,3.709,1862,3.709,1863,3.709,1864,3.709,1865,3.709,1866,3.709,1867,5.246,1868,5.246,1869,3.709]],["title/classes/UpdateUserEmailPreferencesDto.html",[182,0.048,241,2.83]],["body/classes/UpdateUserEmailPreferencesDto.html",[7,0.012,24,0.172,25,0.172,26,0.137,33,0.656,37,0.65,42,0.235,109,1.567,143,2.706,181,0.189,182,0.08,187,0.01,188,0.01,194,0.42,205,1.219,241,4.645,243,4.352,270,1.228,314,2.973,336,1.521,391,2.185,397,1.474,427,2.876,475,3.73,479,2.594,482,3.825,485,5.403,489,4.052,490,5.869,601,5.403,938,5.869,944,5.869,953,4.365,988,5.966,1846,5.412,1870,4.818,1871,5.509,1872,6.822,1873,5.509]],["title/classes/UpdateUserProfileInterestsDto.html",[182,0.048,250,2.83]],["body/classes/UpdateUserProfileInterestsDto.html",[7,0.012,24,0.185,25,0.185,26,0.148,33,0.57,37,0.613,42,0.245,109,1.36,128,4.096,181,0.204,182,0.083,187,0.01,188,0.01,194,0.452,205,1.06,250,4.859,252,5.535,270,1.322,314,2.739,336,1.322,349,1.873,391,2.352,397,1.542,427,3.096,475,3.242,476,4.859,477,4.33,478,5.409,479,2.39,480,4.33,489,3.901,818,4.696,1846,5.211,1874,5.186,1875,5.93,1876,5.186]],["title/controllers/UserController.html",[189,1.151,1877,3.034]],["body/controllers/UserController.html",[7,0.012,24,0.142,25,0.142,26,0.114,29,1.523,33,0.58,35,1.432,36,0.766,37,0.578,38,0.738,40,1.523,42,0.278,44,0.69,77,2.674,109,1.523,122,3.466,124,3.101,136,5.111,179,1.342,181,0.157,182,0.053,183,1.149,184,1.523,187,0.008,188,0.008,189,1.261,192,2.097,194,0.347,195,2.136,205,1.079,208,3.458,214,2.497,246,3.983,266,3.386,267,3,268,3.247,269,2.097,270,1.015,278,3.888,294,1.942,297,2.894,299,1.385,315,3.101,326,1.525,331,1.432,336,1.346,349,1.887,396,2.636,428,2.378,429,1.744,448,1.872,449,2.097,565,3.153,1127,3.466,1144,2.378,1158,3.944,1295,4.409,1304,2.378,1305,2.614,1306,2.276,1307,2.614,1877,4.409,1878,3.983,1879,7.506,1880,6.774,1881,4.554,1882,4.554,1883,5.713,1884,5.281,1885,4.554,1886,3.983,1887,4.554,1888,4.554,1889,4.554,1890,6.038,1891,4.554,1892,4.554,1893,3.325,1894,4.097,1895,3.606,1896,3.606,1897,3.983,1898,4.554,1899,3.983,1900,4.554,1901,6.038,1902,6.038,1903,4.554,1904,4.554,1905,4.554,1906,4.554]],["title/controllers/UserHighlightsController.html",[189,1.151,1907,3.034]],["body/controllers/UserHighlightsController.html",[7,0.012,24,0.118,25,0.118,26,0.094,29,1.342,33,0.591,35,1.459,36,0.781,37,0.601,38,0.752,40,1.552,42,0.258,44,0.573,109,1.519,122,3.532,124,2.576,147,1.725,179,1.115,181,0.13,182,0.044,183,0.955,184,0.955,187,0.007,188,0.007,189,1.048,192,1.742,194,0.289,195,2.153,205,1.1,208,3.497,209,3.809,214,2.525,221,5.327,225,1.12,226,4.873,229,4.213,232,2.449,234,2.75,257,3.885,261,2.996,262,3.885,263,2.172,264,3.832,265,4.493,266,3.336,267,2.725,268,3.2,269,1.742,270,0.844,271,1.742,294,1.614,296,3.532,297,2.949,299,1.151,326,2.236,331,1.262,336,1.626,398,1.31,495,5.425,498,5.366,1024,3.832,1135,3.309,1139,5.777,1140,4.213,1143,3.721,1144,1.976,1147,5.287,1148,2.288,1149,2.288,1159,2.909,1161,3.309,1432,3.623,1883,2.996,1886,4.653,1893,2.763,1894,3.721,1895,2.996,1899,3.309,1907,3.885,1908,5.287,1909,3.309,1910,3.784,1911,5.381,1912,7.034,1913,7.034,1914,3.784,1915,3.309,1916,5.32,1917,3.623,1918,6.153,1919,3.784,1920,6.153,1921,3.784,1922,6.38,1923,5.32,1924,3.784,1925,3.784,1926,3.784,1927,3.309,1928,3.784,1929,6.153,1930,2.996,1931,3.309,1932,3.784,1933,3.784,1934,3.309,1935,6.153,1936,3.784,1937,3.784]],["title/injectables/UserHighlightsService.html",[435,0.926,1894,2.513]],["body/injectables/UserHighlightsService.html",[7,0.012,24,0.119,25,0.119,26,0.095,29,1.347,33,0.721,35,1.733,36,0.927,37,0.586,38,0.893,40,1.844,42,0.263,44,0.576,46,1.157,58,1.021,109,0.725,122,3.065,124,2.589,144,1.316,147,2.001,181,0.131,182,0.044,183,1.347,184,0.959,187,0.007,188,0.007,194,0.29,195,2.275,214,2.316,225,1.136,234,2.717,299,2.33,308,1.587,311,4.505,325,1.901,326,2.067,331,1.733,396,2.514,428,2.788,429,1.457,435,1.19,436,1.457,440,2.035,447,1.751,448,1.563,449,1.751,452,3.658,453,2.433,456,3.522,464,2.589,465,2.589,466,3.229,467,2.589,468,2.589,469,2.589,495,4.556,498,5.216,499,2.589,522,3.344,531,2.841,539,2.788,541,1.986,682,1.508,810,3.012,1163,1.823,1193,4.886,1194,3.948,1203,4.201,1204,3.012,1206,2.433,1212,2.919,1215,2.919,1220,3.221,1221,2.777,1893,2.777,1894,3.229,1908,6.066,1922,5.851,1930,3.012,1931,3.326,1938,3.326,1939,6.17,1940,6.17,1941,6.17,1942,3.803,1943,3.803,1944,5.339,1945,3.803,1946,3.803,1947,3.803,1948,3.803,1949,3.803,1950,3.803,1951,3.803,1952,3.803,1953,3.803,1954,3.803,1955,3.803,1956,3.803,1957,3.803,1958,3.803,1959,3.803,1960,3.803,1961,3.803,1962,3.803,1963,3.803,1964,3.803,1965,3.803,1966,3.803,1967,3.803]],["title/controllers/UserInsightsController.html",[189,1.151,1188,3.034]],["body/controllers/UserInsightsController.html",[7,0.012,24,0.098,25,0.098,26,0.078,29,1.175,33,0.533,35,1.315,36,0.83,37,0.583,38,0.678,40,1.399,42,0.267,44,0.476,104,3.35,109,1.387,147,2.221,179,0.927,181,0.108,182,0.037,183,0.794,184,1.175,187,0.007,188,0.007,189,0.871,192,1.448,194,0.24,195,2.058,205,0.991,208,3.283,209,3.199,214,2.37,221,5.314,225,1.014,226,4.39,229,3.687,232,2.552,234,2.69,257,3.4,261,2.491,262,3.4,263,1.806,264,3.517,265,4.048,266,3.062,267,2.713,268,2.937,269,1.448,270,0.701,271,1.448,294,1.341,296,3.182,297,2.657,299,2.261,308,1.453,313,2.142,326,2.294,328,2.142,329,2.297,331,1.315,336,1.527,349,1.356,393,1.928,396,1.56,398,1.612,429,1.205,444,3.754,448,1.293,449,1.448,470,4.955,474,3.4,483,4.244,565,2.431,680,2.937,682,1.248,698,2.751,712,3.921,909,2.297,1024,2.673,1129,4.848,1137,2.297,1138,4.072,1139,4.852,1140,2.491,1141,5.061,1144,1.642,1145,4.072,1147,4.39,1148,1.902,1149,1.902,1150,2.491,1151,3.687,1152,2.297,1153,3.352,1154,2.491,1156,2.751,1158,2.545,1159,1.72,1160,4.072,1162,2.751,1163,2.657,1165,4.172,1167,2.979,1188,3.4,1190,2.297,1213,2.751,1295,3.4,1304,1.642,1305,1.806,1306,1.572,1307,1.806,1432,3.17,1687,4.072,1691,2.297,1884,4.072,1911,5.72,1915,2.751,1917,3.775,1927,2.751,1930,2.491,1934,2.751,1968,5.359,1969,2.751,1970,3.146,1971,6.541,1972,6.541,1973,3.146,1974,3.146,1975,3.146,1976,3.146,1977,3.146,1978,3.146,1979,3.146,1980,3.146,1981,3.146,1982,3.146,1983,4.656,1984,4.656,1985,3.146,1986,3.146,1987,3.146,1988,3.146,1989,4.656,1990,3.146,1991,4.656,1992,3.146,1993,3.146,1994,3.146,1995,3.146,1996,3.146,1997,3.146,1998,3.146,1999,3.146,2000,3.146,2001,3.146,2002,3.146,2003,3.146,2004,3.146,2005,3.146,2006,3.146,2007,3.146,2008,3.146,2009,3.146,2010,3.146,2011,3.146,2012,3.146,2013,3.146,2014,3.146,2015,3.146,2016,3.146,2017,3.146,2018,3.146,2019,3.146,2020,3.146,2021,3.146,2022,3.146]],["title/modules/UserModule.html",[0,1.017,18,2.513]],["body/modules/UserModule.html",[0,1.66,2,2.02,3,2.691,7,0.012,18,5.057,21,2.789,22,2.165,23,2.02,24,0.17,25,0.17,26,0.136,28,2.244,42,0.285,44,0.827,45,2.616,46,1.661,77,3.004,109,1.293,122,3.894,124,3.717,179,2,180,2.893,181,0.188,182,0.064,187,0.009,188,0.009,278,4.881,372,3.004,389,2.984,1877,5.638,1893,3.986,1894,4.894,1895,4.323,1896,4.323,1897,4.774,1907,5.638,2023,4.774,2024,4.774,2025,4.774,2026,5.459,2027,5.459,2028,5.459]],["title/classes/UserRepoOptionsDto.html",[182,0.048,227,2.513]],["body/classes/UserRepoOptionsDto.html",[7,0.012,24,0.173,25,0.173,26,0.138,33,0.715,37,0.596,38,0.993,42,0.191,181,0.191,182,0.065,187,0.01,188,0.01,194,0.423,205,1.329,225,0.935,227,4.144,290,4.052,340,1.444,391,2.201,393,2.02,394,3.356,395,2.817,396,2.722,397,1.481,398,2.812,400,4.144,401,4.666,403,2.552,404,3.423,406,3.779,407,3.779,411,3.934,412,4.666,413,3.564,414,3.779,415,3.779,416,5.063,417,4.052,418,4.268,419,3.356,420,3.779,421,4.052,422,3.779,423,4.052,428,2.897,429,2.125,1040,3.551]],["title/classes/UserRepoOptionsDto-1.html",[182,0.04,227,2.097,413,1.662]],["body/classes/UserRepoOptionsDto-1.html",[7,0.012,24,0.184,25,0.184,26,0.147,33,0.568,37,0.612,42,0.245,128,4.087,181,0.203,182,0.083,187,0.01,188,0.01,194,0.451,205,1.056,225,1.082,227,4.306,230,4.848,270,1.317,290,5.199,336,1.317,391,2.343,397,1.539,398,2.645,427,3.084,473,6.052,475,3.229,478,5.402,479,2.385,480,4.313,489,3.892,663,3.572,680,3.412,1040,4.556,1917,4.848,2029,5.166,2030,5.907,2031,5.907]],["title/modules/UserReposModule.html",[0,1.017,19,2.659]],["body/modules/UserReposModule.html",[0,1.729,2,2.161,3,2.804,7,0.012,19,5.326,21,2.906,22,2.316,23,2.161,24,0.182,25,0.182,26,0.146,28,2.4,42,0.272,44,0.884,45,2.798,46,1.776,108,2.918,109,1.347,110,3.531,112,4.275,180,3.015,181,0.201,182,0.068,187,0.01,188,0.01,280,5.488,281,5.106,372,3.131,389,3.192,1040,3.736,2032,5.106,2033,5.106,2034,5.106,2035,5.839]],["title/injectables/UserReposService.html",[280,2.659,435,0.926]],["body/injectables/UserReposService.html",[7,0.012,24,0.132,25,0.132,26,0.106,29,1.452,33,0.704,35,1.662,36,0.889,37,0.562,38,0.857,40,1.768,42,0.266,44,0.642,46,1.29,58,1.138,108,2.119,109,0.808,110,4.57,112,3.481,144,1.468,147,2.119,181,0.146,182,0.049,183,1.452,184,1.07,187,0.008,188,0.008,194,0.324,195,2.207,214,2.426,225,1.087,227,4.239,234,2.634,280,3.683,299,2.392,308,1.662,326,2.189,331,1.662,340,1.104,349,1.599,396,2.189,428,2.214,429,1.624,435,1.283,436,1.624,440,2.132,444,4.023,447,1.952,448,1.743,449,1.952,452,3.832,453,2.713,456,3.503,464,2.887,465,2.887,466,3.481,467,2.887,468,2.887,469,2.887,522,3.503,531,1.952,539,2.214,541,2.214,588,1.952,682,1.682,1040,4.836,1163,2.032,1193,5.175,1194,4.182,1203,4.45,1204,3.358,1206,2.713,1212,3.147,1215,3.147,1220,3.412,1221,3.096,2036,3.709,2037,6.535,2038,4.241,2039,4.241,2040,5.756,2041,4.241,2042,4.241,2043,4.241,2044,4.241,2045,4.241,2046,4.241,2047,4.241,2048,5.756,2049,4.241,2050,4.241,2051,4.241,2052,4.241,2053,4.241]],["title/injectables/UserService.html",[278,2.385,435,0.926]],["body/injectables/UserService.html",[7,0.012,24,0.089,25,0.089,26,0.071,29,1.091,33,0.721,35,1.75,36,0.951,37,0.591,38,0.902,40,1.861,42,0.243,44,0.431,46,0.867,58,0.765,77,2.313,109,1.562,128,2.999,136,3.557,143,2.313,147,2.346,181,0.098,182,0.033,183,1.091,184,0.719,187,0.006,188,0.006,194,0.217,195,2.298,214,2.284,222,2.08,225,1.122,230,1.94,232,2.685,237,2.08,240,3.971,241,3.971,243,3.427,250,3.971,252,1.94,278,2.481,287,2.492,288,2.492,289,2.492,299,2.149,300,4.269,304,1.019,305,1.215,306,2.492,308,1.899,309,3.423,313,4.494,317,1.94,318,3.157,320,1.94,321,1.94,322,1.94,323,1.94,324,1.823,325,1.424,326,2.546,328,4.494,329,4.819,331,1.676,349,1.534,403,0.895,404,1.312,435,0.964,436,1.091,440,1.774,447,1.312,456,2.915,522,2.915,531,2.405,539,2.257,541,2.257,568,2.256,605,1.262,612,1.091,641,2.08,761,2.766,938,2.256,940,2.492,942,2.256,944,2.256,945,2.256,1150,4.137,1163,3.163,1194,3.343,1203,3.557,1206,1.823,1212,2.856,1215,2.363,1220,3.688,1221,3.815,1896,2.256,2054,2.492,2055,5.224,2056,5.224,2057,5.224,2058,5.224,2059,5.224,2060,5.224,2061,5.224,2062,5.224,2063,2.849,2064,2.849,2065,4.323,2066,2.849,2067,2.849,2068,2.849,2069,5.832,2070,2.849,2071,2.849,2072,2.849,2073,2.849,2074,2.849,2075,2.849,2076,2.849,2077,2.849,2078,2.849,2079,2.849,2080,2.849,2081,2.849,2082,2.849,2083,2.849,2084,2.849,2085,2.849,2086,2.849,2087,2.849,2088,2.849,2089,2.849,2090,2.849,2091,2.849,2092,2.849,2093,2.849,2094,2.849,2095,2.849,2096,2.849,2097,2.849,2098,2.849,2099,2.849,2100,6.599,2101,4.323,2102,2.849,2103,2.849,2104,2.849,2105,2.849,2106,6.599,2107,2.849,2108,2.849,2109,2.849,2110,2.849,2111,2.849,2112,2.849,2113,2.849,2114,2.849,2115,2.849,2116,5.832,2117,2.849,2118,2.849,2119,2.849]],["title/modules/VoteModule.html",[0,1.017,20,2.83]],["body/modules/VoteModule.html",[0,1.684,2,2.069,3,2.731,7,0.012,20,5.717,21,2.83,22,2.217,23,2.069,24,0.174,25,0.174,26,0.139,28,2.298,42,0.284,44,0.847,45,2.679,46,1.701,75,2.232,76,2.679,81,3.441,82,3.806,179,2.029,180,2.936,181,0.192,182,0.065,187,0.01,188,0.01,340,1.455,372,3.049,382,3.347,386,2.919,389,3.056,1526,5.447,1552,5.458,1553,4.889,2120,4.889,2121,4.889,2122,4.889,2123,5.59,2124,5.59]],["title/injectables/VoteService.html",[435,0.926,1552,2.659]],["body/injectables/VoteService.html",[7,0.012,24,0.141,25,0.141,26,0.113,29,1.514,33,0.691,35,1.6,36,0.855,37,0.54,38,0.824,40,1.702,42,0.247,44,0.683,46,1.373,58,1.211,81,2.255,82,3.073,147,2.187,181,0.155,182,0.053,183,1.514,184,1.139,187,0.008,188,0.008,194,0.344,195,2.131,214,2.488,225,1.129,234,2.754,299,2.277,326,2.408,331,1.705,340,1.562,435,1.338,436,1.729,440,2.187,444,4.635,447,2.078,456,3.592,522,3.592,539,3.134,541,3.134,588,2.078,682,1.79,875,3.295,1163,3.232,1212,2.467,1215,3.281,1420,3.445,1421,2.888,1544,4.753,1552,3.841,1577,3.295,1580,3.295,1585,4.383,1588,3.295,2125,3.947,2126,6.744,2127,6.744,2128,4.513,2129,4.513,2130,6.002,2131,4.513,2132,4.513,2133,4.513,2134,4.513,2135,4.513,2136,4.513,2137,4.513,2138,6.002,2139,6.002,2140,7.695,2141,6.002,2142,4.513,2143,4.513,2144,4.513]],["title/changelog.html",[2145,2.532,2146,2.746,2147,3.032]],["body/changelog.html",[3,1.868,7,0.012,23,0.304,24,0.047,26,0.084,35,0.356,36,0.47,37,0.271,38,0.315,56,1.314,58,0.995,75,0.487,77,0.665,79,0.785,81,1.286,83,1.286,85,1.286,87,1.286,99,1.19,109,1.468,116,0.863,126,1.314,136,1.023,140,3.111,144,1.63,146,1.023,147,1.095,158,1.647,172,1.19,173,2.038,174,1.314,175,1.19,178,0.599,187,0.002,188,0.002,189,1.245,193,1.753,205,0.269,209,2.887,210,4.379,218,1.314,222,0.599,225,0.112,230,2.299,231,3.283,232,2.985,234,0.503,237,1.097,243,2.458,244,2.251,252,1.023,256,3.581,273,1.921,294,1.44,300,1.023,304,0.538,308,0.61,312,1.314,314,0.538,315,3.57,316,1.097,317,1.023,324,0.962,325,0.41,331,0.61,336,0.335,340,1.669,393,1.179,397,1.248,400,1.258,403,0.808,404,0.378,413,0.393,430,1.097,431,1.097,440,1.127,482,0.692,483,2.681,484,1.097,498,1.023,499,1.753,501,1.097,503,1.286,513,0.822,565,0.785,568,1.19,571,0.618,585,1.55,591,0.525,600,1.097,605,0.665,607,1.14,609,1.753,610,1.329,612,2.254,613,1.887,620,1.137,627,1.19,636,3.762,637,3.544,638,1.938,641,1.879,658,2.358,660,1.753,664,0.599,680,3.074,689,0.909,703,2.625,712,2.16,713,4.023,728,1.314,738,1.19,739,1.19,740,1.19,741,1.19,749,1.647,754,1.19,761,1.331,768,1.314,780,2.935,823,1.19,841,1.097,856,1.314,857,0.65,875,1.879,897,3.283,909,0.599,932,1.314,946,1.097,953,0.962,956,1.753,974,2.952,983,1.19,1019,5.608,1020,4.48,1024,1.477,1048,0.717,1068,4.443,1096,1.879,1098,2.251,1104,1.19,1114,2.251,1132,1.314,1137,2.706,1143,1.556,1227,3.167,1228,2.299,1254,1.314,1259,1.819,1295,1.879,1302,1.314,1306,1.286,1350,0.599,1353,0.599,1389,1.19,1428,1.19,1508,1.314,1518,1.19,1544,1.19,1634,4.836,1691,1.097,1707,1.314,1743,0.65,1848,2.251,1883,2.038,1917,5.664,2145,0.599,2147,1.819,2148,1.314,2149,2.08,2150,2.625,2151,2.08,2152,0.717,2153,5.32,2154,5.392,2155,2.251,2156,7.546,2157,7.546,2158,0.82,2159,0.82,2160,1.503,2161,0.82,2162,3.376,2163,2.08,2164,7.589,2165,6.484,2166,1.503,2167,1.503,2168,1.503,2169,2.251,2170,1.503,2171,1.503,2172,1.503,2173,3.376,2174,1.503,2175,1.503,2176,1.503,2177,1.503,2178,1.503,2179,1.503,2180,1.503,2181,3.002,2182,3.002,2183,3.706,2184,5.392,2185,4.904,2186,5.243,2187,3.999,2188,2.574,2189,3.002,2190,2.574,2191,3.999,2192,3.999,2193,4.904,2194,3.999,2195,2.574,2196,6.674,2197,3.376,2198,4.904,2199,2.574,2200,2.952,2201,2.574,2202,2.574,2203,5.08,2204,3.376,2205,2.574,2206,2.574,2207,2.574,2208,2.574,2209,2.08,2210,5.543,2211,1.503,2212,1.503,2213,6.174,2214,7.568,2215,4.66,2216,1.503,2217,0.82,2218,1.503,2219,4.497,2220,3.376,2221,3.376,2222,1.503,2223,1.503,2224,1.503,2225,2.08,2226,1.503,2227,1.503,2228,1.503,2229,1.314,2230,1.503,2231,1.503,2232,2.251,2233,1.503,2234,1.503,2235,1.503,2236,1.503,2237,3.002,2238,3.376,2239,2.08,2240,2.952,2241,1.503,2242,1.503,2243,1.503,2244,1.503,2245,1.503,2246,0.82,2247,1.503,2248,3.999,2249,2.574,2250,1.503,2251,6.732,2252,1.503,2253,1.503,2254,4.904,2255,1.503,2256,2.952,2257,3.002,2258,1.503,2259,1.503,2260,1.503,2261,4.497,2262,1.503,2263,1.503,2264,1.503,2265,1.503,2266,3.002,2267,1.503,2268,1.503,2269,1.503,2270,1.503,2271,1.503,2272,2.08,2273,1.503,2274,1.503,2275,1.503,2276,1.503,2277,1.503,2278,1.503,2279,2.574,2280,1.503,2281,1.503,2282,1.503,2283,1.503,2284,1.503,2285,1.503,2286,1.503,2287,1.503,2288,1.503,2289,1.503,2290,1.503,2291,1.503,2292,2.574,2293,1.503,2294,1.503,2295,1.503,2296,1.503,2297,1.503,2298,0.82,2299,2.08,2300,5.243,2301,2.574,2302,1.503,2303,3.726,2304,1.503,2305,1.503,2306,1.503,2307,4.71,2308,1.503,2309,1.503,2310,3.999,2311,1.503,2312,1.503,2313,1.503,2314,1.503,2315,1.503,2316,1.503,2317,1.503,2318,3.726,2319,1.503,2320,1.503,2321,1.314,2322,1.503,2323,1.503,2324,1.503,2325,1.503,2326,2.08,2327,0.82,2328,4.297,2329,1.503,2330,2.251,2331,1.503,2332,1.503,2333,1.503,2334,1.503,2335,1.503,2336,1.503,2337,3.002,2338,0.82,2339,2.574,2340,1.503,2341,1.503,2342,1.503,2343,1.503,2344,1.503,2345,1.503,2346,1.503,2347,1.503,2348,1.503,2349,3.002,2350,4.585,2351,1.503,2352,1.503,2353,6.551,2354,3.932,2355,1.503,2356,1.503,2357,1.503,2358,1.503,2359,2.574,2360,1.503,2361,1.503,2362,1.503,2363,1.503,2364,1.503,2365,1.503,2366,1.503,2367,2.08,2368,3.002,2369,1.503,2370,1.503,2371,1.819,2372,1.503,2373,1.503,2374,3.999,2375,1.503,2376,0.82,2377,1.314,2378,1.503,2379,1.503,2380,2.574,2381,2.574,2382,1.503,2383,1.503,2384,3.376,2385,2.952,2386,1.503,2387,1.314,2388,1.503,2389,1.503,2390,1.503,2391,1.503,2392,1.503,2393,1.503,2394,2.251,2395,1.503,2396,1.314,2397,2.574,2398,1.503,2399,1.819,2400,2.574,2401,1.503,2402,1.503,2403,1.503,2404,1.503,2405,1.503,2406,1.314,2407,1.819,2408,1.503,2409,1.503,2410,5.988,2411,3.002,2412,3.002,2413,1.503,2414,1.503,2415,1.314,2416,1.503,2417,1.503,2418,1.503,2419,1.503,2420,3.376,2421,1.503,2422,1.503,2423,1.503,2424,1.503,2425,1.503,2426,1.503,2427,1.503,2428,1.503,2429,1.503,2430,1.503,2431,3.932,2432,1.503,2433,1.503,2434,1.503,2435,1.503,2436,1.503,2437,3.002,2438,1.503,2439,1.503,2440,1.503,2441,1.503,2442,2.08,2443,1.503,2444,1.503,2445,1.503,2446,1.314,2447,1.503,2448,1.503,2449,3.999,2450,1.503,2451,2.574,2452,1.503,2453,2.08,2454,2.08,2455,1.503,2456,1.503,2457,1.314,2458,3.376,2459,3.376,2460,1.503,2461,1.503,2462,1.503,2463,1.503,2464,2.574,2465,3.376,2466,1.503,2467,1.503,2468,1.503,2469,1.503,2470,1.503,2471,1.503,2472,1.503,2473,2.08,2474,1.503,2475,1.503,2476,1.503,2477,1.503,2478,1.503,2479,1.503,2480,1.503,2481,1.503,2482,5.529,2483,1.503,2484,1.503,2485,1.503,2486,1.503,2487,1.503,2488,1.503,2489,1.503,2490,1.503,2491,1.503,2492,1.503,2493,3.376,2494,1.19,2495,1.503,2496,1.503,2497,2.251,2498,1.503,2499,1.503,2500,2.251,2501,1.503,2502,1.503,2503,1.503,2504,1.503,2505,1.503,2506,1.503,2507,1.503,2508,1.503,2509,3.002,2510,1.503,2511,1.503,2512,1.503,2513,1.503,2514,1.503,2515,1.503,2516,1.503,2517,1.503,2518,2.08,2519,1.503,2520,2.574,2521,1.503,2522,0.82,2523,0.82,2524,0.82,2525,0.82,2526,0.82,2527,0.82,2528,0.82,2529,0.82,2530,0.82,2531,0.82,2532,0.82,2533,0.82,2534,0.82,2535,0.82,2536,0.82,2537,0.82,2538,0.82,2539,0.82,2540,0.82,2541,0.82,2542,0.82,2543,3.376,2544,2.251,2545,2.574,2546,1.503,2547,2.08,2548,1.503,2549,1.503,2550,1.503,2551,1.503,2552,1.503,2553,1.503,2554,3.376,2555,1.503,2556,1.503,2557,3.002,2558,6.934,2559,0.82,2560,0.82,2561,0.82,2562,4.119,2563,0.82,2564,0.82,2565,0.82,2566,0.82,2567,0.82,2568,0.82,2569,3.241,2570,0.82,2571,0.82,2572,0.82,2573,0.82,2574,1.819,2575,1.19,2576,0.82,2577,0.82,2578,0.82,2579,0.82,2580,0.82,2581,0.82,2582,0.82,2583,0.82,2584,0.717,2585,1.314,2586,0.82,2587,0.82,2588,0.82,2589,0.82,2590,3.726,2591,0.82,2592,0.82,2593,0.82,2594,0.82,2595,1.314,2596,0.82,2597,0.82,2598,0.82,2599,0.717,2600,0.717,2601,0.82,2602,0.82,2603,0.82,2604,0.82,2605,0.82,2606,0.82,2607,0.82,2608,0.82,2609,3.497,2610,0.82,2611,0.82,2612,0.82,2613,0.82,2614,1.503,2615,0.82,2616,0.82,2617,0.82,2618,0.82,2619,0.717,2620,0.82,2621,0.82,2622,0.82,2623,0.82,2624,0.82,2625,1.503,2626,0.65,2627,0.82,2628,0.82,2629,0.82,2630,0.82,2631,0.82,2632,0.82,2633,0.82,2634,0.82,2635,0.82,2636,0.82,2637,0.82,2638,0.82,2639,0.82,2640,0.82,2641,0.82,2642,0.82,2643,0.82,2644,0.82,2645,0.82,2646,0.82,2647,0.82,2648,0.82,2649,1.819,2650,0.82,2651,0.82,2652,0.82,2653,0.82,2654,0.82,2655,0.82,2656,0.82,2657,0.82,2658,0.82,2659,0.82,2660,0.82,2661,0.82,2662,0.82,2663,0.82,2664,0.82,2665,2.08,2666,0.82,2667,0.82,2668,0.82,2669,0.82,2670,0.82,2671,0.82,2672,0.82,2673,0.717,2674,0.82,2675,0.82,2676,0.717,2677,0.82,2678,0.82,2679,1.503,2680,0.82,2681,0.82,2682,0.82,2683,0.82,2684,0.82,2685,0.82,2686,0.82,2687,0.82,2688,1.314,2689,0.82,2690,0.82,2691,0.82,2692,0.82,2693,1.503,2694,1.503,2695,1.503,2696,1.503,2697,1.503,2698,0.82,2699,2.08,2700,0.82,2701,0.82,2702,1.503,2703,1.503,2704,0.82,2705,0.82,2706,0.82,2707,0.82,2708,0.82,2709,0.82,2710,0.82,2711,0.82,2712,0.82,2713,0.82,2714,0.82,2715,0.82,2716,1.503,2717,0.82,2718,0.82,2719,0.82,2720,0.717,2721,0.82,2722,0.82,2723,0.82,2724,0.82,2725,0.82,2726,0.82,2727,0.82,2728,0.82,2729,0.82,2730,0.82,2731,0.82,2732,0.82,2733,0.82,2734,0.82,2735,0.82,2736,0.82,2737,0.82,2738,0.82,2739,0.82,2740,0.82,2741,0.717,2742,0.717,2743,0.82,2744,0.82,2745,0.82,2746,0.82,2747,0.82,2748,0.82,2749,0.82,2750,0.82,2751,0.82,2752,0.82,2753,0.82,2754,0.82,2755,0.82,2756,0.82]],["title/coverage.html",[2757,4.496]],["body/coverage.html",[7,0.012,26,0.082,37,0.264,75,1.07,77,1.461,79,1.723,81,1.649,83,1.649,85,1.649,87,1.649,96,2.41,101,2.41,104,1.804,106,1.996,109,1.195,110,2.917,112,1.996,113,2.112,120,2.112,122,1.894,147,1.07,182,0.094,187,0.007,188,0.007,189,2.191,190,2.41,191,2.886,193,2.247,227,2.917,234,1.105,240,2.247,241,2.247,243,1.804,250,2.247,271,1.519,275,2.41,278,1.894,280,2.112,282,1.996,284,1.996,290,3.522,316,2.41,340,0.859,370,2.247,381,2.112,382,1.357,384,2.41,390,2.247,392,2.613,393,1.68,394,4.034,396,1.105,435,1.814,437,2.886,448,1.357,452,1.804,470,2.247,471,2.886,472,3.82,495,2.247,496,2.886,497,2.886,520,2.886,544,2.886,545,3.82,585,2.124,586,2.886,591,5.591,622,1.407,670,2.886,678,2.886,714,2.886,715,3.82,727,2.886,822,2.886,840,2.886,855,2.886,874,2.886,889,3.522,890,2.886,937,2.886,1016,2.886,1017,2.886,1040,4.012,1046,2.41,1047,2.886,1095,2.886,1105,2.613,1121,2.41,1122,2.886,1141,2.247,1153,1.996,1165,2.247,1166,2.886,1167,2.112,1168,2.886,1169,2.886,1188,2.41,1191,2.886,1226,2.886,1228,2.247,1243,4.162,1244,2.886,1249,2.41,1271,2.41,1273,2.886,1289,2.886,1290,2.886,1304,1.723,1306,1.649,1319,2.41,1320,2.886,1322,1.804,1345,2.613,1355,2.886,1406,2.41,1407,2.886,1408,2.886,1439,2.112,1450,2.41,1451,2.886,1452,2.886,1479,2.112,1490,2.41,1491,2.886,1492,2.886,1516,2.112,1526,2.41,1527,2.886,1528,2.886,1552,2.112,1566,2.886,1595,2.886,1620,2.886,1653,2.112,1657,2.886,1671,2.247,1672,4.162,1675,3.82,1676,3.82,1688,2.613,1690,2.613,1764,2.886,1785,2.886,1786,2.886,1813,2.886,1816,2.886,1842,2.886,1846,4.162,1847,2.886,1870,2.886,1874,2.886,1877,2.41,1878,2.886,1894,1.996,1907,2.41,1908,3.82,1909,2.886,1938,2.886,1968,2.886,1969,2.886,2029,2.886,2036,2.886,2054,2.886,2125,2.886,2328,2.41,2377,2.886,2585,6.293,2757,2.613,2758,3.3,2759,6.271,2760,3.3,2761,8.31,2762,7.914,2763,3.82,2764,2.886,2765,2.886,2766,7.525,2767,3.3,2768,2.886,2769,2.886,2770,2.886,2771,2.886,2772,7.196,2773,6.967,2774,2.886,2775,2.886,2776,3.3,2777,2.886,2778,4.823,2779,3.3,2780,3.3,2781,3.3]],["title/miscellaneous/enumerations.html",[2782,1.99,2783,4.372]],["body/miscellaneous/enumerations.html",[7,0.012,36,0.868,187,0.01,188,0.01,194,0.423,304,2.777,305,3.31,392,4.386,393,2.287,394,4.693,402,5.421,404,3.994,408,4.998,418,3.929,431,4.998,432,5.421,433,5.421,730,4.998,742,4.661,743,5.421,744,5.421,810,5.421,811,5.987,1345,4.386,1349,5.421,1350,4.998,1351,5.421,1352,5.421,1353,4.998,2782,3.179,2783,4.844,2784,5.539,2785,5.539,2786,6.845,2787,5.539,2788,5.539]],["title/miscellaneous/functions.html",[2782,1.99,2789,4.372]],["body/miscellaneous/functions.html",[7,0.011,187,0.011,188,0.011,194,0.509,2774,5.84,2775,7.034,2782,3.833,2789,5.84,2790,6.678]],["title/index.html",[194,0.265,2145,2.532,2146,2.746]],["body/index.html",[7,0.011,22,1.438,23,1.342,25,0.113,26,0.129,100,4.514,134,3.17,140,4.782,147,1.175,177,2.871,178,5.054,187,0.007,188,0.007,273,4.429,294,1.546,315,3.514,316,2.647,340,1.343,349,0.887,393,1.068,403,1.621,404,1.669,440,1.57,492,2.871,501,3.769,503,3.699,513,3.58,600,3.769,609,2.468,627,2.871,705,2.871,713,4.76,736,2.468,749,5.186,751,2.647,754,2.871,780,2.871,819,2.647,913,4.087,953,2.32,956,4.713,1024,2.963,1096,4.389,1230,2.647,1275,3.17,1643,3.17,1876,3.17,1917,3.514,2148,3.17,2150,6.053,2200,4.514,2210,5.728,2215,4.087,2229,3.17,2232,3.17,2303,3.17,2318,3.17,2321,4.514,2328,2.647,2330,4.514,2350,5.728,2354,3.17,2371,3.17,2385,5.256,2387,3.17,2394,5.256,2396,3.17,2399,3.17,2406,4.514,2407,3.17,2415,6.053,2446,3.17,2494,2.871,2497,3.17,2500,5.728,2544,4.514,2562,3.17,2569,5.728,2574,3.17,2590,6.292,2595,3.17,2599,3.17,2600,7.343,2609,5.728,2619,3.17,2626,2.871,2649,4.514,2673,4.514,2676,5.256,2688,3.17,2720,3.17,2741,7.089,2742,3.17,2757,2.871,2791,3.625,2792,3.625,2793,5.161,2794,3.625,2795,3.625,2796,5.161,2797,6.474,2798,3.17,2799,3.625,2800,3.625,2801,3.625,2802,3.625,2803,3.625,2804,3.625,2805,3.625,2806,3.625,2807,3.625,2808,3.625,2809,3.625,2810,3.625,2811,3.625,2812,3.625,2813,3.625,2814,3.625,2815,3.625,2816,5.161,2817,3.625,2818,3.625,2819,3.625,2820,3.625,2821,3.625,2822,3.625,2823,7.402,2824,3.625,2825,3.625,2826,3.17,2827,5.161,2828,3.625,2829,3.625,2830,3.625,2831,3.625,2832,3.625,2833,3.625,2834,3.625,2835,3.625,2836,3.625,2837,5.161,2838,3.625,2839,3.625,2840,5.161,2841,3.625,2842,3.625,2843,3.625,2844,3.625,2845,3.625,2846,3.625,2847,3.625,2848,5.161,2849,3.625,2850,5.161,2851,5.161,2852,3.625,2853,3.625,2854,3.625,2855,3.625,2856,3.625,2857,3.625,2858,3.625,2859,3.625,2860,3.625,2861,3.625,2862,3.625,2863,3.625,2864,3.625,2865,5.161,2866,5.161,2867,3.625,2868,3.17,2869,3.625,2870,3.625,2871,3.625,2872,5.161,2873,3.625,2874,3.625,2875,5.161,2876,5.161,2877,3.625,2878,3.625,2879,3.625,2880,3.17,2881,3.625,2882,3.625,2883,5.161,2884,5.161,2885,3.625,2886,3.625,2887,3.625,2888,3.625,2889,3.625,2890,3.625,2891,5.161,2892,5.161,2893,3.625,2894,3.625,2895,3.625,2896,3.625,2897,3.625,2898,3.625,2899,3.625,2900,3.625,2901,3.625,2902,3.625,2903,3.625,2904,5.161,2905,3.625,2906,3.625,2907,3.625,2908,3.625,2909,3.625,2910,3.625,2911,3.625,2912,3.625,2913,3.625,2914,3.625,2915,3.625,2916,3.625,2917,3.625,2918,3.625,2919,3.625,2920,5.161,2921,3.625,2922,3.625,2923,3.625,2924,3.625,2925,3.625]],["title/license.html",[736,2.361,2145,2.532,2146,2.746]],["body/license.html",[7,0.01,23,2.08,187,0.01,188,0.01,503,2.809,513,3.073,615,3.443,626,4.916,636,2.588,736,3.828,819,4.105,971,4.105,1096,5.044,1104,4.452,1743,4.452,2328,4.105,2626,5.471,2797,4.916,2798,7.35,2826,4.916,2868,6.041,2880,4.916,2926,7.478,2927,5.621,2928,6.908,2929,5.621,2930,5.621,2931,5.621,2932,5.621,2933,5.621,2934,5.621,2935,5.621,2936,5.621,2937,5.621,2938,5.621,2939,5.621,2940,5.621,2941,5.621,2942,5.621,2943,5.621,2944,5.621,2945,5.621,2946,6.908,2947,5.621,2948,5.621,2949,5.621,2950,5.621,2951,5.621,2952,5.621,2953,6.908,2954,6.908,2955,5.621,2956,5.621,2957,5.621,2958,5.621,2959,5.621,2960,5.621,2961,5.621,2962,5.621,2963,5.621,2964,5.621,2965,5.621,2966,5.621,2967,5.621,2968,5.621,2969,5.621,2970,5.621,2971,5.621,2972,5.621,2973,5.621,2974,5.621,2975,5.621,2976,5.621,2977,5.621,2978,5.621,2979,5.621,2980,5.621]],["title/modules.html",[2,2.101]],["body/modules.html",[1,4.207,2,2.132,6,3.923,7,0.01,8,3.923,9,3.484,10,3.923,11,3.923,12,3.923,13,3.923,14,3.923,15,3.686,16,3.923,17,3.923,18,3.484,19,3.686,20,3.923,187,0.01,188,0.01,369,3.686,2169,7.555,2981,8.638,2982,8.638,2983,8.658,2984,5.038,2985,5.761]],["title/overview.html",[2986,4.965]],["body/overview.html",[1,6.232,2,1.334,3,2.039,4,3.151,5,3.151,6,5.609,7,0.012,8,5.144,9,4.569,10,4.079,11,5.235,12,4.889,13,5.144,14,5.144,15,4.728,16,5.428,17,5.144,18,4.716,19,4.728,20,5.144,21,2.113,22,1.429,23,1.334,144,1.247,179,1.062,187,0.007,188,0.007,271,3.402,278,4.242,280,4.728,282,4.469,284,4.469,365,3.151,366,3.151,367,3.151,368,3.151,369,4.728,370,5.032,378,3.151,379,3.151,380,3.151,381,4.728,382,3.277,391,1.429,413,1.727,436,1.38,514,3.151,515,3.151,516,3.151,1153,4.469,1167,4.728,1184,3.151,1185,3.151,1186,3.151,1271,2.631,1339,3.151,1341,3.151,1439,4.728,1479,4.728,1516,4.728,1552,4.728,1561,3.151,1562,3.151,1563,3.151,1590,3.151,1591,3.151,1592,3.151,1615,3.151,1616,3.151,1617,3.151,1650,3.151,1651,3.151,1652,3.151,1653,4.728,1668,3.151,1669,3.151,1671,4.447,1759,3.151,1760,3.151,1761,3.151,1894,3.623,2023,3.151,2024,3.151,2025,3.151,2032,3.151,2033,3.151,2034,3.151,2120,3.151,2121,3.151,2122,3.151,2155,3.151,2240,4.495,2256,4.495,2986,3.151]],["title/properties.html",[397,1.081,2987,3.467]],["body/properties.html",[7,0.012,55,4.489,99,4.868,187,0.01,188,0.01,273,3.934,336,1.371,397,1.329,440,1.87,503,3.644,513,3.986,643,6.377,667,4.489,736,4.186,819,4.489,1137,4.489,2152,5.376,2153,5.376,2215,4.868,2457,5.376,2584,5.376,2984,5.376,2988,6.148,2989,6.148,2990,6.148,2991,6.148,2992,6.148,2993,6.148,2994,6.148,2995,6.148,2996,6.148,2997,6.148,2998,6.148,2999,6.148,3000,6.148,3001,6.148,3002,6.148,3003,6.148,3004,6.148]],["title/miscellaneous/typealiases.html",[2782,1.99,3005,4.999]],["body/miscellaneous/typealiases.html",[7,0.011,37,0.535,187,0.011,188,0.011,194,0.509,2763,5.288,2782,3.833,3006,6.678,3007,7.652,3008,5.84]],["title/miscellaneous/variables.html",[2575,3.959,2782,1.99]],["body/miscellaneous/variables.html",[7,0.012,37,0.39,109,1.201,147,2.268,172,4.991,187,0.009,188,0.009,194,0.371,225,0.86,234,2.111,267,2.153,299,2.127,331,1.659,336,1.084,349,1.711,397,1.051,403,2.511,404,3.681,476,3.31,500,4.292,531,2.902,612,1.862,658,2.983,913,3.85,1020,3.85,1024,3.618,1105,4.991,1108,4.252,1227,3.85,1230,4.602,1253,4.252,1304,3.291,1306,3.15,1672,4.602,1675,3.85,1676,4.991,1688,4.991,1690,4.991,1691,3.55,1692,4.252,1693,4.252,1694,4.252,1695,4.252,2431,4.252,2494,3.85,2575,3.85,2763,3.85,2764,4.252,2765,5.512,2768,4.252,2769,5.512,2770,4.252,2771,5.512,2777,4.252,2782,2.791,3008,5.512,3009,4.862,3010,4.862,3011,4.862,3012,4.862,3013,4.862,3014,4.862,3015,4.862,3016,4.862,3017,4.862,3018,4.862,3019,4.862,3020,6.303,3021,4.862,3022,4.862,3023,4.862,3024,4.862,3025,6.303,3026,4.862,3027,4.862,3028,4.862,3029,4.862,3030,4.862,3031,4.862,3032,4.862,3033,4.862,3034,4.862,3035,6.303,3036,6.303,3037,6.303,3038,6.303,3039,4.862,3040,4.862]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":591,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":2814,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":2761,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2779,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2780,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2760,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2778,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2766,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2762,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2772,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2773,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2776,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2759,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2767,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":2379,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":1020,"title":{},"body":{"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":2154,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":2337,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":2393,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":2327,"title":{},"body":{"changelog.html":{}}}],["04082d7",{"_index":2490,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2557,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2186,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2558,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":637,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["0848443",{"_index":2663,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":2184,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":2444,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":2195,"title":{},"body":{"changelog.html":{}}}],["0eb10bb",{"_index":2243,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":413,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbSubscription.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":2736,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":2733,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":2731,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2727,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":2376,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":2367,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":2359,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":2338,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":2326,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":2299,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":2298,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":2291,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":2279,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":2276,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":2272,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":2265,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":2260,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":2724,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":2255,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":2247,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":2246,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":2239,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":2220,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":2187,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":2162,"title":{},"body":{"changelog.html":{}}}],["1.25.1",{"_index":2152,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.3.0",{"_index":2718,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":2715,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":2712,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":2710,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2684,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":2678,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":2648,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":2644,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":2641,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":2638,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":2633,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":2631,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":2624,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":2621,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":2675,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":2672,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":2669,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":2667,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":2664,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":2660,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":2657,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":2654,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":2616,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":2612,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":2565,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":2561,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":2559,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":2594,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":2589,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":2587,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":2583,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":2580,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":2577,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":2573,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":2568,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":2543,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":2540,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":2537,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":2410,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":612,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserRepo.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":983,"title":{},"body":{"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"changelog.html":{}}}],["101",{"_index":2171,"title":{},"body":{"changelog.html":{}}}],["102",{"_index":2175,"title":{},"body":{"changelog.html":{}}}],["104",{"_index":2179,"title":{},"body":{"changelog.html":{}}}],["10})@column({default",{"_index":1000,"title":{},"body":{"entities/DbUser.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(500)@isoptional",{"_index":415,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":1634,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["11756",{"_index":816,"title":{},"body":{"entities/DbRepo.html":{}}}],["11756})@column({type",{"_index":793,"title":{},"body":{"entities/DbRepo.html":{}}}],["12",{"_index":2248,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":661,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":623,"title":{},"body":{"entities/DbContribution.html":{}}}],["127.0.0.1",{"_index":2813,"title":{},"body":{"index.html":{}}}],["13",{"_index":2240,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["13:24:51.000000",{"_index":665,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":628,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbSubscription.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":614,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":685,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":706,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["14",{"_index":2163,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":2469,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":664,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["155e99e",{"_index":2404,"title":{},"body":{"changelog.html":{}}}],["15d4f30",{"_index":2176,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":602,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":2256,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["166050d",{"_index":2707,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":2440,"title":{},"body":{"changelog.html":{}}}],["169d07b",{"_index":2172,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":2155,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["17c54b9",{"_index":2550,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":2266,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":613,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":837,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["196})@primarygeneratedcolumn",{"_index":826,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["1bbeaf6",{"_index":2505,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":2409,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":2274,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":922,"title":{},"body":{"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":422,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":493,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["20",{"_index":2442,"title":{},"body":{"changelog.html":{}}}],["200",{"_index":965,"title":{},"body":{"entities/DbUser.html":{}}}],["2016",{"_index":611,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":636,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{},"license.html":{}}}],["2023",{"_index":1019,"title":{},"body":{"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["2073883",{"_index":2391,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":2579,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":2588,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":2254,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":2249,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":666,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":639,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:39.000000",{"_index":817,"title":{},"body":{"entities/DbRepo.html":{}}}],["22:04:39.000000'})@column({type",{"_index":781,"title":{},"body":{"entities/DbRepo.html":{}}}],["22d3cc1",{"_index":2680,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":2238,"title":{},"body":{"changelog.html":{}}}],["237133",{"_index":676,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":708,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["237133})@column('bigint",{"_index":1035,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn('bigint",{"_index":671,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":687,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["24",{"_index":2237,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":2468,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":703,"title":{},"body":{"entities/DbInsight.html":{},"changelog.html":{}}}],["255",{"_index":596,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["26",{"_index":2532,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":2368,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":2756,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":2730,"title":{},"body":{"changelog.html":{}}}],["274",{"_index":813,"title":{},"body":{"entities/DbRepo.html":{}}}],["274})@column({type",{"_index":764,"title":{},"body":{"entities/DbRepo.html":{}}}],["28",{"_index":638,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["29",{"_index":2261,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":2433,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":2466,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":2746,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":2637,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":2259,"title":{},"body":{"changelog.html":{}}}],["2cfec69",{"_index":2180,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":2275,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":2456,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":494,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["30",{"_index":2219,"title":{},"body":{"changelog.html":{}}}],["3001",{"_index":2820,"title":{},"body":{"index.html":{}}}],["31",{"_index":2218,"title":{},"body":{"changelog.html":{}}}],["31e4d60",{"_index":2572,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":2369,"title":{},"body":{"changelog.html":{}}}],["3282435",{"_index":2474,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":2435,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":2674,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":2732,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":2348,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":2306,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":2483,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":2308,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":2700,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":2305,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":1117,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":2333,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":2331,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":935,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":930,"title":{},"body":{"entities/DbSubscription.html":{}}}],["426820139",{"_index":2031,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["43",{"_index":2336,"title":{},"body":{"changelog.html":{}}}],["4552c66",{"_index":2553,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":2382,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":677,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUser.html":{}}}],["498})@column({type",{"_index":673,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUser.html":{}}}],["4b264d5",{"_index":2386,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":2392,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":814,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/UpdateUserDto.html":{}}}],["5'})@column({type",{"_index":1003,"title":{},"body":{"entities/DbUser.html":{}}}],["5'})@isstring()@isoptional",{"_index":1861,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":411,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"entities/DbUser.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1114,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5385049",{"_index":2314,"title":{},"body":{"changelog.html":{}}}],["5473",{"_index":815,"title":{},"body":{"entities/DbRepo.html":{}}}],["5473})@column({type",{"_index":804,"title":{},"body":{"entities/DbRepo.html":{}}}],["55",{"_index":2296,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":2370,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":2286,"title":{},"body":{"changelog.html":{}}}],["57568598",{"_index":812,"title":{},"body":{"entities/DbRepo.html":{}}}],["57568598})@column({type",{"_index":802,"title":{},"body":{"entities/DbRepo.html":{}}}],["58",{"_index":2289,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":2748,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":2463,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":2427,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":2217,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":2224,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":2740,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":2601,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":2697,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":2205,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":791,"title":{},"body":{"entities/DbRepo.html":{}}}],["607cf5d",{"_index":2714,"title":{},"body":{"changelog.html":{}}}],["618225f",{"_index":2472,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":2489,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":2709,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":2556,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":2273,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":2721,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":2347,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":2605,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":768,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{}}}],["648dbeb",{"_index":2290,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":2270,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":2567,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":2263,"title":{},"body":{"changelog.html":{}}}],["6894cf1",{"_index":2168,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":2513,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":2521,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":2358,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":2212,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":2576,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":2696,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":663,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796})@column",{"_index":830,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["71359796})@column({type",{"_index":634,"title":{},"body":{"entities/DbContribution.html":{}}}],["71359796})@primarycolumn('bigint",{"_index":758,"title":{},"body":{"entities/DbRepo.html":{}}}],["72",{"_index":2258,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":2499,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":2735,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":2252,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":2352,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":2241,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":2653,"title":{},"body":{"changelog.html":{}}}],["79bf61d",{"_index":2598,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":2582,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":2283,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":2752,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":2643,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":2683,"title":{},"body":{"changelog.html":{}}}],["807162e",{"_index":2236,"title":{},"body":{"changelog.html":{}}}],["8080:3001",{"_index":2851,"title":{},"body":{"index.html":{}}}],["81",{"_index":2223,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":2692,"title":{},"body":{"changelog.html":{}}}],["83",{"_index":2227,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":2199,"title":{},"body":{"changelog.html":{}}}],["84",{"_index":2230,"title":{},"body":{"changelog.html":{}}}],["86",{"_index":2235,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":2501,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":2486,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":2193,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":2194,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":2398,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":2615,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":2508,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":2278,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":2677,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":2207,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":2206,"title":{},"body":{"changelog.html":{}}}],["911df68",{"_index":2650,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":2201,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":2488,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":2656,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":2414,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":2309,"title":{},"body":{"changelog.html":{}}}],["99",{"_index":2167,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":2317,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":2208,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_stripe",{"_index":1621,"title":{},"body":{"injectables/StripeService.html":{}}}],["a08abfd",{"_index":2467,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":2701,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":2332,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":2597,"title":{},"body":{"changelog.html":{}}}],["a6488b4",{"_index":2231,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":2560,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2339,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":2952,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2719,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":2717,"title":{},"body":{"changelog.html":{}}}],["accessing",{"_index":2651,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":1274,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{}}}],["action",{"_index":2975,"title":{},"body":{"license.html":{}}}],["active",{"_index":925,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["active'})@column({type",{"_index":924,"title":{},"body":{"entities/DbSubscription.html":{}}}],["activity",{"_index":985,"title":{},"body":{"entities/DbUser.html":{}}}],["adapter",{"_index":2320,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":1917,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"index.html":{}}}],["add_table_nametest",{"_index":2895,"title":{},"body":{"index.html":{}}}],["addcustomer",{"_index":521,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":1625,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":528,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":2406,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addhighlightforuser",{"_index":1916,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["adding",{"_index":2887,"title":{},"body":{"index.html":{}}}],["addinsight",{"_index":1192,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":1200,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":1911,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":1914,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":1973,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightrepo",{"_index":1170,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":1175,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":2221,"title":{},"body":{"changelog.html":{}}}],["addorderby(`\"${orderfield",{"_index":461,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":463,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":1405,"title":{},"body":{"injectables/RepoService.html":{}}}],["address",{"_index":958,"title":{},"body":{"entities/DbUser.html":{}}}],["adds",{"_index":1432,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect(qb",{"_index":1386,"title":{},"body":{"injectables/RepoService.html":{}}}],["adduserhighlight",{"_index":1939,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":1945,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserrepo",{"_index":2037,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":2041,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":2371,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":2704,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":2428,"title":{},"body":{"changelog.html":{}}}],["advised",{"_index":2860,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":2476,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":2361,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":2555,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":2636,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":1366,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":3006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":1371,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":1373,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":1372,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":1374,"title":{},"body":{"injectables/RepoService.html":{}}}],["allof",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":2416,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":1420,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":2944,"title":{},"body":{"license.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":1609,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":1582,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":1778,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":2139,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_highlights.user_id",{"_index":1957,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["api",{"_index":2215,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["api.opensauced.pizza",{"_index":2793,"title":{},"body":{"index.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":2852,"title":{},"body":{"index.html":{}}}],["api_host",{"_index":2811,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":1147,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apibody",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["apiconflictresponse",{"_index":1438,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apidocs",{"_index":2546,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":3016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":654,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@column({default",{"_index":961,"title":{},"body":{"entities/DbUser.html":{}}}],["apihideproperty()@column({type",{"_index":770,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":619,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":630,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":697,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["apimodelproperty",{"_index":655,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["apimodelproperty({description",{"_index":589,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["apimodelpropertyoptional",{"_index":656,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":606,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["apinotfoundresponse",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apiokresponse",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse",{"_index":1304,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":1311,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":1987,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":1337,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":1904,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":489,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({description",{"_index":475,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({type",{"_index":1236,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":424,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":506,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({enum",{"_index":406,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":412,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apitags",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"authentication",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":1064,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"insights",{"_index":1156,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"repository",{"_index":1309,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":1696,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":1899,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiunauthorizedresponse",{"_index":1146,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":1984,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":1633,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":2819,"title":{},"body":{"index.html":{}}}],["app.opensauced",{"_index":969,"title":{},"body":{"entities/DbUser.html":{}}}],["appearing",{"_index":2492,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":2817,"title":{},"body":{"index.html":{}}}],["apply",{"_index":2893,"title":{},"body":{"index.html":{}}}],["apply(httploggermiddleware",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":3015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":861,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":2418,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":2979,"title":{},"body":{"license.html":{}}}],["array",{"_index":476,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.ids",{"_index":1990,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":2665,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":811,"title":{},"body":{"entities/DbRepo.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":2869,"title":{},"body":{"index.html":{}}}],["assign",{"_index":2658,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":2935,"title":{},"body":{"license.html":{}}}],["associating",{"_index":2284,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":2725,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":2411,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/supabase.guard",{"_index":1148,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["auth/supabase.user.decorator",{"_index":1149,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["authcontroller",{"_index":190,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1817,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":1820,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["authguard",{"_index":1814,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":1815,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3003,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":1131,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":2969,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":1401,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":1402,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2985,"title":{},"body":{"modules.html":{}}}],["await",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["b0169e7",{"_index":2430,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":2335,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":2593,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":2632,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":2402,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":2479,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":2723,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":2586,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":2708,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":2666,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":2484,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":2302,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":2253,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":2419,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":2623,"title":{},"body":{"changelog.html":{}}}],["backed",{"_index":2873,"title":{},"body":{"index.html":{}}}],["backend",{"_index":2990,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":2281,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":2460,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":2549,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":1687,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["based",{"_index":2592,"title":{},"body":{"changelog.html":{}}}],["baseentity",{"_index":647,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["baseline",{"_index":2698,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":522,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":2610,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":2728,"title":{},"body":{"changelog.html":{}}}],["bb1f3e5",{"_index":2161,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":2620,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":2271,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":2687,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":2242,"title":{},"body":{"changelog.html":{}}}],["beautiful",{"_index":2315,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":2861,"title":{},"body":{"index.html":{}}}],["being",{"_index":2827,"title":{},"body":{"index.html":{}}}],["below",{"_index":2921,"title":{},"body":{"index.html":{}}}],["beneficial",{"_index":2829,"title":{},"body":{"index.html":{}}}],["beta",{"_index":973,"title":{},"body":{"entities/DbUser.html":{}}}],["beta.1",{"_index":2153,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.10",{"_index":2531,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":2530,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":2529,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":2528,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":2527,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":2526,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":2525,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":2524,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":2523,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":2522,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":2185,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":2183,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":2182,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":2181,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":2536,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":2535,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":2534,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":2533,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":2794,"title":{},"body":{"index.html":{}}}],["better",{"_index":2349,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":2341,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":603,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{}}}],["billing_address_collection",{"_index":1639,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":2799,"title":{},"body":{"index.html":{}}}],["bio",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["body.ids.foreach(repo",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":482,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":2775,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":627,"title":{},"body":{"entities/DbContribution.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":2858,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":2425,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":2983,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2981,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":2156,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":2999,"title":{},"body":{"properties.html":{}}}],["build",{"_index":2210,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":1215,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builds",{"_index":2848,"title":{},"body":{"index.html":{}}}],["business",{"_index":2836,"title":{},"body":{"index.html":{}}}],["c",{"_index":2927,"title":{},"body":{"license.html":{}}}],["c013b70",{"_index":2630,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":2634,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":2690,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":2297,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":2202,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":2481,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1015,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca'})@column({type",{"_index":979,"title":{},"body":{"entities/DbUser.html":{}}}],["cancel",{"_index":902,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":891,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":892,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":1646,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":906,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":893,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["capabilities",{"_index":2304,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":1638,"title":{},"body":{"injectables/StripeService.html":{}}}],["case",{"_index":2828,"title":{},"body":{"index.html":{}}}],["catch",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":2705,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":2738,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":2640,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":2668,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":2564,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":2287,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":2520,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":2147,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2150,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channel",{"_index":2919,"title":{},"body":{"index.html":{}}}],["character",{"_index":593,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["charge",{"_index":2932,"title":{},"body":{"license.html":{}}}],["check",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":2055,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":2067,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":1692,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":1753,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":1758,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":1755,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":1756,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checks",{"_index":2737,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":2538,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":2818,"title":{},"body":{"index.html":{}}}],["claim",{"_index":2972,"title":{},"body":{"license.html":{}}}],["class",{"_index":182,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":391,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"overview.html":{}}}],["clc",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":1119,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":580,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":1116,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":2473,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":2900,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":1105,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":2992,"title":{},"body":{"properties.html":{}}}],["closes",{"_index":2196,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":378,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":380,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_providers",{"_index":379,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":514,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":516,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":515,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_insightsmodule",{"_index":1184,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":1185,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_providers",{"_index":1186,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":1339,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":1341,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_providers",{"_index":1340,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_stargazemodule",{"_index":1590,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":1592,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_providers",{"_index":1591,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":1561,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":1563,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_providers",{"_index":1562,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":1615,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":1617,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":1616,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":1650,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":1651,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":1652,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":1668,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":1669,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":1670,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":1759,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":1760,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_providers",{"_index":1761,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2023,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2024,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2025,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":2032,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":2033,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_providers",{"_index":2034,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":2120,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":2122,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_providers",{"_index":2121,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["code",{"_index":713,"title":{},"body":{"entities/DbInsight.html":{},"changelog.html":{},"index.html":{}}}],["code'})@column({type",{"_index":702,"title":{},"body":{"entities/DbInsight.html":{}}}],["coercion",{"_index":2159,"title":{},"body":{"changelog.html":{}}}],["collaboration",{"_index":988,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["collection",{"_index":1254,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["colorize",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":646,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"bigint",{"_index":1038,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"text",{"_index":1039,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":752,"title":{},"body":{"entities/DbRepo.html":{}}}],["command",{"_index":2823,"title":{},"body":{"index.html":{}}}],["commands",{"_index":2870,"title":{},"body":{"index.html":{}}}],["comments",{"_index":2682,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":2739,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":2862,"title":{},"body":{"index.html":{}}}],["common/constants/order",{"_index":450,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1305,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/page",{"_index":428,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["common/dtos/page.dto",{"_index":449,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{}}}],["common/middleware/database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":2911,"title":{},"body":{"index.html":{}}}],["company",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":2867,"title":{},"body":{"index.html":{}}}],["completing",{"_index":2403,"title":{},"body":{"changelog.html":{}}}],["complexity",{"_index":2993,"title":{},"body":{"properties.html":{}}}],["component",{"_index":2720,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["concurrency",{"_index":2602,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":2951,"title":{},"body":{"license.html":{}}}],["config",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["config/api.config",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["config/endpoint.config",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["config/stripe.config",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db.connection",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.maxqueryexecutiontime",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":2699,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":2871,"title":{},"body":{"index.html":{}}}],["confirmation",{"_index":1790,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":1577,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"you",{"_index":1585,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["connect",{"_index":2872,"title":{},"body":{"index.html":{}}}],["connection",{"_index":2880,"title":{},"body":{"index.html":{},"license.html":{}}}],["console.log",{"_index":2478,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":2324,"title":{},"body":{"changelog.html":{}}}],["const",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":1284,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":1623,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor(contributionrepository",{"_index":439,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":525,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1229,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(insightreporepository",{"_index":1172,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":1197,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(reporepository",{"_index":1357,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":1598,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":1569,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":1767,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":2128,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":1659,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1248,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userhighlightreporepository",{"_index":1942,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userreporepository",{"_index":2038,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":2063,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":2807,"title":{},"body":{"index.html":{}}}],["container",{"_index":2562,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contents",{"_index":2627,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":2353,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":2976,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":2906,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":599,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":2904,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":609,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":385,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.repo",{"_index":745,"title":{},"body":{"entities/DbRepo.html":{}}}],["contribution.service",{"_index":387,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{}}}],["contribution/contribution.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":402,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":405,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":390,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":442,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":660,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":388,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":1290,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":1303,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":1299,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":1384,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":1349,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":381,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":433,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":189,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"health",{"_index":1063,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"insights",{"_index":1155,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"repos",{"_index":1308,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":1697,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/highlights",{"_index":1932,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":1985,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["controller(\"users",{"_index":1898,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":2914,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2946,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2626,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copying",{"_index":2879,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":2926,"title":{},"body":{"license.html":{}}}],["correct",{"_index":2214,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2396,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":431,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":2496,"title":{},"body":{"changelog.html":{}}}],["couple",{"_index":2864,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2757,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":2015,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["createcheckoutsession",{"_index":1622,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":1627,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":2694,"title":{},"body":{"changelog.html":{}}}],["created_at",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":652,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["createhighlightdto",{"_index":1920,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":470,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.ids",{"_index":1995,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.is_public",{"_index":1993,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":1989,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:11",{"_index":1845,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:19",{"_index":1844,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:28",{"_index":1843,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createparamdecorator",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuserhighlightdto",{"_index":495,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":2257,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":610,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["current",{"_index":909,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["current_period_end_at",{"_index":894,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":895,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":2013,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find(id",{"_index":2018,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":2001,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter(repo",{"_index":2006,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map(cr",{"_index":2014,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["customer",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":518,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":519,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":1693,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":1695,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":1694,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":1699,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":9,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":527,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":675,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":284,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":2845,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":2471,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":2487,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":2608,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":2405,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":2516,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":2216,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":2548,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":2973,"title":{},"body":{"license.html":{}}}],["data",{"_index":1227,"title":{},"body":{"classes/PageDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["databaseloggermiddleware",{"_index":101,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["datasource",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":605,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(github.updated_at",{"_index":2103,"title":{},"body":{"injectables/UserService.html":{}}}],["date.now",{"_index":1109,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["db",{"_index":2747,"title":{},"body":{"changelog.html":{}}}],["db:changesif",{"_index":2890,"title":{},"body":{"index.html":{}}}],["db:commit",{"_index":2894,"title":{},"body":{"index.html":{}}}],["db:push",{"_index":2899,"title":{},"body":{"index.html":{}}}],["db:resetpush",{"_index":2898,"title":{},"body":{"index.html":{}}}],["db:startmake",{"_index":2886,"title":{},"body":{"index.html":{}}}],["dbc66f3",{"_index":2470,"title":{},"body":{"changelog.html":{}}}],["dbconfig",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["dbcontribution",{"_index":79,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":1298,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":113,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbinsight",{"_index":104,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightrepo",{"_index":106,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":1129,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["dbrepo",{"_index":75,"title":{"entities/DbRepo.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":87,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":1462,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":83,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":1418,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":85,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":1501,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":81,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":1537,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":1327,"title":{},"body":{"controllers/RepoController.html":{}}}],["dbsubscription",{"_index":120,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbuser",{"_index":77,"title":{"entities/DbUser.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbuserhighlight",{"_index":122,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":1886,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserrepo",{"_index":112,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd5e668",{"_index":2542,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":2344,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":2295,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":2936,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2980,"title":{},"body":{"license.html":{}}}],["debug",{"_index":2622,"title":{},"body":{"changelog.html":{}}}],["decorator",{"_index":2160,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["default",{"_index":403,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":1705,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defined",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1143,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":1161,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":1447,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":1486,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":1523,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":1558,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":1449,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":1489,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":1525,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":1560,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":1135,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1415,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1459,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1499,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1535,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1424,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1466,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1504,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1540,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["deleted",{"_index":2004,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":587,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{}}}],["deletedatecolumn",{"_index":651,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{}}}],["deletehighlightforuser",{"_index":1912,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":1921,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":1923,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":1940,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":1948,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":684,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["demo",{"_index":2603,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":2294,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":2420,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":2544,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deps",{"_index":2745,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":810,"title":{},"body":{"entities/DbRepo.html":{},"injectables/UserHighlightsService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["designed",{"_index":2991,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":2293,"title":{},"body":{"changelog.html":{}}}],["developer",{"_index":2613,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":2415,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["df31fc9",{"_index":2228,"title":{},"body":{"changelog.html":{}}}],["df56c4f",{"_index":2264,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":2903,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":2547,"title":{},"body":{"changelog.html":{}}}],["difference",{"_index":2889,"title":{},"body":{"index.html":{}}}],["digital",{"_index":2458,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":451,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":2786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":2269,"title":{},"body":{"changelog.html":{}}}],["discord.find",{"_index":2915,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1066,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1062,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":953,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":938,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["distribute",{"_index":2942,"title":{},"body":{"license.html":{}}}],["dit",{"_index":2853,"title":{},"body":{"index.html":{}}}],["docker",{"_index":2590,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":2804,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":2693,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":2412,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":2204,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2551,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":2328,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":2151,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":2596,"title":{},"body":{"changelog.html":{}}}],["dot",{"_index":2988,"title":{},"body":{"properties.html":{}}}],["down",{"_index":2438,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":1567,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":1573,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":1596,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":1602,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":1453,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":1458,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":1454,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":1465,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":1409,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":1414,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":1410,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":1423,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":1765,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":1771,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":1493,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":1498,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":1494,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":1503,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":2126,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":2132,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":1529,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":1534,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":1530,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":1539,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dry",{"_index":2599,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dtos",{"_index":2503,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":454,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":1930,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/insight",{"_index":1213,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/repo",{"_index":1334,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":1150,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":2046,"title":{},"body":{"injectables/UserReposService.html":{}}}],["duration",{"_index":1107,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":2769,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":2857,"title":{},"body":{"index.html":{}}}],["e",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e0d38ca",{"_index":2452,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":2671,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":2611,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":2245,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":2441,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":2325,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":2507,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":2395,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":2726,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1240,"title":{},"body":{"classes/PageDto.html":{}}}],["eb707a0",{"_index":2174,"title":{},"body":{"changelog.html":{}}}],["eba258a",{"_index":2552,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":2581,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":2448,"title":{},"body":{"changelog.html":{}}}],["email",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["emoji",{"_index":2373,"title":{},"body":{"changelog.html":{}}}],["encounter",{"_index":2825,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":2905,"title":{},"body":{"index.html":{}}}],["end",{"_index":911,"title":{},"body":{"entities/DbSubscription.html":{}}}],["ended_at",{"_index":896,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endpoint",{"_index":2165,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints",{"_index":1068,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1052,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":2750,"title":{},"body":{"changelog.html":{}}}],["entities",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{},"overview.html":{}}}],["entities/insight",{"_index":1180,"title":{},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{}}}],["entities/insight.entity",{"_index":1152,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{}}}],["entities/repo.entity",{"_index":1333,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/user",{"_index":1893,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["entity",{"_index":585,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":430,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":2783,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":407,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":2330,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":2574,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":2792,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":568,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error).tostring",{"_index":1734,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["errors",{"_index":2385,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["eslint",{"_index":2449,"title":{},"body":{"changelog.html":{}}}],["etl",{"_index":2191,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":1743,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":1748,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":1752,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everything",{"_index":2891,"title":{},"body":{"index.html":{}}}],["everywhere",{"_index":2316,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":479,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["exception/responses",{"_index":2365,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["executioncontext",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":1416,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["expand",{"_index":1704,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["explain",{"_index":2753,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":2639,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1104,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":2606,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":395,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/InsightPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":2197,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":1826,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1839,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":1838,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":2323,"title":{},"body":{"changelog.html":{}}}],["f0304d4",{"_index":2539,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":2485,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":2511,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":2364,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":2495,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":2647,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":2343,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":2375,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":2434,"title":{},"body":{"changelog.html":{}}}],["f83b3cd",{"_index":2233,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":2383,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":2443,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":2436,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":2422,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2178,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["false})@column({default",{"_index":692,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{}}}],["false})@column({type",{"_index":954,"title":{},"body":{"entities/DbUser.html":{},"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":485,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":1853,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":2292,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":691,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":2322,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":2366,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":2713,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":2424,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":2659,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":2190,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":974,"title":{},"body":{"entities/DbUser.html":{},"changelog.html":{}}}],["features",{"_index":2164,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":2363,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2177,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":2173,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":2198,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":2826,"title":{},"body":{"index.html":{},"license.html":{}}}],["find",{"_index":1302,"title":{},"body":{"controllers/RepoContributionsController.html":{},"changelog.html":{}}}],["findall",{"_index":438,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findall(pageoptionsdto",{"_index":443,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findallbyownerandrepo",{"_index":1291,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":1293,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid",{"_index":1292,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":1300,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyuserid",{"_index":1193,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":1204,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallhighlightsbyusername",{"_index":1879,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":1881,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightsbyuserid",{"_index":1971,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":1975,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["findalluserstargazed",{"_index":1455,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":1468,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":1411,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":1426,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":1495,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":1506,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":1531,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":1542,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findbycustomerid",{"_index":523,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":533,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":524,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":535,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findinsightpagebyid",{"_index":1123,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":1125,"title":{},"body":{"controllers/InsightController.html":{}}}],["findonebyid",{"_index":1194,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1206,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":1321,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":1329,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyusername",{"_index":2056,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":2071,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":1880,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":1888,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":1890,"title":{},"body":{"controllers/UserController.html":{}}}],["finds",{"_index":1127,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["fine",{"_index":2892,"title":{},"body":{"index.html":{}}}],["first",{"_index":501,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":2965,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2232,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fixes",{"_index":2157,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":689,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":2670,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":2839,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1461,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["followed",{"_index":1470,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["following",{"_index":2797,"title":{},"body":{"index.html":{},"license.html":{}}}],["follows",{"_index":1483,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows'})@apiokresponse({description",{"_index":1474,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["force",{"_index":2158,"title":{},"body":{"changelog.html":{}}}],["fork",{"_index":760,"title":{},"body":{"entities/DbRepo.html":{}}}],["formatit",{"_index":2859,"title":{},"body":{"index.html":{}}}],["forroutes(`v${version.charat(0",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":1158,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":1419,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":1130,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":978,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":2931,"title":{},"body":{"license.html":{}}}],["from(entity",{"_index":1376,"title":{},"body":{"injectables/RepoService.html":{}}}],["full",{"_index":754,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":728,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{}}}],["function",{"_index":2377,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":2439,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":2789,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2949,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":2355,"title":{},"body":{"changelog.html":{}}}],["generated",{"_index":2399,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generation",{"_index":2679,"title":{},"body":{"changelog.html":{}}}],["get(\"/:id",{"_index":1157,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["get(\"/:id/contributions",{"_index":1310,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo",{"_index":1335,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":1315,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:username",{"_index":1900,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/highlights",{"_index":1903,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/list",{"_index":1336,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":1481,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":1443,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":1519,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":1554,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/service",{"_index":1067,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/web",{"_index":1080,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1976,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":1126,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":1301,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":1330,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":1294,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":1889,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":1882,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1323,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1469,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1427,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1507,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1543,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1050,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1054,"title":{},"body":{"controllers/HealthController.html":{}}}],["getdomain",{"_index":2771,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":1279,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstripe",{"_index":1629,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":2145,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["ghcr.io/open",{"_index":2854,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":3001,"title":{},"body":{"properties.html":{}}}],["github",{"_index":641,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":2098,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com/open",{"_index":509,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":2104,"title":{},"body":{"injectables/UserService.html":{}}}],["granted",{"_index":2930,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2984,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["guard",{"_index":2455,"title":{},"body":{"changelog.html":{}}}],["guarded",{"_index":1442,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2447,"title":{},"body":{"changelog.html":{}}}],["guide",{"_index":2908,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":2909,"title":{},"body":{"index.html":{}}}],["handle",{"_index":2092,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":2445,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":1677,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":1679,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["has_stars_data",{"_index":939,"title":{},"body":{"entities/DbUser.html":{}}}],["hasnextpage",{"_index":1245,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1246,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":2423,"title":{},"body":{"changelog.html":{}}}],["health",{"_index":1048,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1094,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1060,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1057,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1046,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":10,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1051,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1055,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":1011,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":959,"title":{},"body":{"entities/DbUser.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1855,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":2929,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":2381,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":2397,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":498,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":1918,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2028,"title":{},"body":{"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":1909,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:28",{"_index":1919,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:46",{"_index":1928,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:67",{"_index":1925,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":1931,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":497,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":511,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":508,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:28",{"_index":505,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1017,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:23",{"_index":1027,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:30",{"_index":1036,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:37",{"_index":1034,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:44",{"_index":1031,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:54",{"_index":1026,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:64",{"_index":1029,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:74",{"_index":1021,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:84",{"_index":1032,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:91",{"_index":1022,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":1963,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":1964,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":1962,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightid",{"_index":1922,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlights",{"_index":1883,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["highlights.service",{"_index":1895,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":1938,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:12",{"_index":1943,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:18",{"_index":1947,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:24",{"_index":1951,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:40",{"_index":1950,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:62",{"_index":1946,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:73",{"_index":1953,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:77",{"_index":1949,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["holders",{"_index":2970,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":2997,"title":{},"body":{"properties.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["hot",{"_index":2450,"title":{},"body":{"changelog.html":{}}}],["http",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["httpcode",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1058,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":96,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["https://app.opensauced.pizza",{"_index":820,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://app.opensauced.pizza'})@column({type",{"_index":797,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://github.com/open",{"_index":643,"title":{},"body":{"entities/DbContribution.html":{},"properties.html":{}}}],["https://opensauced.pizza",{"_index":1013,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@column({type",{"_index":1009,"title":{},"body":{"entities/DbUser.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":1865,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apiokresponse({type",{"_index":1128,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":622,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identify",{"_index":750,"title":{},"body":{"entities/DbRepo.html":{}}}],["identities",{"_index":2095,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter(identity",{"_index":2096,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":2097,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":473,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["ignore",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":2901,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":2685,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":2300,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":546,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":2961,"title":{},"body":{"license.html":{}}}],["import",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/HealthModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":2310,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":2703,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":2955,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":2069,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":2868,"title":{},"body":{"index.html":{},"license.html":{}}}],["increase",{"_index":2334,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":194,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":2244,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":1798,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":690,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{}}}],["info",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["information",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["information'})@apiokresponse({type",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["inherited",{"_index":416,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":2225,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":435,"title":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":436,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectrepository",{"_index":447,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":455,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":537,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbinsight",{"_index":1214,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":1181,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dbrepo",{"_index":1370,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":1606,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":1578,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":1775,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":2136,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":1665,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":2087,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":1954,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserrepo",{"_index":2047,"title":{},"body":{"injectables/UserReposService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":1400,"title":{},"body":{"injectables/RepoService.html":{}}}],["inserting/updating",{"_index":1733,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":483,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":1138,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.controller",{"_index":1189,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":1969,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:34",{"_index":1978,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:52",{"_index":1974,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:87",{"_index":1982,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":1151,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":472,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:11",{"_index":488,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:19",{"_index":486,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:28",{"_index":481,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":724,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos",{"_index":726,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":720,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter(insightrepo",{"_index":2002,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.user_id",{"_index":1162,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight/entities/insight",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":716,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{}}}],["insight_repos",{"_index":725,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insight_role_id",{"_index":2234,"title":{},"body":{"changelog.html":{}}}],["insightcontroller",{"_index":1121,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightid",{"_index":1177,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightpageoptionsdto",{"_index":1165,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":698,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":2003,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":699,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":1174,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":1167,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":1199,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":712,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUser.html":{},"controllers/InsightController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":1219,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":1154,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{}}}],["insights_role",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightsmodule",{"_index":11,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":1986,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":1153,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":2635,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":2816,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2800,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2875,"title":{},"body":{"index.html":{}}}],["instead",{"_index":2619,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["integration",{"_index":2251,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":2995,"title":{},"body":{"properties.html":{}}}],["interests",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":1874,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":1875,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interface",{"_index":1271,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1272,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["invalid",{"_index":1139,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["is_accepted",{"_index":856,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":679,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_fork",{"_index":729,"title":{},"body":{"entities/DbRepo.html":{}}}],["is_onboarded",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":940,"title":{},"body":{"entities/DbUser.html":{},"injectables/UserService.html":{}}}],["is_private",{"_index":941,"title":{},"body":{"entities/DbUser.html":{}}}],["is_public",{"_index":474,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":478,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1232,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":490,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["isemail",{"_index":1867,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":425,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":434,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":1288,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":1354,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1281,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isoptional",{"_index":426,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":491,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/UpdateUserDto.html":{}}}],["issues",{"_index":730,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":1868,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["item",{"_index":1220,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":1314,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":466,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["items",{"_index":1253,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":818,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["javascript'})@column({type",{"_index":767,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["job",{"_index":2570,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":2691,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":2913,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":650,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["js",{"_index":2086,"title":{},"body":{"injectables/UserService.html":{}}}],["json.stringify(parameters",{"_index":584,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":1711,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":1828,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":2812,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":2996,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2960,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":2806,"title":{},"body":{"index.html":{}}}],["language",{"_index":731,"title":{},"body":{"entities/DbRepo.html":{}}}],["last",{"_index":625,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_fetched_commits_at",{"_index":732,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_fetched_contributors_at",{"_index":733,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_fetched_prs_at",{"_index":734,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_fetched_repos_at",{"_index":735,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_merged_at",{"_index":432,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["latest",{"_index":1707,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":1383,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":1381,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":1218,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":1382,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":595,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["level",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["levelfirst",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":2843,"title":{},"body":{"index.html":{}}}],["liability",{"_index":2974,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2971,"title":{},"body":{"license.html":{}}}],["lib",{"_index":2838,"title":{},"body":{"index.html":{}}}],["license",{"_index":736,"title":{"license.html":{}},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":400,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(pageoptionsdto.limit",{"_index":465,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["limitation",{"_index":2938,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2962,"title":{},"body":{"license.html":{}}}],["limits",{"_index":2346,"title":{},"body":{"changelog.html":{}}}],["line_items",{"_index":1641,"title":{},"body":{"injectables/StripeService.html":{}}}],["link",{"_index":2462,"title":{},"body":{"changelog.html":{}}}],["linked",{"_index":796,"title":{},"body":{"entities/DbRepo.html":{}}}],["links",{"_index":2545,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":2384,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":2321,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":2856,"title":{},"body":{"index.html":{}}}],["list",{"_index":2431,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listing",{"_index":1295,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["live",{"_index":2791,"title":{},"body":{"index.html":{}}}],["load",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":2280,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":1391,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":1394,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":1395,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":1393,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":1392,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":956,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{}}}],["localhost",{"_index":2815,"title":{},"body":{"index.html":{}}}],["localhost:54321",{"_index":2885,"title":{},"body":{"index.html":{}}}],["locally",{"_index":2884,"title":{},"body":{"index.html":{}}}],["location",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":548,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(level",{"_index":557,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":1101,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":1698,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":545,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":1100,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":567,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:16",{"_index":570,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":562,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:24",{"_index":573,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":560,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:39",{"_index":575,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":556,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:8",{"_index":564,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":1102,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["loggermodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2303,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["logic",{"_index":2837,"title":{},"body":{"index.html":{}}}],["login",{"_index":942,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["logmigration",{"_index":549,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":561,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery",{"_index":550,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":563,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":551,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":566,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":552,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":569,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild",{"_index":553,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":572,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["lower(:username",{"_index":2094,"title":{},"body":{"injectables/UserService.html":{}}}],["machines",{"_index":2801,"title":{},"body":{"index.html":{}}}],["made",{"_index":1023,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":2421,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":1848,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":1869,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":1859,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["manage",{"_index":2166,"title":{},"body":{"changelog.html":{}}}],["managed",{"_index":2429,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":1678,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":1684,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":2229,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manual",{"_index":2389,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":2497,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":649,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["matching",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":1268,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1282,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(500",{"_index":1287,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":414,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxqueryexecutiontime",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["mechanics",{"_index":2357,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":2277,"title":{},"body":{"changelog.html":{}}}],["memory",{"_index":1065,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1061,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":2329,"title":{},"body":{"changelog.html":{}}}],["merchantability",{"_index":2964,"title":{},"body":{"license.html":{}}}],["merge",{"_index":626,"title":{},"body":{"entities/DbContribution.html":{},"license.html":{}}}],["message",{"_index":559,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["messageformat",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":1228,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":453,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["meta.dto.ts",{"_index":1244,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":1257,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":1255,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":1260,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":1252,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":1250,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":1258,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":897,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["methods",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":2319,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":2407,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["migrations",{"_index":2200,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["min",{"_index":1283,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":1286,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimal",{"_index":2301,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":1285,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minor",{"_index":2702,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":2782,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2865,"title":{},"body":{"index.html":{}}}],["mit",{"_index":819,"title":{},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["mit'})@column({type",{"_index":777,"title":{},"body":{"entities/DbRepo.html":{}}}],["mkdocs",{"_index":2614,"title":{},"body":{"changelog.html":{}}}],["mocking",{"_index":2847,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1643,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":658,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":2940,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/HealthModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/HealthModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/HealthModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2514,"title":{},"body":{"changelog.html":{}}}],["mount",{"_index":2661,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":2628,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":2835,"title":{},"body":{"index.html":{}}}],["mrpizza",{"_index":1012,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["mrpizza'})@column({type",{"_index":982,"title":{},"body":{"entities/DbUser.html":{}}}],["much",{"_index":2388,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":2510,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":2378,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":2796,"title":{},"body":{"index.html":{}}}],["needs",{"_index":2842,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2688,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestjs",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/utils/cli",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":657,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["nestjs/terminus",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":576,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(\"sql",{"_index":555,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":1103,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":1821,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":1991,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newuser",{"_index":2101,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":2105,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":1960,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":2050,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":751,"title":{},"body":{"entities/DbRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"index.html":{}}}],["nextfunction",{"_index":1099,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":2743,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":2802,"title":{},"body":{"index.html":{}}}],["non",{"_index":2380,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":2968,"title":{},"body":{"license.html":{}}}],["notable",{"_index":2149,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2809,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1212,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":2116,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":1588,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":2953,"title":{},"body":{"license.html":{}}}],["now",{"_index":617,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["npm",{"_index":2741,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":2803,"title":{},"body":{"index.html":{}}}],["null",{"_index":1221,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["oas3",{"_index":2989,"title":{},"body":{"properties.html":{}}}],["object",{"_index":1708,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["objectliteral",{"_index":1369,"title":{},"body":{"injectables/RepoService.html":{}}}],["obtaining",{"_index":2934,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":2459,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":2924,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":464,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["onboarded",{"_index":1799,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onetomany",{"_index":710,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["open",{"_index":503,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_issues",{"_index":943,"title":{},"body":{"entities/DbUser.html":{}}}],["openapi",{"_index":2493,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":2863,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":946,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@column({type",{"_index":949,"title":{},"body":{"entities/DbUser.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":1851,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":2268,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["opted",{"_index":972,"title":{},"body":{"entities/DbUser.html":{}}}],["optional",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["options.dto",{"_index":429,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":394,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:15",{"_index":1278,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":410,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":1276,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":1348,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":1277,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":1280,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.interface",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["order",{"_index":2394,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["orderby",{"_index":399,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":1959,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":1403,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":401,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":418,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":1404,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":419,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":458,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["origin",{"_index":642,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":1111,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":2978,"title":{},"body":{"license.html":{}}}],["out",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":2646,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":2571,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":2986,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":2917,"title":{},"body":{"index.html":{}}}],["owner",{"_index":801,"title":{},"body":{"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owner}/${repo",{"_index":1398,"title":{},"body":{"injectables/RepoService.html":{}}}],["p",{"_index":2850,"title":{},"body":{"index.html":{}}}],["package",{"_index":2987,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["packages",{"_index":2211,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":393,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["pagecount",{"_index":1247,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":448,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":469,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["pagemetadto",{"_index":452,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1237,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1249,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":396,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":1265,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":459,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":462,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":1263,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto:15",{"_index":423,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:27",{"_index":417,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:32",{"_index":421,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pages",{"_index":1259,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":1884,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1306,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1324,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["paginating",{"_index":1296,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":2716,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":1144,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"id",{"_index":1159,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"owner",{"_index":1316,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1317,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"username",{"_index":1901,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":1261,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":1273,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${uuid",{"_index":1702,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":2099,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/UserHighlightsService.html":{}}}],["particular",{"_index":2966,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1827,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1825,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["patch",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":1934,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":1927,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":1637,"title":{},"body":{"injectables/StripeService.html":{}}}],["per",{"_index":1256,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":2749,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":910,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":2928,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2947,"title":{},"body":{"license.html":{}}}],["person",{"_index":2933,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2948,"title":{},"body":{"license.html":{}}}],["pid,hostname,context",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1018,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["pipelines",{"_index":2755,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":1858,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":1849,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":2372,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":2907,"title":{},"body":{"index.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["portions",{"_index":2957,"title":{},"body":{"license.html":{}}}],["post",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/checkout/session",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/onboarding",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/waitlist",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":1736,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post('/')@apioperation({operationid",{"_index":1915,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":1681,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["postcreatecheckoutsession",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":2874,"title":{},"body":{"index.html":{}}}],["postonboarding",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":2457,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":502,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pr!'})@column('text",{"_index":1030,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":507,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["preferences",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["prefs.dto",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":1870,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":1871,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":1873,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prerequisites",{"_index":2795,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":2706,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":2849,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1251,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["price",{"_index":919,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":936,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":920,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":898,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":648,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":662,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"text",{"_index":934,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":711,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["print",{"_index":2578,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":2910,"title":{},"body":{"index.html":{}}}],["process",{"_index":2645,"title":{},"body":{"changelog.html":{}}}],["process.env.domain",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":1834,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":1837,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":1832,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":2676,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["profile",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["programming",{"_index":766,"title":{},"body":{"entities/DbRepo.html":{}}}],["project",{"_index":749,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["promise",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all(promises",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["promise.all(repostoremoverequests",{"_index":2012,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":2022,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promises",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["promises.push(this.userreposservice.adduserrepo(userid",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["proper",{"_index":2554,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":2625,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":397,"title":{"properties.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":659,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["provide",{"_index":2584,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":2958,"title":{},"body":{"license.html":{}}}],["providers",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["public",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"changelog.html":{}}}],["public.users",{"_index":2408,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":2941,"title":{},"body":{"license.html":{}}}],["pull",{"_index":600,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["purpose",{"_index":2967,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2604,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":780,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["pushed_at",{"_index":737,"title":{},"body":{"entities/DbRepo.html":{}}}],["put",{"_index":1437,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["put(\"/:id/star",{"_index":1444,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":1482,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":1520,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":1555,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":1446,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":1485,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":1522,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":1557,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1431,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1473,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1511,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1547,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1435,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1477,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1514,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1550,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["quality",{"_index":2855,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":899,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["query",{"_index":565,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":456,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":2090,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.getcount",{"_index":467,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getmany",{"_index":468,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getone",{"_index":541,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.where(\"id",{"_index":2049,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insights.id",{"_index":1217,"title":{},"body":{"injectables/InsightsService.html":{}}}],["questions",{"_index":2912,"title":{},"body":{"index.html":{}}}],["rate",{"_index":2345,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":1680,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":2652,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":1876,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"index.html":{}}}],["readme",{"_index":2374,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":398,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["receive_collaboration",{"_index":944,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receives",{"_index":987,"title":{},"body":{"entities/DbUser.html":{}}}],["recieve",{"_index":1872,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["record",{"_index":2222,"title":{},"body":{"changelog.html":{}}}],["record)[\"stripe",{"_index":1739,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":2307,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":2461,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":632,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["registration",{"_index":1789,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":2563,"title":{},"body":{"changelog.html":{}}}],["relation",{"_index":2491,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":2722,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":2509,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":2350,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevantevents",{"_index":1690,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":1745,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":2502,"title":{},"body":{"changelog.html":{}}}],["remote",{"_index":2876,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1137,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["removed",{"_index":1421,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removeinsight",{"_index":1195,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":1208,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":1124,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":1134,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightrepo",{"_index":1171,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":1178,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":1136,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["rename",{"_index":2482,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserRepo.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":1331,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":669,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":631,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":1343,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":715,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:18",{"_index":1042,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:25",{"_index":1044,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":719,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:32",{"_index":1043,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":722,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:40",{"_index":723,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:42",{"_index":1041,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:50",{"_index":717,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:60",{"_index":718,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:68",{"_index":721,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.id",{"_index":1385,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repo_id",{"_index":2008,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouserstargazers",{"_index":839,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":828,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":854,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":845,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":873,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":864,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotouservotes",{"_index":888,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":879,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":1190,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":1169,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:14",{"_index":1176,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:18",{"_index":1179,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:8",{"_index":1173,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.to.user.stargazers.entity",{"_index":809,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.stars.entity",{"_index":807,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.submissions.entity",{"_index":808,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.votes.entity",{"_index":806,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.user",{"_index":990,"title":{},"body":{"entities/DbUser.html":{}}}],["repo/dtos/repo",{"_index":1441,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo/dtos/user",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["repo/repo.service",{"_index":386,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/user",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":588,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":384,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":1319,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repoid",{"_index":444,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1994,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repoids.foreach(async",{"_index":1996,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":12,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":408,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":1346,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repopageoptionsdto",{"_index":1322,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["reporepository",{"_index":1359,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":2832,"title":{},"body":{"index.html":{}}}],["repos",{"_index":680,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["repos'})@apibody({type",{"_index":1981,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["repos.dto.ts",{"_index":2029,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repos.dto.ts:12",{"_index":2030,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":2035,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":2036,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:12",{"_index":2039,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:18",{"_index":2043,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:24",{"_index":2045,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:38",{"_index":2042,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:47",{"_index":2044,"title":{},"body":{"injectables/UserReposService.html":{}}}],["reposervice",{"_index":382,"title":{"injectables/RepoService.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":2285,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":440,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":1406,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":1450,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":1600,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":1571,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":2016,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":2020,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":2005,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":2010,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":2009,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":1490,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":1769,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":2019,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":738,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstargazers.repo",{"_index":783,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstargazers.user",{"_index":992,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouserstars",{"_index":739,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstars.repo",{"_index":785,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstars.user",{"_index":994,"title":{},"body":{"entities/DbUser.html":{}}}],["repotousersubmissions",{"_index":740,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotousersubmissions.repo",{"_index":787,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotousersubmissions.user",{"_index":996,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouservotes",{"_index":741,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouservotes.repo",{"_index":789,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouservotes.user",{"_index":998,"title":{},"body":{"entities/DbUser.html":{}}}],["repovotecontroller",{"_index":1526,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":2130,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":2923,"title":{},"body":{"index.html":{}}}],["representing",{"_index":608,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":1683,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{}}}],["req.headers",{"_index":1738,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":1024,"title":{},"body":{"entities/DbUserHighlight.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibody({type",{"_index":1140,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":1980,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["request.user",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestmethod",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":601,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["required",{"_index":1640,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":2751,"title":{},"body":{"changelog.html":{}}}],["reset",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"index.html":{},"overview.html":{}}}],["response",{"_index":1098,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["response.decorator",{"_index":1307,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":2765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":1786,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":1805,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":1793,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":1812,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":1807,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":1795,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":1791,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":1804,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":1792,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":1809,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":1800,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":1802,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":1797,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":1787,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":1796,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":1806,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":1811,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":1808,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":1788,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.on(\"finish",{"_index":1110,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":2937,"title":{},"body":{"license.html":{}}}],["results",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":2288,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":2360,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":2189,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":2188,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":2362,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":2939,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":2518,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["route",{"_index":2519,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":2834,"title":{},"body":{"index.html":{}}}],["rules",{"_index":2451,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":2600,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":2655,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":2649,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["san",{"_index":977,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":513,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring",{"_index":504,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@column({type",{"_index":756,"title":{},"body":{"entities/DbRepo.html":{}}}],["sauced/api.opensauced.pizza",{"_index":2148,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":2998,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":3002,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":3000,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":668,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":644,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights/pull/1",{"_index":512,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1033,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":510,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1025,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/open",{"_index":755,"title":{},"body":{"entities/DbRepo.html":{}}}],["sauced/triage",{"_index":2808,"title":{},"body":{"index.html":{}}}],["saucedopen",{"_index":1014,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@column({type",{"_index":1006,"title":{},"body":{"entities/DbUser.html":{}}}],["saucedopen'})@isstring()@isoptional",{"_index":1863,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":2267,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":2282,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":2494,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":2515,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":2686,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2695,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":2742,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["secs",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["see",{"_index":2902,"title":{},"body":{"index.html":{}}}],["select",{"_index":620,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":1375,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(['repo.id",{"_index":1380,"title":{},"body":{"injectables/RepoService.html":{}}}],["selectquerybuilder",{"_index":1203,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":2945,"title":{},"body":{"license.html":{}}}],["servers",{"_index":2342,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":2506,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":1649,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":1648,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":1691,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["settings",{"_index":2881,"title":{},"body":{"index.html":{}}}],["shall",{"_index":2954,"title":{},"body":{"license.html":{}}}],["short",{"_index":701,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{}}}],["short_code",{"_index":681,"title":{},"body":{"entities/DbInsight.html":{}}}],["sig",{"_index":1737,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1803,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["signature",{"_index":1740,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["simple",{"_index":2453,"title":{},"body":{"changelog.html":{}}}],["simplest",{"_index":2896,"title":{},"body":{"index.html":{}}}],["singleline",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":1275,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["slow",{"_index":2312,"title":{},"body":{"changelog.html":{}}}],["soft",{"_index":2464,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":2798,"title":{},"body":{"index.html":{},"license.html":{}}}],["source",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["sources",{"_index":762,"title":{},"body":{"entities/DbRepo.html":{}}}],["spdx",{"_index":776,"title":{},"body":{"entities/DbRepo.html":{}}}],["spec",{"_index":2642,"title":{},"body":{"changelog.html":{}}}],["split",{"_index":2475,"title":{},"body":{"changelog.html":{}}}],["sql",{"_index":2311,"title":{},"body":{"changelog.html":{}}}],["src/.../api",{"_index":3009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":3010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":2784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../endpoint.config.ts",{"_index":3011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":2785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":2787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":3012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":3008,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":3013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:133",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:100",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:115",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:145",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:162",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:181",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":1785,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":1813,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":1816,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":1819,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":1824,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":1822,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":2763,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":2788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":2764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/page",{"_index":1243,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":1226,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":1235,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":1231,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/middleware/database",{"_index":544,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":1095,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":2768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":2770,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":586,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":633,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":624,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":635,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":604,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":629,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":618,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":640,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":621,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":597,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":645,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":383,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":437,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":441,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":445,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":392,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":1289,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts",{"_index":670,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:17",{"_index":672,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:27",{"_index":674,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":517,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":520,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":532,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":536,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:27",{"_index":534,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:36",{"_index":530,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":526,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/health/health.controller.ts",{"_index":1047,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1053,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1056,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1093,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/insight/dtos/create",{"_index":471,"title":{},"body":{"classes/CreateInsightDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":1166,"title":{},"body":{"classes/InsightPageOptionsDto.html":{},"coverage.html":{}}}],["src/insight/dtos/update",{"_index":1842,"title":{},"body":{"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":714,"title":{},"body":{"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":678,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:101",{"_index":700,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:26",{"_index":688,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:33",{"_index":709,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:43",{"_index":696,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:50",{"_index":694,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:57",{"_index":693,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:67",{"_index":704,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:77",{"_index":683,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:87",{"_index":707,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:97",{"_index":686,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":1168,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":1122,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:25",{"_index":1133,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:42",{"_index":1142,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":1187,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":1191,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":1198,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":1202,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":1207,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:39",{"_index":1201,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:43",{"_index":1211,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:47",{"_index":1209,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:51",{"_index":1205,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":1968,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2774,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/repo/dtos/repo",{"_index":1345,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":727,"title":{},"body":{"entities/DbRepo.html":{},"coverage.html":{}}}],["src/repo/entities/repo.entity.ts:103",{"_index":747,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:113",{"_index":795,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:123",{"_index":782,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:130",{"_index":748,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:140",{"_index":779,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:150",{"_index":757,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:160",{"_index":753,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:170",{"_index":769,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:180",{"_index":778,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:191",{"_index":798,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:199",{"_index":775,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:207",{"_index":774,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:215",{"_index":772,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:223",{"_index":773,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:231",{"_index":800,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:235",{"_index":746,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:239",{"_index":790,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:243",{"_index":786,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:247",{"_index":788,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:251",{"_index":784,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:36",{"_index":759,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:46",{"_index":803,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:56",{"_index":765,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:66",{"_index":792,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:76",{"_index":805,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:86",{"_index":794,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:93",{"_index":763,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":822,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":827,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":835,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":831,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":824,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":832,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":825,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":834,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":829,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":840,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":844,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":851,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":847,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":842,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":848,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":843,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":850,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":846,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":855,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":860,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":870,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":866,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":863,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":858,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":867,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":859,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":869,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":865,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":874,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":878,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":885,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":881,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":876,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":882,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":877,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":884,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":880,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":1320,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:21",{"_index":1328,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":1332,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:48",{"_index":1326,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":1342,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":1355,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:12",{"_index":1358,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":1367,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:28",{"_index":1360,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:52",{"_index":1363,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:67",{"_index":1364,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:82",{"_index":1362,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":1407,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":1564,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":1566,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":1572,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":1576,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":1574,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":1570,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":1451,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":1593,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":1595,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":1601,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":1605,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":1603,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":1599,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":1672,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":1618,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":1620,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":1630,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":1626,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":1628,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":1624,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":1491,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":1762,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":1764,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":1770,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":1774,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":1772,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":1768,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":889,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1040,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":496,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":1846,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1016,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["src/user/user",{"_index":1908,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1878,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:27",{"_index":1892,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":1887,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":937,"title":{},"body":{"entities/DbUser.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:106",{"_index":952,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:113",{"_index":968,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:120",{"_index":976,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:127",{"_index":1001,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:137",{"_index":948,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:147",{"_index":984,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:157",{"_index":1010,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:167",{"_index":1007,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:177",{"_index":950,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:187",{"_index":980,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:197",{"_index":957,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:207",{"_index":966,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:217",{"_index":955,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:227",{"_index":989,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:237",{"_index":1004,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:241",{"_index":991,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:245",{"_index":999,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:249",{"_index":995,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:253",{"_index":997,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:257",{"_index":993,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:27",{"_index":963,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:37",{"_index":986,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:44",{"_index":962,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:51",{"_index":975,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:58",{"_index":970,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:68",{"_index":951,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:78",{"_index":1008,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:88",{"_index":981,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:99",{"_index":960,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.module.ts",{"_index":2026,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2054,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:114",{"_index":2078,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:12",{"_index":2064,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:124",{"_index":2084,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:134",{"_index":2080,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:144",{"_index":2076,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:148",{"_index":2074,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":2066,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":2070,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:50",{"_index":2072,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:65",{"_index":2068,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:92",{"_index":2082,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":1527,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":2123,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":2125,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":2131,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":2135,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:45",{"_index":2133,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":2129,"title":{},"body":{"injectables/VoteService.html":{}}}],["stable",{"_index":2689,"title":{},"body":{"changelog.html":{}}}],["staff",{"_index":862,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":841,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":1417,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":1565,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":1408,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":1422,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":1425,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":1429,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":1433,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":1436,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":1440,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":1568,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":1575,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":1583,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":1584,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":823,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":1594,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":1452,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":1464,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":1467,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":1471,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":1475,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":1478,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":1480,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":1597,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":1604,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":2432,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":1610,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":1611,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":14,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":1456,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":1472,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":1457,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":1476,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":1390,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":1352,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":1479,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":13,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":1412,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":1430,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":1413,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":1434,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":1428,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":742,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":1353,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":1439,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":913,"title":{},"body":{"entities/DbSubscription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":2821,"title":{},"body":{"index.html":{}}}],["started",{"_index":2146,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":1108,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":2758,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2595,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":761,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":1112,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":1113,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":2454,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":2477,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(user_name",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":554,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":574,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stripe",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":1632,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":1754,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":1619,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":1749,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":529,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":369,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":282,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":15,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":1653,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":1671,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":16,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":2673,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":2994,"title":{},"body":{"properties.html":{}}}],["studio",{"_index":2883,"title":{},"body":{"index.html":{}}}],["stuff",{"_index":2390,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":2480,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":2318,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":933,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":916,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":1746,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":1747,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subject",{"_index":2950,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2943,"title":{},"body":{"license.html":{}}}],["submission",{"_index":857,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":1500,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":1389,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":1351,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":1518,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":1763,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":1492,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":1502,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":1505,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":1509,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":1512,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":1515,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":1517,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":1766,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":1773,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":1781,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":1779,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":1780,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":17,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":1496,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":1510,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":1497,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":1513,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":1516,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":1508,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":1368,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount",{"_index":1356,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":1365,"title":{},"body":{"injectables/RepoService.html":{}}}],["subscribers",{"_index":743,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":904,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":1716,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":1715,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":1718,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":1751,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":890,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":915,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":903,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":907,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":929,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":928,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":917,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":931,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":926,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":918,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":921,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":923,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":905,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":908,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":914,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":912,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":1723,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":1710,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":1714,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":1713,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":1654,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":1655,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":1657,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":1662,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":1664,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":1660,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":1712,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":1727,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":1725,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":1709,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":1686,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionrepository",{"_index":1661,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":932,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["substantial",{"_index":2956,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":1644,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":2413,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suite",{"_index":2822,"title":{},"body":{"index.html":{}}}],["summary",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["supabase",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":2085,"title":{},"body":{"injectables/UserService.html":{}}}],["supabase>=0.18.0",{"_index":2805,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":275,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":3007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":1829,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":271,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":1836,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":1833,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":1835,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":370,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":1831,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1830,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":1841,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.validate(user",{"_index":1840,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["support",{"_index":2169,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":2192,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":2982,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2203,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":2340,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":2213,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":1230,"title":{},"body":{"classes/PageDto.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["tables",{"_index":2498,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2781,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2591,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":2566,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":2465,"title":{},"body":{"changelog.html":{}}}],["take",{"_index":2617,"title":{},"body":{"changelog.html":{}}}],["target",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["targets",{"_index":2351,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":1378,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":492,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"index.html":{}}}],["team'})@column({type",{"_index":695,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":487,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":2618,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":3004,"title":{},"body":{"properties.html":{}}}],["temporary",{"_index":2400,"title":{},"body":{"changelog.html":{}}}],["terminusmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":2609,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":2833,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2569,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":2831,"title":{},"body":{"index.html":{}}}],["text",{"_index":500,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbRepo.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":1977,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":1297,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":1325,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1885,"title":{},"body":{"controllers/UserController.html":{}}}],["thing",{"_index":2882,"title":{},"body":{"index.html":{}}}],["this._stripe",{"_index":1631,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.basequerybuilder",{"_index":539,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1077,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1079,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1092,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1084,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1088,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1090,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1086,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1082,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1072,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1074,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":1642,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":1647,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":1645,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":1742,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":457,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":1313,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":538,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":543,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":1700,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1241,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1070,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1078,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1075,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findonebyid(id",{"_index":2100,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":1270,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":1269,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1069,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1091,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1083,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1087,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1089,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1085,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1081,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightreporepository.save",{"_index":1182,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":1183,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":1216,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":1222,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":1224,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":1223,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":2021,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":1997,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":2011,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":1992,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":1988,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":1160,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":1164,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":1998,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":1266,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":1264,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger.debug(message",{"_index":583,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":579,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`error",{"_index":1732,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":1115,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":577,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":1735,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":1120,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":582,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":1118,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":581,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":1750,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":1757,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1071,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1073,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1242,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":1262,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":1267,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":1379,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":1338,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":1312,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":1318,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":1607,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":1612,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":1613,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":1614,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":1579,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":1586,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":1587,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":1589,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":1776,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":1782,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":1783,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":1784,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":2137,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":2142,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":2143,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":2144,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":1488,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":1484,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":1448,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":1445,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":578,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":1636,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":1635,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":1703,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":1744,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":1729,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":1524,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":1521,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":1387,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":1666,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":1667,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.userhighlightreporepository.create",{"_index":1961,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreporepository.createquerybuilder(\"user_highlights",{"_index":1955,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreporepository.save(newuserhighlight",{"_index":1965,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreporepository.softdelete(highlightid",{"_index":1967,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreporepository.update(highlightid",{"_index":1966,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":1933,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":1937,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":1905,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":1935,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlightid",{"_index":1936,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userreporepository.create",{"_index":2051,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":2048,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":2052,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":2102,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":2088,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":2106,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":1902,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":1731,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":1559,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":1556,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1076,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":1163,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":571,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":2313,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":607,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":945,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":499,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["tld",{"_index":2729,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":3014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_timestamp(0",{"_index":771,"title":{},"body":{"entities/DbRepo.html":{}}}],["todatetime",{"_index":1688,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":1717,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":1719,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":1722,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":1721,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":1720,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":1724,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":1728,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":1726,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["token",{"_index":2607,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":2844,"title":{},"body":{"index.html":{}}}],["top",{"_index":1028,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["topic",{"_index":964,"title":{},"body":{"entities/DbUser.html":{}}}],["tort",{"_index":2977,"title":{},"body":{"license.html":{}}}],["total",{"_index":598,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["transformer",{"_index":1239,"title":{},"body":{"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":927,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":900,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":901,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":2356,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":1234,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":1233,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1005,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3005,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":1059,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":547,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":389,"title":{},"body":{"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1344,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":1656,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":2500,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":2866,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":2209,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":2878,"title":{},"body":{"index.html":{}}}],["unable",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["unauthorizedexception",{"_index":1145,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":2754,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":477,"title":{},"body":{"classes/CreateInsightDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["undefined})@isarray",{"_index":480,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":409,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":420,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":1347,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["undo",{"_index":2517,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":1463,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":1487,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":1460,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unique",{"_index":590,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":2841,"title":{},"body":{"index.html":{}}}],["unix",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":531,"title":{},"body":{"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/HealthController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":1983,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["up",{"_index":2437,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":2262,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":705,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"index.html":{}}}],["updated_at",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":653,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{}}}],["updateemailpreferences",{"_index":2057,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":2073,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatehighlightdto",{"_index":1929,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":1913,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":1926,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":1196,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":1210,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":1141,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.ids.filter(repoid",{"_index":2017,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.ids.find(id",{"_index":2007,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.is_public",{"_index":2000,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":1999,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":1972,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":1979,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinterests",{"_index":2058,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":2075,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":2059,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":2077,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":2060,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":2079,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["updateuser",{"_index":2061,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":2081,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":240,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":241,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":1941,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":1952,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":250,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":2062,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":2083,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":2170,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":1706,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":1658,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":1663,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["url(`https://${subdomain",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":2541,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1096,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":1097,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":2226,"title":{},"body":{"changelog.html":{}}}],["usefactory",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["useguards(supabaseguard",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["user",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":967,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":1924,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["user'})@apiokresponse({type",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@column({type",{"_index":947,"title":{},"body":{"entities/DbUser.html":{}}}],["user.bio",{"_index":2109,"title":{},"body":{"injectables/UserService.html":{}}}],["user.company",{"_index":2112,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":2027,"title":{},"body":{"modules/UserModule.html":{}}}],["user.display_email",{"_index":2118,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":2114,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1847,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":1860,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1856,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":1850,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":1866,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":1864,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:55",{"_index":1852,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:64",{"_index":1857,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:73",{"_index":1854,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:82",{"_index":1862,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":2108,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1896,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":1906,"title":{},"body":{"controllers/UserController.html":{}}}],["user.interests.join",{"_index":2117,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":2113,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":2107,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":2119,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repos",{"_index":821,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repos)@joincolumn({name",{"_index":799,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repotouserstargazers",{"_index":838,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":833,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":853,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":849,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":872,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":868,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":887,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":883,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.service",{"_index":1897,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.timezone",{"_index":2115,"title":{},"body":{"injectables/UserService.html":{}}}],["user.twitter_username",{"_index":2111,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":2110,"title":{},"body":{"injectables/UserService.html":{}}}],["user/dtos/update",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/entities/user",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["user/highlights",{"_index":1910,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":1970,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["user/user.entity",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["user_highlights",{"_index":1037,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_id",{"_index":682,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["user_metadata",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_repos",{"_index":1045,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["usercontroller",{"_index":1877,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightreporepository",{"_index":1944,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":1907,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1894,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightscontroller",{"_index":1188,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["usermodule",{"_index":18,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["username'})@apiokresponse({type",{"_index":1891,"title":{},"body":{"controllers/UserController.html":{}}}],["userprofile",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrelations",{"_index":1361,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":1399,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":227,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["userreporepository",{"_index":2040,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":2065,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":19,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":280,"title":{"injectables/UserReposService.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":1730,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"controllers/UserController.html":{},"changelog.html":{},"index.html":{}}}],["users_email",{"_index":2091,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":836,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":852,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":871,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":886,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["userservice",{"_index":278,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utc",{"_index":1002,"title":{},"body":{"entities/DbUser.html":{},"classes/UpdateUserDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":1106,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":1689,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1701,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["validate",{"_index":1818,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":1823,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1238,"title":{},"body":{"classes/PageDto.html":{}}}],["validator",{"_index":427,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["value",{"_index":404,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2504,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":2585,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":2575,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":594,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["verify",{"_index":2734,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":2744,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":2426,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":2877,"title":{},"body":{"index.html":{}}}],["videos",{"_index":2916,"title":{},"body":{"index.html":{}}}],["view",{"_index":1132,"title":{},"body":{"controllers/InsightController.html":{},"changelog.html":{}}}],["visibility",{"_index":484,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visual",{"_index":2922,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":2401,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":2920,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":2925,"title":{},"body":{"index.html":{}}}],["visually",{"_index":2888,"title":{},"body":{"index.html":{}}}],["vite",{"_index":2417,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":2846,"title":{},"body":{"index.html":{}}}],["void",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":2629,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":2662,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":667,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":592,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{}}}],["vortex/api.opensauced.pizza",{"_index":2711,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":1794,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":875,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":1536,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":2124,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":1528,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":1538,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":1541,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":1545,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":1548,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":1551,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":1553,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":2127,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":2134,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":1544,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":2140,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":2141,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":20,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":1532,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":1546,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":1533,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":1549,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":1388,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":1350,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":1552,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["waitlist",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":1801,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":558,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["warranties",{"_index":2963,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2959,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2824,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":744,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":2830,"title":{},"body":{"index.html":{}}}],["way",{"_index":2897,"title":{},"body":{"index.html":{}}}],["web",{"_index":1049,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":2250,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":1674,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":1676,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":1685,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:78",{"_index":1682,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":1675,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":2777,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":1673,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":1741,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["website",{"_index":1810,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["where(\"contribution.repo_id",{"_index":460,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"customer.id=:id",{"_index":540,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"customer.stripe_customer_id=:id",{"_index":542,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"id",{"_index":2089,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insights.user_id",{"_index":1225,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(login",{"_index":2093,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":1608,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":1581,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":1777,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":2138,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":1397,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":1396,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"user_highlights.id",{"_index":1956,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.user_id",{"_index":1958,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_repos.user_id",{"_index":2053,"title":{},"body":{"injectables/UserReposService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":1377,"title":{},"body":{"injectables/RepoService.html":{}}}],["whether",{"_index":971,"title":{},"body":{"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":2810,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":1580,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":615,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"license.html":{}}}],["work",{"_index":2512,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":2354,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":2446,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":2840,"title":{},"body":{"index.html":{}}}],["writing",{"_index":2387,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yaml",{"_index":2681,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":446,"title":{},"body":{"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{}}}],["youtube",{"_index":2918,"title":{},"body":{"index.html":{}}}],["zone",{"_index":616,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["zoom",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { RepoModule } from \"./repo/repo.module\";\nimport apiConfig from \"./config/api.config\";\nimport dbConfig from \"./config/database.config\";\nimport endpointConfig from \"./config/endpoint.config\";\nimport stripeConfig from \"./config/stripe.config\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { version } from \"../package.json\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        apiConfig,\n        dbConfig,\n        endpointConfig,\n        stripeConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: configService.get(\"db.connection\"),\n        host: configService.get(\"db.host\"),\n        port: configService.get(\"db.port\"),\n        username: configService.get(\"db.username\"),\n        password: configService.get(\"db.password\"),\n        database: configService.get(\"db.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbUserRepo,\n          DbUserHighlight,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n          DbInsight,\n          DbInsightRepo,\n          DbCustomer,\n          DbSubscription,\n        ],\n        synchronize: false,\n        logger: (new DatabaseLoggerMiddleware),\n        maxQueryExecutionTime: configService.get(\"db.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {\n  constructor (private dataSource: DataSource) {}\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v${version.charAt(0)}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserRepoOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { UserReposService } from \"../user-repo/user-repos.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { DbUserRepo } from \"../user-repo/user-repo.entity\";\nimport { UserRepoOptionsDto } from \"../user-repo/dtos/user-repos.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (\n    private userService: UserService,\n    private userReposService: UserReposService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email: session_email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role, name, bio, location, twitter_username, company, display_local_time, url, email } = await this.userService.checkAddUser(user);\n\n      userProfile = { is_onboarded, insights_role, is_waitlisted, name, location, bio, twitter_username, company, display_local_time, url, email };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n      @Body() body: UserRepoOptionsDto,\n  ): Promise {\n    const promises: Promise[] = [];\n\n    body.ids.forEach(repo => {\n      promises.push(this.userReposService.addUserRepo(userId, repo));\n    });\n\n    await Promise.all(promises);\n\n    return this.userService.updateOnboarding(userId);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { email, user_metadata: { sub } } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserProfileInterestsDto,\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserEmailPreferencesDto,\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nContributionService \n\nContributionService \n\n\n\nContributionModule\n\nContributionModule\n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbContribution,\n  ])],\n  controllers: [RepoContributionsController],\n  providers: [RepoService, ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution)\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ids\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository IDs', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n    name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n    is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository IDs\",\n    type: [Number],\n    isArray: true,\n    example: [1, 2, 3],\n  })\n  @IsArray()\n    ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  public highlight: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_CustomerModule_exports\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbCustomer,\n    ]),\n  ],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor (\n    @InjectRepository(DbCustomer)\n    private customerRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById (id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer (userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger(\"SQL\")\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger = new NestLogger(\"SQL\");\n\n  logQuery (query: string, parameters?: unknown[]) {\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[]) {\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[]) {\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string) {\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column()\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, insightRepo => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, insight => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepo.html":{"url":"entities/DbRepo.html","title":"entity - DbRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributions\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_fork\n                            \n                            \n                                    Public\n                                issues\n                            \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_commits_at\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_contributors_at\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_prs_at\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_repos_at\n                            \n                            \n                                    Public\n                                license\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pushed_at\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                stars\n                            \n                            \n                                    Public\n                                subscribers\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                watchers\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbContribution[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, contribution => contribution.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:235\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository short description', example: '🍕This is a project to identify your next open source contribution! 🍕'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository full name', example: 'open-sauced/open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_fork\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating fork status, false for sources', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of issues', example: 274})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository programming language', example: 'JavaScript'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_commits_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_contributors_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_prs_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_repos_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:199\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        license\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository SPDX license', example: 'MIT'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository unique name', example: 'open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pushed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last push', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:251\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:243\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:247\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:239\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of stars', example: 5})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of subscribers', example: 11756})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository GitHub linked URL', example: 'https://app.opensauced.pizza'})@Column({type: 'character varying', length: 255, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:231\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Owner user identifier', example: 57568598})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        watchers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of watchers', example: 5473})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:76\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  JoinColumn,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbContribution } from \"../../contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({\n  name: \"repos\",\n  orderBy: {\n    stars: \"DESC\",\n    name: \"ASC\",\n  },\n})\nexport class DbRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Owner user identifier\",\n    example: 57568598,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of issues\",\n    example: 274,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public issues: number;\n\n  @ApiModelProperty({\n    description: \"Total number of stars\",\n    example: 5,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public stars: number;\n\n  @ApiModelProperty({\n    description: \"Total number of watchers\",\n    example: 5473,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public watchers: number;\n\n  @ApiModelProperty({\n    description: \"Total number of subscribers\",\n    example: 11756,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public subscribers: number;\n\n  @ApiModelProperty({\n    description: \"Flag indicating fork status, false for sources\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_fork: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last push\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pushed_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Repository unique name\",\n    example: \"open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Repository full name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public full_name: string;\n\n  @ApiModelProperty({\n    description: \"Repository short description\",\n    example: \"🍕This is a project to identify your next open source contribution! 🍕\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public description: string;\n\n  @ApiModelProperty({\n    description: \"Repository programming language\",\n    example: \"JavaScript\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public language: string;\n\n  @ApiModelProperty({\n    description: \"Repository SPDX license\",\n    example: \"MIT\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public license: string;\n\n  @ApiModelProperty({\n    description: \"Repository GitHub linked URL\",\n    example: \"https://app.opensauced.pizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    default: \"\",\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_repos_at?: Date;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_prs_at?: Date;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_commits_at?: Date;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_contributors_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbContribution, contribution => contribution.repo)\n  public contributions: DbContribution[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.repo)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.repo)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.repo)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.repo)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUser.html":{"url":"entities/DbUser.html","title":"entity - DbUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                has_stars_data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                interests\n                            \n                            \n                                    Public\n                                is_onboarded\n                            \n                            \n                                    Public\n                                is_open_sauced_member\n                            \n                            \n                                    Public\n                                is_private\n                            \n                            \n                                    Public\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                open_issues\n                            \n                            \n                                    Readonly\n                                    Optional\n                                receive_collaboration\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                timezone\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User bio information', example: 'OpenSauced User'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User company information', example: 'OpenSauced'})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:177\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User display public email', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:217\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User display local time information', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User email address', example: 'hello@opensauced.pizza'})@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        has_stars_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({default: false, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User topic interests', example: 'javascript'})@Column({type: 'character varying', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's onboarding status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_open_sauced_member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating app.opensauced user status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating whether user opted to have a private profile (beta feature', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's waitlist status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User location information', example: 'San Francisco, CA'})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:187\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User unique login name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User name information', example: 'MrPizza'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open_issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of open issues user has across public activity', example: 498})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User receives collaboration requests', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:227\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repo => repo.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:241\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:257\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:249\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:253\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:245\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insights Role', example: 10})@Column({default: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User timezone in UTC', example: 'UTC-5'})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:237\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Twitter information', example: 'saucedopen'})@Column({type: 'character varying', length: 15})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:167\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User URL', example: 'https://opensauced.pizza'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:157\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  OneToMany,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users\" })\nexport class DbUser extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of open issues user has across public activity\",\n    example: 498,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public open_issues: number;\n\n  @ApiHideProperty()\n  @Column({\n    default: false,\n    select: false,\n  })\n  public has_stars_data: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating whether user opted to have a private profile (beta feature\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_private: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating app.opensauced user status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_open_sauced_member: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"User unique login name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public login: string;\n\n  @ApiModelProperty({\n    description: \"User email address\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public email: string;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's onboarding status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_onboarded: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's waitlist status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_waitlisted: boolean;\n\n  @ApiModelProperty({\n    description: \"Insights Role\",\n    example: 10,\n  })\n  @Column({ default: 10 })\n  public role: number;\n\n  @ApiModelProperty({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  readonly bio?: string;\n\n  @ApiModelProperty({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  readonly name?: string;\n\n  @ApiModelProperty({\n    description: \"User URL\",\n    example: \"https://opensauced.pizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  readonly url?: string;\n\n  @ApiModelProperty({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 15,\n  })\n  readonly twitter_username?: string;\n\n  @ApiModelProperty({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  readonly company?: string;\n\n  @ApiModelProperty({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  readonly location?: string;\n\n  @ApiModelProperty({\n    description: \"User display local time information\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiModelProperty({\n    description: \"User topic interests\",\n    example: \"javascript\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 200,\n  })\n  readonly interests?: string;\n\n  @ApiModelProperty({\n    description: \"User display public email\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  readonly display_email?: boolean;\n\n  @ApiModelProperty({\n    description: \"User receives collaboration requests\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  readonly receive_collaboration?: boolean;\n\n  @ApiModelProperty({\n    description: \"User timezone in UTC\",\n    example: \"UTC-5\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  readonly timezone?: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepo, repo => repo.user)\n  public repos: DbRepo[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.user)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.user)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.user)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.user)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags, ApiUnauthorizedResponse, ApiBadRequestResponse, ApiBearerAuth, ApiBody } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor (\n    private readonly insightsService: InsightsService,\n  ) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (insight.user_id !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repoId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor (\n    @InjectRepository(DbInsightRepo)\n    private insightRepoRepository: Repository,\n  ) {}\n\n  async addInsightRepo (insightId: number, repoId: number) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repoId });\n  }\n\n  async removeInsightRepo (id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\n\n\nInsightsService \n\nInsightsService \n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbInsight,\n      DbInsightRepo,\n    ]),\n  ],\n  providers: [InsightsService, InsightRepoService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor (\n    @InjectRepository(DbInsight)\n    private insightRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insights.id = :id\", { id })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsight (insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight (id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight (id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: InsightPageOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsInt, IsOptional, Max, Min } from \"class-validator\";\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(500)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\") id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_exports\n\n\n\n\nRepoService \n\nRepoService \n\n\n\nRepoModule\n\nRepoModule\n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo])],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo)\n    private repoRepository: Repository,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\n\nStarService \n\nStarService \n\n\n\nStarModule\n\nStarModule\n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStars,\n  ])],\n  controllers: [RepoStarController],\n  providers: [RepoService, StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars)\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_exports\n\n\n\n\nStargazeService \n\nStargazeService \n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStargazers,\n  ])],\n  controllers: [RepoStargazeController],\n  providers: [RepoService, StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers)\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor (private configService: ConfigService) {}\n\n  get stripe () {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer (id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession (customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbSubscription]),\n  ],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor (\n    @InjectRepository(DbSubscription)\n    private subscriptionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription (subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [\n    StripeSubscriptionModule,\n    CustomerModule,\n    StripeModule,\n    UserModule,\n  ],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor (\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService,\n  ) {}\n\n  private async manageSubscriptionStatusChange (subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw (new BadRequestException);\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, { expand: [\"default_payment_method\"] });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(`Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`);\n      throw (new BadRequestException);\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook (@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw (new BadRequestException);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nSubmitService \n\nSubmitService \n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nRepoService\n\nRepoService\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserSubmissions,\n  ])],\n  controllers: [RepoSubmitController],\n  providers: [RepoService, SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions)\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ids\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository IDs', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor (\n    private userService: UserService,\n    private userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById (\n    @Param(\"username\") username: string,\n  ): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser (\n    @Body() createHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser (\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n      @Param(\"id\") highlightId: number,\n  ): Promise {\n    await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlightId, updateHighlightDto);\n\n    return this.userHighlightsService.findOneById(highlightId, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser (\n    @UserId() userId: number,\n      @Param(\"id\") highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor (\n    @InjectRepository(DbUserHighlight)\n    private userHighlightRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userHighlightRepoRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.id = :id\", { id })\n      .andWhere(\"user_highlights.user_id = :userId\", { userId });\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.user_id = :userId\", { userId })\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserHighlight (userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepoRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n    });\n\n    return this.userHighlightRepoRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight (highlightId: number, highlight: Partial) {\n    return this.userHighlightRepoRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight (highlightId: number) {\n    return this.userHighlightRepoRepository.softDelete(highlightId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, Patch, Post, Query, UnauthorizedException, UnprocessableEntityException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @UserId() userId: string,\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser (\n    @Body() createInsightDto: CreateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.ids)) {\n      throw (new BadRequestException);\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    const repoIds = createInsightDto.ids;\n\n    repoIds.forEach(async repoId => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repoId);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser (\n    @Param(\"id\") id: number,\n      @Body() updateInsightDto: UpdateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (insight.user_id !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter(insightRepo => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(repo => !updateInsightDto.ids.find(id => `${id}` === `${repo.repo_id}`));\n\n      const reposToRemoveRequests = reposToRemove.map(async insightRepo => this.insightsRepoService.removeInsightRepo(insightRepo.id));\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map(cr => cr.repo_id);\n      const reposToAdd = updateInsightDto.ids.filter(repoId => !currentRepoIds.find(id => `${id}` === `${repoId}`));\n\n      const repoToAddRequests = reposToAdd.map(async repoId => this.insightsRepoService.addInsightRepo(insight.id, repoId));\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new (UnprocessableEntityException);\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n      DbUserHighlight,\n    ]),\n  ],\n  controllers: [UserController, UserHighlightsController],\n  providers: [UserService, UserController, UserHighlightsService, UserHighlightsController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(500)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nUserReposService \n\nUserReposService \n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserRepo,\n    ]),\n  ],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repoId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor (\n    @InjectRepository(DbUserRepo)\n    private userRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserRepo (userId: number, repoId: number) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repoId,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: UserRepoOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder\n      .where(\"user_repos.user_id = :userId\", { userId });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser)\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByUsername (username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"LOWER(login) = LOWER(:username)\", { username });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const {\n      user_metadata: { user_name, email },\n      identities,\n    } = user;\n    const github = identities!.filter(identity => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      return await this.findOneById(id, true);\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        is_open_sauced_member: false,\n        login: user_name as string,\n        email: email as string,\n        created_at: (new Date),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser (id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_onboarded: true, is_waitlisted: false });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole (id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests (id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences (id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nVoteService \n\nVoteService \n\n\n\nVoteModule\n\nVoteModule\n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nRepoService\n\nRepoService\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserVotes,\n  ])],\n  controllers: [RepoVoteController],\n  providers: [RepoService, VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes)\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.25.1-beta.1 (2023-02-17)\n🐛 Bug Fixes\n\nforce coercion of userId in UserId decorator into a number (bb1f3e5)\n\n1.25.0 (2023-02-14)\n🍕 Features\n\nadd entity and endpoint to manage user highlights (#99) (6894cf1)\nadd support for updating all user profile information (#101) (169d07b)\n\n🐛 Bug Fixes\n\nadd optional title field to user highlights (#100) (eb707a0)\nadd title to new user highlight method (#102) (15d4f30)\nfetch user email as default with fallback to session email (#104) (2cfec69)\n\n1.25.0-beta.5 (2023-02-10)\n🐛 Bug Fixes\n\nfetch user email as default with fallback to session email (#104) (2cfec69)\n\n1.25.0-beta.4 (2023-02-10)\n🐛 Bug Fixes\n\nadd title to new user highlight method (#102) (15d4f30)\n\n1.25.0-beta.3 (2023-02-09)\n🍕 Features\n\nadd support for updating all user profile information (#101) (169d07b)\n\n1.25.0-beta.2 (2023-02-06)\n🐛 Bug Fixes\n\nadd optional title field to user highlights (#100) (eb707a0)\n\n1.25.0-beta.1 (2023-02-06)\n🍕 Features\n\nadd entity and endpoint to manage user highlights (#99) (6894cf1)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\nadd email to initial user data when session is used (#83) (df31fc9)\nadd support for managing interests in the user profile (#84) (a6488b4)\n\n🐛 Bug Fixes\n\nadd user information to session info, fix display_local_time field (f83b3cd)\nfix bug with insight_role_id, set type for additional user data (#86) (807162e)\n\n1.23.0-beta.5 (2023-01-30)\n🐛 Bug Fixes\n\nfix bug with insight_role_id, set type for additional user data (#86) (807162e)\n\n1.23.0-beta.4 (2023-01-25)\n🍕 Features\n\nadd support for managing interests in the user profile (#84) (a6488b4)\n\n1.23.0-beta.3 (2023-01-24)\n🍕 Features\n\nadd email to initial user data when session is used (#83) (df31fc9)\n\n1.23.0-beta.2 (2023-01-24)\n🐛 Bug Fixes\n\nadd user information to session info, fix display_local_time field (f83b3cd)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Nest Supabase API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\nsupabase>=0.18.0\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database commands\nThe API is configured to connect to a local Docker backed PostGres instance however \nyou can also connect to a remote Supabase instance by logging in via the UI and \ncopying the connection string from the settings page.\nManaging supabase migrations\nFirst thing we have to do for local development is start the studio locally at localhost:54321:\nnpm run db:startMake changes\nIf we are adding a new table structure, first do it visually in the Supabase Studio and test locally.\nCheck the migration difference with the following command:\nnpm run db:changesIf everything is fine we can run the following command to apply the changes to the database:\nnpm run db:commit add_table_nameTest changes\nSimplest way to test the migrations are working is to reset the local database:\nnpm run db:resetPush changes\nIf everything is fine we can push the changes to the remote database:\nnpm run db:push🔑 Supabase structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        16 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.25.1-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return parseInt(request.user?.user_metadata.sub as string, 10);\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
