var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.102,1,3.38]],["body/modules/AppModule.html",[0,1.122,1,6.919,2,1.105,3,1.779,4,2.645,5,2.645,6,5.004,7,0.009,8,5.004,9,4.509,10,5.004,11,5.004,12,5.004,13,5.004,14,4.737,15,3.825,16,5.004,17,5.004,18,4.737,19,5.004,20,5.004,21,4.131,22,4.737,23,5.004,24,1.826,25,1.193,26,1.105,27,0.059,28,0.059,29,0.047,30,2.99,31,2.751,32,0.673,33,4.576,34,2.99,35,6.228,36,0.209,37,2.99,38,0.644,39,0.701,40,0.335,41,0.302,42,5.559,43,0.673,44,2.113,45,0.202,46,2.99,47,0.421,48,2.99,49,1.372,50,0.836,51,5.51,52,5.506,53,2,54,4.576,55,2.99,56,4.048,57,2.418,58,2.99,59,2.248,60,4.048,61,5.559,62,0.702,63,5.559,64,2.99,65,2.99,66,2.418,67,2.418,68,2.418,69,3.701,70,3.701,71,3.701,72,3.701,73,3.701,74,4.576,75,1.904,76,2.99,77,1.734,78,1.459,79,2.164,80,1.904,81,2.67,82,2.99,83,2.67,84,2.248,85,2.67,86,2.248,87,2.67,88,2.248,89,2.67,90,2.248,91,2.99,92,2.99,93,2.99,94,2.99,95,2.99,96,2.99,97,2.113,98,2.248,99,2.99,100,4.576,101,2.248,102,2.99,103,2.99,104,2.566,105,2.99,106,2.914,107,4.576,108,2.899,109,0.944,110,3.062,111,2.645,112,3.062,113,3.062,114,2.99,115,2.418,116,1.819,117,2.99,118,2.99,119,3.441,120,2.645,121,3.062,122,2.418,123,3.062,124,2.99,125,3.004,126,1.819,127,2.645,128,2.785,129,3.234,130,2.113,131,2.472,132,5.048,133,1.819,134,2.99,135,2.914,136,2.248,137,2.914,138,2.248,139,2.785,140,2.645,141,2.566,142,1.459,143,1.904,144,2.914,145,1.225,146,2.113,147,3.234,148,1.677,149,2.914,150,2.248,151,2.99,152,2.645,153,2.99,154,3.825,155,4.576,156,1.338,157,5.559,158,4.576,159,8.541,160,2.99,161,4.048,162,2.99,163,3.701,164,2.99,165,2.785,166,2.99,167,4.048,168,2.99,169,3.234,170,2.99,171,4.576,172,2.553,173,1.399,174,4.576,175,3.062,176,1.499,177,2.99,178,4.576,179,4.048,180,2.99,181,4.576,182,4.048,183,2.99,184,5.559,185,3.701,186,2.99,187,2.99,188,2.99,189,2.99,190,2.99,191,2.99,192,2.99,193,2.99,194,2.99,195,2.99,196,2.99,197,2.99,198,2.113,199,2.99,200,2.99,201,2.248,202,2.99,203,2.113,204,2.99,205,2.99,206,2.99,207,2.99,208,2.99,209,2.99,210,2.99,211,2.99,212,2.99,213,2.99,214,2.99,215,2,216,2.418,217,2.645,218,2.645,219,2.99,220,2.248,221,2.248,222,1.259,223,0.065,224,0.07,225,0.673,226,2.99,227,1.052,228,1.368,229,2.99,230,2.99,231,2.99,232,0.004,233,0.004]],["title/controllers/AuthController.html",[234,1.151,235,3.38]],["body/controllers/AuthController.html",[7,0.009,27,0.054,28,0.054,29,0.043,32,0.964,36,0.499,38,1.54,39,0.856,40,0.51,41,0.723,43,1.608,45,0.178,47,0.387,59,2.066,79,2.816,80,1.75,109,1.863,176,1.405,223,0.059,224,0.064,225,0.618,227,1.212,232,0.004,233,0.004,234,0.704,235,3.224,236,0.803,237,2.431,238,1.157,239,3.726,240,0.159,241,2.132,242,5.271,243,6.457,244,6.457,245,6.457,246,6.457,247,6.457,248,6.457,249,2.748,250,6.323,251,1.031,252,2.748,253,4.287,254,3.571,255,3.855,256,5.534,257,2.748,258,2.748,259,2.748,260,2.64,261,2.748,262,2.748,263,4.287,264,5.268,265,5.271,266,5.271,267,5.12,268,3.224,269,2.748,270,2.748,271,1.157,272,5.56,273,4.209,274,2.748,275,5.491,276,4.478,277,5.083,278,3.461,279,2.748,280,2.821,281,2.748,282,2.748,283,4.816,284,2.748,285,2.748,286,6.035,287,4.836,288,2.748,289,4.439,290,5.268,291,4.287,292,4.664,293,5.271,294,2.748,295,2.748,296,4.836,297,2.748,298,4.564,299,2.748,300,2.748,301,2.748,302,5.98,303,1.942,304,2.748,305,2.748,306,2.748,307,2.066,308,1.942,309,1.485,310,3.995,311,4.209,312,3.279,313,3.03,314,3.201,315,1.157,316,0.52,317,1.261,318,2.431,319,1.942,320,2.748,321,4.856,322,2.748,323,2.748,324,2.749,325,2.222,326,3.357,327,2.431,328,3.357,329,2.431,330,5.271,331,2.431,332,2.431,333,2.431,334,2.431,335,2.431,336,2.748,337,2.748,338,1.097,339,2.748,340,3.861,341,3.094,342,2.748,343,2.114,344,3.964,345,4.287,346,3.467,347,3.793,348,1.509,349,1.757,350,3.793,351,5.271,352,1.161,353,3.467,354,5.271,355,1.75,356,2.431,357,1.942,358,0.9,359,1.672,360,2.222,361,3.224,362,3.467,363,3.793,364,3.224,365,3.224,366,3.224,367,3.224,368,3.224,369,2.316,370,3.224,371,3.224,372,3.793,373,2.141,374,2.748,375,1.942,376,2.066,377,2.748,378,1.54,379,2.748,380,2.748,381,2.748,382,2.748,383,1.323,384,4.287,385,2.066,386,2.748,387,2.748,388,2.748,389,2.748,390,2.748,391,2.748,392,3.467,393,2.748,394,4.664,395,0.486,396,2.748,397,2.748,398,2.748,399,2.748,400,2.748,401,2.748,402,2.748,403,2.748,404,2.748,405,2.748,406,2.748,407,2.748,408,3.793,409,2.748,410,2.748]],["title/modules/AuthModule.html",[0,1.102,6,3.177]],["body/modules/AuthModule.html",[0,1.756,2,2.09,3,2.783,6,6.623,7,0.009,9,5.539,21,5.075,22,5.82,24,2.856,25,2.257,26,2.09,27,0.111,28,0.111,29,0.089,31,2.933,45,0.195,47,0.797,97,3.996,109,1.167,110,3.783,111,5.003,115,4.573,222,3.014,223,0.122,224,0.133,232,0.006,233,0.006,235,5.906,236,2.092,317,4.218,318,5.003,411,5.003,412,5.003,413,5.003,414,5.003,415,5.82,416,6.497,417,5.655,418,3.189,419,7.157,420,4.573,421,5.655,422,5.655,423,5.003]],["title/modules/ContributionModule.html",[0,1.102,8,3.177]],["body/modules/ContributionModule.html",[0,1.84,2,2.254,3,2.917,7,0.009,8,6.46,15,4.789,24,2.994,25,2.434,26,2.254,27,0.12,28,0.12,29,0.096,31,3.075,45,0.194,47,0.859,49,2.798,50,1.705,75,3.883,77,2.844,78,2.976,81,4.377,156,1.783,222,3.16,223,0.132,224,0.143,232,0.007,233,0.007,236,2.193,418,3.343,424,5.395,425,5.395,426,6.099,427,5.395,428,6.212,429,6.099,430,6.112,431,4.932,432,5.395,433,1.464,434,6.099,435,3.18]],["title/classes/ContributionPageOptionsDto.html",[224,0.105,436,3.177]],["body/classes/ContributionPageOptionsDto.html",[7,0.009,27,0.103,28,0.103,29,0.082,36,0.58,40,0.5,41,0.907,45,0.163,223,0.147,224,0.16,228,2.702,232,0.006,233,0.006,240,0.302,251,1.198,271,1.04,316,0.988,348,2.394,349,2.788,436,4.807,437,1.752,438,5.501,439,2.396,440,2.724,441,2.453,442,2.426,443,1.259,444,5.689,445,3.429,446,3.815,447,3.691,448,6.72,449,2.366,450,3.316,451,6.692,452,3.815,453,4.242,454,4.807,455,5.224,456,4.621,457,2.724,458,3.815,459,3.275,460,2.93,461,2.822,462,2.93,463,4.494,464,3.048,465,3.691,466,2.633,467,2.93,468,3.048,469,2.93,470,3.048,471,3.547,472,2.633,473,2.47,474,2.93,475,2.93,476,3.048,477,3.675,478,3.326,479,3.675,480,2.141,481,2.085,482,1.527,483,3.968,484,4.551,485,5.501,486,4.551,487,5.224]],["title/injectables/ContributionService.html",[428,3.007,488,0.869]],["body/injectables/ContributionService.html",[7,0.009,27,0.108,28,0.108,29,0.087,32,1.581,36,0.49,38,1.514,39,0.791,40,0.423,41,0.711,43,1.236,45,0.192,47,0.774,50,1.536,62,1.291,81,3.206,156,1.606,173,1.68,176,2.303,223,0.119,224,0.129,225,1.581,227,1.263,232,0.006,233,0.006,240,0.318,241,1.901,260,2.25,271,1.066,343,2.413,373,2.199,378,1.184,428,4.702,431,4.444,436,5.772,439,1.643,442,2.167,448,4.444,451,4.861,465,2.681,466,2.77,481,2.193,482,1.606,488,1.359,489,1.888,490,4.861,491,5.184,492,5.495,493,2.388,494,5.495,495,7.028,496,3.676,497,6.102,498,5.495,499,3.676,500,2.252,501,2.031,502,2.193,503,4.444,504,4.132,505,4.117,506,3.081,507,4.861,508,5.495,509,3.355,510,5.495,511,4.861,512,4.861,513,5.495,514,4.861,515,4.861,516,5.495,517,3.676,518,3.676,519,3.797,520,3.206,521,3.206,522,3.206]],["title/classes/CreateInsightDto.html",[224,0.105,523,3.177]],["body/classes/CreateInsightDto.html",[7,0.008,27,0.111,28,0.111,29,0.089,36,0.547,39,0.958,40,0.55,45,0.178,154,3.855,172,2.029,223,0.122,224,0.184,232,0.006,233,0.006,240,0.326,251,1.13,277,4.774,316,1.064,352,1.239,383,1.515,395,1.459,437,1.888,439,2.463,443,1.32,480,2.306,493,2.086,523,5.043,524,6.664,525,4.551,526,5.893,527,3.211,528,4.297,529,3.95,530,3.897,531,5.366,532,2.429,533,4.551,534,5.627,535,4.979,536,5.627,537,5.532,538,4.774,539,6.313,540,5.513,541,4.979,542,5.627,543,4.154,544,4.551,545,5.771,546,3.721,547,3.583,548,4.551,549,3.583,550,5.627,551,3.156,552,2.306,553,4.232,554,2.746]],["title/classes/CreateInsightMemberDto.html",[224,0.105,555,3.38]],["body/classes/CreateInsightMemberDto.html",[7,0.008,27,0.128,28,0.128,29,0.103,36,0.456,40,0.504,45,0.169,223,0.141,224,0.184,232,0.007,233,0.007,240,0.378,251,0.942,289,4.977,316,1.235,383,1.263,395,1.537,437,2.191,443,1.447,480,2.677,524,6.326,529,3.293,530,4.105,532,2.187,543,3.943,549,4.981,555,5.883,556,5.283,557,5.528,558,7.822,559,5.779,560,6.532,561,6.92,562,5.283]],["title/classes/CreateLogDto.html",[224,0.105,563,3.38]],["body/classes/CreateLogDto.html",[7,0.008,27,0.124,28,0.124,29,0.099,36,0.575,40,0.497,41,0.904,45,0.136,198,5.83,215,5.519,223,0.136,224,0.18,228,2.748,232,0.007,233,0.007,240,0.365,251,1.19,395,1.582,437,2.116,443,1.417,479,4.635,480,2.585,546,4.473,563,5.76,564,7.589,565,5.58,566,5.252,567,8.248,568,6.308,569,6.308,570,6.308]],["title/classes/CreateUserHighlightDto.html",[224,0.105,571,3.177]],["body/classes/CreateUserHighlightDto.html",[7,0.008,27,0.104,28,0.104,29,0.083,36,0.561,40,0.548,41,0.813,45,0.148,109,1.72,142,4.348,223,0.114,224,0.161,232,0.006,233,0.006,240,0.306,251,1.16,316,0.998,358,2.984,369,4.504,383,1.555,395,1.639,437,1.771,443,1.267,472,3.452,477,4.108,479,4.108,480,2.163,529,3.452,532,2.465,543,3.832,546,4.195,552,2.807,554,2.576,571,4.84,572,7.375,573,4.67,574,5.373,575,5.892,576,3.841,577,6.05,578,5.892,579,5.279,580,5.279,581,6.059,582,2.531,583,4.582,584,5.151,585,2.807,586,5.279,587,5.279,588,5.279,589,5.279,590,6.059,591,5.279,592,5.279,593,6.849,594,5.279,595,5.279,596,4.67,597,5.279,598,5.279,599,2.286]],["title/injectables/CustomLogger.html",[488,0.869,600,3.177]],["body/injectables/CustomLogger.html",[7,0.009,27,0.085,28,0.085,29,0.068,32,1.351,36,0.577,38,1.739,39,0.909,40,0.498,41,0.816,43,1.756,45,0.161,47,0.612,52,5.849,53,2.905,198,5.516,203,5.254,215,6.244,223,0.094,224,0.102,225,1.351,227,1.584,228,2.059,232,0.005,233,0.005,240,0.251,241,2.208,378,1.682,395,1.668,441,2.166,443,1.112,449,1.137,488,1.161,489,1.491,499,5.401,566,5.843,600,4.868,601,7.462,602,3.841,603,6.888,604,8.276,605,6.012,606,6.343,607,6.312,608,7.433,609,6.576,610,4.341,611,7.433,612,5.401,613,6.007,614,4.341,615,4.341,616,3.286,617,4.341,618,7.433,619,4.341,620,4.341,621,4.341,622,4.341,623,4.341,624,4.341,625,4.341,626,4.341,627,4.341,628,3.841,629,3.841,630,4.341,631,4.341,632,4.341,633,7.804,634,4.341,635,4.341,636,6.007]],["title/modules/CustomerModule.html",[0,1.102,9,2.862]],["body/modules/CustomerModule.html",[0,1.904,2,2.383,3,3.018,7,0.008,9,5.784,24,3.097,25,2.573,26,2.383,27,0.127,28,0.127,29,0.102,31,2.642,45,0.187,47,0.908,49,2.958,50,1.803,113,5.193,156,1.885,222,3.268,223,0.139,224,0.151,232,0.007,233,0.007,328,5.953,418,3.458,435,3.362,637,5.704,638,5.704,639,5.704,640,6.447,641,5.704,642,6.447]],["title/injectables/CustomerService.html",[328,2.862,488,0.869]],["body/injectables/CustomerService.html",[7,0.009,27,0.106,28,0.106,29,0.085,32,1.564,36,0.586,38,1.749,39,0.914,40,0.489,41,0.821,43,1.826,45,0.175,47,0.761,50,1.51,62,1.269,113,3.614,156,1.579,223,0.117,224,0.127,225,1.564,227,1.242,232,0.006,233,0.006,240,0.313,241,2.195,271,1.182,280,2.578,328,4.426,343,1.987,352,1.925,378,1.749,395,1.522,488,1.344,489,1.855,493,2.372,500,2.214,509,3.514,616,3.237,641,4.778,643,4.778,644,6.8,645,3.616,646,7.686,647,7.686,648,5.401,649,5.401,650,6.951,651,5.401,652,7.18,653,5.401,654,5.401,655,5.401,656,5.401,657,5.401,658,5.401,659,5.401,660,5.401,661,3.189,662,5.401,663,3.625,664,5.401,665,5.401]],["title/classes/DatabaseLoggerMiddleware.html",[101,3.38,224,0.105]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.009,27,0.151,28,0.082,29,0.066,32,1.312,36,0.592,38,1.98,39,0.968,40,0.502,41,0.844,43,1.84,44,5.431,45,0.145,47,0.586,62,0.977,66,3.365,67,3.365,68,3.365,101,5.064,175,5.141,176,1.363,198,5.158,223,0.126,224,0.098,225,1.312,227,1.831,228,2.013,232,0.005,233,0.005,240,0.241,271,0.926,357,2.94,375,2.94,378,1.828,395,1.631,437,1.396,443,1.079,449,1.089,499,5.584,566,5.208,606,5.064,607,6.615,609,5.957,616,3.073,666,7.603,667,3.365,668,5.159,669,6.734,670,6.734,671,6.734,672,6.734,673,6.734,674,6.734,675,6.734,676,4.16,677,5.832,678,4.16,679,9.251,680,4.16,681,4.16,682,4.16,683,4.16,684,4.16,685,3.83,686,4.16,687,4.16,688,4.16,689,4.16,690,2.268,691,4.16,692,4.16,693,4.16,694,4.16,695,4.16,696,3.681,697,4.16,698,4.16,699,7.298,700,4.16,701,6.734,702,5.832,703,4.16,704,6.734,705,4.16,706,4.16,707,4.16]],["title/entities/DbContribution.html",[81,2.622,708,1.079]],["body/entities/DbContribution.html",[7,0.009,27,0.072,28,0.072,29,0.058,36,0.584,39,0.778,40,0.538,41,0.774,45,0.149,62,0.866,77,2.618,78,1.799,81,3.121,109,1.104,125,2.89,172,2.491,173,1.127,223,0.08,224,0.086,232,0.005,233,0.005,240,0.213,251,1.207,271,1.112,278,2.384,316,0.697,348,2.216,349,2.581,352,1.615,358,3.028,369,3.963,383,1.563,395,1.223,433,1.761,441,1.329,443,0.99,449,2.117,484,4.213,485,5.093,486,4.908,493,1.564,532,2.472,582,2.989,585,2.831,599,2.316,690,3.144,708,1.284,709,3.262,710,3.073,711,3.469,712,3.136,713,4.733,714,3.732,715,3.687,716,4.883,717,4.883,718,4.622,719,6.112,720,3.687,721,4.733,722,5.35,723,3.579,724,3.687,725,4.622,726,3.687,727,2.384,728,3.575,729,3.313,730,6.296,731,2.316,732,3.732,733,2.491,734,1.691,735,3.314,736,3.501,737,2.757,738,3.687,739,2.151,740,2.757,741,3.687,742,2.757,743,3.687,744,3.687,745,3.371,746,4.023,747,4.023,748,2.606,749,3.687,750,2.068,751,3.687,752,3,753,3.687,754,3.262,755,3.687,756,2.316,757,2.79,758,2.79,759,2.151,760,3.687,761,3.781,762,5.35,763,4.733,764,3.687,765,3.687,766,3.136,767,2.79,768,1.992,769,3,770,3,771,2.697,772,2.316,773,2.79,774,3.073,775,3.235,776,2.805,777,1.511,778,1.433,779,1.511,780,2.772,781,3.687,782,2.606,783,2.068,784,2.982,785,2.068,786,2.982,787,3.687,788,3.262]],["title/entities/DbCustomer.html",[113,3.007,708,1.079]],["body/entities/DbCustomer.html",[7,0.008,27,0.12,28,0.12,29,0.096,36,0.523,39,0.687,40,0.489,45,0.162,62,1.433,109,1.548,113,5.02,116,4.566,173,1.865,223,0.132,224,0.143,232,0.007,233,0.007,240,0.353,251,1.082,271,1.032,352,1.917,358,2.904,383,1.451,392,6.068,395,1.328,441,2.199,443,1.388,457,3.913,532,2.371,652,7.19,708,1.801,712,3.075,716,5.303,717,5.303,718,5.02,742,2.994,766,3.075,767,3.913,768,3.295,775,3.331,777,2.499,778,2.371,779,2.499,782,4.31,789,5.395,790,4.586,791,6.099,792,5.395,793,6.099,794,6.099,795,2.884,796,5.395]],["title/entities/DbEmoji.html",[139,2.735,708,1.079]],["body/entities/DbEmoji.html",[7,0.009,27,0.083,28,0.083,29,0.067,36,0.585,39,0.903,40,0.537,41,0.811,45,0.159,62,0.997,132,3.194,139,3.6,141,4.129,142,3.778,143,2.704,172,2.133,173,1.299,223,0.092,224,0.1,232,0.005,233,0.005,240,0.246,251,1.21,271,0.814,278,2.636,316,0.803,348,2.396,349,2.79,352,1.499,358,3.031,369,4.183,383,1.55,395,1.419,443,1.095,449,1.928,459,1.839,532,2.46,576,4.129,582,2.963,585,2.424,599,1.839,690,3.117,708,1.42,710,3.322,712,3.018,727,2.636,728,3.537,729,3.188,731,2.561,732,3.196,733,2.133,734,1.948,735,3.285,736,3.471,737,2.938,739,2.477,740,2.361,742,2.361,745,2.887,756,2.561,757,3.085,758,3.085,759,2.477,766,3.018,771,2.982,772,2.561,773,3.085,774,3.322,775,3.173,776,3.033,777,1.74,778,1.651,779,1.74,785,2.381,797,3.757,798,6.808,799,5.12,800,5.537,801,4.246,802,4.246,803,6.785,804,3.958,805,4.449,806,3.757,807,3.958,808,4.246,809,4.449,810,3.757,811,4.246,812,4.246,813,4.246,814,3.434,815,4.784,816,5.916,817,4.246,818,4.246,819,4.246,820,4.246,821,4.784,822,3.085,823,3.757,824,3.434,825,2.704,826,4.246]],["title/entities/DbInsight.html",[104,2.521,708,1.079]],["body/entities/DbInsight.html",[7,0.009,27,0.07,28,0.07,29,0.056,36,0.587,39,0.88,40,0.533,41,0.765,45,0.156,62,0.838,79,3.216,80,2.271,104,2.929,106,4.33,108,1.86,109,1.612,172,2.889,173,1.091,223,0.077,224,0.084,232,0.005,233,0.005,240,0.206,251,1.215,271,0.935,316,0.675,348,2.174,349,2.532,352,1.72,358,3.035,383,1.58,395,1.204,439,2.033,441,1.286,443,0.966,449,2.097,526,4.646,527,2.532,528,3.546,530,4.183,531,3.927,532,2.486,549,2.271,552,2.14,554,2.548,575,3.691,582,2.795,585,3.099,599,2.675,690,2.941,708,1.253,710,3.015,712,3.099,716,4.807,717,4.807,718,4.55,719,4.62,725,3.494,727,2.753,728,3.491,729,3.275,731,2.261,733,2.727,734,1.636,735,3.099,736,3.275,737,3.018,740,2.084,742,2.084,745,2.548,750,2,752,2.929,756,3.275,766,3.099,767,2.723,768,2.821,769,2.929,770,2.929,771,2.632,772,2.261,773,2.723,774,3.015,775,3.202,776,3.03,777,1.462,778,1.387,779,1.462,795,2.47,814,2.884,821,4.223,822,2.723,827,3.155,828,6.178,829,6.178,830,2.487,831,3.566,832,3.927,833,2.682,834,3.566,835,3.155,836,3.566,837,4.807,838,6.017,839,5.222,840,4.62,841,3.566,842,3.566,843,3.566,844,3.566,845,4.62,846,5.222,847,3.566,848,5.222,849,3.566,850,4.223,851,3.566,852,3.691,853,2.884,854,3.566,855,3.566,856,3.566,857,2.884,858,3.566,859,2.17,860,2.884,861,3.566]],["title/entities/DbInsightMember.html",[137,2.862,708,1.079]],["body/entities/DbInsightMember.html",[7,0.008,27,0.07,28,0.07,29,0.057,36,0.58,39,0.854,40,0.536,41,0.878,45,0.113,62,0.843,109,1.082,137,3.34,172,2.894,173,1.097,223,0.078,224,0.084,232,0.005,233,0.005,240,0.208,251,1.2,271,0.938,289,3.825,348,2.182,349,2.541,352,1.724,358,3.021,383,1.608,395,1.421,441,1.294,443,0.971,449,1.984,530,3.584,532,2.51,549,5.298,557,6.137,562,2.902,576,3.825,582,3.075,583,3.51,585,3.106,599,2.953,690,3.12,708,1.259,710,3.025,712,3.106,716,3.707,717,3.707,718,3.51,727,3.039,728,3.608,729,3.475,731,2.271,733,2.894,734,1.646,735,3.289,736,3.475,737,2.722,740,3.025,742,2.093,745,2.56,748,2.536,756,3.282,766,3.208,767,2.735,768,2.834,771,2.644,772,2.271,773,2.735,775,3.208,776,3.233,777,1.471,778,1.395,779,1.471,795,2.481,807,3.51,809,3.945,822,2.735,824,2.902,830,2.13,832,3.945,833,2.699,852,3.707,853,2.902,857,2.902,862,6.82,863,3.175,864,5.457,865,4.382,866,5.485,867,6.2,868,3.588,869,4.641,870,4.382,871,3.588,872,3.588,873,3.588,874,3.588,875,3.588,876,2.183,877,3.588,878,6.034,879,3.588,880,3.588,881,5.245,882,4.242,883,3.588,884,4.641,885,4.641,886,3.175,887,3.945,888,3.588,889,3.588,890,3.588,891,3.175,892,3.175]],["title/entities/DbInsightRepo.html",[106,2.862,708,1.079]],["body/entities/DbInsightRepo.html",[7,0.009,27,0.086,28,0.086,29,0.069,36,0.578,39,0.838,40,0.522,41,0.753,45,0.161,62,1.024,104,4.176,106,3.835,146,3.08,173,1.333,223,0.094,224,0.102,232,0.005,233,0.005,240,0.252,251,1.195,271,1.112,316,0.824,348,2.429,352,1.887,358,3.016,383,1.562,395,1.066,433,2.026,441,1.571,443,1.114,449,1.949,530,4.209,532,2.471,551,3.871,552,2.468,553,4.529,554,2.126,576,3.378,582,2.752,585,3.051,599,2.608,690,2.895,708,1.446,710,3.368,711,3.264,712,3.051,727,2.683,728,3.46,729,3.224,731,2.608,733,2.685,734,1.999,735,3.051,736,3.224,737,2.971,742,2.404,750,2.444,752,3.378,756,3.224,766,3.051,767,3.141,768,3.254,769,3.378,770,3.378,771,3.036,772,2.608,774,2.939,775,3.203,776,3.075,777,1.786,778,1.694,779,1.786,795,3.264,822,3.141,832,4.529,833,3.277,835,3.855,862,6.828,865,5.523,876,3.665,893,3.08,894,4.358,895,4.358,896,3.665,897,3.855,898,4.358,899,4.358,900,4.358,901,4.358,902,4.358,903,4.358,904,3.855,905,4.358]],["title/entities/DbLog.html",[123,3.007,708,1.079]],["body/entities/DbLog.html",[7,0.008,27,0.118,28,0.118,29,0.095,36,0.605,39,0.677,40,0.522,45,0.13,62,1.413,123,4.977,173,1.839,198,5.708,215,5.404,223,0.13,224,0.141,232,0.007,233,0.007,240,0.348,251,1.251,348,2.842,352,1.778,358,3.067,395,1.602,441,2.169,443,1.377,566,5.143,582,2.749,708,1.786,766,3.67,767,3.879,772,3.497,822,3.136,906,5.321,907,6.015,908,6.015,909,6.015,910,6.015,911,6.015,912,6.015,913,6.015,914,6.015]],["title/entities/DbPRInsight.html",[144,2.862,708,1.079]],["body/entities/DbPRInsight.html",[7,0.008,27,0.084,28,0.084,29,0.067,36,0.56,39,0.48,40,0.548,45,0.128,62,1.001,129,5.819,144,3.777,145,3.374,172,3.174,173,1.303,223,0.092,224,0.1,232,0.005,233,0.005,240,0.247,251,1.158,271,1.228,352,1.502,358,2.981,383,1.552,441,1.537,443,1.097,449,2.305,459,2.568,473,2.805,484,5.37,493,1.734,532,2.462,578,5.672,582,2.192,690,2.306,708,1.424,712,3.289,714,4.715,723,5.37,725,3.968,728,2.431,735,2.431,736,2.568,737,2.367,740,3.513,742,2.367,756,2.568,757,3.093,758,3.093,766,3.289,767,3.093,768,3.204,775,3.374,777,1.747,778,1.657,779,1.747,783,2.39,807,5.618,915,4.804,916,3.771,917,6.821,918,6.821,919,5.517,920,5.509,921,6.821,922,5.247,923,6.821,924,4.262,925,4.262,926,7.375,927,5.931,928,5.931,929,5.931,930,5.931,931,4.262,932,4.262,933,4.262,934,4.262,935,5.931,936,5.931,937,5.931,938,5.931,939,5.931,940,3.771,941,4.262,942,5.247,943,4.262,944,3.205,945,4.262,946,6.821]],["title/entities/DbPullRequest.html",[128,2.735,708,1.079]],["body/entities/DbPullRequest.html",[7,0.009,27,0.04,28,0.108,29,0.032,36,0.601,39,0.622,40,0.542,41,0.891,45,0.093,62,0.474,125,4.785,128,2.036,129,6.11,145,3.629,165,3.031,172,2.836,173,0.618,201,3.746,223,0.044,224,0.047,232,0.003,233,0.003,240,0.117,251,1.242,271,1.116,278,2.219,316,0.382,348,1.507,349,1.755,352,1.216,358,3.06,369,1.807,383,1.671,395,1.504,433,0.803,441,0.728,443,0.619,449,2.142,450,1.335,493,0.978,528,3.438,532,2.551,551,2.402,552,1.371,575,3.902,576,4.293,578,5.41,582,2.907,690,2.741,708,0.803,711,2.026,712,3.499,714,1.091,725,4.411,727,0.9,728,3.353,729,3.052,731,1.449,733,0.728,735,2.889,736,3.052,737,2.813,740,2.631,742,1.335,745,2.431,746,2.516,747,3.746,756,3.052,757,3.676,758,3.676,766,3.261,767,1.745,768,1.091,772,1.449,774,1.632,775,3.514,776,1.49,777,0.828,778,0.785,779,0.828,785,3.096,807,2.238,887,2.516,896,2.036,915,5.043,940,1.786,944,1.519,947,1.786,948,4.283,949,4.283,950,4.283,951,4.283,952,4.283,953,4.283,954,3.464,955,4.885,956,4.283,957,5.521,958,4.283,959,5.521,960,4.283,961,5.521,962,5.521,963,3.464,964,5.521,965,4.283,966,4.283,967,5.521,968,4.283,969,4.283,970,4.981,971,2.516,972,2.019,973,2.019,974,4.981,975,4.981,976,3.345,977,2.019,978,2.019,979,4.407,980,2.019,981,2.019,982,2.019,983,2.019,984,2.706,985,3.345,986,3.345,987,2.019,988,3.345,989,4.981,990,2.019,991,2.019,992,2.019,993,2.019,994,2.96,995,2.019,996,4.981,997,2.019,998,1.786,999,2.019,1000,2.019,1001,2.019,1002,3.345,1003,2.96,1004,2.019,1005,2.019,1006,3.345,1007,3.345,1008,4.283,1009,3.345,1010,3.345,1011,3.345,1012,3.345,1013,3.345,1014,1.786,1015,2.019,1016,3.345,1017,2.019,1018,2.019,1019,2.019,1020,2.019,1021,2.019,1022,2.019,1023,2.019,1024,1.786,1025,2.019,1026,2.019,1027,2.019,1028,4.407,1029,2.019,1030,2.019,1031,2.019,1032,2.019,1033,2.019,1034,2.019,1035,2.019,1036,2.019,1037,3.345,1038,3.345,1039,2.96,1040,3.345,1041,2.019,1042,2.019,1043,2.019,1044,2.019,1045,2.019,1046,2.019,1047,2.019,1048,1.633,1049,5.265,1050,4.981,1051,1.786,1052,2.019,1053,2.019,1054,1.786,1055,2.019,1056,2.019,1057,2.019,1058,2.036,1059,2.036,1060,1.351]],["title/entities/DbRepoToUserStargazers.html",[89,2.622,708,1.079]],["body/entities/DbRepoToUserStargazers.html",[7,0.009,27,0.083,28,0.083,29,0.067,36,0.585,39,0.767,40,0.525,41,0.811,45,0.167,62,0.997,77,2.791,79,3.482,80,2.704,89,3.451,108,2.214,109,1.697,172,2.133,173,1.299,223,0.092,224,0.1,232,0.005,233,0.005,240,0.246,251,1.21,271,1.103,278,2.636,316,0.803,348,2.396,349,2.79,352,1.811,358,3.031,383,1.497,433,1.858,443,1.095,449,1.928,493,1.729,532,2.413,582,2.963,585,2.424,599,1.839,690,3.117,708,1.42,710,3.322,711,3.661,712,2.79,727,2.636,728,3.537,729,3.188,731,2.561,732,3.196,733,2.133,734,1.948,735,3.285,736,3.471,737,2.938,739,2.477,740,2.361,742,3.199,745,2.887,750,3.318,752,4.129,756,2.561,757,3.085,758,3.085,759,2.477,766,2.79,769,3.818,770,3.818,771,2.982,772,2.561,773,3.085,774,3.593,775,3.018,776,3.033,777,1.74,778,1.651,779,1.74,783,2.381,785,2.381,795,2.008,822,3.085,830,2.66,876,2.584,1061,3.757,1062,6.484,1063,4.246,1064,4.246,1065,2.841,1066,4.246,1067,4.246,1068,4.246,1069,2.841,1070,4.246,1071,4.246,1072,4.246,1073,4.246,1074,4.246,1075,4.246,1076,2.841,1077,4.246,1078,3.757]],["title/entities/DbRepoToUserStars.html",[85,2.622,708,1.079]],["body/entities/DbRepoToUserStars.html",[7,0.009,27,0.083,28,0.083,29,0.067,36,0.585,39,0.767,40,0.525,41,0.811,45,0.167,62,0.997,77,2.791,79,3.482,80,2.704,85,3.451,108,2.214,109,1.697,172,2.133,173,1.299,223,0.092,224,0.1,232,0.005,233,0.005,240,0.246,251,1.21,271,1.103,278,2.636,316,0.803,348,2.396,349,2.79,352,1.811,358,3.031,383,1.497,433,1.858,443,1.095,449,1.928,493,1.729,532,2.413,582,2.963,585,2.424,599,1.839,690,3.117,708,1.42,710,3.322,711,3.661,712,2.79,727,2.636,728,3.537,729,3.188,731,2.561,732,3.196,733,2.133,734,1.948,735,3.285,736,3.471,737,2.938,739,2.477,740,2.361,742,3.199,745,2.887,750,3.318,752,4.129,756,2.561,757,3.085,758,3.085,759,2.477,766,2.79,769,3.818,770,3.818,771,2.982,772,2.561,773,3.085,774,3.593,775,3.018,776,3.033,777,1.74,778,1.651,779,1.74,783,2.381,785,2.381,795,2.008,822,3.085,830,2.66,876,2.584,1065,2.841,1069,2.841,1076,2.841,1079,3.757,1080,6.029,1081,4.246,1082,4.246,1083,4.246,1084,4.246,1085,4.246,1086,4.246,1087,4.246,1088,4.246,1089,4.246,1090,4.246,1091,4.246,1092,4.246,1093,3.757]],["title/entities/DbRepoToUserSubmissions.html",[87,2.622,708,1.079]],["body/entities/DbRepoToUserSubmissions.html",[7,0.009,27,0.079,28,0.079,29,0.064,36,0.588,39,0.746,40,0.525,41,0.837,45,0.164,62,0.948,77,2.729,79,3.405,80,2.57,87,3.33,108,2.104,109,1.673,172,2.739,173,1.234,223,0.087,224,0.095,232,0.005,233,0.005,240,0.234,251,1.215,271,1.085,278,2.543,316,0.763,348,2.331,349,2.714,352,1.785,358,3.035,383,1.525,433,1.824,443,1.056,449,1.989,493,1.669,528,2.977,532,2.438,552,2.339,554,2.785,582,2.915,585,2.339,599,1.747,690,3.067,708,1.37,710,3.232,711,3.593,712,2.951,727,2.543,728,3.5,729,3.415,731,2.472,732,3.084,733,2.058,734,1.852,735,3.232,736,3.415,737,2.873,739,2.354,740,2.278,742,3.148,745,2.785,750,3.201,752,4.038,756,2.472,757,2.977,758,2.977,759,2.354,766,2.951,769,3.714,770,3.714,771,2.877,772,2.472,773,2.977,774,3.513,775,3.113,776,2.951,777,1.654,778,1.569,779,1.654,783,2.263,785,2.263,795,1.909,822,2.977,830,2.61,837,4.034,840,3.57,876,2.456,1065,2.7,1069,2.7,1076,2.7,1094,3.57,1095,5.859,1096,6.699,1097,4.036,1098,4.036,1099,4.036,1100,5.708,1101,5.708,1102,4.036,1103,4.036,1104,4.036,1105,4.036,1106,4.036,1107,4.036,1108,4.036,1109,4.036,1110,4.036,1111,4.036,1112,3.57]],["title/entities/DbRepoToUserVotes.html",[83,2.622,708,1.079]],["body/entities/DbRepoToUserVotes.html",[7,0.009,27,0.083,28,0.083,29,0.067,36,0.585,39,0.767,40,0.525,41,0.811,45,0.167,62,0.997,77,2.791,79,3.482,80,2.704,83,3.451,108,2.214,109,1.697,172,2.133,173,1.299,223,0.092,224,0.1,232,0.005,233,0.005,240,0.246,251,1.21,271,1.103,278,2.636,316,0.803,348,2.396,349,2.79,352,1.811,358,3.031,383,1.497,433,1.858,443,1.095,449,1.928,493,1.729,532,2.413,582,2.963,585,2.424,599,1.839,690,3.117,708,1.42,710,3.322,711,3.661,712,2.79,727,2.636,728,3.537,729,3.188,731,2.561,732,3.196,733,2.133,734,1.948,735,3.285,736,3.471,737,2.938,739,2.477,740,2.361,742,3.199,745,2.887,750,3.318,752,4.129,756,2.561,757,3.085,758,3.085,759,2.477,766,2.79,769,3.818,770,3.818,771,2.982,772,2.561,773,3.085,774,3.593,775,3.018,776,3.033,777,1.74,778,1.651,779,1.74,783,2.381,785,2.381,795,2.008,822,3.085,830,2.66,876,2.584,1065,2.841,1069,2.841,1076,2.841,1113,3.757,1114,6.029,1115,4.246,1116,4.246,1117,4.246,1118,4.246,1119,4.246,1120,4.246,1121,4.246,1122,4.246,1123,4.246,1124,4.246,1125,4.246,1126,4.246,1127,3.757]],["title/entities/DbSubscription.html",[121,3.007,708,1.079]],["body/entities/DbSubscription.html",[7,0.009,27,0.056,28,0.056,29,0.045,36,0.586,39,0.323,40,0.542,41,0.857,45,0.117,62,0.675,109,0.915,121,2.968,172,1.6,173,0.878,223,0.062,224,0.067,232,0.004,233,0.004,240,0.166,251,1.212,271,0.839,316,0.543,348,1.908,352,1.451,358,3.033,383,1.609,395,1.328,441,1.035,443,0.821,449,2.252,459,1.243,528,3.18,532,2.511,576,3.908,582,3.336,585,3.526,599,3.334,690,3.297,708,1.065,712,2.701,725,4.08,727,3.43,728,3.732,729,3.725,731,2.64,732,4.648,733,3.102,734,1.318,735,3.475,736,3.671,737,3.384,740,1.771,742,2.433,748,5.302,766,3.411,767,2.314,768,1.552,772,1.921,774,2.165,775,2.855,776,3.504,777,1.177,778,1.117,779,1.177,806,2.541,830,1.862,1024,2.541,1128,6.377,1129,2.541,1130,4.796,1131,4.796,1132,4.796,1133,4.796,1134,4.796,1135,4.796,1136,4.077,1137,4.796,1138,5.331,1139,4.659,1140,4.796,1141,4.796,1142,4.437,1143,2.872,1144,5.642,1145,2.872,1146,4.437,1147,2.872,1148,2.872,1149,4.586,1150,6.098,1151,6.967,1152,2.872,1153,4.932,1154,2.872,1155,2.872,1156,2.872,1157,2.872,1158,2.872,1159,3.925,1160,2.872,1161,2.872,1162,2.872,1163,2.872,1164,3.831,1165,2.872,1166,6.098,1167,2.872,1168,2.872,1169,2.872,1170,2.872,1171,2.541,1172,2.872,1173,2.872,1174,2.872,1175,2.872]],["title/entities/DbUserHighlight.html",[131,2.428,708,1.079]],["body/entities/DbUserHighlight.html",[7,0.009,27,0.058,28,0.109,29,0.047,36,0.59,39,0.894,40,0.534,41,0.885,45,0.145,62,0.698,79,2.935,109,1.729,125,3.353,131,2.459,141,3.481,142,4.398,143,1.891,145,2.543,148,2.553,172,3.05,173,0.908,223,0.064,224,0.07,232,0.004,233,0.004,240,0.172,251,1.22,271,0.854,316,0.562,348,1.948,349,2.269,352,1.618,358,3.04,369,3.616,383,1.603,395,1.45,433,1.093,441,1.071,443,0.842,449,1.849,528,3.236,532,2.506,551,3.105,552,2.543,574,3.912,575,4.73,576,4.253,577,4.667,578,2.099,581,4.027,582,3.153,583,5.074,584,5.703,585,3.108,590,5.491,596,4.027,599,2.687,690,2.949,708,1.093,710,2.701,712,3.187,727,2.765,728,3.496,729,3.284,731,1.971,734,1.362,735,3.108,736,3.284,737,2.477,740,2.818,742,2.477,748,2.099,750,1.665,752,3.481,766,2.894,767,2.374,768,1.604,769,2.553,770,3.105,771,2.295,772,1.971,773,2.374,774,2.701,775,3.252,776,2.982,777,1.217,778,1.155,779,1.217,782,2.099,790,2.233,795,2.153,799,4.163,814,2.402,815,3.682,821,3.682,830,2.299,832,3.423,833,2.233,852,3.217,853,2.402,885,4.027,886,2.627,887,5.31,892,2.627,896,3.776,998,2.627,1049,4.897,1060,1.987,1176,5.191,1177,2.627,1178,5.033,1179,6.692,1180,2.969,1181,2.969,1182,2.969,1183,4.552,1184,2.969,1185,2.969,1186,2.969,1187,2.969,1188,2.969,1189,2.969,1190,3.682,1191,2.969,1192,2.969,1193,2.969,1194,3.682,1195,2.969,1196,2.969,1197,2.969,1198,2.969,1199,2.969,1200,2.969,1201,2.969,1202,2.969,1203,2.969,1204,2.627,1205,2.969,1206,1.987,1207,2.969,1208,2.627,1209,2.402,1210,2.969,1211,2.969]],["title/entities/DbUserHighlightReaction.html",[141,2.521,708,1.079]],["body/entities/DbUserHighlightReaction.html",[7,0.009,27,0.07,28,0.07,29,0.056,36,0.587,39,0.766,40,0.535,41,0.877,45,0.163,62,0.838,79,2.922,109,1.561,131,3.338,133,2.17,139,3.759,140,3.155,141,4.059,142,4.394,172,3.128,173,1.091,223,0.077,224,0.084,232,0.005,233,0.005,240,0.206,251,1.215,271,1.04,278,2.327,316,0.675,348,2.174,349,2.532,352,1.8,358,2.979,383,1.462,395,1.204,443,0.966,449,1.78,532,2.382,576,2.929,582,2.795,585,2.14,599,1.544,690,2.941,708,1.253,710,3.015,712,2.787,727,2.327,728,3.405,729,2.945,731,2.261,732,2.821,733,1.883,734,1.636,735,3.099,736,3.275,737,2.714,739,2.081,740,3.399,742,3.197,745,2.548,750,3.465,752,4.241,754,3.155,756,2.261,757,2.723,758,2.723,759,2.081,766,2.966,769,3.814,770,3.814,771,2.632,772,2.261,773,2.723,774,3.532,775,2.966,776,2.753,777,1.462,778,1.387,779,1.462,783,2,785,2,795,1.687,800,6.406,803,5.854,807,5.06,809,5.115,810,3.155,822,2.723,824,4.223,830,2.487,857,2.884,887,3.927,1014,3.155,1176,5.183,1194,5.854,1206,2.386,1212,3.155,1213,6.404,1214,5.466,1215,3.566,1216,3.566,1217,3.566,1218,3.566,1219,3.566,1220,3.566,1221,3.566,1222,3.566,1223,3.566,1224,3.566,1225,3.566,1226,3.566,1227,3.566,1228,3.566,1229,3.566,1230,3.566,1231,3.566,1232,3.566,1233,3.566,1234,3.566,1235,3.566]],["title/classes/DbUserHighlightRepo.html",[224,0.105,1236,3.38]],["body/classes/DbUserHighlightRepo.html",[7,0.008,27,0.129,28,0.129,29,0.104,36,0.459,39,0.885,40,0.396,41,0.794,45,0.142,142,4.246,223,0.142,224,0.154,232,0.007,233,0.007,240,0.381,251,0.949,358,2.753,383,1.272,395,1.391,433,1.886,437,2.208,443,1.454,532,2.197,551,4.711,552,3.22,712,2.697,775,3.22,777,2.697,778,2.559,779,2.697,893,4.651,896,4.781,1060,5.257,1236,5.909,1237,6.951,1238,6.581]],["title/entities/DbUserNotification.html",[149,2.862,708,1.079]],["body/entities/DbUserNotification.html",[7,0.008,27,0.084,28,0.084,29,0.067,36,0.575,39,0.481,40,0.548,41,0.849,45,0.147,62,1.002,109,1.831,149,3.78,172,2.14,173,1.305,223,0.092,224,0.1,232,0.005,233,0.005,240,0.247,251,1.188,271,1.104,352,1.813,358,3.01,383,1.592,395,1.306,441,1.539,443,1.098,449,1.554,483,3.463,532,2.497,566,4.938,582,2.967,583,3.971,585,3.024,599,2.57,690,2.869,708,1.425,712,3.178,716,5.215,717,5.215,718,4.937,725,4.937,727,2.645,728,3.442,729,3.195,731,2.57,733,2.14,734,1.958,735,3.024,736,3.195,737,2.369,740,2.369,742,2.369,748,3.016,756,2.57,766,3.291,767,3.095,768,2.305,772,2.57,775,3.291,776,3.041,777,1.749,778,1.659,779,1.749,782,3.016,790,3.209,792,3.775,795,2.018,796,3.775,825,3.78,830,2.345,850,4.801,882,4.801,1176,5.111,1209,4.801,1239,3.775,1240,6.039,1241,6.039,1242,6.039,1243,4.267,1244,4.267,1245,6.986,1246,4.267,1247,3.971,1248,4.267,1249,4.267,1250,5.251,1251,4.267,1252,5.936,1253,4.267,1254,4.267,1255,4.567,1256,4.267,1257,4.267,1258,3.451,1259,3.775,1260,4.267,1261,3.775]],["title/entities/DbUserRepo.html",[112,3.007,708,1.079]],["body/entities/DbUserRepo.html",[7,0.008,27,0.098,28,0.098,29,0.079,36,0.572,39,0.834,40,0.517,41,0.669,45,0.143,62,1.176,109,1.737,110,5.633,112,4.426,173,1.531,223,0.108,224,0.117,232,0.006,233,0.006,240,0.29,251,1.182,271,1.158,348,2.607,352,1.631,358,3.004,383,1.584,395,1.171,433,2.021,441,1.805,443,1.224,449,1.732,532,2.49,551,4.155,552,2.711,553,4.975,554,2.443,576,3.71,582,2.445,585,2.711,599,2.168,690,2.572,708,1.588,711,3.504,712,3.23,727,2.231,728,3.23,729,2.864,731,2.864,733,2.385,734,2.297,735,2.711,736,2.864,737,2.64,742,3.36,756,2.864,766,2.711,767,3.45,768,2.705,772,2.864,775,3.359,776,2.947,777,2.052,778,1.947,779,2.052,782,3.539,790,3.765,795,3.504,830,2.545,893,3.539,896,4.026,897,4.429,1204,5.853,1208,5.853,1262,5.633,1263,5.007,1264,5.007,1265,5.007,1266,5.007,1267,5.007,1268,5.007]],["title/entities/DbUserToUserFollows.html",[135,2.862,708,1.079]],["body/entities/DbUserToUserFollows.html",[7,0.009,27,0.091,28,0.091,29,0.073,36,0.573,39,0.519,40,0.522,41,0.831,45,0.154,62,1.083,109,1.81,135,3.986,172,2.257,173,1.41,223,0.1,224,0.108,232,0.006,233,0.006,240,0.267,251,1.186,271,1.131,278,2.789,316,0.872,348,2.501,349,2.913,352,1.565,358,3.008,383,1.541,443,1.158,449,1.996,532,2.452,582,3.038,585,2.566,599,1.996,690,3.196,708,1.503,710,3.468,712,2.913,727,2.789,728,3.594,729,3.301,731,2.711,732,3.382,733,2.257,734,2.115,735,3.369,736,3.56,737,3.043,739,2.69,740,2.498,742,3.281,745,3.055,756,2.711,757,3.264,758,3.264,759,2.69,766,2.913,771,3.156,772,2.711,773,3.264,774,3.055,775,3.124,776,3.167,777,1.889,778,1.793,779,1.889,783,2.586,785,2.586,795,2.18,822,3.264,830,2.442,876,2.806,1065,3.085,1069,3.085,1076,3.085,1176,5.117,1269,4.079,1270,6.288,1271,5.81,1272,4.61,1273,4.61,1274,6.26,1275,4.61,1276,4.61,1277,4.61,1278,4.61,1279,4.61]],["title/entities/DbUserTopRepo.html",[147,3.177,708,1.079]],["body/entities/DbUserTopRepo.html",[7,0.009,27,0.081,28,0.081,29,0.065,36,0.58,39,0.753,40,0.522,41,0.802,45,0.165,62,0.965,77,2.75,78,2.004,79,3.432,109,1.682,147,4.084,148,5.008,172,2.084,173,1.256,223,0.089,224,0.096,232,0.005,233,0.005,240,0.387,251,1.2,271,1.091,278,2.575,316,0.777,348,2.353,349,2.74,352,1.794,358,3.021,383,1.478,433,2.08,443,1.069,449,1.9,493,1.689,532,2.397,577,4.346,582,2.932,585,2.368,599,1.778,690,3.084,708,1.387,710,3.263,711,3.616,712,2.74,727,2.575,728,3.512,729,3.142,732,3.122,733,2.084,734,1.884,735,3.251,736,3.434,737,2.896,739,2.396,740,2.306,742,3.165,745,2.82,750,3.241,752,4.069,756,2.502,757,3.013,758,3.013,759,2.396,766,2.74,769,3.75,770,3.75,771,2.913,772,2.502,773,3.013,774,3.541,775,2.974,776,2.979,777,1.683,778,1.597,779,1.683,783,2.303,785,2.303,795,1.942,822,3.013,830,2.627,876,2.499,893,2.902,1065,2.748,1069,2.748,1076,2.748,1176,5.146,1206,2.748,1280,4.107,1281,4.107,1282,4.674,1283,4.107,1284,4.107,1285,4.107,1286,4.107,1287,4.107,1288,4.107,1289,4.107,1290,4.107,1291,4.107,1292,4.107,1293,4.107]],["title/controllers/EmojiController.html",[234,1.151,1294,3.38]],["body/controllers/EmojiController.html",[7,0.009,27,0.116,28,0.116,29,0.093,32,1.651,36,0.41,38,1.268,39,0.663,40,0.442,41,0.595,43,1.324,45,0.19,47,0.829,139,4.465,223,0.127,224,0.138,225,1.324,227,1.352,232,0.007,233,0.007,234,1.507,236,1.72,238,2.477,240,0.34,241,1.961,251,0.849,254,3.177,312,3.367,313,3.007,314,3.177,315,2.477,316,1.113,338,2.348,341,2.547,378,1.268,383,1.137,442,2.457,481,2.348,482,1.72,616,2.477,685,3.367,823,7.622,1294,5.518,1295,5.205,1296,8.616,1297,5.883,1298,4.758,1299,4.909,1300,4.465,1301,5.883,1302,5.883,1303,3.826,1304,5.883,1305,2.871,1306,3.068,1307,2.782,1308,3.068,1309,5.35,1310,5.205,1311,4.758,1312,5.883,1313,5.883,1314,5.883,1315,5.883]],["title/modules/EmojiModule.html",[0,1.102,10,3.177]],["body/modules/EmojiModule.html",[0,1.908,2,2.392,3,3.024,7,0.009,10,6.353,24,3.104,25,2.582,26,2.392,27,0.127,28,0.127,29,0.102,31,2.652,45,0.191,47,0.912,49,2.969,50,1.809,139,4.733,156,1.892,222,3.276,223,0.14,224,0.152,232,0.007,233,0.007,236,2.274,435,3.375,1294,6.272,1309,6.014,1310,5.725,1311,5.234,1316,5.725,1317,5.725,1318,6.471,1319,6.471]],["title/injectables/EmojiService.html",[488,0.869,1309,3.007]],["body/injectables/EmojiService.html",[7,0.009,27,0.112,28,0.112,29,0.09,32,1.624,36,0.551,38,1.555,39,0.813,40,0.434,41,0.73,43,1.624,45,0.191,47,0.807,50,1.602,62,1.346,139,3.486,156,1.675,173,1.752,176,2.365,223,0.124,224,0.134,225,1.624,227,1.317,232,0.006,233,0.006,240,0.332,241,1.938,343,2.371,373,2.258,378,1.555,442,2.477,481,2.88,482,1.675,488,1.395,489,1.968,491,5.286,493,2.424,496,3.833,500,2.348,501,2.117,502,2.286,505,4.181,506,3.213,509,2.48,519,3.899,520,3.342,521,3.342,522,3.342,616,2.412,645,3.695,661,2.628,1309,4.828,1311,4.633,1320,5.068,1321,5.729,1322,5.729,1323,7.216,1324,5.729,1325,5.729,1326,5.729,1327,5.729,1328,5.729,1329,4.633]],["title/classes/FilterOptionsDto.html",[224,0.105,1330,3.007]],["body/classes/FilterOptionsDto.html",[7,0.009,27,0.095,28,0.095,29,0.076,36,0.603,40,0.532,41,0.926,45,0.168,223,0.104,224,0.151,228,2.773,232,0.006,233,0.006,240,0.279,251,1.247,271,1,316,0.912,395,1.566,433,1.745,437,1.617,439,2.174,440,2.514,441,2.326,442,2.378,443,1.194,445,3.252,446,3.618,447,3.548,449,2.315,450,3.098,452,3.618,453,4.077,457,2.514,458,3.618,459,3.148,460,2.703,461,2.604,462,2.703,463,4.354,464,2.812,465,3.548,466,2.43,467,2.703,468,2.812,469,2.703,470,2.812,471,3.364,472,2.43,473,2.28,474,2.703,475,2.703,476,2.812,477,4.373,478,3.069,479,4.373,480,1.975,482,1.886,483,2.812,532,1.804,546,4.049,552,2.644,1060,3.225,1330,4.316,1331,7.16,1332,4.864,1333,4.864,1334,5.138,1335,5.068,1336,3.625,1337,4.265,1338,4.851,1339,3.898,1340,4.82,1341,3.625,1342,4.265,1343,4.265,1344,4.82,1345,3.225,1346,3.625]],["title/controllers/HealthController.html",[234,1.151,1347,3.38]],["body/controllers/HealthController.html",[7,0.009,27,0.099,28,0.099,29,0.08,32,1.497,36,0.464,43,1.497,45,0.171,47,0.711,52,5.259,53,3.379,57,4.084,169,3.569,216,4.084,220,5.004,221,6.181,223,0.109,224,0.118,225,1.136,227,1.94,228,1.51,232,0.006,233,0.006,234,1.294,236,1.476,238,2.127,240,0.292,241,2.267,251,0.96,254,3.424,313,3.049,314,3.222,315,2.127,316,0.955,338,3.434,341,2.881,378,1.434,552,3.241,554,3.859,616,2.802,1347,5.004,1348,4.468,1349,7.466,1350,8.439,1351,5.05,1352,6.653,1353,6.653,1354,5.05,1355,5.05,1356,6.653,1357,5.05,1358,6.653,1359,6.653,1360,6.653,1361,7.441,1362,6.653,1363,6.653,1364,5.05,1365,5.05,1366,5.05,1367,5.05,1368,5.05,1369,5.886,1370,6.653,1371,5.05,1372,5.05,1373,5.05,1374,5.05,1375,5.05,1376,5.05,1377,6.653,1378,5.05,1379,5.05,1380,5.05,1381,5.05,1382,5.05,1383,5.05,1384,5.05,1385,5.05,1386,5.05,1387,5.05,1388,5.05,1389,5.05,1390,5.05,1391,5.05,1392,5.05,1393,5.05]],["title/modules/HealthModule.html",[0,1.102,11,3.177]],["body/modules/HealthModule.html",[0,1.985,2,2.557,7,0.008,11,5.72,27,0.136,28,0.136,29,0.109,31,2.836,45,0.185,47,0.975,56,7.161,57,5.596,223,0.149,224,0.162,232,0.007,233,0.007,236,2.366,1347,6.452,1394,6.919,1395,6.919]],["title/controllers/HighlightController.html",[234,1.151,1396,3.38]],["body/controllers/HighlightController.html",[7,0.009,27,0.092,28,0.092,29,0.074,32,1.42,36,0.499,38,1.541,39,0.805,40,0.497,41,0.723,43,1.609,45,0.19,47,0.657,108,2.433,109,1.302,131,3.864,132,4.746,133,2.839,141,3.539,142,4.116,143,2.971,145,2.586,223,0.101,224,0.109,225,1.05,227,1.073,228,1.395,232,0.006,233,0.006,234,1.195,236,1.364,238,1.965,240,0.27,241,2.133,251,1.031,254,3.572,260,2.641,267,4.019,271,0.984,312,2.896,313,3.14,314,3.317,315,1.965,316,0.883,338,1.862,341,3.096,352,1.39,378,1.541,383,1.22,442,2.399,481,1.862,482,1.845,501,1.724,502,1.862,527,2.586,685,3.281,721,5.583,799,5.378,1236,5.378,1300,4.662,1305,2.277,1306,2.433,1307,2.207,1308,2.433,1396,4.746,1397,4.128,1398,5.784,1399,7.081,1400,8.004,1401,8.004,1402,4.128,1403,4.666,1404,4.297,1405,4.666,1406,4.666,1407,4.666,1408,5.415,1409,3.774,1410,4.128,1411,4.666,1412,4.666,1413,4.128,1414,5.104,1415,4.128,1416,4.128,1417,4.128,1418,4.46,1419,4.666,1420,2.277,1421,3.41,1422,4.46,1423,4.666,1424,2.617,1425,4.352,1426,4.666,1427,3.509,1428,4.666,1429,4.666,1430,3.774,1431,4.128,1432,4.666,1433,4.666,1434,4.666,1435,4.666,1436,4.128,1437,2.521,1438,4.128]],["title/modules/HighlightModule.html",[0,1.102,12,3.177]],["body/modules/HighlightModule.html",[0,1.908,2,2.392,3,3.024,7,0.009,12,6.353,21,5.244,24,3.104,25,2.582,26,2.392,27,0.127,28,0.127,29,0.102,31,3.188,45,0.191,47,0.912,49,2.969,50,1.809,97,4.574,131,4.203,132,4.867,133,3.938,156,1.892,223,0.14,224,0.152,232,0.007,233,0.007,236,2.274,435,3.375,1396,6.272,1439,6.471,1440,6.471,1441,6.471,1442,5.725]],["title/classes/HighlightOptionsDto.html",[224,0.105,1408,3.177]],["body/classes/HighlightOptionsDto.html",[7,0.008,27,0.107,28,0.107,29,0.086,36,0.587,40,0.506,41,0.913,45,0.167,142,3.405,223,0.117,224,0.164,228,2.718,232,0.006,233,0.006,240,0.315,251,1.213,271,1.06,316,1.028,383,1.051,395,1.236,433,2.019,437,1.823,439,2.087,440,2.834,441,2.516,442,2.448,443,1.291,445,3.518,446,3.914,447,3.762,449,2.322,450,3.246,452,3.048,453,3.048,457,2.834,458,3.914,459,3.338,460,3.048,461,2.936,462,3.048,463,4.562,464,3.171,465,3.762,466,2.74,467,3.048,468,3.171,469,3.048,470,3.171,471,3.639,472,3.518,473,2.57,474,3.048,475,3.048,476,3.171,477,3.771,479,3.771,480,2.227,481,2.169,482,1.589,532,1.951,546,3.639,552,2.86,1060,3.636,1332,4.669,1339,4.396,1408,4.932,1443,6.174,1444,5.435]],["title/injectables/HttpLoggerMiddleware.html",[98,3.38,488,0.869]],["body/injectables/HttpLoggerMiddleware.html",[7,0.009,27,0.11,28,0.11,29,0.089,32,1.604,36,0.497,38,1.211,39,0.633,40,0.338,41,0.568,43,1.264,44,3.971,45,0.178,47,0.791,66,4.544,67,4.544,68,4.544,98,5.888,145,3.615,175,5.509,176,2.336,218,6.306,223,0.154,224,0.132,227,1.8,232,0.006,233,0.006,240,0.325,343,2.354,378,1.687,443,1.319,449,1.866,450,2.242,488,1.378,489,1.93,566,4.539,667,4.544,668,4.971,1445,6.927,1446,5.888,1447,5.618,1448,7.898,1449,6.193,1450,8.235,1451,5.618,1452,7.128,1453,5.618,1454,7.128,1455,4.544,1456,4.544,1457,5.618,1458,5.618,1459,4.971,1460,5.618,1461,5.618,1462,7.128,1463,8.235,1464,7.128,1465,4.971,1466,5.618,1467,5.618,1468,5.618,1469,5.618,1470,5.618,1471,5.618]],["title/controllers/InsightController.html",[234,1.151,1472,3.38]],["body/controllers/InsightController.html",[7,0.009,27,0.095,28,0.095,29,0.076,32,1.455,36,0.451,38,1.394,39,0.728,40,0.488,41,0.654,43,1.455,45,0.184,47,0.682,104,4.086,109,1.503,145,1.984,176,1.586,223,0.105,224,0.114,225,1.089,227,1.113,228,1.447,232,0.006,233,0.006,234,1.24,236,1.415,238,2.038,240,0.28,241,2.045,251,0.933,254,3.367,255,3.373,260,2.49,267,4.119,271,1.205,280,2.797,303,3.421,309,2.615,310,3.495,311,4.572,312,3.343,313,2.986,314,3.155,315,2.038,316,0.916,317,2.221,338,1.932,340,2.615,341,2.801,343,1.384,352,1.784,373,2.024,378,1.043,383,1.503,439,2.493,530,4.186,859,2.945,1303,2.524,1404,3.628,1418,4.572,1420,2.362,1421,3.936,1422,4.572,1437,3.495,1472,4.865,1473,4.282,1474,8.104,1475,8.104,1476,4.84,1477,3.915,1478,4.282,1479,5.232,1480,4.84,1481,6.469,1482,4.865,1483,4.84,1484,4.84,1485,4.282,1486,4.572,1487,4.572,1488,4.282,1489,3.64,1490,5.149,1491,4.84,1492,2.824,1493,5.232,1494,6.469,1495,2.715,1496,2.715,1497,3.64,1498,3.915,1499,3.421,1500,4.25,1501,3.082,1502,4.84,1503,3.915,1504,3.915,1505,5.232,1506,4.282,1507,4.282,1508,2.157,1509,4.84]],["title/injectables/InsightMemberService.html",[488,0.869,1510,2.862]],["body/injectables/InsightMemberService.html",[7,0.009,27,0.076,28,0.076,29,0.061,32,1.248,36,0.572,38,1.727,39,0.903,40,0.483,41,0.81,43,1.803,45,0.177,47,0.546,50,1.085,62,0.911,137,4.126,138,2.917,154,3.821,156,1.134,172,1.399,173,1.186,176,2.123,223,0.084,224,0.091,225,1.248,227,1.276,232,0.005,233,0.005,240,0.224,241,2.206,260,2.492,271,1.148,280,2.51,343,2.421,352,1.805,355,4.957,359,2.36,373,2.341,378,1.798,395,1.533,442,2.241,449,1.015,450,1.548,481,2.215,482,1.134,488,1.073,489,1.332,493,2.068,500,1.59,501,1.434,502,1.548,505,3.565,506,2.175,509,3.371,517,2.595,518,2.595,519,2.998,520,2.263,521,2.263,522,2.263,530,1.834,616,2.729,645,3.151,661,2.973,663,2.894,859,2.36,1058,3.377,1329,3.137,1500,4.126,1501,2.47,1507,3.432,1508,1.728,1510,3.534,1511,6.749,1512,3.432,1513,5.733,1514,6.48,1515,5.733,1516,4.126,1517,6.48,1518,5.733,1519,3.879,1520,6.48,1521,3.879,1522,5.549,1523,3.879,1524,3.879,1525,6.887,1526,3.879,1527,3.78,1528,3.879,1529,6.848,1530,7.483,1531,7.073,1532,3.879,1533,3.879,1534,3.879,1535,2.47,1536,3.879,1537,3.879,1538,3.879,1539,3.432,1540,3.879,1541,2.894,1542,2.917,1543,3.879,1544,2.798,1545,3.879,1546,3.879,1547,3.902,1548,3.879,1549,3.879,1550,3.879,1551,3.879,1552,5.549,1553,3.879,1554,3.879,1555,3.432,1556,3.879,1557,3.879,1558,3.879,1559,3.879,1560,3.879,1561,3.879,1562,3.879,1563,3.879]],["title/classes/InsightOptionsDto.html",[224,0.105,1564,3.635]],["body/classes/InsightOptionsDto.html",[7,0.009,27,0.093,28,0.093,29,0.075,36,0.6,40,0.525,41,0.924,45,0.156,148,2.652,223,0.138,224,0.149,228,2.768,232,0.006,233,0.006,240,0.274,251,1.241,271,0.99,316,0.894,395,1.524,433,1.728,437,1.586,439,1.904,440,2.466,441,2.296,442,2.367,443,1.178,445,3.21,446,3.572,447,3.514,449,2.327,450,3.209,452,3.572,453,4.038,456,4.184,457,2.466,458,3.572,459,3.118,460,2.652,461,2.555,462,2.652,463,4.32,464,2.759,465,3.514,466,2.384,467,2.652,468,2.759,469,2.652,470,2.759,471,3.321,472,2.384,473,2.236,474,2.652,475,2.652,476,2.759,477,4.344,478,3.011,479,4.344,480,1.938,481,1.887,482,1.382,483,3.715,527,1.938,546,4.017,825,3.011,1059,2.878,1164,3.342,1332,4.818,1333,4.818,1334,5.089,1335,5.04,1336,3.556,1338,3.556,1341,4.789,1346,3.556,1564,5.151,1565,6.047,1566,4.729,1567,4.729,1568,7.2,1569,4.729,1570,4.729,1571,5.151,1572,3.825,1573,3.825,1574,3.556,1575,3.556,1576,3.825,1577,3.825,1578,3.825]],["title/classes/InsightPageOptionsDto.html",[224,0.105,1579,3.007]],["body/classes/InsightPageOptionsDto.html",[7,0.008,27,0.115,28,0.115,29,0.092,36,0.583,40,0.503,41,0.91,45,0.126,223,0.126,224,0.137,228,2.691,232,0.007,233,0.007,240,0.339,251,1.205,271,1.097,437,1.964,439,2.385,440,3.052,441,2.637,442,2.489,443,1.354,445,3.687,446,4.102,447,3.893,449,2.356,450,3.335,452,3.283,453,3.283,457,3.052,458,4.102,459,3.455,460,3.283,461,3.163,462,3.283,463,4.687,464,3.415,465,3.893,466,2.951,467,3.283,468,3.415,469,3.283,470,3.415,471,3.814,472,2.951,473,2.768,474,3.283,475,3.283,476,3.415,481,2.336,482,1.711,1565,4.402,1579,4.894]],["title/injectables/InsightRepoService.html",[488,0.869,1580,3.007]],["body/injectables/InsightRepoService.html",[7,0.009,27,0.114,28,0.114,29,0.091,32,1.634,36,0.554,38,1.71,39,0.894,40,0.478,41,0.802,43,1.634,45,0.185,47,0.815,50,1.618,62,1.359,106,3.684,108,3.017,156,1.691,223,0.125,224,0.136,225,1.634,227,1.33,232,0.007,233,0.007,240,0.335,241,2.146,271,1.203,352,1.599,378,1.565,433,1.905,488,1.404,489,1.988,493,2.433,500,2.371,537,5.3,547,3.684,548,4.679,551,3.245,616,3.058,711,2.736,865,4.089,1511,6.731,1529,6.419,1542,4.351,1580,4.858,1581,5.119,1582,7.936,1583,7.936,1584,5.786,1585,5.786,1586,7.261,1587,5.786,1588,5.786,1589,5.786,1590,5.786,1591,5.786,1592,5.786,1593,4.679,1594,5.119,1595,5.786]],["title/modules/InsightsModule.html",[0,1.102,13,3.177]],["body/modules/InsightsModule.html",[0,1.729,2,2.04,3,2.741,7,0.009,13,6.532,21,5.043,24,2.813,25,2.203,26,2.04,27,0.108,28,0.108,29,0.087,31,2.889,45,0.198,47,0.778,49,2.533,50,1.544,97,3.902,104,3.953,106,4.489,108,2.879,109,1.455,137,4.489,138,4.152,156,1.614,222,2.968,223,0.119,224,0.13,232,0.006,233,0.006,236,2.061,418,3.141,435,2.879,530,3.673,1472,5.84,1499,3.902,1500,5.346,1501,3.515,1510,5.505,1542,5.301,1580,6.131,1596,4.884,1597,4.884,1598,5.521,1599,4.884,1600,5.521,1601,5.84,1602,5.84,1603,7.049,1604,4.152,1605,5.521,1606,4.465]],["title/injectables/InsightsService.html",[488,0.869,1500,2.622]],["body/injectables/InsightsService.html",[7,0.009,27,0.085,28,0.085,29,0.069,32,1.353,36,0.577,38,1.74,39,0.909,40,0.486,41,0.817,43,1.817,45,0.179,47,0.612,50,1.215,62,1.021,104,3.372,109,0.897,156,1.271,173,1.329,176,2.259,223,0.094,224,0.102,225,1.353,227,0.999,232,0.005,233,0.005,240,0.252,241,2.208,260,2.381,271,1.178,280,2.777,343,2.367,352,1.858,355,5.142,373,2.157,378,1.74,395,1.22,439,1.3,442,1.927,481,1.735,482,1.271,488,1.162,489,1.493,493,2.174,500,1.781,501,1.607,502,1.735,505,3.749,506,2.438,509,3.381,519,3.248,520,2.536,521,2.536,522,2.536,530,3.819,616,2.903,645,3.314,661,1.994,663,2.267,710,2.121,740,1.735,830,2.065,864,3.269,865,3.072,870,3.072,891,3.846,904,5.319,1058,3.659,1499,3.072,1500,3.508,1508,1.937,1516,4.389,1527,4.021,1535,2.768,1541,3.135,1544,3.031,1547,3.594,1579,4.976,1607,3.846,1608,6.893,1609,5.184,1610,6.893,1611,6.893,1612,4.347,1613,4.347,1614,6.012,1615,4.347,1616,4.347,1617,4.347,1618,3.516,1619,4.347,1620,4.347,1621,4.347,1622,4.347,1623,4.347,1624,4.347,1625,3.516,1626,4.347,1627,6.012,1628,4.347,1629,4.347,1630,6.012,1631,6.012,1632,4.347,1633,4.347,1634,4.347,1635,4.347,1636,4.347,1637,4.347,1638,4.347,1639,3.269,1640,4.347,1641,4.347]],["title/modules/LogModule.html",[0,1.102,1642,3.38]],["body/modules/LogModule.html",[0,1.875,2,2.323,3,2.971,7,0.008,24,3.05,25,2.508,26,2.323,27,0.123,28,0.123,29,0.099,31,2.576,45,0.193,47,0.885,49,2.884,50,1.757,51,6.761,53,4.205,123,4.205,175,4.205,185,5.083,222,3.218,223,0.136,224,0.147,232,0.007,233,0.007,418,3.405,600,6.587,612,5.973,628,5.56,1642,6.908,1643,5.56,1644,5.56,1645,5.56,1646,6.285,1647,5.56,1648,6.285,1649,6.285]],["title/injectables/LogService.html",[488,0.869,612,3.007]],["body/injectables/LogService.html",[7,0.009,27,0.12,28,0.12,29,0.096,32,1.688,36,0.523,38,1.617,39,0.845,40,0.452,41,0.759,43,1.372,45,0.188,47,0.859,50,1.705,62,1.433,123,4.08,154,3.295,185,4.932,223,0.132,224,0.143,225,1.688,227,1.402,232,0.007,233,0.007,240,0.353,241,1.993,343,1.744,373,1.908,378,1.314,488,1.451,489,2.095,493,2.479,500,2.499,563,6.377,607,6.068,612,5.02,616,2.568,1647,5.395,1650,5.395,1651,8.127,1652,6.099,1653,6.099,1654,7.503,1655,6.099,1656,6.099,1657,4.31,1658,6.099,1659,6.099,1660,7.503,1661,6.099,1662,6.099,1663,4.31,1664,6.099]],["title/classes/PageDto.html",[224,0.105,501,1.661]],["body/classes/PageDto.html",[7,0.009,27,0.115,28,0.115,29,0.092,36,0.557,38,1.263,39,0.66,40,0.536,41,0.593,45,0.181,154,3.956,223,0.127,224,0.187,225,1.647,228,2.625,232,0.007,233,0.007,240,0.339,251,1.056,316,1.109,437,1.967,439,1.753,443,1.355,480,2.403,501,2.706,505,4.538,506,3.288,538,3.923,540,5.342,543,4.025,544,4.742,1663,6.204,1665,5.187,1666,6.294,1667,5.863,1668,5.759,1669,7.322,1670,5.863,1671,5.863,1672,5.863,1673,5.863,1674,5.863,1675,5.863,1676,7.984,1677,5.863,1678,5.863,1679,5.863]],["title/classes/PageMetaDto.html",[224,0.105,505,2.266]],["body/classes/PageMetaDto.html",[7,0.009,27,0.095,28,0.095,29,0.076,36,0.594,38,1.044,39,0.546,40,0.513,41,0.49,45,0.14,154,3.498,172,2.335,223,0.105,224,0.114,225,1.457,228,2.759,232,0.006,233,0.006,240,0.281,251,1.203,271,1.25,316,0.917,383,1.613,437,1.626,439,2.688,442,1.355,443,1.198,445,3.675,459,3.369,505,3.264,519,4.381,528,4.058,529,4.205,532,2.514,543,4.294,733,2.924,825,4.123,837,5.499,838,6.884,1149,4.869,1449,4.869,1666,3.426,1680,6.508,1681,4.288,1682,7.291,1683,7.291,1684,7.291,1685,4.847,1686,5.852,1687,6.475,1688,6.475,1689,4.847,1690,6.884,1691,6.884,1692,4.847,1693,6.475,1694,4.847,1695,4.847,1696,5.728,1697,4.847,1698,4.847,1699,6.45,1700,4.847,1701,5.728,1702,4.847,1703,4.847,1704,4.847,1705,4.847,1706,4.847,1707,4.847]],["title/interfaces/PageMetaParameters.html",[1686,3.38,1708,3.38]],["body/interfaces/PageMetaParameters.html",[7,0.008,27,0.134,28,0.134,29,0.108,40,0.483,45,0.147,223,0.147,232,0.007,233,0.007,240,0.395,271,1.173,439,2.041,442,2.587,443,1.486,482,1.995,519,4.757,1666,4.824,1680,5.133,1686,6.038,1708,5.133,1709,6.825,1710,6.038]],["title/classes/PageOptionsDto.html",[224,0.105,442,1.257]],["body/classes/PageOptionsDto.html",[7,0.009,27,0.097,28,0.097,29,0.078,36,0.57,40,0.524,41,0.88,45,0.17,223,0.107,224,0.173,228,2.698,232,0.006,233,0.006,240,0.287,251,1.133,271,1.223,316,0.939,378,1.07,383,0.96,437,1.665,439,2.206,440,2.589,442,1.839,443,1.217,445,3.719,446,4.138,447,3.988,449,2.362,450,3.135,452,2.784,453,3.689,457,3.847,458,3.689,459,3.812,460,3.689,461,3.554,462,2.784,465,4.181,466,3.719,467,2.784,469,2.784,471,4.262,472,2.502,473,3.111,474,2.784,475,2.784,477,4.416,478,3.161,479,4.416,480,2.034,483,2.896,504,3.733,544,4.015,733,1.79,1574,4.947,1680,6.316,1699,4.392,1701,4.392,1711,5.82,1712,6.527,1713,4.964,1714,4.964,1715,4.964,1716,4.392,1717,4.964,1718,4.964,1719,4.392,1720,7.855,1721,4.964,1722,4.964,1723,4.964,1724,6.578,1725,4.964,1726,4.964,1727,4.964,1728,4.392]],["title/controllers/PullRequestController.html",[234,1.151,1729,3.38]],["body/controllers/PullRequestController.html",[7,0.009,27,0.09,28,0.09,29,0.072,32,1.398,36,0.493,38,1.523,39,0.796,40,0.493,41,0.715,43,1.59,45,0.191,47,0.643,125,4.611,126,4.619,128,4.833,130,3.224,144,3.958,145,3.255,146,3.224,223,0.099,224,0.107,225,1.026,227,1.429,228,1.858,232,0.006,233,0.006,234,1.169,236,1.334,238,1.921,240,0.264,241,2.123,251,1.02,254,3.549,260,2.624,313,3.111,314,3.287,315,1.921,316,0.863,338,1.821,341,3.061,378,1.523,439,1.364,442,2.47,481,1.821,482,2.067,501,1.686,502,1.821,685,3.483,723,5.314,745,3.033,859,3.782,915,4.429,920,3.052,1300,4.619,1305,2.226,1306,2.379,1307,2.158,1308,2.379,1330,5.079,1404,3.486,1409,3.69,1430,3.69,1501,2.905,1729,4.674,1730,4.036,1731,4.562,1732,7.942,1733,7.942,1734,7.942,1735,4.562,1736,4.562,1737,4.674,1738,6.216,1739,6.216,1740,4.562,1741,3.224,1742,4.562,1743,4.562,1744,6.216,1745,4.562,1746,4.562,1747,5.365,1748,4.036,1749,6.216,1750,4.674,1751,3.958,1752,4.562,1753,4.674,1754,4.502,1755,3.69,1756,4.036,1757,4.159,1758,4.036,1759,4.562,1760,4.562,1761,4.562,1762,5.499,1763,4.562,1764,4.036,1765,4.562,1766,4.562,1767,4.562,1768,4.562,1769,4.562,1770,4.562]],["title/injectables/PullRequestInsightsService.html",[488,0.869,1757,3.007]],["body/injectables/PullRequestInsightsService.html",[7,0.009,27,0.095,28,0.095,29,0.077,32,1.459,36,0.543,38,1.678,39,0.822,40,0.521,41,0.738,43,1.642,45,0.18,47,0.685,50,1.359,62,1.142,126,4.939,144,4.13,145,3.421,146,3.435,156,1.421,176,1.593,203,6.024,223,0.105,224,0.114,225,1.459,227,1.491,232,0.006,233,0.006,240,0.281,241,1.591,260,1.556,271,1.071,343,2.227,373,1.521,378,1.398,395,1.148,449,1.698,450,2.589,473,3.068,482,1.421,488,1.254,489,1.67,493,2.277,500,1.992,509,2.105,527,1.992,645,3.471,661,2.976,714,4.209,915,4.735,919,3.931,920,5.976,922,4.3,1330,5.586,1333,3.252,1508,2.166,1527,4.545,1541,3.383,1547,3.807,1668,3.252,1741,3.435,1751,3.095,1753,3.655,1757,4.34,1758,4.3,1771,4.3,1772,6.487,1773,7.301,1774,4.86,1775,4.973,1776,4.86,1777,6.487,1778,4.86,1779,4.86,1780,4.86,1781,4.86,1782,4.86,1783,5.739,1784,3.931,1785,3.252,1786,3.435,1787,4.86,1788,4.86,1789,4.86,1790,4.86,1791,4.3,1792,4.86,1793,4.86,1794,3.931,1795,4.86,1796,4.86,1797,4.86,1798,4.86,1799,4.86,1800,4.86,1801,4.86,1802,4.86,1803,4.3,1804,4.3,1805,4.3,1806,4.86]],["title/modules/PullRequestModule.html",[0,1.102,14,3.007]],["body/modules/PullRequestModule.html",[0,1.798,2,2.171,3,2.85,7,0.009,14,6.153,24,2.925,25,2.344,26,2.171,27,0.115,28,0.115,29,0.093,31,3.004,45,0.195,47,0.827,49,2.695,50,1.642,125,4.317,126,3.574,128,4.46,130,4.151,144,4.667,145,3.004,146,4.151,156,1.717,222,3.087,223,0.127,224,0.138,232,0.007,233,0.007,236,2.143,418,3.266,435,3.063,915,3.426,1501,3.74,1729,6.009,1753,5.512,1754,5.884,1755,4.75,1757,5.876,1785,3.929,1807,5.196,1808,5.196,1809,5.196,1810,5.196,1811,5.876,1812,5.873,1813,5.196,1814,5.873]],["title/classes/PullRequestPageOptionsDto.html",[224,0.105,1747,3.177]],["body/classes/PullRequestPageOptionsDto.html",[7,0.009,27,0.079,28,0.079,29,0.063,36,0.601,40,0.532,41,0.925,45,0.155,145,3.386,223,0.142,224,0.133,228,2.777,232,0.005,233,0.005,240,0.231,251,1.243,271,0.906,316,0.756,348,1.996,349,2.324,395,1.565,433,1.582,437,1.341,439,2.548,440,2.085,441,2.045,442,2.261,443,1.049,444,4.956,445,2.859,446,3.18,447,3.216,449,2.257,450,3.021,452,4.021,453,4.535,457,2.085,458,3.18,459,2.853,460,2.243,461,2.16,462,2.243,463,4.021,464,2.333,465,3.216,466,2.016,467,2.243,468,2.333,469,2.243,470,2.333,471,2.957,472,2.016,473,1.891,474,2.243,475,2.243,476,2.333,477,4.464,478,2.546,479,4.464,480,1.639,481,1.596,482,1.658,483,4.417,486,4.409,532,2.199,546,3.948,552,2.939,915,4.821,954,4.587,963,4.587,1048,4.587,1060,2.675,1139,4.657,1209,3.234,1332,4.409,1333,4.409,1334,4.657,1335,4.785,1336,3.007,1338,4.956,1339,3.234,1341,3.007,1342,3.538,1345,2.675,1346,3.007,1716,3.538,1747,4.008,1815,6.683,1816,3.999,1817,3.999,1818,7.154,1819,6.59,1820,3.999,1821,3.538,1822,3.999,1823,3.999,1824,6.957,1825,3.999,1826,3.999,1827,3.999,1828,3.999,1829,3.234,1830,3.999]],["title/injectables/PullRequestService.html",[488,0.869,1754,2.862]],["body/injectables/PullRequestService.html",[7,0.009,27,0.09,28,0.09,29,0.072,32,1.402,36,0.555,38,1.638,39,0.856,40,0.458,41,0.769,43,1.711,45,0.191,47,0.645,50,1.281,62,1.076,126,4.993,128,2.787,130,3.237,145,1.877,156,1.339,173,1.401,176,2.042,223,0.099,224,0.107,225,1.402,227,1.433,232,0.006,233,0.006,240,0.265,241,2.095,260,2.546,343,2.504,373,1.95,378,1.343,395,1.254,439,1.369,442,2.522,447,3.881,465,2.235,466,2.309,473,2.947,481,2.487,482,2.071,486,4.739,488,1.205,489,1.573,491,4.739,493,2.223,496,3.064,500,1.877,501,1.693,502,1.828,503,3.704,504,3.445,505,3.833,506,2.569,509,3.553,517,3.064,518,3.064,519,3.367,520,2.672,521,2.672,522,2.672,527,2.554,645,3.388,661,3.25,915,4.787,920,4.17,1335,2.787,1345,3.064,1544,3.142,1747,5.007,1751,2.917,1753,3.445,1754,3.968,1756,4.052,1775,4.436,1785,3.064,1786,3.237,1791,5.514,1794,3.704,1831,4.052,1832,7.084,1833,5.514,1834,4.58,1835,6.267,1836,4.58,1837,6.232,1838,4.58,1839,4.58,1840,4.58,1841,4.58,1842,4.052,1843,4.58,1844,4.58,1845,4.58,1846,4.58,1847,5.514,1848,6.232,1849,4.58,1850,4.58,1851,4.58,1852,4.58,1853,4.58,1854,4.58,1855,4.58,1856,4.052]],["title/controllers/RepoContributionsController.html",[234,1.151,430,3.38]],["body/controllers/RepoContributionsController.html",[7,0.009,27,0.094,28,0.094,29,0.076,32,1.446,36,0.448,38,1.385,39,0.724,40,0.466,41,0.65,43,1.446,45,0.186,47,0.675,81,4.23,223,0.104,224,0.112,225,1.078,227,1.477,228,1.922,232,0.006,233,0.006,234,1.228,236,1.401,238,2.019,240,0.277,241,2.04,251,0.927,254,3.354,260,2.48,271,0.997,312,3.327,313,2.971,314,3.139,315,2.019,316,0.907,338,2.565,341,2.783,343,1.837,352,1.706,373,2.011,378,1.385,383,1.243,395,1.472,428,4.851,430,4.833,431,3.877,432,4.241,433,2.179,436,6.003,439,1.433,442,2.325,482,1.401,501,1.772,502,1.913,507,4.241,527,1.965,685,3.327,730,3.605,780,5.826,1299,5.183,1303,4.04,1305,2.339,1306,2.5,1307,2.267,1308,2.5,1404,3.604,1420,2.339,1421,3.472,1437,2.59,1547,3.351,1737,4.833,1857,6.414,1858,4.241,1859,8.078,1860,8.078,1861,4.794,1862,4.794,1863,4.714,1864,7.746,1865,6.427,1866,6.427,1867,4.794,1868,4.794,1869,4.794,1870,4.794,1871,3.655,1872,3.053,1873,3.207,1874,3.207,1875,4.794,1876,6.427,1877,3.207,1878,6.427,1879,6.427,1880,4.794,1881,3.207,1882,3.207,1883,3.207]],["title/controllers/RepoController.html",[234,1.151,1884,3.38]],["body/controllers/RepoController.html",[7,0.009,27,0.087,28,0.087,29,0.07,32,1.369,36,0.523,38,1.615,39,0.844,40,0.51,41,0.758,43,1.686,45,0.183,47,0.623,77,3.152,223,0.096,224,0.104,225,0.995,227,1.017,228,1.323,232,0.005,233,0.005,234,1.133,236,1.293,238,1.863,240,0.256,241,2.173,251,1.081,254,3.669,260,2.713,271,0.957,312,3.192,313,3.22,314,3.402,315,1.863,316,0.837,338,1.765,341,3.245,352,1.532,378,1.615,383,1.177,395,1.438,433,2.064,439,1.323,442,2.095,482,1.779,491,5.257,493,2.191,496,2.96,501,1.635,502,1.765,527,3.22,685,3.192,1300,4.56,1303,3.908,1305,2.159,1306,2.307,1307,2.092,1308,2.307,1404,4.752,1409,3.578,1420,2.159,1421,3.288,1430,3.578,1437,2.39,1477,3.578,1478,3.914,1504,3.578,1516,5.003,1535,2.817,1604,3.327,1748,3.914,1750,4.577,1751,3.875,1764,3.914,1863,4.56,1871,3.507,1873,2.96,1874,2.96,1877,2.96,1881,2.96,1882,2.96,1883,2.96,1884,4.577,1885,3.914,1886,7.857,1887,6.951,1888,4.202,1889,4.072,1890,4.424,1891,4.424,1892,5.296,1893,4.424,1894,5.384,1895,4.424,1896,3.914,1897,4.424,1898,4.424,1899,4.424,1900,3.578,1901,5.384,1902,3.127,1903,4.424,1904,4.072,1905,2.96,1906,4.424]],["title/modules/RepoFilterModule.html",[0,1.102,1811,3.007]],["body/modules/RepoFilterModule.html",[0,1.936,2,2.451,3,3.069,7,0.008,24,3.15,25,2.646,26,2.451,27,0.13,28,0.13,29,0.105,45,0.17,47,0.934,222,3.324,223,0.143,224,0.156,232,0.007,233,0.007,418,3.516,433,1.592,1775,5.473,1786,4.686,1811,6.111,1907,5.866,1908,5.866,1909,5.866,1910,5.363,1911,6.631]],["title/injectables/RepoFilterService.html",[488,0.869,1775,2.622]],["body/injectables/RepoFilterService.html",[7,0.009,27,0.093,28,0.093,29,0.075,32,1.435,36,0.445,38,1.554,39,0.719,40,0.434,41,0.645,43,1.435,44,3.351,45,0.167,47,0.668,62,1.114,203,5.096,223,0.102,224,0.111,232,0.006,233,0.006,240,0.417,271,0.878,343,1.356,378,1.022,395,1.277,433,1.731,445,2.39,447,3.927,449,1.67,450,2.546,461,3.896,473,2.243,482,1.865,488,1.233,489,1.629,509,2.763,527,1.943,685,2.927,714,3.896,737,1.892,740,2.546,805,3.566,920,3.173,942,4.195,944,3.566,1059,2.885,1330,5.16,1333,4.269,1334,3.351,1335,2.885,1345,3.173,1420,4.045,1527,4.499,1639,3.566,1663,5.096,1668,3.173,1750,4.798,1751,5.614,1775,3.722,1783,6.379,1784,3.835,1804,4.195,1805,4.195,1910,5.832,1912,4.195,1913,7.21,1914,7.21,1915,4.742,1916,4.742,1917,7.712,1918,5.16,1919,4.742,1920,4.742,1921,6.823,1922,6.38,1923,4.742,1924,6.379,1925,4.742,1926,4.742,1927,4.742,1928,4.742,1929,6.38,1930,4.742,1931,4.742,1932,7.21,1933,4.742,1934,4.742,1935,4.742,1936,6.38,1937,6.38,1938,4.742,1939,4.742,1940,6.38,1941,4.742,1942,4.742,1943,4.742,1944,4.742,1945,4.742,1946,4.742,1947,4.742]],["title/classes/RepoInfo.html",[224,0.105,537,2.862]],["body/classes/RepoInfo.html",[7,0.008,27,0.122,28,0.122,29,0.098,36,0.529,39,0.854,40,0.536,45,0.164,223,0.134,224,0.178,232,0.007,233,0.007,240,0.359,251,1.094,271,1.173,316,1.174,352,1.926,383,1.466,395,1.51,433,2.048,437,2.082,443,1.403,480,2.544,529,3.823,532,2.386,537,4.829,543,4.129,546,3.955,552,3.108,553,5.704,554,3.029,896,4.615,1948,5.789,1949,5.491,1950,7.246,1951,6.207,1952,6.207,1953,6.207,1954,6.207,1955,7.584,1956,6.207]],["title/modules/RepoModule.html",[0,1.102,15,2.428]],["body/modules/RepoModule.html",[0,1.86,2,2.294,3,2.949,7,0.008,15,4.953,24,3.027,25,2.477,26,2.294,27,0.122,28,0.122,29,0.098,31,3.108,45,0.192,47,0.874,49,2.848,50,1.736,77,2.352,156,1.815,222,3.194,223,0.134,224,0.146,232,0.007,233,0.007,236,2.217,418,3.379,1604,4.668,1785,4.153,1811,5.956,1813,5.491,1871,4.691,1884,6.16,1900,5.02,1957,5.491,1958,5.491,1959,6.207,1960,5.491,1961,6.207,1962,6.207,1963,6.207]],["title/classes/RepoPageOptionsDto.html",[224,0.105,1888,2.521]],["body/classes/RepoPageOptionsDto.html",[7,0.009,27,0.096,28,0.096,29,0.077,36,0.567,39,0.734,40,0.49,41,0.897,45,0.158,148,2.745,223,0.158,224,0.153,228,2.673,232,0.006,233,0.006,240,0.283,251,1.173,271,1.008,316,0.926,348,2.293,349,2.671,437,1.642,439,2.335,440,2.552,441,2.35,442,2.388,443,1.206,444,5.51,445,3.285,446,3.655,447,3.575,449,2.341,450,3.246,452,3.655,453,4.109,454,6.035,457,2.552,458,3.655,459,3.172,460,2.745,461,2.644,462,2.745,463,4.381,464,2.856,465,3.575,466,2.467,467,2.745,468,2.856,469,2.745,470,2.856,471,3.398,472,2.467,473,2.315,474,2.745,475,2.745,476,2.856,477,3.521,478,3.117,479,3.521,480,2.006,481,1.953,482,1.431,483,4.274,527,2.006,825,3.117,1059,2.978,1164,3.459,1571,5.271,1572,3.959,1573,3.959,1574,3.681,1575,3.681,1576,3.959,1577,3.959,1578,3.959,1888,3.655,1948,4.606,1964,5.925,1965,4.33,1966,4.894,1967,4.33,1968,5.765,1969,4.901,1970,5.765,1971,5.765,1972,5.271,1973,4.901,1974,5.271,1975,5.271,1976,4.901,1977,4.894]],["title/classes/RepoSearchOptionsDto.html",[224,0.105,1892,3.177]],["body/classes/RepoSearchOptionsDto.html",[7,0.009,27,0.092,28,0.092,29,0.074,36,0.607,40,0.53,41,0.93,45,0.166,223,0.101,224,0.148,228,2.778,232,0.006,233,0.006,240,0.271,251,1.255,271,0.986,316,0.886,395,1.52,433,1.842,437,1.572,439,2.143,440,2.443,441,2.282,442,2.146,443,1.171,444,4.759,445,3.19,446,3.549,447,3.497,449,2.341,450,3.199,452,4.019,453,4.304,454,5.065,457,2.443,458,3.549,459,3.103,460,2.627,461,2.531,462,2.627,463,4.495,464,2.733,465,3.497,466,2.362,467,2.627,468,2.733,469,2.627,470,2.733,471,3.3,472,2.362,473,2.215,474,2.627,475,2.627,476,2.733,477,4.331,478,2.983,479,4.331,480,1.92,482,1.85,483,2.733,546,4.002,1332,4.795,1333,4.795,1334,5.065,1335,5.026,1336,3.523,1337,4.145,1338,3.523,1341,4.759,1343,4.145,1345,3.134,1346,3.523,1821,4.145,1888,4.304,1892,4.472,1902,5.665,1948,5.665,1964,3.789,1965,4.145,1978,4.685,1979,4.685,1980,4.685]],["title/injectables/RepoService.html",[488,0.869,1871,2.266]],["body/injectables/RepoService.html",[7,0.009,27,0.065,28,0.065,29,0.053,32,1.117,36,0.548,38,1.693,39,0.904,40,0.473,41,0.773,43,1.72,45,0.179,47,0.469,50,0.932,62,0.783,77,1.263,81,2.897,83,1.944,85,1.944,87,1.944,89,1.944,109,0.688,156,0.974,173,1.519,176,2.418,201,4.465,223,0.072,224,0.078,225,1.117,227,1.618,232,0.004,233,0.004,240,0.193,241,2.035,260,2.447,271,1.052,280,2.475,343,2.53,352,1.449,373,2.202,378,1.647,395,1.55,433,1.689,439,0.996,442,2.063,447,3.73,449,1.3,450,1.982,454,2.355,465,1.626,466,2.503,471,2.59,473,2.808,481,1.33,482,1.736,488,0.96,489,1.145,491,3.972,493,1.924,496,2.229,499,3.323,500,1.365,501,1.231,502,1.33,503,2.695,504,2.506,505,3.854,506,1.868,509,3.477,511,4.394,512,4.394,514,2.948,515,2.948,517,3.323,518,3.323,519,3.555,520,1.944,521,2.897,522,2.897,552,1.365,645,2.932,661,2.724,663,2.59,708,1.425,714,2.683,733,1.201,737,1.982,740,1.33,780,3.735,788,2.948,920,3.972,944,2.506,1078,2.948,1093,2.948,1112,2.948,1127,2.948,1335,2.027,1345,2.229,1508,2.213,1516,3.162,1527,3.839,1535,2.121,1541,3.096,1544,2.503,1547,3.848,1593,2.695,1668,2.229,1751,2.121,1775,3.839,1784,2.695,1785,2.229,1786,2.355,1794,2.695,1833,5.252,1835,5.252,1842,2.948,1847,2.948,1856,2.948,1863,3.022,1871,2.503,1887,5.252,1888,3.69,1892,4.65,1896,2.948,1900,2.695,1901,4.394,1902,2.355,1964,2.695,1969,4.465,1972,2.695,1973,2.506,1974,2.695,1975,2.695,1976,2.506,1981,2.948,1982,5.937,1983,5.937,1984,3.332,1985,3.332,1986,4.966,1987,3.332,1988,3.332,1989,3.332,1990,5.937,1991,3.332,1992,3.332,1993,3.332,1994,3.332,1995,3.332,1996,5.937,1997,3.332,1998,5.252,1999,3.332,2000,4.966,2001,3.332,2002,4.966,2003,3.332,2004,3.332,2005,3.332,2006,3.332,2007,3.332,2008,3.332,2009,3.332,2010,3.332,2011,3.332,2012,3.332,2013,3.332,2014,7.037,2015,7.037,2016,2.948,2017,2.695,2018,2.948,2019,3.332,2020,3.332,2021,3.332,2022,3.332,2023,3.332,2024,3.332,2025,3.332,2026,2.948,2027,3.332,2028,3.332,2029,3.332,2030,3.332,2031,3.332,2032,3.332,2033,3.332,2034,3.332,2035,3.332,2036,3.332,2037,3.332,2038,3.332,2039,3.332,2040,3.332,2041,3.332,2042,3.332,2043,3.332,2044,3.332,2045,2.948,2046,2.948,2047,3.332]],["title/controllers/RepoStarController.html",[234,1.151,2048,3.38]],["body/controllers/RepoStarController.html",[7,0.009,27,0.064,28,0.064,29,0.052,32,1.103,36,0.487,38,1.505,39,0.787,40,0.514,41,0.706,43,1.904,45,0.178,47,0.461,77,2.227,78,1.598,85,4.076,86,2.463,109,1.012,223,0.071,224,0.077,225,0.737,227,1.127,228,1.466,232,0.004,233,0.004,234,0.839,236,0.958,238,1.379,240,0.19,241,2.113,251,1.008,254,3.524,255,2.557,260,2.606,271,1.225,280,3.039,309,1.77,310,3.962,312,3.206,313,3.005,314,3.175,315,1.379,316,0.62,317,1.503,338,1.957,340,3.775,341,3.025,343,1.865,352,1.721,373,2.041,378,1.505,383,1.618,395,1.482,433,2.23,439,0.979,442,1.371,482,0.958,501,1.211,502,1.307,527,2.409,547,2.086,685,2.25,1080,6.794,1300,2.984,1303,3.402,1305,1.598,1306,1.708,1307,1.549,1308,1.708,1404,4.565,1420,1.598,1421,3.175,1437,2.649,1486,4.611,1492,1.911,1495,1.837,1496,1.837,1547,3.402,1863,4.757,1871,2.963,1872,2.086,1873,2.191,1874,2.191,1877,3.281,1881,3.281,1882,3.281,1883,3.281,1888,3.659,1889,2.191,1904,2.191,1905,2.191,1969,2.463,2048,3.688,2049,6.487,2050,2.898,2051,6.987,2052,6.987,2053,6.987,2054,6.987,2055,6.987,2056,3.275,2057,3.275,2058,5.277,2059,6.525,2060,6.525,2061,4.611,2062,4.076,2063,4.365,2064,3.275,2065,3.275,2066,3.275,2067,3.275,2068,3.275,2069,3.275,2070,5.931,2071,3.275,2072,3.275,2073,3.275,2074,4.365,2075,3.275,2076,3.275,2077,3.275,2078,3.275,2079,2.315,2080,4.675,2081,3.932,2082,2.898,2083,2.463,2084,3.275,2085,3.275,2086,4.903,2087,3.275,2088,3.275,2089,4.903,2090,3.275]],["title/controllers/RepoStargazeController.html",[234,1.151,2091,3.38]],["body/controllers/RepoStargazeController.html",[7,0.009,27,0.065,28,0.065,29,0.052,32,1.112,36,0.49,38,1.513,39,0.791,40,0.515,41,0.71,43,1.908,45,0.179,47,0.467,77,2.242,78,1.617,89,4.096,90,2.491,109,1.02,223,0.072,224,0.078,225,0.745,227,1.137,228,1.478,232,0.004,233,0.004,234,0.849,236,0.968,238,1.395,240,0.192,241,2.117,251,1.013,254,3.534,255,2.579,260,2.613,271,1.227,280,3.043,309,1.79,310,3.979,312,3.221,313,3.018,314,3.188,315,1.395,316,0.627,317,1.52,338,1.973,340,3.793,341,3.04,343,1.876,352,1.727,373,2.053,378,1.513,383,1.622,395,1.485,433,2.241,439,0.99,442,1.383,482,0.968,501,1.224,502,1.322,527,2.425,547,2.109,685,2.269,1062,4.785,1247,4.927,1271,6.05,1300,3.009,1303,3.422,1305,1.617,1306,1.728,1307,1.567,1308,1.728,1404,4.578,1420,1.617,1421,3.197,1437,2.672,1492,1.933,1495,1.858,1496,1.858,1547,3.422,1863,4.773,1871,2.983,1872,2.109,1873,2.216,1874,2.216,1877,3.308,1881,3.308,1882,3.308,1883,3.308,1888,3.68,1889,2.216,1904,2.216,1905,2.216,2018,2.931,2061,4.637,2062,4.09,2079,2.341,2080,4.697,2083,2.491,2091,3.719,2092,6.515,2093,2.931,2094,7.02,2095,7.02,2096,7.02,2097,7.02,2098,7.02,2099,3.313,2100,3.313,2101,4.945,2102,6.561,2103,5.805,2104,3.313,2105,3.313,2106,3.313,2107,3.313,2108,3.313,2109,3.313,2110,3.313,2111,3.313,2112,3.313,2113,4.945,2114,3.313,2115,3.313,2116,3.313,2117,3.313,2118,3.959,2119,2.931,2120,3.313,2121,3.313,2122,3.999,2123,4.945,2124,3.313,2125,3.313,2126,4.375,2127,4.945,2128,3.313]],["title/controllers/RepoSubmitController.html",[234,1.151,2129,3.38]],["body/controllers/RepoSubmitController.html",[7,0.009,27,0.064,28,0.064,29,0.052,32,1.103,36,0.487,38,1.505,39,0.787,40,0.514,41,0.706,43,1.904,45,0.178,47,0.461,77,2.227,78,1.598,87,4.076,88,2.463,109,1.012,223,0.071,224,0.077,225,0.737,227,1.127,228,1.466,232,0.004,233,0.004,234,0.839,236,0.958,238,1.379,240,0.19,241,2.113,251,1.008,254,3.524,255,2.557,260,2.606,271,1.225,280,3.039,309,1.77,310,3.962,312,3.206,313,3.005,314,3.175,315,1.379,316,0.62,317,1.503,338,1.957,340,3.775,341,3.025,343,1.865,352,1.721,373,2.041,378,1.505,383,1.618,395,1.482,433,2.23,439,0.979,442,1.371,482,0.958,501,1.211,502,1.307,527,2.409,547,2.086,685,2.25,1096,7.284,1300,2.984,1303,3.402,1305,1.598,1306,1.708,1307,1.549,1308,1.708,1404,4.565,1420,1.598,1421,3.175,1437,2.649,1486,4.611,1492,1.911,1495,1.837,1496,1.837,1547,3.402,1863,4.757,1871,2.963,1872,2.086,1873,2.191,1874,2.191,1877,3.281,1881,3.281,1882,3.281,1883,3.281,1888,3.659,1889,2.191,1904,2.191,1905,2.191,2017,2.649,2058,5.277,2061,4.611,2062,4.076,2063,4.365,2074,4.365,2079,2.315,2080,4.675,2083,2.463,2129,3.688,2130,6.487,2131,2.898,2132,6.987,2133,6.987,2134,6.987,2135,6.987,2136,6.987,2137,3.275,2138,3.275,2139,6.525,2140,6.525,2141,3.275,2142,3.275,2143,3.275,2144,3.275,2145,3.275,2146,3.275,2147,6.487,2148,3.275,2149,3.275,2150,3.275,2151,3.275,2152,3.275,2153,3.275,2154,3.275,2155,3.932,2156,2.898,2157,2.649,2158,3.275,2159,3.275,2160,4.903,2161,3.275,2162,3.275,2163,4.903,2164,3.275]],["title/controllers/RepoVoteController.html",[234,1.151,2165,3.38]],["body/controllers/RepoVoteController.html",[7,0.009,27,0.064,28,0.064,29,0.052,32,1.103,36,0.487,38,1.505,39,0.787,40,0.514,41,0.706,43,1.904,45,0.178,47,0.461,77,2.227,78,1.598,83,4.076,84,2.463,109,1.012,223,0.071,224,0.077,225,0.737,227,1.127,228,1.466,232,0.004,233,0.004,234,0.839,236,0.958,238,1.379,240,0.19,241,2.113,251,1.008,254,3.524,255,2.557,260,2.606,271,1.225,280,3.039,309,1.77,310,3.962,312,3.206,313,3.005,314,3.175,315,1.379,316,0.62,317,1.503,338,1.957,340,3.775,341,3.025,343,1.865,352,1.721,373,2.041,378,1.505,383,1.618,395,1.482,433,2.23,439,0.979,442,1.371,482,0.958,501,1.211,502,1.307,527,2.409,547,2.086,685,2.25,1114,6.794,1300,2.984,1303,3.402,1305,1.598,1306,1.708,1307,1.549,1308,1.708,1404,4.565,1420,1.598,1421,3.175,1437,2.649,1486,4.611,1492,1.911,1495,1.837,1496,1.837,1547,3.402,1863,4.757,1871,2.963,1872,2.086,1873,2.191,1874,2.191,1877,3.281,1881,3.281,1882,3.281,1883,3.281,1888,3.659,1889,2.191,1904,2.191,1905,2.191,2016,2.898,2058,5.277,2061,4.611,2062,4.076,2063,4.365,2074,4.365,2079,2.315,2080,4.675,2083,2.463,2165,3.688,2166,6.487,2167,2.898,2168,6.987,2169,6.987,2170,6.987,2171,6.987,2172,6.987,2173,3.275,2174,3.275,2175,6.525,2176,6.525,2177,3.275,2178,3.275,2179,3.275,2180,3.275,2181,3.275,2182,3.275,2183,5.931,2184,3.275,2185,3.275,2186,3.275,2187,3.275,2188,3.275,2189,3.275,2190,3.275,2191,3.932,2192,2.898,2193,3.275,2194,3.275,2195,4.903,2196,3.275,2197,3.275,2198,4.903,2199,3.275]],["title/modules/StarModule.html",[0,1.102,16,3.177]],["body/modules/StarModule.html",[0,1.84,2,2.254,3,2.917,7,0.009,15,4.789,16,6.46,24,2.994,25,2.434,26,2.254,27,0.12,28,0.12,29,0.096,31,3.075,45,0.194,47,0.859,49,2.798,50,1.705,75,3.883,77,2.844,78,2.976,85,4.377,86,4.586,156,1.783,222,3.16,223,0.132,224,0.143,232,0.007,233,0.007,236,2.193,418,3.343,433,1.464,435,3.18,2048,6.112,2081,6.212,2082,5.395,2200,5.395,2201,5.395,2202,6.099,2203,5.395,2204,6.099,2205,6.099]],["title/injectables/StarService.html",[488,0.869,2081,3.007]],["body/injectables/StarService.html",[7,0.009,27,0.098,28,0.098,29,0.079,32,1.488,36,0.55,38,1.596,39,0.834,40,0.446,41,0.749,43,1.667,45,0.17,47,0.705,50,1.4,62,1.176,85,2.921,86,3.765,156,1.464,176,2.428,223,0.108,224,0.117,225,1.488,227,1.151,232,0.006,233,0.006,240,0.29,241,2.065,260,2.523,271,1.243,280,3.011,343,2.343,373,2.466,378,1.698,433,1.588,488,1.279,489,1.72,493,2.304,497,6.233,500,2.052,509,3.413,645,3.512,661,3.035,663,3.45,711,2.368,830,1.72,1080,3.765,1508,3.301,1541,2.611,1544,3.335,2062,3.45,2063,3.35,2070,5.35,2081,4.426,2206,4.429,2207,7.409,2208,7.409,2209,5.007,2210,5.007,2211,6.615,2212,5.007,2213,5.007,2214,5.007,2215,5.007,2216,5.007,2217,3.047,2218,5.007,2219,5.007,2220,3.35,2221,6.615,2222,6.615,2223,8.419,2224,6.615,2225,4.212,2226,5.007,2227,5.007,2228,3.539,2229,5.007]],["title/modules/StargazeModule.html",[0,1.102,17,3.177]],["body/modules/StargazeModule.html",[0,1.84,2,2.254,3,2.917,7,0.009,15,4.789,17,6.46,24,2.994,25,2.434,26,2.254,27,0.12,28,0.12,29,0.096,31,3.075,45,0.194,47,0.859,49,2.798,50,1.705,75,3.883,77,2.844,78,2.976,89,4.377,90,4.586,156,1.783,222,3.16,223,0.132,224,0.143,232,0.007,233,0.007,236,2.193,418,3.343,433,1.464,435,3.18,2091,6.112,2118,6.212,2119,5.395,2230,5.395,2231,5.395,2232,6.099,2233,5.395,2234,6.099,2235,6.099]],["title/injectables/StargazeService.html",[488,0.869,2118,3.007]],["body/injectables/StargazeService.html",[7,0.009,27,0.098,28,0.098,29,0.079,32,1.488,36,0.55,38,1.596,39,0.834,40,0.446,41,0.749,43,1.667,45,0.17,47,0.705,50,1.4,62,1.176,89,2.921,90,3.765,156,1.464,176,2.428,223,0.108,224,0.117,225,1.488,227,1.151,232,0.006,233,0.006,240,0.29,241,2.065,260,2.523,271,1.243,280,3.011,343,2.343,373,2.466,378,1.698,433,1.778,488,1.279,489,1.72,493,2.304,497,6.233,500,2.052,509,3.413,645,3.512,661,3.035,663,3.45,711,2.368,830,1.72,1247,3.35,1508,3.301,1541,2.611,1544,3.335,2062,3.45,2103,5.853,2118,4.426,2217,3.047,2220,3.35,2225,4.212,2228,3.539,2236,4.429,2237,7.409,2238,7.409,2239,5.007,2240,5.007,2241,6.615,2242,5.007,2243,5.007,2244,5.007,2245,5.007,2246,5.007,2247,5.007,2248,5.007,2249,6.615,2250,6.615,2251,8.419,2252,6.615,2253,5.007,2254,5.007,2255,5.007]],["title/modules/StripeModule.html",[0,1.102,415,3.007]],["body/modules/StripeModule.html",[0,1.936,2,2.451,3,3.069,7,0.008,24,3.15,25,2.646,26,2.451,27,0.13,28,0.13,29,0.105,31,2.717,45,0.17,47,0.934,222,3.324,223,0.143,224,0.156,232,0.007,233,0.007,326,5.973,415,6.111,418,3.516,2256,5.866,2257,5.866,2258,5.866,2259,6.631,2260,6.631]],["title/injectables/StripeService.html",[326,2.862,488,0.869]],["body/injectables/StripeService.html",[7,0.009,27,0.105,28,0.105,29,0.084,32,1.553,36,0.584,38,1.648,39,0.861,40,0.487,41,0.846,43,1.553,45,0.165,47,0.753,52,6.057,53,3.575,116,5.307,176,1.751,223,0.115,224,0.125,225,1.553,227,1.858,232,0.006,233,0.006,240,0.309,241,2.102,256,4.322,271,1.052,280,1.793,289,4.533,326,4.395,343,1.528,352,1.684,373,1.672,378,1.648,392,6.185,395,1.517,443,1.277,459,2.314,488,1.335,489,1.836,499,3.575,616,2.907,644,6.765,756,2.314,784,4.322,1136,4.019,1138,4.322,1144,4.019,1159,4.727,1711,6.107,2261,4.727,2262,7.647,2263,7.647,2264,5.343,2265,6.903,2266,5.343,2267,5.343,2268,5.343,2269,5.343,2270,5.343,2271,5.343,2272,7.647,2273,5.343,2274,5.343,2275,4.727,2276,5.343,2277,5.343,2278,5.343,2279,5.343,2280,5.343,2281,5.343,2282,5.343,2283,5.343,2284,4.727,2285,5.343,2286,5.343,2287,5.343,2288,5.343,2289,5.343,2290,5.343]],["title/modules/StripeSubscriptionModule.html",[0,1.102,18,3.007]],["body/modules/StripeSubscriptionModule.html",[0,1.902,2,2.378,3,3.014,7,0.008,18,6.075,24,3.094,25,2.568,26,2.378,27,0.126,28,0.126,29,0.101,31,2.637,45,0.187,47,0.907,49,2.953,50,1.799,116,3.916,119,4.84,121,4.306,122,5.205,156,1.881,222,3.265,223,0.139,224,0.151,232,0.007,233,0.007,418,3.454,1128,4.84,2291,5.693,2292,5.693,2293,5.693,2294,6.254,2295,6.435,2296,5.693,2297,6.435]],["title/injectables/StripeSubscriptionService.html",[488,0.869,2294,3.007]],["body/injectables/StripeSubscriptionService.html",[7,0.009,27,0.12,28,0.12,29,0.096,32,1.69,36,0.567,38,1.618,39,0.846,40,0.452,41,0.759,43,1.69,45,0.183,47,0.861,50,1.708,62,1.435,116,3.718,121,4.087,122,4.941,156,1.786,223,0.132,224,0.143,225,1.69,227,1.404,232,0.007,233,0.007,240,0.354,241,1.995,355,5.179,378,1.618,488,1.452,489,2.099,493,2.48,500,2.504,616,2.573,645,3.78,1128,6.381,1144,5.649,2294,5.025,2298,5.405,2299,8.133,2300,6.109,2301,6.109,2302,7.511,2303,6.109,2304,6.109,2305,6.109,2306,6.109,2307,6.109,2308,6.109]],["title/modules/StripeWebHookModule.html",[0,1.102,19,3.177]],["body/modules/StripeWebHookModule.html",[0,1.827,2,2.227,3,2.896,7,0.009,9,5.627,18,5.913,19,6.577,21,5.156,24,2.972,25,2.404,26,2.227,27,0.118,28,0.118,29,0.095,31,3.052,45,0.191,47,0.849,97,4.258,115,4.873,116,3.666,119,4.531,120,5.33,222,2.537,223,0.13,224,0.141,232,0.007,233,0.007,236,2.177,415,5.913,418,3.318,423,5.33,2309,5.33,2310,6.025,2311,5.33,2312,6.488,2313,4.531,2314,6.025,2315,6.025]],["title/controllers/StripeWebhookController.html",[234,1.151,2312,3.177]],["body/controllers/StripeWebhookController.html",[7,0.009,27,0.08,28,0.08,29,0.065,32,1.298,36,0.402,38,1.243,39,0.65,40,0.347,41,0.583,43,1.298,45,0.183,47,0.577,52,4.72,53,2.741,109,1.191,116,4.064,119,3.081,175,3.86,176,2.504,223,0.088,224,0.096,225,0.922,227,1.943,232,0.005,233,0.005,234,1.049,236,1.198,238,1.725,240,0.237,241,1.944,251,0.591,280,2.432,308,2.896,313,2.364,315,1.725,316,0.775,324,3.482,325,3.314,326,4.252,327,3.625,328,4.252,329,3.625,338,1.635,343,2.537,348,1.442,352,1.27,357,2.896,373,2.48,375,2.896,376,4.339,378,0.883,394,5.908,395,1.534,457,2.137,616,2.43,733,2.08,809,3.081,830,1.407,1130,3.625,1131,3.625,1132,3.625,1133,3.625,1134,3.625,1135,3.625,1136,3.081,1137,3.625,1138,3.314,1139,4.078,1140,3.625,1141,3.625,1144,5.961,1164,2.896,1508,2.975,1741,5.602,1924,3.625,2294,4.468,2296,3.625,2312,4.078,2313,5.022,2316,5.401,2317,3.314,2318,6.678,2319,6.678,2320,4.097,2321,7.248,2322,4.097,2323,4.097,2324,6.413,2325,4.097,2326,4.097,2327,6.678,2328,6.413,2329,3.314,2330,4.097,2331,3.314,2332,3.314,2333,5.104,2334,5.104,2335,5.104,2336,5.104,2337,4.097,2338,4.097,2339,4.097,2340,6.678,2341,4.097,2342,4.097,2343,4.097,2344,4.097,2345,4.097,2346,4.097,2347,3.625,2348,4.097,2349,6.678,2350,4.097,2351,5.769,2352,4.097,2353,4.097,2354,4.097,2355,4.097,2356,4.097,2357,4.097,2358,4.097,2359,4.097,2360,4.097,2361,4.097,2362,4.097,2363,4.097,2364,4.097,2365,4.097,2366,4.097,2367,4.097,2368,4.097,2369,5.769,2370,4.097,2371,4.097,2372,4.097,2373,4.097,2374,4.097,2375,4.097,2376,6.678,2377,4.097,2378,4.097,2379,4.097,2380,5.908,2381,4.097,2382,3.314,2383,4.097,2384,4.097,2385,4.097,2386,4.097,2387,5.769,2388,4.097,2389,4.097,2390,4.097,2391,4.097,2392,4.097,2393,4.097,2394,4.097,2395,4.097,2396,4.097,2397,4.097]],["title/modules/SubmitModule.html",[0,1.102,20,3.177]],["body/modules/SubmitModule.html",[0,1.84,2,2.254,3,2.917,7,0.009,15,4.789,20,6.46,24,2.994,25,2.434,26,2.254,27,0.12,28,0.12,29,0.096,31,3.075,45,0.194,47,0.859,49,2.798,50,1.705,75,3.883,77,2.844,78,2.976,87,4.377,88,4.586,156,1.783,222,3.16,223,0.132,224,0.143,232,0.007,233,0.007,236,2.193,418,3.343,433,1.464,435,3.18,2129,6.112,2155,6.212,2156,5.395,2398,5.395,2399,6.099,2400,5.395,2401,5.395,2402,6.099,2403,6.099]],["title/injectables/SubmitService.html",[488,0.869,2155,3.007]],["body/injectables/SubmitService.html",[7,0.009,27,0.098,28,0.098,29,0.079,32,1.488,36,0.55,38,1.596,39,0.834,40,0.446,41,0.749,43,1.667,45,0.17,47,0.705,50,1.4,62,1.176,87,2.921,88,3.765,156,1.464,176,2.428,223,0.108,224,0.117,225,1.488,227,1.151,232,0.006,233,0.006,240,0.29,241,2.065,260,2.523,271,1.243,280,3.011,343,2.343,373,2.466,378,1.698,433,1.588,488,1.279,489,1.72,493,2.304,497,6.233,500,2.052,509,3.413,645,3.512,661,3.035,663,3.45,711,2.368,830,1.72,1508,3.301,1541,2.611,1544,3.335,2062,3.45,2063,3.35,2155,4.426,2157,4.049,2217,3.047,2220,3.35,2225,4.212,2228,3.539,2404,4.429,2405,7.409,2406,7.409,2407,5.007,2408,5.007,2409,6.615,2410,5.007,2411,5.007,2412,5.007,2413,5.007,2414,5.007,2415,5.007,2416,5.007,2417,6.615,2418,6.615,2419,8.419,2420,6.615,2421,6.615,2422,5.007,2423,5.007,2424,5.007]],["title/classes/SupabaseAuthDto.html",[224,0.105,321,3.38]],["body/classes/SupabaseAuthDto.html",[7,0.008,27,0.055,28,0.055,29,0.044,36,0.608,39,0.811,40,0.525,41,0.928,45,0.061,109,1.889,172,2.49,179,3.859,223,0.061,224,0.066,228,2.804,232,0.004,233,0.004,239,6.194,240,0.163,251,1.258,255,4.216,271,0.829,277,5.409,278,1.943,289,3.659,316,0.531,319,5.968,321,3.28,344,5.419,346,4.324,347,4.73,348,1.881,349,2.191,352,1.177,353,4.324,361,4.021,362,4.324,363,4.73,364,4.907,365,4.907,366,4.021,367,4.907,368,4.021,369,3.893,370,4.021,371,4.021,372,4.73,383,1.686,395,1.602,437,0.942,443,0.807,472,4.374,477,4.712,484,2.918,528,3.601,529,1.416,532,2.574,543,2.199,554,2.128,585,3.053,599,3.225,690,1.696,713,3.859,714,2.357,728,3.053,729,3.225,731,1.889,732,4.024,733,2.819,742,1.741,745,2.941,761,3.083,786,3.528,795,2.063,804,2.918,837,4.26,859,2.654,884,3.859,1051,3.859,1059,2.654,1178,3.28,1190,4.874,1245,3.528,2425,7.754,2426,2.486,2427,4.874,2428,2.81,2429,2.81,2430,4.362,2431,4.362,2432,2.81,2433,2.81,2434,3.083,2435,2.81,2436,4.362,2437,2.81,2438,3.859,2439,3.859,2440,2.81,2441,2.81,2442,2.81,2443,6.027,2444,4.362,2445,2.81,2446,4.362,2447,2.81,2448,2.81,2449,3.859,2450,3.859,2451,2.81,2452,4.362,2453,4.362,2454,2.81,2455,4.362,2456,2.81,2457,4.362,2458,2.81,2459,2.81,2460,3.859,2461,3.859,2462,2.81,2463,2.81,2464,4.362,2465,3.859,2466,2.81,2467,2.81]],["title/injectables/SupabaseGuard.html",[317,2.062,488,0.869]],["body/injectables/SupabaseGuard.html",[7,0.008,27,0.139,28,0.139,29,0.111,45,0.177,47,0.994,223,0.152,224,0.166,232,0.007,233,0.007,317,3.757,420,5.709,441,2.545,488,1.583,489,2.425,2468,6.245,2469,7.059,2470,7.059]],["title/injectables/SupabaseStrategy.html",[416,3.177,488,0.869]],["body/injectables/SupabaseStrategy.html",[7,0.009,27,0.117,28,0.117,29,0.094,32,1.665,36,0.561,38,1.594,39,0.833,40,0.445,41,0.748,43,1.665,44,4.215,45,0.182,47,0.84,59,4.485,109,1.527,223,0.129,224,0.14,225,1.81,232,0.007,233,0.007,239,4.215,240,0.345,241,1.973,250,7.443,319,5.23,358,2.425,378,1.285,416,5.23,420,4.823,441,2.15,488,1.431,489,2.049,616,2.511,629,5.276,2324,6.547,2471,5.276,2472,8.046,2473,8.046,2474,5.963,2475,5.963,2476,8.046,2477,5.963,2478,5.963,2479,5.963,2480,7.4,2481,5.963,2482,5.963,2483,5.963,2484,7.4,2485,5.963,2486,5.963,2487,5.963,2488,5.963,2489,5.963,2490,5.963,2491,5.963,2492,5.963,2493,5.963,2494,5.963,2495,5.963]],["title/classes/UpdateInsightDto.html",[224,0.105,1490,3.177]],["body/classes/UpdateInsightDto.html",[7,0.008,27,0.123,28,0.123,29,0.099,36,0.574,39,0.927,40,0.537,45,0.136,154,3.39,223,0.136,224,0.147,232,0.007,233,0.007,240,0.363,251,1.187,268,4.718,277,4.197,395,1.352,437,2.105,439,2.282,441,2.753,443,1.413,463,4.615,493,1.834,523,6.307,525,5.074,526,5.741,527,3.129,528,3.981,529,4.148,530,3.61,531,4.718,532,2.301,533,5.074,535,5.55,537,4.861,538,4.197,539,5.55,540,4.197,541,5.55,1490,5.395,1498,5.074,2496,5.074,2497,6.274,2498,6.274,2499,6.274]],["title/classes/UpdateInsightMemberDto.html",[224,0.105,2500,3.38]],["body/classes/UpdateInsightMemberDto.html",[7,0.008,27,0.127,28,0.127,29,0.102,36,0.452,40,0.502,45,0.168,223,0.14,224,0.183,232,0.007,233,0.007,240,0.375,251,0.935,316,1.226,383,1.253,395,1.533,437,2.175,443,1.441,480,2.657,529,3.268,530,4.095,532,2.177,543,3.926,546,4.061,556,5.243,557,5.504,864,6.66,870,5.504,1482,4.876,1719,5.736,2496,6.298,2500,5.856,2501,6.483,2502,6.298,2503,5.504,2504,6.483,2505,6.483]],["title/classes/UpdateUserDto.html",[224,0.105,286,3.177]],["body/classes/UpdateUserDto.html",[7,0.008,27,0.076,28,0.076,29,0.061,36,0.597,39,0.84,40,0.557,41,0.908,45,0.119,109,1.854,165,3.358,172,1.388,223,0.083,224,0.129,228,2.321,232,0.005,233,0.005,240,0.223,251,1.234,286,3.9,289,4.184,302,7.195,316,0.728,358,3.023,364,5.611,365,5.611,366,4.852,367,5.611,368,4.852,369,4.5,370,4.852,371,4.852,383,1.654,385,5.611,395,1.655,437,1.291,443,1.021,472,4.199,477,4.567,479,4.567,480,1.577,528,3.675,529,2.782,532,2.548,543,3.252,545,4.463,546,4.17,554,1.878,559,3.405,561,4.883,562,3.113,690,2.146,761,3.9,804,3.692,1059,2.342,2427,4.463,2434,3.9,2438,4.883,2439,4.883,2449,4.883,2450,3.405,2460,4.883,2461,3.405,2465,3.405,2506,6.501,2507,3.405,2508,4.883,2509,3.849,2510,3.849,2511,5.519,2512,3.849,2513,3.849,2514,3.849,2515,3.849,2516,3.849,2517,3.849,2518,3.849,2519,3.849,2520,3.849,2521,6.452,2522,3.849,2523,3.849,2524,6.235,2525,3.849,2526,3.849,2527,3.849,2528,3.849,2529,3.849,2530,3.849,2531,7.048,2532,3.849]],["title/classes/UpdateUserEmailPreferencesDto.html",[224,0.105,287,3.177]],["body/classes/UpdateUserEmailPreferencesDto.html",[7,0.008,27,0.119,28,0.119,29,0.096,36,0.522,40,0.533,45,0.162,109,1.851,172,2.697,223,0.131,224,0.175,232,0.007,233,0.007,240,0.351,251,1.079,287,5.286,289,4.875,316,1.148,358,2.969,383,1.446,437,2.035,443,1.384,480,2.486,528,4.725,529,3.77,532,2.367,533,6.049,543,4.087,545,6.557,723,5.004,804,5.004,2506,6.098,2533,5.367,2534,7.173,2535,7.173,2536,6.067,2537,7.479,2538,7.479,2539,6.067]],["title/classes/UpdateUserProfileInterestsDto.html",[224,0.105,296,3.177]],["body/classes/UpdateUserProfileInterestsDto.html",[7,0.008,27,0.128,28,0.128,29,0.103,36,0.454,40,0.503,45,0.169,109,1.61,154,4.217,223,0.141,224,0.183,232,0.007,233,0.007,240,0.377,251,0.939,296,5.516,298,6.265,316,1.231,358,2.739,383,1.258,395,1.48,437,2.183,443,1.444,480,2.667,529,3.28,532,2.182,538,5.222,540,5.8,543,3.934,1741,4.599,1829,5.263,2506,5.869,2540,5.757,2541,5.263,2542,6.507,2543,4.894]],["title/controllers/UserController.html",[234,1.151,2544,3.38]],["body/controllers/UserController.html",[7,0.009,27,0.079,28,0.079,29,0.063,32,1.276,36,0.5,38,1.545,39,0.808,40,0.497,41,0.725,43,1.613,45,0.19,47,0.563,77,2.149,78,1.951,79,2.682,109,1.811,125,3.874,126,2.433,128,3.451,129,2.826,130,2.826,131,3.064,133,2.433,148,4.021,165,5.186,223,0.086,224,0.094,225,0.9,227,1.648,232,0.005,233,0.005,234,1.024,236,1.169,238,1.684,240,0.231,241,2.135,251,1.034,254,3.578,260,2.645,292,3.538,312,3.474,313,3.103,314,3.278,315,1.684,316,0.756,324,3.436,338,1.596,341,3.105,343,1.621,359,2.433,373,1.774,378,1.545,383,1.386,395,1.541,442,2.543,481,1.596,482,1.169,501,1.478,502,1.596,527,3.103,685,3.29,723,3.794,1206,2.675,1299,4.797,1303,4.309,1305,1.951,1306,2.085,1307,1.891,1308,2.085,1398,5.799,1404,4.021,1410,3.538,1420,1.951,1424,2.243,1425,4.01,1427,3.007,1431,3.538,1754,4.196,1755,3.234,1762,3.538,1871,3.322,1872,2.546,1889,2.675,1894,3.538,1904,2.675,1905,2.675,2544,4.265,2545,3.538,2546,7.571,2547,7.571,2548,7.571,2549,6.59,2550,3.999,2551,3.999,2552,5.799,2553,3.538,2554,3.999,2555,3.999,2556,3.999,2557,3.999,2558,3.999,2559,3.999,2560,3.999,2561,3.999,2562,3.999,2563,3.999,2564,3.999,2565,3.999,2566,5.671,2567,3.999,2568,3.999,2569,2.826,2570,3.538,2571,3.007,2572,3.999,2573,6.344,2574,5.83,2575,3.999,2576,3.999,2577,3.999,2578,3.999,2579,5.017,2580,3.999,2581,3.999]],["title/injectables/UserFollowService.html",[488,0.869,2582,3.007]],["body/injectables/UserFollowService.html",[7,0.009,27,0.085,28,0.085,29,0.069,32,1.353,36,0.545,38,1.603,39,0.838,40,0.448,41,0.752,43,1.673,45,0.174,47,0.612,50,1.215,62,1.021,109,1.611,135,2.768,136,3.269,156,1.271,176,2.437,223,0.094,224,0.102,225,1.353,227,1.585,232,0.005,233,0.005,240,0.252,241,2.101,260,2.585,271,1.254,280,2.985,324,4.317,343,2.367,373,2.59,378,1.682,488,1.162,489,1.493,493,2.174,500,1.781,509,3.497,645,3.314,661,3.163,663,3.594,830,1.493,1058,2.645,1247,4.023,1270,3.846,1424,2.438,1508,3.314,1541,2.267,1544,3.031,2062,2.267,2217,2.645,2220,2.908,2225,3.828,2228,4.249,2569,3.072,2582,4.023,2583,5.142,2584,3.846,2585,6.893,2586,6.893,2587,6.893,2588,4.347,2589,5.037,2590,4.347,2591,6.012,2592,4.347,2593,7.465,2594,4.347,2595,4.347,2596,4.347,2597,8.67,2598,4.347,2599,4.347,2600,4.347,2601,3.269,2602,4.347,2603,4.347,2604,6.893,2605,6.893,2606,4.347,2607,8.437,2608,4.522,2609,6.012,2610,6.012,2611,6.012,2612,4.347,2613,6.012,2614,4.347,2615,4.347,2616,4.347]],["title/controllers/UserFollowsController.html",[234,1.151,2617,3.38]],["body/controllers/UserFollowsController.html",[7,0.009,27,0.086,28,0.086,29,0.069,32,1.358,36,0.482,38,1.49,39,0.779,40,0.471,41,0.699,43,1.76,45,0.179,47,0.616,109,1.905,135,3.845,136,3.289,165,5.219,223,0.094,224,0.103,225,0.984,227,1.388,228,1.805,232,0.005,233,0.005,234,1.12,236,1.279,238,1.842,240,0.253,241,2.104,251,0.997,254,3.503,255,3.149,260,2.59,271,1.18,280,2.988,309,2.363,310,4.029,312,3.421,313,2.475,314,3.229,315,1.842,316,0.827,317,2.007,324,3.606,338,1.746,340,3.736,341,2.994,343,1.977,359,2.662,373,2.164,378,1.49,383,1.564,395,1.519,737,2.41,1247,4.04,1271,5.271,1303,3.889,1420,2.134,1424,2.453,1492,2.552,1495,2.453,1496,2.453,1918,4.884,2061,4.268,2062,3.149,2079,3.091,2080,4.627,2122,6.031,2126,5.342,2569,3.091,2570,3.87,2571,3.289,2573,6.118,2574,6.118,2579,6.118,2582,4.627,2583,4.749,2608,4.541,2617,4.541,2618,3.87,2619,6.916,2620,7.825,2621,6.916,2622,4.374,2623,4.374,2624,6.038,2625,6.038,2626,4.374,2627,4.374,2628,4.374,2629,5.342,2630,4.374,2631,4.374,2632,4.374,2633,6.038,2634,4.374,2635,4.374,2636,4.374,2637,3.87,2638,4.374,2639,4.374,2640,4.374,2641,4.374,2642,4.374,2643,4.374]],["title/controllers/UserHighlightsController.html",[234,1.151,2644,3.38]],["body/controllers/UserHighlightsController.html",[7,0.009,27,0.056,28,0.056,29,0.045,32,0.996,36,0.506,38,1.563,39,0.817,40,0.501,41,0.734,43,1.632,45,0.162,47,0.403,109,1.813,131,3.289,133,1.742,141,3.034,142,4.404,143,1.823,145,3.278,176,2.28,223,0.062,224,0.067,225,0.644,227,0.658,228,0.856,232,0.004,233,0.004,234,0.733,236,0.837,238,1.205,240,0.166,241,2.145,251,1.046,254,3.602,255,4.234,260,2.663,267,5.297,271,1.257,272,4.069,275,3.128,278,1.972,280,3.02,303,4.302,307,2.153,308,3.128,309,1.547,310,3.92,311,3.824,312,3.439,313,2.852,314,3.245,315,1.205,316,0.541,317,1.313,338,1.142,340,3.759,341,3.141,343,1.74,352,1.34,373,2.345,378,1.312,383,1.624,395,1.232,571,5.653,574,2.023,799,4.069,800,5.456,1398,2.315,1413,2.532,1414,4.923,1415,2.532,1416,3.915,1417,2.532,1418,5.879,1420,1.397,1421,3.92,1422,5.297,1424,2.482,1425,3.292,1427,2.153,1436,2.532,1437,3.759,1438,2.532,1477,2.315,1485,2.532,1489,3.328,1492,3.84,1495,1.605,1496,1.605,1504,2.315,1506,2.532,1508,1.275,1657,2.023,2074,4.073,2080,2.961,2217,1.742,2225,1.823,2543,2.153,2553,4.786,2571,2.153,2583,4.772,2644,3.328,2645,2.532,2646,2.862,2647,6.582,2648,4.786,2649,6.582,2650,6.582,2651,6.582,2652,6.582,2653,6.582,2654,2.862,2655,6.63,2656,2.862,2657,2.862,2658,2.862,2659,4.073,2660,2.862,2661,7.184,2662,2.862,2663,2.532,2664,4.425,2665,6.087,2666,2.862,2667,5.41,2668,2.862,2669,6.087,2670,4.425,2671,2.862,2672,2.862,2673,2.862,2674,2.862,2675,2.862,2676,2.862,2677,2.862,2678,2.862,2679,2.862,2680,2.862,2681,2.532,2682,2.862,2683,5.41,2684,2.532,2685,2.862,2686,2.862,2687,2.862,2688,2.532,2689,5.41,2690,2.862,2691,2.862,2692,2.862,2693,2.862,2694,2.862,2695,2.862,2696,2.862,2697,2.862,2698,4.425,2699,2.862,2700,2.862,2701,2.862,2702,2.862,2703,2.862,2704,2.862,2705,2.862]],["title/injectables/UserHighlightsService.html",[488,0.869,1425,2.735]],["body/injectables/UserHighlightsService.html",[7,0.009,27,0.052,28,0.052,29,0.042,32,0.936,36,0.563,38,1.716,39,0.897,40,0.479,41,0.805,43,1.792,45,0.169,47,0.372,50,0.739,62,0.621,109,0.858,125,2.247,131,2.247,133,1.609,141,2.884,142,3.749,143,1.683,156,1.216,173,1.939,176,2.567,223,0.057,224,0.062,225,0.936,227,1.182,232,0.004,233,0.004,240,0.153,241,2.211,260,2.155,271,1.254,280,3.001,343,2.506,352,1.482,355,3.274,359,2.531,369,1.428,373,2.492,378,1.741,395,1.329,433,0.998,442,2.334,481,1.66,482,1.216,488,0.804,489,0.908,491,3.44,493,2.059,496,1.769,499,2.783,500,1.083,501,0.977,502,1.055,505,3.873,506,1.483,509,3.742,517,3.44,518,3.44,519,3.638,520,2.427,521,2.427,522,3,551,1.483,571,4.121,574,1.869,575,1.869,582,0.977,616,3.073,645,2.598,661,2.675,663,2.681,714,1.428,733,0.953,800,1.988,830,1.429,971,1.988,1058,2.531,1194,2.138,1213,3.68,1214,2.339,1399,4.549,1402,2.339,1408,4.121,1424,2.333,1425,2.531,1449,3.128,1508,2.291,1516,3.274,1527,3,1535,1.683,1541,2.681,1544,2.097,1547,3.511,1555,2.339,1609,3.867,1618,2.138,1639,3.128,1657,1.869,1998,2.339,2045,2.339,2046,2.339,2062,1.379,2217,1.609,2220,1.769,2225,1.683,2583,5.208,2589,4.286,2601,1.988,2655,6.931,2661,7.504,2684,2.339,2706,2.339,2707,5.142,2708,5.142,2709,5.142,2710,5.142,2711,5.142,2712,5.142,2713,5.142,2714,2.644,2715,5.142,2716,2.644,2717,4.159,2718,2.644,2719,2.644,2720,2.644,2721,5.609,2722,2.644,2723,2.644,2724,2.644,2725,2.644,2726,2.644,2727,2.644,2728,2.644,2729,2.644,2730,2.644,2731,2.644,2732,2.644,2733,2.644,2734,2.644,2735,2.644,2736,2.644,2737,2.644,2738,2.644,2739,2.644,2740,2.644,2741,2.644,2742,3.68,2743,4.159,2744,4.159,2745,4.159,2746,2.644,2747,2.644,2748,2.644,2749,4.159,2750,3.68,2751,4.159,2752,4.159,2753,4.159,2754,4.159,2755,2.644,2756,4.159,2757,2.644,2758,2.644,2759,2.644,2760,2.644,2761,2.644,2762,2.644,2763,2.644,2764,2.644,2765,2.644,2766,2.644,2767,2.644,2768,2.644,2769,2.644,2770,4.159,2771,2.644,2772,2.644,2773,2.644,2774,2.644,2775,2.644,2776,2.644,2777,2.644,2778,2.644,2779,2.644,2780,2.644,2781,2.644,2782,5.142,2783,2.644,2784,2.644,2785,5.142,2786,5.142,2787,2.644,2788,4.159,2789,5.142,2790,2.644,2791,2.644,2792,4.159,2793,2.644,2794,2.644]],["title/controllers/UserInsightMemberController.html",[234,1.151,1602,3.38]],["body/controllers/UserInsightMemberController.html",[7,0.009,27,0.06,28,0.06,29,0.048,32,1.047,36,0.44,38,1.358,39,0.71,40,0.481,41,0.637,43,1.418,45,0.182,47,0.431,104,3.161,109,0.961,137,3.589,138,2.3,145,2.582,172,1.103,176,2.434,223,0.066,224,0.072,225,0.688,227,1.296,228,1.392,232,0.004,233,0.004,234,0.783,236,0.894,238,1.288,240,0.177,241,2.022,251,0.909,254,3.314,260,2.451,267,5.093,271,1.229,272,4.239,275,3.29,277,2.046,278,1.362,280,2.916,307,2.3,308,2.161,309,1.652,310,3.664,311,3.984,312,3.111,313,2.779,314,2.936,315,1.288,316,0.578,317,1.403,324,2.939,325,2.473,338,1.22,340,3.404,341,2.728,343,2.385,352,1.387,355,1.947,373,2.638,378,1.215,383,1.48,395,1.265,439,0.914,442,1.302,482,0.894,501,1.13,502,1.22,530,4.287,549,1.947,555,5.757,557,5.746,685,2.136,830,1.599,864,3.501,865,2.161,866,2.705,870,3.984,878,2.705,1299,3.115,1303,2.428,1305,1.492,1306,1.595,1307,1.446,1308,1.595,1418,5.048,1420,1.492,1421,3.664,1422,4.453,1437,3.404,1479,3.765,1482,4.239,1486,3.29,1487,3.29,1489,2.3,1492,1.784,1493,5.484,1495,1.715,1496,1.715,1497,2.3,1499,2.161,1500,3.289,1501,1.947,1503,2.473,1505,3.765,1508,3.021,1510,3.589,1513,4.987,1515,4.119,1518,5.999,1525,2.705,1529,6.191,1539,2.705,1542,2.3,1579,4.216,1602,3.501,1606,2.473,1625,2.473,1657,2.161,1737,3.501,2062,1.595,2074,3.115,2217,1.861,2500,5.897,2502,5.484,2503,4.792,2552,3.765,2659,3.115,2795,5.484,2796,2.705,2797,2.705,2798,4.987,2799,6.781,2800,3.058,2801,3.058,2802,4.655,2803,4.655,2804,4.655,2805,5.637,2806,3.058,2807,2.705,2808,3.058,2809,4.119,2810,3.058,2811,3.058,2812,3.058,2813,7.143,2814,3.058,2815,3.058,2816,3.058,2817,3.058,2818,2.705,2819,3.058,2820,3.058,2821,4.119,2822,4.655,2823,2.705,2824,3.058,2825,3.058,2826,4.655,2827,4.655,2828,5.999,2829,5.999,2830,3.058,2831,3.058,2832,6.32,2833,4.655,2834,3.058,2835,3.058,2836,3.058,2837,4.655,2838,3.058,2839,3.058,2840,3.058,2841,3.058,2842,3.058,2843,4.655,2844,4.655,2845,4.655,2846,4.655,2847,3.058,2848,3.058,2849,3.058,2850,3.058,2851,3.058,2852,3.058,2853,3.058]],["title/controllers/UserInsightsController.html",[234,1.151,1601,3.38]],["body/controllers/UserInsightsController.html",[7,0.009,27,0.069,28,0.069,29,0.055,32,1.157,36,0.426,38,1.315,39,0.808,40,0.479,41,0.617,43,1.373,45,0.185,47,0.492,104,3.775,109,1.643,145,2.107,176,2.46,223,0.075,224,0.082,225,0.785,227,1.403,228,1.537,232,0.005,233,0.005,234,0.894,236,1.021,238,1.47,240,0.202,241,1.994,251,0.88,254,3.25,255,3.511,260,2.403,267,5.071,271,1.118,272,4.589,275,3.634,278,2.719,280,2.921,303,3.634,307,2.626,308,3.634,309,1.886,310,3.637,311,4.313,312,3.089,313,2.759,314,2.915,315,1.47,316,0.66,317,1.602,338,1.393,340,3.297,341,2.642,343,2.324,352,1.344,357,2.468,373,2.428,375,2.468,376,2.626,378,1.315,383,1.451,395,1.08,433,1.616,439,2.146,442,1.438,482,1.021,501,1.29,502,1.393,523,5.629,526,3.867,527,2.759,530,4.052,685,2.359,830,1.199,845,3.089,859,4.097,994,3.089,1149,2.626,1298,2.824,1299,3.44,1303,2.681,1305,1.704,1306,1.821,1307,1.651,1308,1.821,1418,4.758,1420,1.704,1421,2.778,1422,4.313,1437,1.886,1479,4.936,1487,2.468,1488,4.549,1489,2.626,1490,5.745,1493,4.158,1495,1.958,1496,1.958,1497,2.626,1498,4.158,1499,2.468,1500,3.56,1501,2.223,1503,2.824,1505,4.158,1508,2.719,1510,3.886,1579,4.504,1580,3.44,1601,3.867,1604,2.626,1606,2.824,1625,2.824,1657,2.468,2074,3.44,2328,4.549,2332,2.824,2502,2.824,2503,2.468,2552,4.158,2648,6.349,2659,4.083,2663,3.089,2681,3.089,2688,3.089,2795,5.445,2797,3.089,2798,6.349,2807,3.089,2818,3.089,2821,4.549,2823,3.089,2828,3.089,2829,3.089,2832,4.549,2854,3.089,2855,7.176,2856,3.491,2857,3.491,2858,3.491,2859,3.491,2860,3.491,2861,3.491,2862,3.491,2863,5.141,2864,3.491,2865,3.491,2866,3.491,2867,5.141,2868,3.491,2869,5.141,2870,3.491,2871,3.491,2872,3.491,2873,3.491,2874,3.491,2875,3.491,2876,3.491,2877,3.491,2878,3.491,2879,3.491,2880,3.491,2881,3.491,2882,3.491,2883,5.141,2884,3.491,2885,3.491,2886,3.491,2887,3.491,2888,3.491,2889,3.491,2890,3.491,2891,3.491,2892,3.491,2893,3.491,2894,3.491,2895,3.491,2896,3.491,2897,3.491,2898,3.491]],["title/modules/UserModule.html",[0,1.102,21,2.622]],["body/modules/UserModule.html",[0,1.556,2,1.738,3,2.467,7,0.009,14,5.533,15,4.468,21,5.444,24,2.532,25,1.877,26,1.738,27,0.092,28,0.092,29,0.074,31,2.6,45,0.2,47,0.663,49,2.158,50,1.315,75,2.995,77,2.405,78,2.295,79,3.001,108,2.453,109,1.706,125,2.541,126,2.862,127,4.161,131,3.428,133,2.862,135,4.04,136,3.537,141,3.559,142,2.295,143,2.995,147,4.485,148,2.638,149,4.04,150,3.537,156,1.375,222,2.672,223,0.102,224,0.11,232,0.006,233,0.006,236,1.855,324,4.666,418,2.827,435,2.453,1206,3.147,1424,4.501,1425,5.445,1427,3.537,1442,4.161,1775,4.825,1785,3.147,1786,3.324,1871,4.511,1872,2.995,2544,5.781,2569,3.324,2582,5.987,2589,5.032,2601,3.537,2617,5.4,2637,4.161,2644,5.781,2899,4.161,2900,4.703,2901,4.161,2902,4.161,2903,4.703,2904,5.4,2905,4.703,2906,4.703,2907,4.703]],["title/controllers/UserNotificationController.html",[234,1.151,2904,3.38]],["body/controllers/UserNotificationController.html",[7,0.009,27,0.111,28,0.111,29,0.089,32,1.605,36,0.393,38,1.213,39,0.634,40,0.43,41,0.569,43,1.266,45,0.193,47,0.793,109,1.7,149,4.544,150,4.232,223,0.122,224,0.132,225,1.266,227,1.294,232,0.006,233,0.006,234,1.441,236,1.645,238,2.37,240,0.326,241,1.922,251,0.812,254,3.09,255,3.721,260,2.284,267,4.544,271,1.078,280,2.764,303,3.977,309,3.04,310,3.855,312,3.274,313,2.924,314,3.09,315,2.37,316,1.064,317,2.582,338,2.246,340,3.04,341,2.437,378,1.213,383,1.088,442,2.497,481,2.246,482,1.645,501,2.08,502,2.246,685,3.274,1298,4.551,1414,5.771,1424,3.156,1495,3.156,1496,3.156,2571,4.232,2583,4.544,2589,4.768,2601,4.232,2904,5.366,2908,4.979,2909,5.627,2910,8.503,2911,5.627,2912,7.29,2913,5.627,2914,5.627,2915,5.627,2916,5.627]],["title/injectables/UserNotificationService.html",[488,0.869,2589,2.735]],["body/injectables/UserNotificationService.html",[7,0.009,27,0.081,28,0.081,29,0.065,32,1.305,36,0.569,38,1.712,39,0.895,40,0.51,41,0.804,43,1.788,45,0.183,47,0.582,50,1.155,62,0.97,142,2.016,149,2.63,150,3.107,156,1.208,173,1.263,176,2.384,223,0.089,224,0.097,225,1.305,227,1.334,232,0.005,233,0.005,240,0.239,241,2.192,271,1.247,275,2.92,280,2.879,324,4.256,343,2.421,352,0.91,355,4.271,359,2.514,373,2.486,378,1.651,408,5.134,442,2.33,481,2.316,482,1.208,488,1.122,489,1.419,493,2.127,500,1.693,501,1.527,502,1.649,505,3.667,506,2.317,509,2.513,519,3.135,520,2.41,521,2.41,522,2.41,566,4.271,582,2.145,616,3.064,645,3.241,661,1.895,830,2.304,1058,2.514,1240,5.934,1241,3.655,1242,3.655,1247,2.764,1255,4.867,1258,3.341,1424,3.254,1527,3.913,1544,2.925,1609,5.045,2569,2.92,2583,5.305,2589,3.531,2593,6.436,2721,6.436,2742,3.655,2917,3.655,2918,6.708,2919,6.708,2920,6.708,2921,6.708,2922,4.131,2923,4.131,2924,5.803,2925,4.131,2926,4.131,2927,4.131,2928,4.131,2929,4.131,2930,4.131,2931,5.803,2932,4.131,2933,4.131,2934,4.131,2935,4.131,2936,4.131,2937,6.708,2938,4.131,2939,4.131,2940,4.131,2941,4.131,2942,4.131,2943,4.131,2944,4.131,2945,4.131,2946,4.131,2947,4.131,2948,4.131,2949,4.131,2950,4.131,2951,4.131,2952,5.803,2953,5.803,2954,4.131,2955,5.803,2956,4.131,2957,4.131,2958,4.131,2959,4.131,2960,4.131]],["title/classes/UserOnboardingDto.html",[224,0.105,273,3.177]],["body/classes/UserOnboardingDto.html",[7,0.008,27,0.12,28,0.12,29,0.096,36,0.524,40,0.534,45,0.162,109,1.55,154,4.058,223,0.132,224,0.176,232,0.007,233,0.007,240,0.354,251,1.083,273,5.309,298,6.156,316,1.156,358,2.906,383,1.452,385,6.551,395,1.591,437,2.049,443,1.39,480,2.504,529,3.786,532,2.372,538,5.025,540,5.677,543,4.1,546,3.917,1059,3.718,1741,4.318,1829,4.941,2524,7.506,2541,4.941,2543,4.594,2961,7.195,2962,5.405,2963,6.109,2964,6.109,2965,6.109]],["title/classes/UserRepoOptionsDto.html",[224,0.105,2966,3.007]],["body/classes/UserRepoOptionsDto.html",[7,0.008,27,0.115,28,0.115,29,0.092,36,0.583,40,0.503,41,0.91,45,0.126,223,0.126,224,0.137,228,2.69,232,0.007,233,0.007,240,0.338,251,1.205,271,1.097,433,1.403,437,1.96,439,2.185,440,3.047,441,2.635,442,2.488,443,1.352,445,3.683,446,4.098,447,3.89,449,2.355,450,3.333,452,3.277,453,3.277,457,3.047,458,4.098,459,3.452,460,3.277,461,3.157,462,3.277,463,4.684,464,3.409,465,3.89,466,2.946,467,3.277,468,3.409,469,3.277,470,3.409,471,3.81,472,2.946,473,2.764,474,3.277,475,3.277,476,3.409,481,2.332,482,1.708,1262,3.91,2966,4.889,2967,4.726]],["title/classes/UserRepoOptionsDto-1.html",[224,0.088,459,1.621,2966,2.505]],["body/classes/UserRepoOptionsDto-1.html",[7,0.008,27,0.127,28,0.127,29,0.102,36,0.452,40,0.502,45,0.168,154,4.207,223,0.14,224,0.183,228,2.496,232,0.007,233,0.007,240,0.375,251,0.935,271,1.191,276,5.856,316,1.226,383,1.253,437,2.175,443,1.441,480,2.657,527,3.191,529,3.268,532,2.177,540,5.793,543,3.926,783,3.636,1262,5.21,2541,5.243,2659,5.21,2966,5.21,2967,6.298,2968,5.736,2969,8.347,2970,6.483,2971,6.483]],["title/modules/UserReposModule.html",[0,1.102,22,3.007]],["body/modules/UserReposModule.html",[0,1.895,2,2.365,3,3.004,7,0.008,22,6.068,24,3.084,25,2.554,26,2.365,27,0.126,28,0.126,29,0.101,31,2.623,45,0.186,47,0.902,49,2.936,50,1.79,108,3.337,109,1.594,110,4.282,112,5.17,156,1.871,222,3.254,223,0.138,224,0.15,232,0.007,233,0.007,418,3.443,435,3.337,1262,4.282,2972,5.662,2973,5.662,2974,5.662,2975,6.602,2976,6.4,2977,6.4]],["title/injectables/UserReposService.html",[488,0.869,2975,3.177]],["body/injectables/UserReposService.html",[7,0.009,27,0.092,28,0.092,29,0.074,32,1.42,36,0.558,38,1.651,39,0.863,40,0.461,41,0.775,43,1.724,45,0.185,47,0.657,50,1.305,62,1.096,108,2.433,109,0.963,110,5.52,112,4.222,156,1.364,173,1.427,176,2.343,223,0.101,224,0.109,225,1.42,227,1.073,232,0.006,233,0.006,240,0.27,241,2.133,260,2.453,271,1.135,280,2.878,334,4.128,343,2.453,352,1.687,373,2.237,378,1.651,395,1.266,433,1.839,442,2,481,1.862,482,1.364,488,1.22,489,1.603,493,2.24,500,1.912,501,1.724,502,1.862,505,3.862,506,2.617,509,3.317,517,3.122,518,3.122,519,3.41,520,2.722,521,2.722,522,2.722,537,4.879,547,2.971,548,3.774,551,2.617,616,1.965,645,3.413,661,2.141,663,2.433,711,2.207,830,1.603,1058,2.839,1262,5.52,1508,2.079,1516,4.554,1527,4.172,1535,2.971,1541,3.291,1544,3.181,1547,3.729,1593,3.774,1594,4.128,1609,5.378,1618,3.774,2966,5.126,2975,4.46,2978,4.128,2979,7.151,2980,4.666,2981,4.666,2982,6.311,2983,4.666,2984,4.666,2985,4.666,2986,4.666,2987,4.666,2988,4.666,2989,6.311,2990,4.666,2991,4.666,2992,4.666,2993,4.666,2994,4.666]],["title/injectables/UserService.html",[324,2.344,488,0.869]],["body/injectables/UserService.html",[7,0.009,27,0.057,28,0.057,29,0.045,32,1.001,36,0.567,38,1.727,39,0.947,40,0.482,41,0.81,43,1.803,45,0.17,47,0.406,50,0.806,62,0.677,79,2.89,109,1.843,154,3.302,156,0.843,165,3.719,172,1.96,176,2.626,223,0.062,224,0.068,225,1.001,227,0.663,232,0.004,233,0.004,240,0.167,241,2.215,260,2.405,268,2.169,271,1.22,273,4.319,276,2.169,278,2.723,280,1.493,283,2.332,286,4.319,287,4.319,289,4.323,296,4.319,298,3.146,324,2.321,331,2.551,332,2.551,333,2.551,335,2.551,343,2.204,344,4.966,346,3.6,348,1.015,349,1.182,350,2.551,352,1.907,353,3.6,357,5.141,361,2.169,362,3.6,364,2.169,365,2.169,366,2.169,367,2.169,368,2.169,369,1.558,370,2.169,371,2.169,373,2.578,375,5.141,376,5.471,378,1.661,385,3.347,395,1.365,449,0.755,450,1.151,488,0.86,489,0.991,493,1.787,500,1.182,509,2.646,582,1.066,606,3.347,616,2.289,645,2.723,661,2.494,663,2.834,714,1.558,733,1.04,740,1.151,761,2.038,807,1.929,830,0.991,1058,4.247,1139,3.146,1178,2.169,1206,1.929,1255,3.636,1258,2.332,1259,2.551,1424,1.617,1497,4.088,1508,3.109,1516,3.461,1527,3.171,1535,1.836,1541,2.834,1544,2.244,1547,4.242,1803,2.551,2026,2.551,2534,2.551,2535,2.551,2995,2.551,2996,5.435,2997,5.435,2998,5.435,2999,5.435,3000,5.435,3001,5.435,3002,5.435,3003,5.435,3004,5.435,3005,2.884,3006,2.884,3007,4.451,3008,2.884,3009,2.884,3010,2.884,3011,2.884,3012,2.884,3013,6.111,3014,2.884,3015,2.884,3016,2.884,3017,2.884,3018,2.884,3019,2.884,3020,2.884,3021,2.884,3022,2.884,3023,2.884,3024,2.884,3025,2.884,3026,2.884,3027,2.884,3028,2.884,3029,2.884,3030,2.884,3031,2.884,3032,2.884,3033,2.884,3034,2.884,3035,2.884,3036,2.884,3037,2.884,3038,2.884,3039,2.884,3040,2.884,3041,4.451,3042,2.884,3043,2.884,3044,2.884,3045,2.884,3046,2.884,3047,2.884,3048,2.884,3049,6.979,3050,4.451,3051,2.884,3052,2.884,3053,2.884,3054,2.884,3055,2.884,3056,2.551,3057,2.884,3058,2.884,3059,6.979,3060,2.884,3061,2.884,3062,2.884,3063,2.884,3064,2.884,3065,2.884,3066,2.884,3067,2.884,3068,4.451,3069,2.884,3070,2.884,3071,6.111,3072,4.451,3073,2.884,3074,2.884,3075,2.884,3076,2.884]],["title/modules/VoteModule.html",[0,1.102,23,3.177]],["body/modules/VoteModule.html",[0,1.84,2,2.254,3,2.917,7,0.009,15,4.789,23,6.46,24,2.994,25,2.434,26,2.254,27,0.12,28,0.12,29,0.096,31,3.075,45,0.194,47,0.859,49,2.798,50,1.705,75,3.883,77,2.844,78,2.976,83,4.377,84,4.586,156,1.783,222,3.16,223,0.132,224,0.143,232,0.007,233,0.007,236,2.193,418,3.343,433,1.464,435,3.18,2165,6.112,2191,6.212,2192,5.395,3077,5.395,3078,5.395,3079,6.099,3080,5.395,3081,6.099,3082,6.099]],["title/injectables/VoteService.html",[488,0.869,2191,3.007]],["body/injectables/VoteService.html",[7,0.009,27,0.098,28,0.098,29,0.079,32,1.486,36,0.549,38,1.594,39,0.833,40,0.445,41,0.748,43,1.665,45,0.17,47,0.703,50,1.396,62,1.173,83,2.913,84,3.755,156,1.459,176,2.424,223,0.108,224,0.117,225,1.486,227,1.148,232,0.006,233,0.006,240,0.289,241,2.063,260,2.521,271,1.242,280,3.009,343,2.341,373,2.463,378,1.696,433,1.585,488,1.277,489,1.715,493,2.302,497,6.23,500,2.046,509,3.409,645,3.508,661,3.03,663,3.443,711,2.361,830,1.715,1114,3.755,1508,3.296,1541,2.603,1544,3.329,2062,3.443,2063,3.34,2183,5.34,2191,4.418,2217,3.038,2220,3.34,2225,4.205,2228,3.528,3083,4.417,3084,7.399,3085,7.399,3086,4.992,3087,4.992,3088,6.603,3089,4.992,3090,4.992,3091,4.992,3092,4.992,3093,4.992,3094,4.992,3095,4.992,3096,6.603,3097,6.603,3098,6.603,3099,8.412,3100,6.603,3101,4.992,3102,4.992,3103,4.992]],["title/changelog.html",[3104,2.816,3105,3.029,3106,3.313]],["body/changelog.html",[3,1.872,7,0.008,26,0.235,29,0.045,38,0.257,39,0.5,40,0.128,41,0.121,60,1.055,62,0.751,77,0.452,79,0.564,81,0.696,83,1.24,85,1.24,87,1.24,89,1.24,109,1.702,116,0.726,125,3.766,142,1.56,145,1.973,148,2.49,152,1.055,165,0.726,169,3.925,173,1.524,175,0.798,176,1.518,201,1.268,203,1.502,215,0.798,216,1.719,217,1.055,220,2.162,221,0.478,227,0.661,232,0.001,233,0.001,234,1.026,239,3.275,251,0.172,255,2.68,256,3.591,264,1.055,268,0.478,276,2.162,277,1.923,278,3.359,283,0.965,289,1.192,290,1.88,298,1.502,302,2.822,319,3.521,338,1.598,344,0.897,348,1.012,352,0.633,356,1.055,358,0.391,359,3.524,360,2.325,361,0.897,369,0.343,378,0.458,383,0.231,433,1.698,439,1.043,443,1.004,445,1.27,447,0.582,449,0.312,450,0.673,459,0.275,471,2.088,483,0.696,484,1.923,486,0.798,493,0.934,527,3.131,528,0.622,530,2.739,531,0.897,549,0.404,551,1.192,552,0.871,554,0.582,557,0.843,574,0.843,577,2.162,578,0.843,582,1.062,583,5.509,584,4.177,585,1.54,605,0.514,606,1.895,685,1.319,690,0.464,696,1.055,708,1.464,714,0.343,718,1.422,723,4.082,728,1.43,730,1.598,731,1.091,733,2.047,735,1.178,740,0.673,746,1.598,747,0.897,756,3.705,757,3.131,758,2.088,761,1.502,778,2.252,780,1.598,784,1.719,803,0.965,804,1.923,805,1.598,830,0.41,837,0.843,850,2.585,852,0.843,859,2.574,860,5.39,869,3.087,870,0.843,882,4.591,896,0.726,919,0.965,955,0.562,971,0.897,1003,1.055,1039,2.543,1054,1.055,1062,0.965,1080,0.897,1095,1.055,1096,0.514,1114,1.598,1136,3.747,1139,2.259,1149,0.478,1171,1.055,1178,1.598,1245,0.965,1250,0.562,1299,1.422,1307,1.005,1332,1.923,1349,0.562,1369,4.677,1446,4.079,1448,1.88,1455,0.965,1465,1.88,1482,0.897,1487,4.312,1492,1.24,1575,1.598,1663,2.83,1666,2.83,1691,1.055,1696,2.543,1728,1.88,1737,0.897,1750,1.598,1751,1.353,1863,0.387,1902,1.191,1921,1.491,1950,1.88,1973,0.478,1976,0.478,2017,0.965,2070,0.965,2122,0.514,2147,1.055,2157,0.965,2183,0.965,2275,5.124,2347,1.055,2382,0.514,2427,0.965,2434,1.502,2503,0.843,2508,1.88,2629,1.491,2659,6.068,2750,3.087,2809,2.543,2912,1.055,3056,1.88,3104,0.478,3106,1.491,3107,1.055,3108,1.686,3109,3.758,3110,1.491,3111,1.686,3112,4.1,3113,5.9,3114,2.519,3115,4.23,3116,2.125,3117,4.982,3118,4.982,3119,2.543,3120,2.125,3121,2.125,3122,2.125,3123,2.125,3124,2.125,3125,2.125,3126,6.671,3127,6.97,3128,2.875,3129,2.875,3130,3.928,3131,2.875,3132,2.875,3133,2.875,3134,3.197,3135,2.875,3136,8.408,3137,2.875,3138,1.686,3139,2.875,3140,2.125,3141,6.522,3142,6.73,3143,1.88,3144,1.193,3145,1.193,3146,1.193,3147,1.193,3148,1.193,3149,1.055,3150,1.193,3151,1.193,3152,8.233,3153,8.765,3154,2.875,3155,2.125,3156,6.97,3157,2.125,3158,7.221,3159,1.193,3160,1.193,3161,1.193,3162,2.519,3163,2.125,3164,1.193,3165,1.193,3166,2.125,3167,2.125,3168,2.875,3169,2.125,3170,2.875,3171,2.125,3172,2.519,3173,2.519,3174,8.296,3175,2.543,3176,2.875,3177,6.664,3178,1.193,3179,3.758,3180,1.719,3181,2.125,3182,3.928,3183,2.875,3184,3.49,3185,2.875,3186,2.875,3187,2.875,3188,2.875,3189,2.125,3190,2.125,3191,1.193,3192,1.193,3193,2.125,3194,1.193,3195,2.828,3196,2.875,3197,2.875,3198,1.193,3199,1.193,3200,1.193,3201,4.982,3202,3.49,3203,2.125,3204,2.875,3205,2.125,3206,1.686,3207,1.686,3208,1.686,3209,1.686,3210,1.686,3211,1.686,3212,1.193,3213,2.875,3214,1.193,3215,2.125,3216,4.004,3217,1.193,3218,1.686,3219,1.193,3220,0.843,3221,1.193,3222,1.193,3223,1.193,3224,1.193,3225,1.193,3226,1.193,3227,1.193,3228,1.193,3229,1.193,3230,2.125,3231,2.519,3232,3.758,3233,5.139,3234,6.664,3235,2.125,3236,2.519,3237,6.594,3238,3.197,3239,1.686,3240,3.758,3241,4.677,3242,1.686,3243,5.676,3244,1.193,3245,1.055,3246,1.193,3247,1.193,3248,1.193,3249,1.193,3250,1.491,3251,0.635,3252,4.1,3253,1.193,3254,1.193,3255,2.125,3256,1.193,3257,1.193,3258,0.635,3259,2.125,3260,2.519,3261,1.193,3262,1.193,3263,1.88,3264,1.193,3265,1.193,3266,1.193,3267,1.193,3268,1.193,3269,1.193,3270,1.193,3271,2.875,3272,2.125,3273,0.635,3274,0.635,3275,0.635,3276,1.193,3277,0.635,3278,1.193,3279,0.635,3280,0.635,3281,1.193,3282,2.875,3283,1.193,3284,1.193,3285,1.193,3286,0.635,3287,4.408,3288,1.686,3289,0.635,3290,0.635,3291,2.125,3292,2.519,3293,0.635,3294,0.635,3295,1.193,3296,1.193,3297,1.193,3298,1.193,3299,1.193,3300,1.193,3301,0.635,3302,0.635,3303,0.635,3304,0.635,3305,2.125,3306,3.758,3307,2.875,3308,3.542,3309,3.197,3310,2.519,3311,2.519,3312,2.519,3313,2.519,3314,5.424,3315,2.519,3316,2.519,3317,2.519,3318,2.519,3319,2.229,3320,2.543,3321,2.519,3322,2.519,3323,2.519,3324,3.197,3325,4.634,3326,2.519,3327,3.197,3328,2.519,3329,2.125,3330,2.125,3331,2.125,3332,2.125,3333,2.125,3334,2.125,3335,2.125,3336,2.125,3337,2.125,3338,1.686,3339,1.686,3340,2.125,3341,2.125,3342,3.087,3343,2.125,3344,2.125,3345,2.125,3346,2.125,3347,2.125,3348,2.125,3349,4.634,3350,4.634,3351,2.519,3352,2.519,3353,1.193,3354,1.193,3355,2.125,3356,2.125,3357,1.193,3358,1.193,3359,2.125,3360,2.125,3361,2.125,3362,2.125,3363,3.087,3364,2.519,3365,4.259,3366,2.519,3367,2.125,3368,1.193,3369,1.193,3370,1.193,3371,1.193,3372,1.686,3373,1.491,3374,1.193,3375,1.193,3376,4.634,3377,0.635,3378,4.982,3379,4.004,3380,0.635,3381,0.635,3382,7.024,3383,0.635,3384,0.635,3385,1.193,3386,3.197,3387,1.193,3388,1.193,3389,4.814,3390,2.125,3391,2.519,3392,2.125,3393,4.44,3394,3.49,3395,2.125,3396,2.875,3397,4.44,3398,2.125,3399,2.125,3400,2.125,3401,4.634,3402,2.543,3403,2.125,3404,2.125,3405,2.125,3406,1.193,3407,1.193,3408,4.177,3409,1.193,3410,0.635,3411,1.193,3412,1.686,3413,0.635,3414,0.635,3415,0.635,3416,1.686,3417,2.875,3418,1.193,3419,1.193,3420,1.193,3421,1.193,3422,0.635,3423,1.193,3424,3.49,3425,1.88,3426,1.193,3427,1.193,3428,1.193,3429,1.193,3430,2.519,3431,1.193,3432,1.193,3433,1.193,3434,4.004,3435,1.193,3436,1.193,3437,1.193,3438,1.193,3439,1.193,3440,1.193,3441,1.193,3442,1.055,3443,1.193,3444,1.686,3445,1.686,3446,1.193,3447,1.193,3448,1.193,3449,1.193,3450,1.193,3451,1.193,3452,2.125,3453,1.193,3454,1.193,3455,1.193,3456,1.193,3457,1.193,3458,1.193,3459,1.193,3460,1.193,3461,1.193,3462,2.125,3463,1.193,3464,1.193,3465,1.193,3466,1.193,3467,0.635,3468,1.686,3469,4.814,3470,2.125,3471,1.193,3472,1.193,3473,1.193,3474,1.193,3475,1.193,3476,1.193,3477,3.49,3478,1.193,3479,1.193,3480,1.193,3481,1.193,3482,1.193,3483,1.193,3484,3.325,3485,1.193,3486,1.193,3487,1.055,3488,1.193,3489,1.193,3490,1.193,3491,1.193,3492,1.686,3493,4.177,3494,1.193,3495,1.88,3496,1.193,3497,1.193,3498,1.193,3499,1.193,3500,1.193,3501,1.193,3502,0.635,3503,2.125,3504,1.193,3505,1.193,3506,1.193,3507,1.193,3508,1.193,3509,1.193,3510,1.193,3511,1.193,3512,1.193,3513,2.519,3514,1.193,3515,1.193,3516,3.542,3517,1.193,3518,1.193,3519,1.193,3520,2.125,3521,1.193,3522,1.193,3523,1.193,3524,1.193,3525,1.193,3526,1.193,3527,1.193,3528,1.686,3529,2.229,3530,1.193,3531,1.193,3532,1.491,3533,1.193,3534,3.49,3535,1.193,3536,0.635,3537,1.055,3538,1.193,3539,1.193,3540,2.125,3541,1.193,3542,1.193,3543,2.875,3544,1.193,3545,1.055,3546,1.193,3547,1.193,3548,1.193,3549,1.193,3550,1.193,3551,1.193,3552,1.193,3553,1.055,3554,2.125,3555,1.193,3556,1.491,3557,2.125,3558,1.193,3559,1.193,3560,1.193,3561,1.193,3562,1.193,3563,1.193,3564,1.193,3565,5.676,3566,2.519,3567,3.197,3568,2.519,3569,1.193,3570,1.193,3571,0.965,3572,1.193,3573,1.193,3574,1.193,3575,1.193,3576,1.193,3577,1.193,3578,1.193,3579,1.193,3580,1.193,3581,1.193,3582,1.193,3583,1.193,3584,1.193,3585,1.193,3586,1.193,3587,1.193,3588,1.193,3589,1.193,3590,1.193,3591,1.193,3592,2.875,3593,1.193,3594,1.193,3595,1.193,3596,1.193,3597,1.193,3598,1.193,3599,1.193,3600,1.055,3601,2.125,3602,1.193,3603,1.686,3604,1.686,3605,1.193,3606,1.193,3607,1.055,3608,1.193,3609,1.193,3610,1.193,3611,1.193,3612,2.125,3613,1.193,3614,1.193,3615,1.193,3616,1.193,3617,1.193,3618,1.193,3619,1.193,3620,1.686,3621,1.193,3622,1.193,3623,1.193,3624,1.193,3625,1.193,3626,1.193,3627,5.139,3628,1.193,3629,1.193,3630,1.193,3631,1.193,3632,1.193,3633,1.193,3634,1.193,3635,1.193,3636,1.193,3637,1.193,3638,1.193,3639,1.193,3640,1.193,3641,1.193,3642,2.875,3643,0.965,3644,1.193,3645,1.193,3646,1.88,3647,1.193,3648,1.193,3649,1.88,3650,1.193,3651,1.193,3652,1.193,3653,1.193,3654,1.193,3655,1.193,3656,1.193,3657,2.519,3658,1.193,3659,1.193,3660,1.193,3661,1.193,3662,1.193,3663,1.193,3664,1.193,3665,1.686,3666,2.125,3667,1.193,3668,0.635,3669,0.635,3670,0.635,3671,0.635,3672,0.635,3673,0.635,3674,0.635,3675,0.635,3676,0.635,3677,0.635,3678,0.635,3679,0.635,3680,0.635,3681,0.635,3682,2.875,3683,1.88,3684,2.125,3685,1.193,3686,1.193,3687,1.193,3688,1.193,3689,1.193,3690,1.193,3691,1.193,3692,2.875,3693,1.193,3694,1.193,3695,0.635,3696,0.635,3697,0.635,3698,3.743,3699,0.635,3700,0.635,3701,0.635,3702,0.635,3703,0.635,3704,0.635,3705,2.828,3706,0.635,3707,0.635,3708,0.635,3709,0.635,3710,0.965,3711,0.635,3712,0.635,3713,0.635,3714,0.635,3715,0.635,3716,0.635,3717,0.635,3718,0.635,3719,0.562,3720,1.055,3721,0.635,3722,0.635,3723,0.635,3724,0.635,3725,3.325,3726,0.635,3727,0.635,3728,0.635,3729,0.562,3730,0.635,3731,0.635,3732,0.562,3733,0.562,3734,0.635,3735,0.635,3736,0.635,3737,0.635,3738,0.635,3739,0.635,3740,0.635,3741,0.635,3742,3.087,3743,0.635,3744,0.635,3745,0.635,3746,0.635,3747,1.193,3748,0.635,3749,0.635,3750,0.635,3751,0.635,3752,0.635,3753,0.635,3754,0.635,3755,1.193,3756,0.514,3757,0.635,3758,0.635,3759,0.635,3760,0.635,3761,0.635,3762,0.635,3763,0.635,3764,0.635,3765,0.635,3766,0.635,3767,0.635,3768,0.635,3769,0.635,3770,0.635,3771,0.635,3772,0.635,3773,0.635,3774,0.635,3775,0.635,3776,0.635,3777,0.635,3778,0.635,3779,1.491,3780,0.635,3781,0.635,3782,0.635,3783,0.635,3784,0.635,3785,0.635,3786,0.635,3787,0.635,3788,0.635,3789,0.635,3790,0.635,3791,0.635,3792,0.635,3793,0.635,3794,1.686,3795,0.635,3796,0.635,3797,0.635,3798,0.635,3799,0.635,3800,0.635,3801,0.635,3802,0.635,3803,0.635,3804,0.514,3805,0.635,3806,0.635,3807,0.635,3808,0.635,3809,0.635,3810,0.635,3811,0.635,3812,0.635,3813,0.635,3814,1.193,3815,0.635,3816,1.055,3817,0.635,3818,0.635,3819,0.635,3820,1.193,3821,1.193,3822,1.193,3823,1.193,3824,0.635,3825,1.686,3826,0.635,3827,0.635,3828,1.193,3829,0.635,3830,0.635,3831,0.635,3832,0.635,3833,0.635,3834,0.635,3835,0.635,3836,0.635,3837,0.635,3838,0.635,3839,0.635,3840,0.635,3841,1.193,3842,0.635,3843,0.635,3844,0.635,3845,0.635,3846,0.562,3847,0.635,3848,0.635,3849,0.635,3850,0.635,3851,0.635,3852,0.635,3853,0.635,3854,0.635,3855,0.635,3856,0.635,3857,0.635,3858,0.635,3859,0.635,3860,0.635,3861,0.635,3862,0.635,3863,0.635,3864,0.635,3865,0.635,3866,0.562,3867,0.635,3868,0.635,3869,0.635,3870,0.635,3871,0.635,3872,0.635,3873,0.635,3874,0.635,3875,0.635,3876,0.635,3877,0.635]],["title/coverage.html",[3878,4.976]],["body/coverage.html",[7,0.009,29,0.045,40,0.17,69,2.283,70,2.283,71,2.283,72,2.283,73,2.283,77,1.07,79,1.335,81,1.647,83,1.647,85,1.647,87,1.647,89,1.647,98,2.123,101,2.123,104,1.583,106,1.798,109,1.247,110,2.929,112,1.889,113,1.889,121,1.889,123,1.889,126,3.263,128,1.718,129,3.094,131,1.525,135,1.798,137,1.798,139,1.718,141,1.583,142,2.136,144,1.798,145,2.198,147,1.995,148,1.583,149,1.798,176,0.925,224,0.21,232,0.004,233,0.004,234,2.211,235,2.123,237,2.498,239,1.995,273,1.995,280,0.947,286,1.995,287,1.995,289,1.583,296,1.995,317,1.295,321,2.123,324,1.472,326,1.798,328,1.798,360,2.283,416,1.995,428,1.889,430,2.123,433,0.678,436,1.995,438,2.283,439,1.807,440,4.082,442,0.789,488,1.722,490,2.498,501,1.043,505,1.423,523,1.995,524,3.541,525,3.541,530,2.536,537,1.798,555,2.123,556,3.541,563,2.123,564,2.498,565,2.498,571,1.995,572,2.498,573,2.498,600,1.995,601,2.498,602,2.498,612,1.889,643,2.498,666,2.498,667,3.541,708,2.105,709,2.498,714,5.15,742,1.127,789,2.498,797,2.498,827,2.498,862,3.541,863,2.498,893,4.271,906,2.498,915,4.037,916,2.498,947,2.498,1061,2.498,1079,2.498,1094,2.498,1113,2.498,1128,3.293,1129,2.498,1176,4.21,1177,2.498,1212,2.498,1236,2.123,1237,2.498,1239,2.498,1255,1.889,1262,4.043,1269,2.498,1294,2.123,1295,2.498,1305,1.378,1307,1.335,1309,1.889,1320,2.498,1330,1.889,1331,2.498,1347,2.123,1348,2.498,1396,2.123,1397,2.498,1408,1.995,1425,1.718,1443,2.498,1445,2.498,1456,2.283,1472,2.123,1473,2.498,1490,1.995,1500,1.647,1510,1.798,1511,3.541,1512,2.498,1564,2.283,1565,3.293,1579,1.889,1580,1.889,1581,2.498,1601,2.123,1602,2.123,1607,2.498,1650,2.498,1665,2.498,1666,1.995,1680,4.033,1681,2.498,1686,2.123,1708,2.123,1710,2.498,1729,2.123,1730,2.498,1747,1.995,1754,1.798,1757,1.889,1771,2.498,1775,1.647,1815,2.283,1831,2.498,1857,2.498,1858,2.498,1871,1.423,1884,2.123,1885,2.498,1888,1.583,1892,1.995,1902,1.995,1910,2.283,1912,2.498,1948,3.79,1949,2.498,1981,2.498,2048,2.123,2049,2.498,2050,2.498,2081,1.889,2091,2.123,2092,2.498,2093,2.498,2118,1.889,2129,2.123,2130,2.498,2131,2.498,2155,1.889,2165,2.123,2166,2.498,2167,2.498,2191,1.889,2206,2.498,2236,2.498,2261,2.498,2294,1.889,2298,2.498,2312,1.995,2313,4.033,2316,3.541,2317,3.541,2329,2.283,2331,2.283,2404,2.498,2425,2.498,2426,2.498,2468,2.498,2471,2.498,2496,3.541,2500,2.123,2506,4.033,2507,2.498,2533,2.498,2540,2.498,2544,2.123,2545,2.498,2582,1.889,2583,4.406,2584,2.498,2589,1.718,2617,2.123,2618,2.498,2644,2.123,2645,2.498,2706,2.498,2795,3.541,2796,2.498,2854,2.498,2904,2.123,2908,2.498,2917,2.498,2961,2.498,2962,2.498,2966,2.929,2967,3.541,2968,2.498,2975,1.995,2978,2.498,2995,2.498,3083,2.498,3442,2.498,3493,2.123,3537,2.498,3720,7.255,3878,2.283,3879,2.823,3880,6.919,3881,2.823,3882,7.97,3883,9.142,3884,8.093,3885,3.541,3886,2.498,3887,2.498,3888,6.042,3889,8.201,3890,2.823,3891,4.378,3892,2.498,3893,2.498,3894,2.498,3895,3.873,3896,2.498,3897,2.498,3898,3.873,3899,2.498,3900,2.498,3901,7.97,3902,7.218,3903,2.498,3904,2.498,3905,4.378,3906,2.823,3907,2.498,3908,2.283,3909,2.823,3910,2.823,3911,2.823,3912,2.823]],["title/miscellaneous/enumerations.html",[3913,2.279,3914,4.787]],["body/miscellaneous/enumerations.html",[7,0.009,39,0.75,145,3.052,148,3.735,232,0.006,233,0.006,240,0.293,348,2.971,349,3.46,438,4.09,439,2.612,440,4.652,448,5.386,450,3.797,454,4.707,465,3.25,484,4.456,485,5.386,486,4.456,527,2.729,552,2.729,815,4.09,825,4.241,915,2.951,954,5.386,963,5.386,1048,5.386,1059,4.052,1164,4.707,1176,3.077,1255,4.456,1261,5.892,1271,4.707,1329,5.386,1335,4.052,1565,3.803,1571,6.4,1572,5.386,1573,5.386,1574,5.008,1575,5.008,1576,5.386,1577,5.386,1578,5.386,1639,5.008,1815,4.09,1818,5.892,1824,5.892,1948,3.574,1967,5.892,1968,5.892,1969,5.008,1970,5.892,1971,5.892,1972,5.386,1973,5.008,1974,5.386,1975,5.386,1976,5.008,3908,5.386,3913,3.077,3914,4.474,3915,5.057,3916,5.057,3917,5.057,3918,6.66,3919,6.66,3920,6.66,3921,4.474,3922,5.057,3923,4.474]],["title/miscellaneous/functions.html",[3913,2.279,3924,4.787]],["body/miscellaneous/functions.html",[7,0.007,232,0.007,233,0.007,240,0.421,3903,6.44,3904,7.748,3913,4.43,3924,6.44,3925,7.28]],["title/index.html",[240,0.217,3104,2.816,3105,3.029]],["body/index.html",[7,0.008,26,1.677,28,0.089,29,0.098,125,3.346,145,2.538,163,3.671,169,3.208,220,3.413,221,5.696,232,0.006,233,0.006,338,1.811,359,3.769,433,1.487,449,1.621,450,1.811,493,1.811,549,2.89,552,3.432,554,3.696,730,3.413,747,3.413,804,3.037,805,5.302,852,3.208,859,2.762,860,5.702,896,2.762,971,4.658,984,3.671,1153,3.671,1446,5.302,1449,3.413,1668,3.037,1712,4.015,2284,4.015,2434,4.377,2543,3.413,2608,5.962,2659,4.144,3107,4.015,3110,6.701,3119,4.015,3126,6.701,3143,4.015,3175,5.479,3180,3.671,3182,6.238,3195,7.649,3220,3.208,3245,4.015,3263,4.015,3287,6.701,3308,4.015,3319,4.015,3320,4.015,3363,4.015,3373,4.015,3408,3.413,3484,4.015,3487,5.479,3493,3.413,3495,5.479,3516,4.015,3532,4.015,3545,4.015,3553,4.015,3556,4.015,3571,6.126,3643,3.671,3646,4.015,3649,6.701,3683,5.479,3698,4.015,3705,6.701,3725,7.014,3732,4.015,3733,8.047,3742,5.479,3756,3.671,3779,5.479,3804,5.702,3846,4.015,3866,4.015,3878,3.671,3926,4.539,3927,4.539,3928,5.479,3929,4.539,3930,4.539,3931,6.193,3932,4.015,3933,4.539,3934,4.539,3935,4.539,3936,4.539,3937,4.539,3938,4.539,3939,4.539,3940,4.539,3941,4.539,3942,4.539,3943,4.539,3944,4.539,3945,4.539,3946,4.539,3947,4.015,3948,4.015,3949,6.193,3950,4.539,3951,4.539,3952,4.015,3953,4.015,3954,4.539,3955,4.539,3956,7.928,3957,4.539,3958,4.539,3959,6.193,3960,4.539,3961,4.539,3962,4.539,3963,4.539,3964,4.539,3965,4.539,3966,4.539,3967,4.539,3968,6.193,3969,4.539,3970,4.539,3971,6.193,3972,4.539,3973,4.539,3974,4.539,3975,4.539,3976,4.539,3977,4.539,3978,4.539,3979,6.193,3980,4.539,3981,6.193,3982,6.193,3983,4.539,3984,4.539,3985,4.539,3986,4.539,3987,4.539,3988,4.539,3989,4.539,3990,4.539,3991,4.539,3992,4.539,3993,4.539,3994,4.539,3995,6.193,3996,6.193,3997,4.539,3998,4.539,3999,4.539,4000,4.539,4001,4.539,4002,6.193,4003,4.539,4004,4.539,4005,4.539,4006,4.539,4007,4.539,4008,4.539,4009,4.539,4010,4.539,4011,4.539,4012,4.539,4013,4.539,4014,4.539,4015,4.539,4016,4.539,4017,6.193,4018,4.539,4019,4.539,4020,4.539,4021,4.539,4022,4.539,4023,3.671]],["title/license.html",[3104,2.816,3105,3.029,3220,2.647]],["body/license.html",[7,0.007,26,2.286,232,0.007,233,0.007,552,2.535,554,3.018,583,4.138,735,3.351,746,4.651,984,5.002,1190,5.002,1282,5.002,1446,5.691,1455,5.002,1918,5.002,2382,5.002,2608,4.651,3149,5.472,3180,6.121,3220,4.371,3493,4.651,3756,6.121,3932,8.105,4023,5.002,4024,8.178,4025,6.185,4026,7.568,4027,6.185,4028,6.185,4029,6.185,4030,6.185,4031,6.185,4032,6.185,4033,6.185,4034,6.185,4035,6.185,4036,6.185,4037,6.185,4038,6.185,4039,6.185,4040,6.185,4041,6.185,4042,6.185,4043,6.185,4044,7.568,4045,6.185,4046,6.185,4047,6.185,4048,6.185,4049,6.185,4050,6.185,4051,7.568,4052,7.568,4053,6.185,4054,6.185,4055,6.185,4056,6.185,4057,6.185,4058,6.185,4059,6.185,4060,6.185,4061,6.185,4062,6.185,4063,6.185,4064,6.185,4065,6.185,4066,6.185,4067,6.185,4068,6.185,4069,6.185,4070,6.185,4071,6.185,4072,6.185,4073,6.185,4074,6.185,4075,6.185,4076,6.185]],["title/modules.html",[2,2.274]],["body/modules.html",[1,4.555,2,2.238,6,4.28,7,0.007,8,4.28,9,3.856,10,4.28,11,4.28,12,4.28,13,4.28,14,4.052,15,3.272,16,4.28,17,4.28,18,4.052,19,4.28,20,4.28,21,3.533,22,4.052,23,4.28,232,0.007,233,0.007,415,4.052,1642,4.555,1811,4.052,3342,8.369,4077,9.459,4078,9.459,4079,9.473,4080,5.358,4081,6.056]],["title/overview.html",[4082,5.443]],["body/overview.html",[1,6.973,2,1.265,3,1.97,4,3.028,5,3.028,6,6.214,7,0.009,8,5.597,9,5.042,10,5.03,11,4.263,12,5.03,13,6.032,14,5.584,15,4.653,16,5.597,17,5.597,18,5.16,19,5.97,20,5.597,21,5.323,22,5.16,23,5.597,24,2.022,25,1.366,26,1.265,173,1.047,232,0.005,233,0.005,236,1.001,317,3.538,324,4.022,326,4.911,328,4.911,411,3.028,412,3.028,413,3.028,414,3.028,415,5.16,416,5.451,424,3.028,425,3.028,427,3.028,428,5.16,437,1.148,459,1.482,489,1.176,585,1.403,600,5.451,612,4.036,637,3.028,638,3.028,639,3.028,1309,4.036,1316,3.028,1317,3.028,1425,4.693,1500,4.499,1510,3.841,1580,5.16,1596,3.028,1597,3.028,1599,3.028,1642,5.8,1643,3.028,1644,3.028,1645,3.028,1708,2.574,1754,4.911,1757,4.036,1775,4.62,1807,3.028,1808,3.028,1809,3.028,1810,3.028,1811,5.16,1871,4.148,1907,3.028,1908,3.028,1909,3.028,1957,3.028,1958,3.028,1960,3.028,2081,5.16,2118,5.16,2155,5.16,2191,5.16,2200,3.028,2201,3.028,2203,3.028,2230,3.028,2231,3.028,2233,3.028,2256,3.028,2257,3.028,2258,3.028,2291,3.028,2292,3.028,2293,3.028,2294,5.16,2309,3.028,2311,3.028,2312,4.713,2398,3.028,2400,3.028,2401,3.028,2582,5.16,2589,3.671,2899,3.028,2901,3.028,2902,3.028,2972,3.028,2973,3.028,2974,3.028,2975,5.451,3077,3.028,3078,3.028,3080,3.028,3241,3.028,3250,3.028,3425,3.028,3529,3.028,4082,3.028]],["title/properties.html",[443,1.001,3130,3.313]],["body/properties.html",[7,0.008,59,5.073,232,0.007,233,0.007,319,4.768,383,1.304,443,1.248,493,1.972,552,3.268,554,3.891,763,7.054,786,5.456,979,5.968,1487,4.768,3112,5.968,3220,4.768,3408,5.073,3607,5.968,3719,5.968,3816,5.968,4023,5.456,4080,5.968,4083,6.746,4084,6.746,4085,6.746,4086,6.746,4087,6.746,4088,6.746,4089,6.746,4090,6.746,4091,6.746,4092,6.746,4093,6.746,4094,6.746,4095,6.746,4096,6.746,4097,6.746,4098,6.746]],["title/miscellaneous/typealiases.html",[3913,2.279,4099,5.411]],["body/miscellaneous/typealiases.html",[7,0.007,40,0.438,232,0.007,233,0.007,240,0.421,3885,5.888,3913,4.43,4100,7.28,4101,8.335,4102,6.44]],["title/miscellaneous/variables.html",[3710,4.376,3913,2.279]],["body/miscellaneous/variables.html",[7,0.009,27,0.077,40,0.237,69,4.535,70,4.535,71,4.535,72,4.535,73,4.535,109,1.157,145,2.298,161,5.779,163,5.283,165,3.412,167,4.961,169,3.963,176,2.14,182,4.961,215,3.752,232,0.005,233,0.005,240,0.228,271,0.771,280,1.881,313,1.613,343,2.035,378,1.408,383,0.761,395,1.157,443,0.728,449,2.292,450,3.493,538,2.633,576,3.145,584,2.96,605,3.183,616,2.361,733,2.821,778,2.54,825,2.506,1028,4.961,1153,3.183,1176,2.395,1255,3.752,1271,2.782,1282,4.535,1305,2.736,1307,2.652,1456,4.535,1459,3.482,1663,2.782,1668,3.752,1690,3.482,2313,4.217,2316,3.183,2317,4.535,2329,4.535,2331,4.535,2332,3.183,2333,3.482,2334,3.482,2335,3.482,2336,3.482,2380,3.482,2434,2.782,2503,2.782,3252,3.482,3365,4.961,3402,3.482,3408,4.217,3571,3.183,3600,3.482,3643,3.183,3710,3.183,3729,3.482,3804,3.183,3885,3.183,3886,3.482,3887,4.961,3892,3.482,3893,4.961,3894,3.482,3895,4.961,3896,4.961,3897,4.961,3898,3.482,3899,5.779,3900,3.482,3907,3.482,3908,4.535,3913,2.395,3921,3.482,3923,3.482,3928,3.482,3947,3.482,3948,4.961,3952,3.482,3953,3.482,4102,4.961,4103,3.936,4104,3.936,4105,3.936,4106,5.607,4107,5.607,4108,3.936,4109,3.936,4110,3.936,4111,3.936,4112,3.936,4113,3.936,4114,3.936,4115,3.936,4116,3.936,4117,3.936,4118,3.936,4119,3.936,4120,3.936,4121,3.936,4122,8.05,4123,3.936,4124,3.936,4125,3.936,4126,3.936,4127,3.936,4128,3.936,4129,3.936,4130,3.936,4131,3.936,4132,3.936,4133,3.936,4134,3.936,4135,3.936,4136,3.936,4137,3.936,4138,3.936,4139,3.936,4140,3.936,4141,5.607,4142,3.936,4143,5.607,4144,3.936,4145,3.936,4146,5.607,4147,3.936,4148,5.607,4149,3.936,4150,5.607,4151,3.936,4152,5.607,4153,5.607,4154,3.936,4155,3.936,4156,5.607,4157,3.936,4158,3.936,4159,3.936,4160,3.936,4161,3.936,4162,3.936,4163,3.936,4164,3.936,4165,3.936,4166,3.936,4167,3.936,4168,3.936,4169,3.936,4170,3.936,4171,3.936,4172,3.936,4173,5.607,4174,3.936,4175,3.936,4176,3.936,4177,3.936,4178,3.936,4179,3.936,4180,3.936,4181,3.936,4182,3.936,4183,3.936,4184,3.936,4185,3.936,4186,3.936,4187,3.936,4188,3.936,4189,3.936,4190,3.936,4191,3.936,4192,3.936,4193,3.936,4194,5.607,4195,5.607,4196,5.607,4197,5.607,4198,3.936,4199,3.936]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":714,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":3947,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["0.7",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3905,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":3911,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3880,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":3539,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":584,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01301c9",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["01t00:30:00z",{"_index":4192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":3551,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":882,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["04082d7",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":757,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["0848443",{"_index":3792,"title":{},"body":{"changelog.html":{}}}],["08f1679",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":3595,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1010,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":940,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":459,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":3862,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3859,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":3857,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3853,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3536,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":3528,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":3520,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":3502,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3850,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3844,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["1.32.0",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["1.33.0",{"_index":3112,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.4.0",{"_index":3840,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":3837,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":3835,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3810,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":3806,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":3778,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":3774,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":3771,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":3768,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":3763,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":3761,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":3754,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":3752,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":3803,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":3801,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":3798,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":3796,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":3793,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":3789,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":3786,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":3783,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3749,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":3745,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":3701,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":3697,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":3695,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":3728,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":3724,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":3722,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":3718,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":3715,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":3712,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":3709,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":3704,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3565,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":733,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":825,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":812,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":461,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["10000",{"_index":4156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1044,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1000,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@column({type",{"_index":972,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":462,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":2275,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["115",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":781,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":743,"title":{},"body":{"entities/DbContribution.html":{}}}],["1225197",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["124",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["127.0.0.1",{"_index":3946,"title":{},"body":{"index.html":{}}}],["128",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["135",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":599,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":748,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":734,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":833,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":853,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":586,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["14",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["147",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":3616,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":784,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["151",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["154",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["155",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":3561,"title":{},"body":{"changelog.html":{}}}],["157",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["158",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["159",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":724,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":3832,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":3591,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":3688,"title":{},"body":{"changelog.html":{}}}],["17d7725",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":585,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"overview.html":{}}}],["196",{"_index":1076,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1065,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1bbeaf6",{"_index":3653,"title":{},"body":{"changelog.html":{}}}],["1c3378e",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":3564,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":806,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":469,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":1739,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["2/3",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":869,"title":{},"body":{"entities/DbInsightMember.html":{},"changelog.html":{}}}],["200",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":732,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":756,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["2023",{"_index":583,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"license.html":{}}}],["20491d8",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["2073883",{"_index":3549,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":3714,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":3723,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3241,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["22",{"_index":3425,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["22:04:29.000000",{"_index":785,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":989,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":992,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":759,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:39.000000",{"_index":945,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":931,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":3807,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["234343",{"_index":1956,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":1953,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":795,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":876,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["237133})@column('bigint",{"_index":1204,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":857,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":790,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":835,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["23b2a83",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":3615,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":850,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["25060",{"_index":4146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":719,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{}}}],["26",{"_index":3250,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["27",{"_index":3529,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["272c09a",{"_index":3877,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":3856,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":758,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["286e864",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":946,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":923,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28f6699",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["293c4d3",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":3585,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":3613,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":3869,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":3767,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["2ee076b",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":3606,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":471,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["3000",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":3953,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":474,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["31e4d60",{"_index":3708,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":3530,"title":{},"body":{"changelog.html":{}}}],["3282435",{"_index":3621,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":3587,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":3802,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":3858,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":3512,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":3628,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":3826,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["3d2b7eb",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":1468,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":3498,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":1174,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1169,"title":{},"body":{"entities/DbSubscription.html":{}}}],["426820139",{"_index":2971,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["43",{"_index":3501,"title":{},"body":{"changelog.html":{}}}],["43311",{"_index":1260,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["43311})@column({type",{"_index":1243,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["436f2db",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1006,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["4552c66",{"_index":3691,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":3541,"title":{},"body":{"changelog.html":{}}}],["475e5dd",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["47dc78b",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":796,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":792,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["4b264d5",{"_index":3544,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":3550,"title":{},"body":{"changelog.html":{}}}],["4deaadd",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1059,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":2964,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":2525,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":457,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1465,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5238f58",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["5385049",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["544673a",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":3531,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["58",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":3870,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":3611,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":3581,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":3865,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":3734,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":3823,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":986,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":3839,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":1769,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1046,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1021,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":3619,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":3834,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":3694,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":3446,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":3847,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":3511,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":3738,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["64d869f",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":3442,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["672ea80",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":3703,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":3519,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":3711,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["6fa4a7d",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3822,"title":{},"body":{"changelog.html":{}}}],["70a6e7b",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":783,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796})@column",{"_index":1069,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["71359796})@column({type",{"_index":754,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn({type",{"_index":933,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["72",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["7338f09",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":3861,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":3515,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":3782,"title":{},"body":{"changelog.html":{}}}],["797",{"_index":550,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":3731,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":3717,"title":{},"body":{"changelog.html":{}}}],["7c846ec",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":3873,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["7e29c6e",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":3773,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":3809,"title":{},"body":{"changelog.html":{}}}],["8080:3001",{"_index":3982,"title":{},"body":{"index.html":{}}}],["80a866f",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["81",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":3819,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["83fe57d",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":3555,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":3748,"title":{},"body":{"changelog.html":{}}}],["88e08d2",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["88e0adc",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":3805,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":1728,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":475,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":3780,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":3785,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":3570,"title":{},"body":{"changelog.html":{}}}],["971adeb",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["9bee970",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["9fc3be7",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":4195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_stripe",{"_index":2262,"title":{},"body":{"injectables/StripeService.html":{}}}],["a057e0e",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["a08abfd",{"_index":3614,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":3827,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":3497,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":3730,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":3696,"title":{},"body":{"changelog.html":{}}}],["abb24de",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":3503,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":4050,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":3845,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":3843,"title":{},"body":{"changelog.html":{}}}],["accepted",{"_index":922,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":917,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":2848,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":864,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":3781,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":1711,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{}}}],["accessroles",{"_index":1530,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["action",{"_index":3149,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["active",{"_index":1164,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1163,"title":{},"body":{"entities/DbSubscription.html":{}}}],["adapter",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":2659,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"index.html":{}}}],["addcustomer",{"_index":644,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":2266,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":651,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":971,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addgroupby(\"emoji_id",{"_index":2787,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":2664,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":2647,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":2654,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":1608,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":1615,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":2648,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":2662,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":2856,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":1513,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":2800,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":1523,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":1582,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":1587,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":948,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":2802,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":514,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":516,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":1846,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":2042,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":2047,"title":{},"body":{"injectables/RepoService.html":{}}}],["adds",{"_index":2074,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":2026,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["addselect(\"count(emoji_id",{"_index":2784,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":1557,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":3096,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":1852,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":1854,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":2609,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":2744,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":1555,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect(`${interval}::integer",{"_index":1799,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(qb",{"_index":2014,"title":{},"body":{"injectables/RepoService.html":{}}}],["adduserfollowerbyuserid",{"_index":2585,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":2592,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":2918,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":2925,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":2707,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":2718,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":2919,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(userid",{"_index":2927,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":2708,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":2720,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addusernotification",{"_index":2920,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":2929,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":2979,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":2983,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":3532,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":3829,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":2503,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["advised",{"_index":3991,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":3622,"title":{},"body":{"changelog.html":{}}}],["ae44652",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":3522,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":3693,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":3766,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":1996,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":4100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":2000,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":2002,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":2001,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":2003,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_prs",{"_index":918,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":4136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":3572,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":2062,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":4042,"title":{},"body":{"license.html":{}}}],["andwhere(\"insight_members.access",{"_index":1554,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":1553,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":2250,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":2222,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":2418,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":3098,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":2606,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":2605,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":2788,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":2786,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlights.user_id",{"_index":2747,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_notifications.read_at",{"_index":2943,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":2942,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(`now",{"_index":1851,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repos\".\"topics",{"_index":1931,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":1944,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["api",{"_index":3408,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":3896,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":3928,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":3983,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["api_host",{"_index":3944,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":1422,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apibody",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":2080,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":3685,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":4133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":774,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1024,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":739,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":750,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":814,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apimodelproperty",{"_index":775,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":712,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional",{"_index":776,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":727,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apipaginatedresponse",{"_index":1305,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":1876,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1314,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":2865,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":2825,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":1762,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":1904,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":1431,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":1434,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":543,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({description",{"_index":529,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({type",{"_index":1674,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":477,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1341,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":472,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":452,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":458,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1338,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apitags",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apitags(\"authentication",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"emojis",{"_index":1313,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"health",{"_index":1365,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":1429,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":1503,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"pull",{"_index":1760,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["apitags(\"repository",{"_index":1874,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":2337,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":2571,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiunauthorizedresponse",{"_index":1494,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":2821,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":2274,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":3952,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["appearing",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":3950,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1917,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["apply(httploggermiddleware",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":4132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applyquerybuilderfilters",{"_index":1913,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":1915,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1100,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":3574,"title":{},"body":{"changelog.html":{}}}],["arg",{"_index":1038,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":4075,"title":{},"body":{"license.html":{}}}],["array",{"_index":538,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":2868,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":3794,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1329,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":3998,"title":{},"body":{"index.html":{}}}],["assign",{"_index":3787,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":974,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":949,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":950,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":4033,"title":{},"body":{"license.html":{}}}],["associating",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":3851,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":3566,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dtos/user",{"_index":3031,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":1495,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["auth/supabase.user.decorator",{"_index":1496,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["authcontroller",{"_index":235,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2472,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":2475,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["authguard",{"_index":2469,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":2470,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":979,"title":{},"body":{"entities/DbPullRequest.html":{},"properties.html":{}}}],["author_avatar",{"_index":951,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_login",{"_index":952,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["authorized",{"_index":1481,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":4066,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":2038,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":2039,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":4081,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":975,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1053,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1035,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":3583,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":3500,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":3727,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":3762,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":3559,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":3849,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":3721,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":3833,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":3795,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":3575,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":3753,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":937,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":4085,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":3608,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":3687,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":2328,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bag",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":1921,"title":{},"body":{"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":767,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":1982,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":1987,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":3824,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":645,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":3743,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":3854,"title":{},"body":{"changelog.html":{}}}],["bb26d27",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":3751,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":3443,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":3813,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":1209,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column({type",{"_index":1187,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":1816,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["beautiful",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":3245,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":3959,"title":{},"body":{"index.html":{}}}],["below",{"_index":4018,"title":{},"body":{"index.html":{}}}],["beneficial",{"_index":3961,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["beta.10",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":3676,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":3675,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":3929,"title":{},"body":{"index.html":{}}}],["better",{"_index":3513,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":3505,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":725,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":2280,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":3933,"title":{},"body":{"index.html":{}}}],["bio",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["blocking",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["body.interests",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":528,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":3904,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":747,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":3989,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":3579,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":885,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":4079,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4077,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":4094,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3126,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":1544,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builds",{"_index":3979,"title":{},"body":{"index.html":{}}}],["business",{"_index":3967,"title":{},"body":{"index.html":{}}}],["c",{"_index":4025,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":3760,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":3764,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":3817,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":2827,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["cancel",{"_index":1142,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1130,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1131,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":2287,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1146,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1132,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":2832,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":1514,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":1528,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":2279,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":3960,"title":{},"body":{"index.html":{}}}],["catch",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":3830,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":3863,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":3770,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":3797,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":3700,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["certificate",{"_index":4153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfe2a69",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":985,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":953,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":3106,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":4016,"title":{},"body":{"index.html":{}}}],["character",{"_index":716,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserNotification.html":{}}}],["charge",{"_index":4030,"title":{},"body":{"license.html":{}}}],["check",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":2996,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":3009,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":2333,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":2392,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":2397,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":2394,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":2395,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":1531,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":2629,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["ci",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":3951,"title":{},"body":{"index.html":{}}}],["claim",{"_index":4069,"title":{},"body":{"license.html":{}}}],["class",{"_index":224,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":437,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"overview.html":{}}}],["clc",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":1470,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":703,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":1467,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":4139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":3620,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1055,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1033,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":3999,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":1456,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":4087,"title":{},"body":{"properties.html":{}}}],["close",{"_index":988,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1048,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1031,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":954,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":424,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":427,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":426,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":425,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":637,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":639,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":638,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1316,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1317,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":1439,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":1440,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":1596,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":1599,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":1598,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":1597,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":1643,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":1644,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":1645,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":1807,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":1808,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":1809,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":1810,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":1907,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":1908,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":1909,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":1957,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":1960,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":1959,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":1958,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":2230,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":2231,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":2232,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":2233,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":2200,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":2203,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":2202,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":2201,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2256,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2257,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2258,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":2291,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":2293,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":2292,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2309,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":2311,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2310,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":2398,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":2400,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":2399,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":2401,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2899,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2901,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":2900,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":2902,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":2972,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":2973,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_providers",{"_index":2974,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":3077,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":3078,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":3079,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":3080,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":2027,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":3034,"title":{},"body":{"injectables/UserService.html":{}}}],["code",{"_index":860,"title":{},"body":{"entities/DbInsight.html":{},"changelog.html":{},"index.html":{}}}],["code'})@column({type",{"_index":849,"title":{},"body":{"entities/DbInsight.html":{}}}],["codename",{"_index":4112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collaboration",{"_index":2538,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["collection",{"_index":1691,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1009,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":766,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":1208,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1050,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1047,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1049,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1014,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1232,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["command",{"_index":3956,"title":{},"body":{"index.html":{}}}],["comments",{"_index":955,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["commit",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":3992,"title":{},"body":{"index.html":{}}}],["common",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":503,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1306,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":1758,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":481,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["common/dtos/page.dto",{"_index":502,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":1785,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":4009,"title":{},"body":{"index.html":{}}}],["company",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":3997,"title":{},"body":{"index.html":{}}}],["completely",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":3560,"title":{},"body":{"changelog.html":{}}}],["complexity",{"_index":4088,"title":{},"body":{"properties.html":{}}}],["component",{"_index":3846,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":927,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":3735,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":4049,"title":{},"body":{"license.html":{}}}],["config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"controllers/HealthController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":3825,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":2431,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflict",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["conflictexception",{"_index":2217,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":2834,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":2225,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connected_at",{"_index":3056,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["connection",{"_index":1282,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["console.log",{"_index":3623,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":3490,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":603,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":611,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":1723,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":2264,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor(context",{"_index":610,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":492,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":648,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1667,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1321,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(insightmemberrepository",{"_index":1519,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":1584,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":1612,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":1652,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":676,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(prinsightrepository",{"_index":1774,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(pullrequestrepository",{"_index":1834,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":1984,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":2239,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":2209,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":2407,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":3086,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":2300,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1685,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userfollowrepository",{"_index":2588,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":2714,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(usernotificationrepository",{"_index":2922,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":2980,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":3005,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":3940,"title":{},"body":{"index.html":{}}}],["container",{"_index":3698,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contents",{"_index":3757,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":4197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":4072,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":4004,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":722,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":4002,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":730,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":431,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":432,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":448,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":451,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":436,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":495,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":780,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":434,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":1858,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":1870,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":1867,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":2013,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":1972,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":428,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":486,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.tolowercase",{"_index":1850,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributors",{"_index":1575,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":234,"title":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"emojis",{"_index":1312,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"health",{"_index":1364,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":1428,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":1502,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"prs",{"_index":1759,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["controller(\"repos",{"_index":1873,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":2338,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/highlights",{"_index":2685,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":2823,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":2915,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"users",{"_index":2570,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":4011,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["copies",{"_index":4044,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3756,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":4024,"title":{},"body":{"license.html":{}}}],["correct",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":3553,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":484,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["countqueryresult",{"_index":2767,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["couple",{"_index":3994,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":3878,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":2891,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["createcheckoutsession",{"_index":2263,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":2268,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3820,"title":{},"body":{"changelog.html":{}}}],["created_at",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":772,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createhighlightdto",{"_index":2667,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":523,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":2871,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":2867,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":2872,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":2498,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":2497,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":2499,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":555,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":2841,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createlog",{"_index":1651,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":1655,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":563,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":4194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repos",{"_index":2025,"title":{},"body":{"injectables/RepoService.html":{}}}],["creates",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuserhighlightdto",{"_index":571,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":731,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["current",{"_index":1149,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["current_period_end_at",{"_index":1133,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1134,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":2889,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find(id",{"_index":2894,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":2877,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter(repo",{"_index":2881,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map(cr",{"_index":2890,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":1648,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":641,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":642,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":2334,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":2336,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":2335,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":2340,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":9,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":650,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":794,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":328,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":600,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":3976,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":3618,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":3741,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":3562,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["d3afb4b",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":4070,"title":{},"body":{"license.html":{}}}],["data",{"_index":1663,"title":{},"body":{"injectables/LogService.html":{},"classes/PageDto.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":101,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":582,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":4191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(confirmed_at",{"_index":3057,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.created_at",{"_index":3053,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":3054,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":2778,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":2692,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":1460,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":919,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":473,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["db",{"_index":1250,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["dbapiconfig",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbc66f3",{"_index":3617,"title":{},"body":{"changelog.html":{}}}],["dbcontribution",{"_index":81,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":1866,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":113,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":139,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1302,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbinsight",{"_index":104,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":137,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":2804,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":106,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":1479,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":123,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":144,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":128,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":2562,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":89,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":2102,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":85,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":2060,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":87,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":2140,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":83,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":2176,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":1894,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbsubscription",{"_index":121,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbuser",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbuserhighlight",{"_index":131,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":2769,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":141,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":1416,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1236,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"coverage.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2553,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbusernotification",{"_index":149,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbusernotification})@apinotfoundresponse({description",{"_index":2913,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["dbuserrepo",{"_index":112,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":147,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":135,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":2635,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":1798,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":3681,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":3508,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":4034,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":4076,"title":{},"body":{"license.html":{}}}],["debug",{"_index":605,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":614,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo",{"_index":1928,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":2757,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":3842,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["default",{"_index":449,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":2345,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":4152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1492,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":1506,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":2702,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":2088,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":2125,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":2162,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":2197,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":2090,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":2128,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":2164,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":2199,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":2642,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id/members/:memberid",{"_index":2852,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":1485,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":2673,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2057,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2100,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2138,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2174,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2066,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2106,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2143,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2179,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2632,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":2814,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":994,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":710,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{}}}],["deletedatecolumn",{"_index":771,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deletehighlightforuser",{"_index":2649,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":2668,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":2650,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":2672,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":2669,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":2709,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":2724,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":2710,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":2726,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":832,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":956,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":3736,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3683,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deprecated",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1639,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["designed",{"_index":4086,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["developer",{"_index":3746,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":3571,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["df56c4f",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":3308,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["digital",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":504,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":3918,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["disable",{"_index":2751,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["discord.find",{"_index":4012,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1367,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":1363,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":804,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":2534,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":798,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct(true",{"_index":2758,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["distribute",{"_index":4040,"title":{},"body":{"license.html":{}}}],["dit",{"_index":3984,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":4148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docker",{"_index":3725,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":3938,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":3568,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":3402,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":3493,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":3729,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["dot",{"_index":4083,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":892,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":886,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":3589,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":2207,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":2213,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":2237,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":2243,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":2094,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":2099,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":2095,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":2105,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":2051,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":2056,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":2052,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":2065,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":2405,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":2411,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":2132,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":2137,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":2133,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":2142,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":3084,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":3090,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":2168,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":2173,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":2169,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":2178,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":957,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["dry",{"_index":3732,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dtos",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":507,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":1657,"title":{},"body":{"injectables/LogService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":1923,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":1423,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":1625,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/pull",{"_index":1756,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":1901,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":1497,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duration",{"_index":1458,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":3893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":3988,"title":{},"body":{"index.html":{}}}],["e",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":3602,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":3800,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":3744,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":3593,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":3552,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":3852,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1677,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":3690,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":3716,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":3599,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":2502,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":3076,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":803,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1319,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1310,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1213,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1294,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":2655,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":10,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1323,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":823,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1309,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":3958,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":4003,"title":{},"body":{"index.html":{}}}],["end",{"_index":1151,"title":{},"body":{"entities/DbSubscription.html":{}}}],["ended_at",{"_index":1135,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endpoint",{"_index":3158,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":1369,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1353,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":3871,"title":{},"body":{"changelog.html":{}}}],["entities",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"changelog.html":{},"overview.html":{}}}],["entities.map(notification",{"_index":2944,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["entities/emoji.entity",{"_index":1311,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/insight",{"_index":1542,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":1499,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":1753,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":1900,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/user",{"_index":1424,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":708,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":483,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":3914,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":453,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":3495,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":3363,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":3927,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":4190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1040,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":606,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":617,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error).tostring",{"_index":2373,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["errors",{"_index":3182,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":2754,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":2750,"title":{},"body":{"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":2382,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":2387,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":2391,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":532,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["exception/responses",{"_index":3526,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["executioncontext",{"_index":4196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":2697,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":2657,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":2058,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existinguser",{"_index":2835,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":2840,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":2839,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":2344,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["experiment",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["experimental",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["explain",{"_index":3874,"title":{},"body":{"changelog.html":{}}}],["explore",{"_index":4170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":3769,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1455,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":3739,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":441,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":2481,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2493,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":2492,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["f0304d4",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":3525,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":3777,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":3507,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":3535,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":3586,"title":{},"body":{"changelog.html":{}}}],["f73f891",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":3542,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":3594,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":3588,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":3576,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{}}}],["false})@column('boolean",{"_index":996,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":840,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1191,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":533,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":2513,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":839,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":3527,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":3838,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":3578,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":3788,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":3592,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["fed79a1",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":3524,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["fetching",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":984,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1332,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["filter.module",{"_index":1813,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":1911,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":1786,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":1912,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":1920,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:79",{"_index":1916,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":1922,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":1330,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":1751,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":1945,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push",{"_index":1936,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([\"repos.stars",{"_index":1934,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":1930,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=lower(:repo",{"_index":1927,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":1794,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`repos.id",{"_index":1925,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filterservice",{"_index":1835,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":1737,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":491,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(pageoptionsdto",{"_index":496,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbycontributor",{"_index":1832,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":1840,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbyownerandrepo",{"_index":1859,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":1861,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid",{"_index":1860,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":1868,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyuserid",{"_index":1609,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":1618,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":2933,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallemojis",{"_index":1296,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1297,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallhighlightreactions",{"_index":2711,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":2730,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":1399,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":1402,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":1400,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":1407,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":2546,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":2550,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":1515,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":1533,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":2798,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":2807,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallreposwithfilters",{"_index":1886,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":1891,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalltopreposbyusername",{"_index":2547,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":2555,"title":{},"body":{"controllers/UserController.html":{}}}],["findalluserstargazed",{"_index":2096,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":2108,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":2053,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":2068,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":2134,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":2145,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":2170,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":2181,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":1833,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":1842,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbycustomerid",{"_index":646,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":655,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":647,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":657,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcontributorpullrequests",{"_index":2548,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":2559,"title":{},"body":{"controllers/UserController.html":{}}}],["findinsightpagebyid",{"_index":1474,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":1476,"title":{},"body":{"controllers/InsightController.html":{}}}],["findonebyemail",{"_index":2997,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":3011,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1516,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1535,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":1887,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":1896,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyusername",{"_index":2998,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":3015,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":2549,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":2564,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":2566,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":2712,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":2734,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["finds",{"_index":1404,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["finduserfollowerbyid",{"_index":2586,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":2596,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["first",{"_index":577,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["fitness",{"_index":4062,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3143,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1037,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixes",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":837,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":3799,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":3970,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1271,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":2906,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":2618,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:33",{"_index":2630,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:51",{"_index":2626,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:73",{"_index":2636,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":2637,"title":{},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":2584,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":2590,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":2595,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:25",{"_index":2598,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:41",{"_index":2594,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:70",{"_index":2600,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":1247,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{}}}],["followeduserid",{"_index":2593,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":1274,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followeruserid",{"_index":2597,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists",{"_index":2607,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":2611,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":2608,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1270,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{}}}],["follows",{"_index":2122,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["follows'})@apiokresponse({description",{"_index":2113,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1269,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:18",{"_index":1276,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:25",{"_index":1278,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":1275,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":1272,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":1277,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":1273,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":2952,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":2955,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":2624,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":2619,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":2622,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["force",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":930,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":3990,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["forroutes(`v1",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":1303,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":2061,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":1480,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":2453,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4029,"title":{},"body":{"license.html":{}}}],["from(`(${querybuilder.getquery",{"_index":2763,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["from(entity",{"_index":2005,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user_id",{"_index":1240,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":896,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":551,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":1950,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":3537,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":3590,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":3924,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":4047,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":3517,"title":{},"body":{"changelog.html":{}}}],["generated",{"_index":3556,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generation",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["get(\"/:id",{"_index":1504,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":1875,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":1436,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":1903,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":1880,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:username",{"_index":2572,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":2638,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":2577,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":2575,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":2580,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/insights",{"_index":1766,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":1430,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":2120,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":2084,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":2158,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":2193,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/repos/list",{"_index":1433,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/search",{"_index":1764,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":1368,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/web",{"_index":1381,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id/members",{"_index":2824,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1298,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":1477,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":1869,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":1413,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":1897,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":1862,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":2565,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2628,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":2551,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":2560,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":2556,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":1736,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1409,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2109,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2069,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2146,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2182,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":1403,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1748,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1351,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1355,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":2808,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["getallhighlightreactions",{"_index":1401,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":1412,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":2651,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":2676,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getdomain",{"_index":3899,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":4172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":4167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":4169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":4171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":4168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowstatusbyusername",{"_index":2620,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":2627,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":1772,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":1779,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":1732,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":1735,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":1914,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":1919,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getschemapath(model",{"_index":4138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":4137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":1717,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstripe",{"_index":2270,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":3104,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["getuserhighlight",{"_index":2652,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":2678,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getusernotifications",{"_index":2910,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":2911,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["ghcr.io/open",{"_index":3985,"title":{},"body":{"index.html":{}}}],["git",{"_index":3148,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/open",{"_index":4096,"title":{},"body":{"properties.html":{}}}],["github",{"_index":761,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":3047,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com",{"_index":2761,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["github.com/open",{"_index":590,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":3055,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["globals",{"_index":3120,"title":{},"body":{"changelog.html":{}}}],["goes",{"_index":936,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["granted",{"_index":4028,"title":{},"body":{"license.html":{}}}],["graph",{"_index":4080,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["guard",{"_index":3605,"title":{},"body":{"changelog.html":{}}}],["guarded",{"_index":2083,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":3598,"title":{},"body":{"changelog.html":{}}}],["guide",{"_index":4006,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":4007,"title":{},"body":{"index.html":{}}}],["hack",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":3041,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":3596,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":2318,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":2320,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hasnextpage",{"_index":1682,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1683,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":3577,"title":{},"body":{"changelog.html":{}}}],["health",{"_index":1349,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1395,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1361,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1358,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1347,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":11,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1352,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1356,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":562,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":879,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":559,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":4027,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":3540,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":3554,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2665,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":1415,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":1442,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":2645,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:112",{"_index":2677,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:130",{"_index":2660,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:153",{"_index":2675,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:40",{"_index":2666,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:55",{"_index":2679,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:72",{"_index":2682,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:93",{"_index":2671,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":2693,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":2684,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":573,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":592,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":589,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":580,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":587,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1177,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:104",{"_index":1196,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:115",{"_index":1182,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:126",{"_index":1189,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:137",{"_index":1188,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":1203,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:153",{"_index":1195,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1186,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1205,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1201,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1198,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1185,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:70",{"_index":1192,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:80",{"_index":1180,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:90",{"_index":1199,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:97",{"_index":1181,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":2775,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":2777,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":2776,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":2774,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":2701,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":2738,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight/highlight.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_id",{"_index":1194,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":3923,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":1396,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightid",{"_index":2661,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlightmodule",{"_index":12,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1408,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":815,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":816,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1211,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1193,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":1398,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlights.service",{"_index":1427,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":2706,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:108",{"_index":2729,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:130",{"_index":2719,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:142",{"_index":2737,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:146",{"_index":2725,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:15",{"_index":2716,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:150",{"_index":2731,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:171",{"_index":2735,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:188",{"_index":2722,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:219",{"_index":2727,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:24",{"_index":2723,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:30",{"_index":2733,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:52",{"_index":2728,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:80",{"_index":2732,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":2721,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":4067,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":4092,"title":{},"body":{"properties.html":{}}}],["host",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hot",{"_index":3600,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":2756,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1359,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":98,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1007,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1057,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":980,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://github.com/open",{"_index":763,"title":{},"body":{"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":2439,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":826,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":819,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":2465,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":2529,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":2450,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":2518,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":928,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["id",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apiokresponse({type",{"_index":1478,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":742,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":3044,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter(identity",{"_index":3045,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":3046,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":2969,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["ignore",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":4000,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":3811,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":668,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":4058,"title":{},"body":{"license.html":{}}}],["import",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":4053,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":3013,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":3180,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["inclusion",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":3499,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":240,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["indexes",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":2443,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":838,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":548,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":1949,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":1954,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":1952,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":2817,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["inherited",{"_index":463,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":3864,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":488,"title":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":489,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":500,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":508,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":659,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1326,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbinsight",{"_index":1626,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":1543,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":1591,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":1659,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":1787,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":1844,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":1999,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":2247,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":2218,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":2415,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":3094,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":2306,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":3032,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":2739,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":2740,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbusernotification",{"_index":2938,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":2988,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":2602,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":1559,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":1791,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"users",{"_index":2742,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":2037,"title":{},"body":{"injectables/RepoService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":1629,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":887,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":2372,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":530,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":1488,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":2803,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":1603,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":2854,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:100",{"_index":2862,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:49",{"_index":2859,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:67",{"_index":2857,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":1498,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":525,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":536,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":534,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":542,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":916,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:18",{"_index":934,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:30",{"_index":941,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":932,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:52",{"_index":925,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:63",{"_index":924,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:74",{"_index":943,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":2829,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":905,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":900,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter(insightrepo",{"_index":2878,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":1345,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":865,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":891,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":1560,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":1562,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":1558,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":1556,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":904,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":1472,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":1335,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":1336,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":1941,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":1933,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":1935,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":1529,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":1525,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":2845,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":1522,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":1510,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":1564,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":1579,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":845,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":2879,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":846,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":1586,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":1580,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":1614,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":859,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.id",{"_index":1637,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":1631,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":1501,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":1771,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":1776,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":1778,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":1782,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:39",{"_index":1780,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":1520,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":13,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":2864,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":1500,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":3765,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":3949,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3934,"title":{},"body":{"index.html":{}}}],["instead",{"_index":3373,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["integer",{"_index":807,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserService.html":{}}}],["integration",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":4090,"title":{},"body":{"properties.html":{}}}],["interests",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":2540,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":2542,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interface",{"_index":1708,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1709,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["internal",{"_index":1016,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":920,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["invalid",{"_index":1418,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":878,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":866,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":867,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":558,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["invites",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1095,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":828,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":3052,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":526,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":540,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1670,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":545,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["iscreatinglogs",{"_index":1664,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":593,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":561,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":478,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":487,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":1346,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":1726,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":1828,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":1830,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":1977,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1719,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["isin([\"view",{"_index":2505,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":1727,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":1720,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ismember",{"_index":2833,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1955,"title":{},"body":{"classes/RepoInfo.html":{}}}],["isoptional",{"_index":479,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":567,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":546,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1343,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issues",{"_index":1968,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":2531,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["item",{"_index":1547,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":1879,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":519,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["items",{"_index":1690,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":1829,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":1827,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":1568,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":1569,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":3706,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":3818,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":3263,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["joincolumn",{"_index":770,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["js",{"_index":3030,"title":{},"body":{"injectables/UserService.html":{}}}],["json",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["json.stringify(parameters",{"_index":707,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":2350,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":2483,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":3945,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":4091,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":4057,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":3939,"title":{},"body":{"index.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1012,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1002,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":958,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":959,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":4166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":745,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":485,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":960,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["latest",{"_index":2347,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["leftjoin(\"users",{"_index":1561,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":2012,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":2010,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":1630,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":2011,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":718,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["level",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":3974,"title":{},"body":{"index.html":{}}}],["liability",{"_index":4071,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4068,"title":{},"body":{"license.html":{}}}],["lib",{"_index":3969,"title":{},"body":{"index.html":{}}}],["library",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":3220,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":445,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":1800,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":518,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["limitation",{"_index":4036,"title":{},"body":{"license.html":{}}}],["limited",{"_index":4059,"title":{},"body":{"license.html":{}}}],["limits",{"_index":3510,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":2752,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":2282,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":970,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":3610,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":2449,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":3543,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":3487,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":3987,"title":{},"body":{"index.html":{}}}],["list",{"_index":3252,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listallpullrequests",{"_index":1733,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":1743,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1299,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["live",{"_index":3926,"title":{},"body":{"index.html":{}}}],["load",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":2019,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":2022,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":2023,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":2021,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":2020,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":2434,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":3948,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":607,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":678,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":620,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1658,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":565,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":570,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:15",{"_index":569,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:7",{"_index":568,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":1647,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":628,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":1452,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":2339,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":667,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":1451,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":684,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":687,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":689,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:36",{"_index":682,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:40",{"_index":692,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:44",{"_index":680,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:59",{"_index":694,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":677,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":1453,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":627,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":602,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:27",{"_index":621,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:37",{"_index":619,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":625,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:57",{"_index":615,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":623,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":613,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":3365,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":3897,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":3968,"title":{},"body":{"index.html":{}}}],["login",{"_index":1178,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["loglevels",{"_index":630,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":670,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":681,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":1642,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":671,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":683,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":672,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":686,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":673,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":688,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":913,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":674,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":691,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":612,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":1654,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":604,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":2029,"title":{},"body":{"injectables/RepoService.html":{}}}],["lowercase",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["machines",{"_index":3935,"title":{},"body":{"index.html":{}}}],["made",{"_index":1183,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1054,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1026,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":2508,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":2532,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":2522,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["managed",{"_index":3582,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":2319,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":2325,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":3547,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":3646,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":769,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["marknotificationsasread",{"_index":2921,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":2935,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matching",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":1705,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1721,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(10000",{"_index":1725,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":460,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":594,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["maxlength(500",{"_index":598,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":938,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":3518,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":557,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":2805,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":2819,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":1605,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":2796,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:118",{"_index":2820,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:155",{"_index":2815,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:50",{"_index":2811,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:76",{"_index":2806,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":2822,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":556,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":560,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":2504,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":863,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:105",{"_index":880,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:22",{"_index":875,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:29",{"_index":877,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:36",{"_index":890,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:47",{"_index":888,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:58",{"_index":871,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:68",{"_index":872,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:78",{"_index":889,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:85",{"_index":873,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:95",{"_index":883,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":1606,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":1512,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":1521,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:20",{"_index":1526,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:26",{"_index":1536,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:40",{"_index":1524,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:44",{"_index":1540,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:48",{"_index":1538,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:52",{"_index":1532,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:75",{"_index":1534,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":2813,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":2809,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":1366,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":1362,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":3494,"title":{},"body":{"changelog.html":{}}}],["merchantability",{"_index":4061,"title":{},"body":{"license.html":{}}}],["merge",{"_index":746,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"license.html":{}}}],["mergeable",{"_index":961,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":962,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":963,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["message",{"_index":566,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":1666,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":506,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["meta.dto.ts",{"_index":1681,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":1694,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":1692,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":1697,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":1689,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":1687,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":1695,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1136,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["methods",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":1722,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":1724,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimal",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":1574,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":1573,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":595,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minlength(3",{"_index":597,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":3828,"title":{},"body":{"changelog.html":{}}}],["misaligned",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3913,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3175,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":4023,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":3747,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":1797,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":3978,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2284,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":778,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":4038,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":1767,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":1740,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":1576,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":1577,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":3790,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":3758,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":3319,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":2455,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":3546,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1003,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["naming",{"_index":3538,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":3931,"title":{},"body":{"index.html":{}}}],["needs",{"_index":3973,"title":{},"body":{"index.html":{}}}],["nest",{"_index":3814,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":626,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":777,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":695,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":698,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":1454,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":2476,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":2869,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":2837,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newlog",{"_index":1660,"title":{},"body":{"injectables/LogService.html":{}}}],["newuser",{"_index":3050,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":3058,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":2772,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":2991,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":1449,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":1450,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":3867,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":3936,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1011,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["non",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":4065,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":3942,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1541,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":3071,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":2228,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":4051,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":2601,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":2917,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":2923,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":2932,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":2934,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:46",{"_index":2930,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:56",{"_index":2926,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:67",{"_index":2928,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:78",{"_index":2936,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":1245,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["notification.constants",{"_index":1258,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":3908,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":2907,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":2908,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:27",{"_index":2914,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":1239,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:18",{"_index":1246,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:25",{"_index":1257,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:32",{"_index":1244,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:43",{"_index":1256,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:53",{"_index":1249,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:63",{"_index":1251,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:73",{"_index":1253,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":2945,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":2937,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":2958,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":2912,"title":{},"body":{"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["notified_at",{"_index":1241,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":737,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["npm",{"_index":3195,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":3937,"title":{},"body":{"index.html":{}}}],["null",{"_index":1058,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":2699,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":1507,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":4130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":4155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":4164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["numerical",{"_index":935,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":4084,"title":{},"body":{"properties.html":{}}}],["object",{"_index":1924,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{}}}],["objectliteral",{"_index":1784,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":539,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtaining",{"_index":4032,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":4021,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":517,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["onboarded",{"_index":2444,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":2962,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":2963,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":2965,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["onetomany",{"_index":821,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":552,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":2028,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":2030,"title":{},"body":{"injectables/RepoService.html":{}}}],["openapi",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":3993,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":2427,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":2511,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":4176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["optional",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.dto",{"_index":482,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":440,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:12",{"_index":1444,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":1337,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":1715,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":1978,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":456,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":1344,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":1566,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":1821,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":1713,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1340,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":1979,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":1714,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":1570,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":1342,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":1966,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":1567,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":1716,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":1718,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":1822,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":1823,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":1826,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":1817,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":1932,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["options.repo",{"_index":1926,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":1804,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":1805,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.topic",{"_index":1929,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":805,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":444,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"insights.updated_at",{"_index":1638,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":2749,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"users.name",{"_index":1563,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":2040,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":446,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":465,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":2041,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":466,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":511,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["origin",{"_index":762,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":1462,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere(`:userid",{"_index":1636,"title":{},"body":{"injectables/InsightsService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":4074,"title":{},"body":{"license.html":{}}}],["out",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":3776,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":3707,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":1738,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":4082,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":4014,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1863,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owner}/${repo",{"_index":2035,"title":{},"body":{"injectables/RepoService.html":{}}}],["p",{"_index":3981,"title":{},"body":{"index.html":{}}}],["package",{"_index":3130,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["package.json",{"_index":3995,"title":{},"body":{"index.html":{}}}],["packages",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":439,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":1684,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":501,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":522,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["pagemetadto",{"_index":505,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1675,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1686,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":442,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":1702,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":512,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":515,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":1700,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":1847,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.repo",{"_index":2045,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":2044,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto:16",{"_index":470,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:28",{"_index":464,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":468,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":476,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pages",{"_index":1696,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":2552,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1307,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1300,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["paginating",{"_index":1864,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":3841,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":1420,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":2698,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":1437,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":2843,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1881,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1882,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"username",{"_index":2573,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":1698,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":1710,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2046,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":2342,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":3048,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":4199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":1421,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserNotificationService.html":{}}}],["particular",{"_index":4063,"title":{},"body":{"license.html":{}}}],["passport",{"_index":2482,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2480,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":2688,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":2842,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":2681,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":2816,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["paths",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["payment_method_types",{"_index":2278,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":870,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":868,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["per",{"_index":1693,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":3114,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1150,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":4026,"title":{},"body":{"license.html":{}}}],["permit",{"_index":4045,"title":{},"body":{"license.html":{}}}],["person",{"_index":4031,"title":{},"body":{"license.html":{}}}],["persons",{"_index":4046,"title":{},"body":{"license.html":{}}}],["pgmigrate",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["pid,hostname,context",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1179,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["pipelines",{"_index":3876,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":2521,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":2509,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":3533,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":4005,"title":{},"body":{"index.html":{}}}],["port",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":4055,"title":{},"body":{"license.html":{}}}],["post",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":2696,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/onboarding",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/waitlist",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":2375,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":2831,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":2663,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":2656,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":2322,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":2801,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":4143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postonboarding",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":3607,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":578,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1197,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":588,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":1792,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["prefs.dto",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":2533,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":2536,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":2539,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":3930,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":3831,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":3980,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1688,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["price",{"_index":1159,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1175,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1160,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1137,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":768,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":782,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1045,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1173,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":822,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":914,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":909,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":1777,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":3713,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["proceed",{"_index":4008,"title":{},"body":{"index.html":{}}}],["process",{"_index":3775,"title":{},"body":{"changelog.html":{}}}],["process.env.ci",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":4175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":4114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":4181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":2488,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":2491,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":2486,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":3804,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":3110,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promise",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all([30",{"_index":1768,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all(repostoremoverequests",{"_index":2888,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":2898,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":2960,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["proper",{"_index":3692,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3755,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":443,"title":{"properties.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":779,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":3719,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":1918,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"license.html":{}}}],["providers",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":1789,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":1731,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["public",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":3563,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":4039,"title":{},"body":{"license.html":{}}}],["published",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"index.html":{}}}],["pull_requests",{"_index":944,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":1848,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":1853,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":1855,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":2032,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontroller",{"_index":1729,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestinsightsservice",{"_index":1757,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":14,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":1818,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":1819,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":1747,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":1837,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":1754,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":1761,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":1824,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":1825,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":4064,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3737,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":3567,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":2079,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":2085,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":2121,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":2159,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":2194,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":2087,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":2124,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":2161,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":2196,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":2640,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2073,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2112,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2150,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2186,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2077,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2116,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2153,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2189,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2623,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":1783,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":1947,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":1946,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":3986,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1138,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":685,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":509,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":3039,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.getcount",{"_index":520,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getmany",{"_index":521,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getone",{"_index":663,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":2616,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":2770,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getrawone",{"_index":1806,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1328,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.setparameters",{"_index":1803,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.where(\"id",{"_index":2990,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":1546,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"lower(login",{"_index":3042,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(`users.email",{"_index":3075,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner",{"_index":679,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":699,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":4010,"title":{},"body":{"index.html":{}}}],["range",{"_index":447,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":3509,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":2321,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":2543,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":2957,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":800,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":2674,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1235,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1217,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":1212,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:106",{"_index":1218,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:18",{"_index":1224,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:28",{"_index":1223,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":1229,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:48",{"_index":1220,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":1215,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":1226,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:74",{"_index":1216,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:82",{"_index":1225,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:90",{"_index":1222,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:98",{"_index":1228,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1233,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1221,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1234,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1227,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1214,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":2789,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":2790,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":799,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":1417,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":1252,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["read_at",{"_index":1242,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":929,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":3534,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["real",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["rebaseable",{"_index":964,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receive_collaboration",{"_index":2535,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":4135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recent",{"_index":1571,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":2537,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["record",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["record)[\"stripe",{"_index":2378,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1028,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactoring",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":3609,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":752,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["references",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["registeras(\"api",{"_index":4111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":4141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":4165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":4177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":2430,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":3699,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":3640,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":3848,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":3287,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["releasing",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["relevantevents",{"_index":2331,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":2384,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1487,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["removed",{"_index":2063,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removeinsight",{"_index":1610,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":1621,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":1475,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":1484,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":1517,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":1537,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":2799,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":2812,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":1583,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":1589,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":1486,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeuserfollowerbyid",{"_index":2587,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":2599,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["rename",{"_index":3627,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":433,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":1898,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":788,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":751,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":1962,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":893,"title":{},"body":{"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:18",{"_index":1265,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:22",{"_index":1283,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:25",{"_index":1267,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":899,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:29",{"_index":1290,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:32",{"_index":1266,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":902,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:36",{"_index":1286,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:39",{"_index":1264,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":903,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:46",{"_index":1280,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:47",{"_index":898,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:49",{"_index":1263,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:56",{"_index":1287,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:57",{"_index":894,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:63",{"_index":1281,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:67",{"_index":895,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:71",{"_index":1289,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:75",{"_index":901,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:79",{"_index":1285,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":1238,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.fullname",{"_index":1594,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":1593,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":2884,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouserstargazers",{"_index":1078,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1067,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1093,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1084,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1112,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1103,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":1293,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":1284,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":1127,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1118,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":1604,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":1581,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":1588,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":1590,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":1585,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":547,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":2967,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":1872,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["repo/user",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":711,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":430,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":1884,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":1967,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":1811,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":1775,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":497,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1333,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":537,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":2883,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":15,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":454,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":1964,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repopageoptionsdto",{"_index":1888,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":1980,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":1986,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":3964,"title":{},"body":{"index.html":{}}}],["repos",{"_index":527,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":2031,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":2557,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":2861,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto.ts",{"_index":2968,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repos.dto.ts:12",{"_index":2970,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.id",{"_index":1937,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":2976,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":2977,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":2978,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":2981,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:19",{"_index":2985,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:25",{"_index":2987,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:39",{"_index":2984,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:49",{"_index":2986,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":1892,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":1871,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":493,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":2048,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":2091,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":2241,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":2211,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":2892,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":2896,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":2880,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":2886,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":2885,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":2129,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":2409,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":2895,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":3637,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":2165,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":3088,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":4020,"title":{},"body":{"index.html":{}}}],["representing",{"_index":729,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":2324,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{}}}],["req.headers",{"_index":2377,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibody({type",{"_index":1489,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":2658,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":2818,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":1814,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":1730,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":1745,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:42",{"_index":1752,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:54",{"_index":1742,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":947,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:101",{"_index":1027,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:108",{"_index":1034,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:128",{"_index":1015,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:138",{"_index":1005,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:145",{"_index":983,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:152",{"_index":981,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:162",{"_index":978,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:172",{"_index":977,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:18",{"_index":1001,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:182",{"_index":993,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:192",{"_index":990,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:202",{"_index":1020,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:212",{"_index":1043,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:222",{"_index":1017,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:229",{"_index":991,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":973,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:243",{"_index":995,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:25",{"_index":1025,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:250",{"_index":987,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:261",{"_index":999,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:32",{"_index":1022,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:39",{"_index":1032,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:46",{"_index":997,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:53",{"_index":1019,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:60",{"_index":1018,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:67",{"_index":1023,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:74",{"_index":1042,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:84",{"_index":1030,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:94",{"_index":1036,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":1812,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1755,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":1831,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:15",{"_index":1836,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:22",{"_index":1838,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:28",{"_index":1839,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:46",{"_index":1841,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:71",{"_index":1843,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":4198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesting",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":723,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserController.html":{},"changelog.html":{}}}],["requests/dtos/pull",{"_index":1815,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["required",{"_index":2281,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":3872,"title":{},"body":{"changelog.html":{}}}],["reset",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["response",{"_index":1448,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["response.decorator",{"_index":1308,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":3887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":2426,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":2454,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":2435,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":2451,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":2440,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:128",{"_index":2458,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":2467,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":2459,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":2437,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":2432,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":2448,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":2433,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":2463,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":2445,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":2447,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":2442,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":2428,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":2441,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":2456,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":2466,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":2462,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":2429,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.on(\"finish",{"_index":1461,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":4035,"title":{},"body":{"license.html":{}}}],["results",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":3521,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1414,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["return",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":3523,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":4037,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["route",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":3966,"title":{},"body":{"index.html":{}}}],["rules",{"_index":3601,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":3733,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":3784,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":3779,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["san",{"_index":2452,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":554,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":579,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@column({type",{"_index":897,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["sauced'})@isstring",{"_index":1951,"title":{},"body":{"classes/RepoInfo.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":2516,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/api.opensauced.pizza",{"_index":3107,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":4093,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":4097,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":4095,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":787,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":764,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":1060,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights'})@column({type",{"_index":998,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":1339,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights/pull/1",{"_index":596,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1200,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":591,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1184,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/open",{"_index":553,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{}}}],["sauced/triage",{"_index":3941,"title":{},"body":{"index.html":{}}}],["saucedopen",{"_index":2461,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@isoptional",{"_index":2527,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":3643,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":3812,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":3821,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":3866,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":1902,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequests",{"_index":1734,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":1746,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1749,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["secretkey",{"_index":4178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":4188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["see",{"_index":4001,"title":{},"body":{"index.html":{}}}],["select",{"_index":740,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":2004,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"count(full_name",{"_index":2766,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"emoji_id",{"_index":2783,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(['repo.id",{"_index":2009,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":1790,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`regexp_replace(regexp_replace(user_highlights.url",{"_index":2759,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(`to_char(now",{"_index":1795,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":926,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":1527,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":4043,"title":{},"body":{"license.html":{}}}],["sent",{"_index":881,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["server",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["servers",{"_index":3506,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":3654,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":2290,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":2289,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":2332,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["setparameters(querybuilder.getparameters",{"_index":2765,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["shall",{"_index":4052,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":581,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":574,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["short",{"_index":848,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":829,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1008,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1004,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":2376,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1051,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1041,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":2379,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["simple",{"_index":3603,"title":{},"body":{"changelog.html":{}}}],["simplify",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":1712,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["skip(pageoptionsdto.skip",{"_index":1640,"title":{},"body":{"injectables/InsightsService.html":{}}}],["slow",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["small",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["soft",{"_index":3612,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":3932,"title":{},"body":{"index.html":{},"license.html":{}}}],["sort",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["source_branch",{"_index":965,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_label",{"_index":966,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":942,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach(type",{"_index":1801,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":921,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":1943,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":1942,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":1578,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spec",{"_index":3772,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["split",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":2438,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":696,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":4104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":4103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":4105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":3915,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../db",{"_index":4106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":4107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":3916,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":3925,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":3917,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pull",{"_index":3919,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":3920,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":4108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":4109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":4102,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3921,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":4110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:190",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:139",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:156",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:175",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:73",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:94",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":2425,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":2961,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":2468,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":2471,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":2474,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":2479,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":2477,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":3885,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":3922,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":3886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":1331,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":1680,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":1665,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":1673,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":1669,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":1910,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":666,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":1445,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":3892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":3894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":3895,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":3898,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":3900,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":709,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":753,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":744,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":755,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":726,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":749,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":738,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":760,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":741,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":720,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":765,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":429,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":490,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":494,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":498,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":438,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":1857,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts",{"_index":789,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:17",{"_index":791,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:27",{"_index":793,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":640,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":643,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":654,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":658,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:27",{"_index":656,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:36",{"_index":653,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":649,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1295,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:25",{"_index":1304,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1318,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1320,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1322,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1324,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1325,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":797,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:17",{"_index":811,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:24",{"_index":813,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:31",{"_index":820,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:38",{"_index":808,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:48",{"_index":801,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:58",{"_index":818,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:65",{"_index":802,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:69",{"_index":817,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/health/health.controller.ts",{"_index":1348,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1354,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1357,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1394,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1443,"title":{},"body":{"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1237,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":1397,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:28",{"_index":1411,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:41",{"_index":1406,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:55",{"_index":1419,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":1441,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":524,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":1565,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":2496,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":862,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":827,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:101",{"_index":834,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:109",{"_index":856,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:113",{"_index":847,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:27",{"_index":836,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:37",{"_index":858,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:47",{"_index":844,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":842,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":841,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:71",{"_index":851,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:81",{"_index":831,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:91",{"_index":854,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":1511,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":1473,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:25",{"_index":1483,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:42",{"_index":1491,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":1600,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":1607,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":1613,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":1617,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":1620,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":1616,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":1624,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":1622,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":1619,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":2795,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":601,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":564,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":906,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":912,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":911,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":908,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":910,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":907,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":1646,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":1650,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":1656,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":1653,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":3903,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pull",{"_index":915,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":1948,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1061,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":1066,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":1074,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":1070,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":1063,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":1071,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":1064,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":1073,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":1068,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1079,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":1083,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":1090,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":1086,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":1081,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":1087,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":1082,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":1089,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":1085,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1094,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":1099,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":1109,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":1105,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":1102,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":1097,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":1106,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":1098,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":1108,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":1104,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1113,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":1117,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":1124,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":1120,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":1115,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":1121,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":1116,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":1123,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":1119,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":1885,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":1895,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:35",{"_index":1899,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:49",{"_index":1890,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:62",{"_index":1893,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":1961,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":1981,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:140",{"_index":1993,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":1985,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:155",{"_index":1994,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:170",{"_index":1991,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:199",{"_index":1992,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":1997,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:32",{"_index":1989,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:56",{"_index":1988,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":2049,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":2204,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":2206,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":2212,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":2216,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":2214,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":2210,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":2092,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":2234,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":2236,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":2242,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":2246,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":2244,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":2240,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":2313,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2259,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2261,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":2271,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":2267,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":2269,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2265,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":2130,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":2402,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":2404,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":2410,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":2414,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":2412,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":2408,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1128,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1262,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":572,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":2506,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1176,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":2583,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":2545,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":2568,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":2563,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":2554,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":2558,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":3910,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2903,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2995,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":3026,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:131",{"_index":3022,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":3006,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:146",{"_index":3028,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:156",{"_index":3024,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:166",{"_index":3020,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:170",{"_index":3018,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:177",{"_index":3012,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":3008,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":3014,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:63",{"_index":3016,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":3010,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":2166,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":3081,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":3083,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":3089,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":3093,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:46",{"_index":3091,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":3087,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":3815,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":618,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1101,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1080,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":2059,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":2205,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":2050,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":2064,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":2067,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":2071,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":2075,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":2078,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":2082,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":2208,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":2215,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":2223,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":2224,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1062,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":2235,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":2093,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":2104,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":2107,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":2110,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":2114,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":2117,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":2119,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":2238,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":2245,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":3584,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":2251,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":2252,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":17,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":2097,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":2111,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":2098,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":2115,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":2018,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":1975,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":2118,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":16,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":2054,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":2072,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":2055,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":2076,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":2070,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":1969,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":1976,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":2081,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":1153,"title":{},"body":{"entities/DbSubscription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":3954,"title":{},"body":{"index.html":{}}}],["started",{"_index":3105,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":1459,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":4140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stash",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["state",{"_index":967,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":3119,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1139,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":1463,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":1464,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":3604,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["stress",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(process.env.api_codename",{"_index":4113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":4117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":4115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":4116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":4187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":4185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":4179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":4183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":4180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":4142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":4157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":4151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":4162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":4144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":4158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":4149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":4161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":4145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":4159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":4154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":4163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":4147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":4160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":675,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":693,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stripe",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":2273,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":2393,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":2260,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2388,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":652,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":415,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":326,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":18,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":2294,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2312,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":19,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":3320,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":4089,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":3548,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":3625,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":3484,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1172,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1156,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":4173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":2385,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":2386,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subject",{"_index":4048,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":4041,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1096,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":2139,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":2017,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":1974,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":2157,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":2403,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":2131,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":2141,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":2144,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":2148,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":2151,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":2154,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":2156,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":2406,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":2413,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":2421,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":2419,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":2420,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":20,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":2135,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":2149,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":2136,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":2152,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":2155,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":2147,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":1998,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["subquery.getrawone",{"_index":2768,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquery_for_count",{"_index":2764,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquerycount",{"_index":1983,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":1995,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":1773,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":1781,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":1971,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1144,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":2355,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":2354,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":2357,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":2390,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1129,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1155,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1143,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1147,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1168,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1167,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1157,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1170,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1165,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1158,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1161,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1162,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1145,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1148,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1154,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1152,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":2362,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":2349,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":2353,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":2352,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":2295,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":2296,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":2298,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":2303,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":2305,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":2301,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":2351,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":2366,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":2364,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":2348,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":2327,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":4182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":2302,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1171,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["subscriptionsessioncancelurl",{"_index":4186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":4184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":4054,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":2285,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":3569,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":4134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suite",{"_index":3955,"title":{},"body":{"index.html":{}}}],["summary",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["supabase",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"properties.html":{}}}],["supabase.guard",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":3029,"title":{},"body":{"injectables/UserService.html":{}}}],["supabaseauthdto",{"_index":321,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":4101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":2484,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":317,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":2490,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":2487,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":2489,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":416,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":2485,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":629,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":2495,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":636,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":634,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":632,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":2494,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":635,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":3342,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":4078,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":3504,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":3127,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":1668,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":4193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3912,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":3726,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":3702,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1039,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["take(pageoptionsdto.limit",{"_index":1641,"title":{},"body":{"injectables/InsightsService.html":{}}}],["target",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":968,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":969,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":3514,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":2007,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":549,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{},"index.html":{}}}],["team'})@column({type",{"_index":843,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":535,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":3750,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":4098,"title":{},"body":{"properties.html":{}}}],["temporary",{"_index":3557,"title":{},"body":{"changelog.html":{}}}],["terminusmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":3742,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":3965,"title":{},"body":{"index.html":{}}}],["tester",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":3705,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":3963,"title":{},"body":{"index.html":{}}}],["text",{"_index":576,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1056,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss'})@column('text",{"_index":982,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1052,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1029,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":2858,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":2810,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":1865,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1301,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":1744,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":1889,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1410,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":1405,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":2272,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":2953,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":2043,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":661,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1378,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1380,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1393,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1385,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1389,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1391,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1387,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1383,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1373,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1375,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":2283,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":2288,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":2286,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":2381,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":510,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":1878,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":660,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":665,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":2341,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1678,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1371,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1379,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1376,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1327,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1315,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":1856,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":3049,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":1707,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":1706,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1370,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1392,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1384,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1388,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1390,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1386,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1382,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":1545,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":1548,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":1550,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":1549,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":2838,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":2828,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":2830,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":2844,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":2853,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":2851,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":1592,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":1595,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":1627,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":1632,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":1634,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":1633,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":1551,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":2897,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":2873,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":2887,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":2870,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":2866,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":1505,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":2826,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":1509,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":2874,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":1703,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":1701,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger",{"_index":697,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":706,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":702,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`error",{"_index":2371,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":1466,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":700,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":2374,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":1471,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":705,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":1469,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":704,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1661,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1662,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":631,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":633,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":2389,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":2396,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":2946,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1372,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1374,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1679,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":1699,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":1704,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":1788,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":1845,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":1763,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":2576,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":1765,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":1770,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":1793,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":2024,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":2008,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":1905,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":1906,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":1877,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":1883,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":2248,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":2253,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":2254,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":2255,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":2219,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":2226,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":2227,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":2229,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":2416,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":2422,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":2423,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":2424,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":3095,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":3101,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":3102,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":3103,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":2127,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":2123,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":2089,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":2086,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":701,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2277,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2276,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":2343,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":2383,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":2368,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":2163,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":2160,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":2015,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":1802,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":2307,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":2308,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows",{"_index":2603,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":2612,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":2614,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":2615,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":2641,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":2639,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":2643,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":2782,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":2791,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":2793,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":2794,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":2773,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":2741,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.manager.createquerybuilder",{"_index":2762,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":2779,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":2781,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":2780,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":2686,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":2700,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":2695,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":2705,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":1432,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":2578,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":1438,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":1435,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":2694,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":2689,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":2687,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction(highlightid",{"_index":2704,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":2690,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":2939,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":2947,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":2959,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":2613,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(userid",{"_index":2792,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":2916,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":2992,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":2989,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":2993,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":3051,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":3033,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":3059,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":2836,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserNotificationService.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2574,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":2370,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":2198,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":2195,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1377,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":1508,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":690,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":728,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":575,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":3855,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":4131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":2329,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":2356,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":2358,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":2361,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":2360,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":2359,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":2363,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":2367,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":2365,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":939,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":3740,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":3975,"title":{},"body":{"index.html":{}}}],["top",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":1572,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":1939,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":1938,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":1940,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":1334,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["topics",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["toprepos",{"_index":2581,"title":{},"body":{"controllers/UserController.html":{}}}],["tort",{"_index":4073,"title":{},"body":{"license.html":{}}}],["total",{"_index":721,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":544,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1166,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1140,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1141,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":1672,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":1671,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":2460,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4099,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":1360,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":669,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":435,"title":{},"body":{"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/PullRequestModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":1649,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1963,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":2297,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forrootasync",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":3649,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":3996,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":4150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unable",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":1493,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":3875,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":1741,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["undefined})@column({type",{"_index":976,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":2541,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":455,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":467,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":1820,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":1965,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":541,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["undo",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":2103,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":2126,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":2101,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":2621,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":2631,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":2633,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":713,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":3972,"title":{},"body":{"index.html":{}}}],["unix",{"_index":4189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":616,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2863,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":2457,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":852,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":773,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":2846,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":2850,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":2849,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateemailpreferences",{"_index":2999,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":3017,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatehighlightdto",{"_index":2683,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":2691,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":2653,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":2680,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":1611,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":1623,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":1490,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":2876,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":2875,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter(repoinfo",{"_index":2893,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find(repoinfo",{"_index":2882,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":2855,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":2860,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":1518,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":1539,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":2500,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":2847,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":3000,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":3019,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":3001,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":3021,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":3002,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":3023,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":3003,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":3025,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":286,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":287,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":2713,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":2736,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":296,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":3004,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":3027,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":2346,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":2299,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":2304,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["url(`https://${subdomain",{"_index":4174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1446,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":1447,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["usefactory",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useguards(supabaseguard",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useless",{"_index":2753,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":884,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":2670,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apiokresponse({type",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":3062,"title":{},"body":{"injectables/UserService.html":{}}}],["user.company",{"_index":3065,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":2905,"title":{},"body":{"modules/UserModule.html":{}}}],["user.display_email",{"_index":3073,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":3067,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":2507,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":2523,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":2515,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":2510,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2530,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":2528,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:55",{"_index":2512,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:64",{"_index":2520,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:73",{"_index":2514,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:82",{"_index":2526,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:90",{"_index":2519,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:98",{"_index":2517,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":3061,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1206,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.github_sponsors_url",{"_index":3069,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1210,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1202,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":2579,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":861,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":855,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":3072,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":3070,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":3066,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":3060,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":3074,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1077,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1072,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1092,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1088,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1111,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1107,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1126,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1122,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.service",{"_index":2569,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{}}}],["user.timezone",{"_index":3068,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":1292,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":1288,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":3064,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":3063,"title":{},"body":{"injectables/UserService.html":{}}}],["user/dtos/update",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/entities/user",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["user/highlights",{"_index":2646,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":2797,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":2909,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/user",{"_index":1426,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user_follows_deleted_at",{"_index":2610,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1230,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["user_highlights",{"_index":1207,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.user_id=users.id",{"_index":2743,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":2745,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":2748,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":830,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_metadata",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":1259,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":3036,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":3035,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":2940,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_repos",{"_index":1268,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":1291,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercontroller",{"_index":2544,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["userfollowrepository",{"_index":2591,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":2617,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":2582,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":2703,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":2715,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":2717,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":2644,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1425,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":1602,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":1601,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["usermodule",{"_index":21,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":2625,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":2634,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":2567,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2561,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":3043,"title":{},"body":{"injectables/UserService.html":{}}}],["usernotification",{"_index":2931,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":2951,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":2950,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":2948,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":2949,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":2904,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":2924,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":2589,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":1255,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":2954,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":2956,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":273,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrelations",{"_index":1990,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":2036,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":2966,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["userreporepository",{"_index":2982,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":3007,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":22,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":2975,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":2369,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"index.html":{}}}],["users_email",{"_index":3040,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":3037,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1075,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1091,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1110,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1125,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1279,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["userservice",{"_index":324,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1750,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["utc",{"_index":2524,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":1457,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":2330,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":809,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":824,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1219,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":874,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":810,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{}}}],["validate",{"_index":2473,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":2478,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1676,"title":{},"body":{"classes/PageDto.html":{}}}],["validation",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["validator",{"_index":480,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["value",{"_index":450,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":3720,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":3710,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":717,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserNotification.html":{}}}],["velocity",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":608,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":622,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":3860,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":3816,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":3868,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":3580,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":4013,"title":{},"body":{"index.html":{}}}],["view",{"_index":1482,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":2501,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1231,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":531,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visual",{"_index":4019,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":3558,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":4017,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":4022,"title":{},"body":{"index.html":{}}}],["vite",{"_index":3573,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":3977,"title":{},"body":{"index.html":{}}}],["void",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":3759,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":3791,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":786,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":715,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":3836,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":2436,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1114,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":2175,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":3082,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":2167,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":2177,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":2180,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":2184,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":2187,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":2190,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":2192,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":3085,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":3092,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":2183,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":3099,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":3100,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":23,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":2171,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":2185,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":2172,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":2188,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":2016,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":1973,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":2191,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["waitlist",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":2446,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":609,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":624,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warnings",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":4060,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4056,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3957,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":1970,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":3962,"title":{},"body":{"index.html":{}}}],["web",{"_index":1350,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":2315,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":2317,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":2326,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:78",{"_index":2323,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":2316,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":3907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":2314,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":2380,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2464,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":1261,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":1254,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"contribution.repo_id",{"_index":513,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"customer.id=:id",{"_index":662,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"customer.stripe_customer_id=:id",{"_index":664,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"id",{"_index":3038,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":1552,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":1628,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":1635,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":2249,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":2221,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":2417,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":3097,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":2034,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":2033,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"user_follows.user_id",{"_index":2604,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":2785,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":2746,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.user_id",{"_index":2771,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":2941,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(\"user_repos.user_id",{"_index":2994,"title":{},"body":{"injectables/UserReposService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":2006,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":1849,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`regexp_replace(regexp_replace(user_highlights.url",{"_index":2755,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`user_highlights.url",{"_index":2760,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["whether",{"_index":1190,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":3943,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":2220,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":735,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"license.html":{}}}],["work",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":3516,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["workflows",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":3597,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":3971,"title":{},"body":{"index.html":{}}}],["writing",{"_index":3545,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["xa",{"_index":1013,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":3808,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":499,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["you'})@column({type",{"_index":1248,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["youtube",{"_index":4015,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1796,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":736,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig } from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-api.connection\"),\n        host: configService.get(\"db-api.host\"),\n        port: configService.get(\"db-api.port\"),\n        username: configService.get(\"db-api.username\"),\n        password: configService.get(\"db-api.password\"),\n        database: configService.get(\"db-api.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbUserRepo,\n          DbUserHighlight,\n          DbUserHighlightReaction,\n          DbUserNotification,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n          DbInsight,\n          DbInsightMember,\n          DbInsightRepo,\n          DbCustomer,\n          DbSubscription,\n          DbPullRequest,\n          DbPRInsight,\n          DbUserToUserFollows,\n          DbEmoji,\n          DbUserTopRepo,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"OS\"),\n        ssl: {\n          ca: configService.get(\"db-api.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-logging.connection\"),\n        host: configService.get(\"db-logging.host\"),\n        port: configService.get(\"db-logging.port\"),\n        username: configService.get(\"db-logging.username\"),\n        password: configService.get(\"db-logging.password\"),\n        database: configService.get(\"db-logging.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbLog,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"LG\"),\n        ssl: {\n          ca: configService.get(\"db-logging.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor (\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource,\n  ) {}\n\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email: session_email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role, name, bio, location, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count } = await this.userService.checkAddUser(user);\n\n      userProfile = { is_onboarded, insights_role, is_waitlisted, name, location, bio, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n      @Body() body: UserOnboardingDto,\n  ): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { email, user_metadata: { sub } } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserProfileInterestsDto,\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserEmailPreferencesDto,\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbContribution,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n    name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n    is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/open-sauced\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n    repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsDateString, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor (\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogService,\n  ) {\n    super(\n      context,\n      {\n        ...options,\n        logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n      },\n    );\n\n    this.logsService = logsService;\n  }\n\n  async log (message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error (message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn (message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_CustomerModule_exports\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbCustomer,\n    ], \"ApiConnection\"),\n  ],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor (\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById (id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer (userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor (name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery (query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn, ManyToOne, JoinColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, insightRepo => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/open-sauced'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, insight => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryColumn, Column,\n} from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:250\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:192\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:243\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:261\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:222\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:212\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n    highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n    user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n    emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public read_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/open-sauced'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor (\n    private emojiService: EmojiService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEmoji,\n    ], \"ApiConnection\"),\n  ],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor (\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiBadRequestResponse, ApiNotFoundResponse } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightReaction } from \"../user/entities/user-highlight-reaction.entity\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { HighlightController } from \"./highlight.controller\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserHighlight,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags, ApiUnauthorizedResponse, ApiBadRequestResponse, ApiBearerAuth, ApiBody } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor (\n    private readonly insightsService: InsightsService,\n  ) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor (\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsightMember (insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember (id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember (id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight (userId: number, insightId: number, accessRoles: string[], checkOwner = true): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers (\n    pageOptionsDto: PageOptionsDto,\n    insightId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor (\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n  ) {}\n\n  async addInsightRepo (insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo (id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbInsight,\n      DbInsightRepo,\n      DbInsightMember,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor (\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsight (insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight (id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight (id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: InsightPageOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(`:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `, { userId })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor (\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog (log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor (\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests (\n    @Query() pageOptionsDto: PullRequestPageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights (\n    @Query() pageOptionsDto: FilterOptionsDto,\n  ): Promise {\n    return Promise.all([30, 60].map(async interval => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor (\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs (qb: SelectQueryBuilder, type = \"all\", interval = 0, options: FilterOptionsDto) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach(type => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbPullRequest,\n      DbPRInsight,\n    ], \"ApiConnection\"),\n    RepoFilterModule,\n  ],\n  controllers: [PullRequestController],\n  providers: [PullRequestService, PullRequestInsightsService],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\"\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor (\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll (\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor (\n    contributor: string,\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters (\n    @Query() pageOptionsDto: RepoSearchOptionsDto,\n  ): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters (options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=LOWER(:repo)`, { repo: decodeURIComponent(options.repo) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([`\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `, {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([`\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters (qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/open-sauced'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n    id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/open-sauced\",\n  })\n  @IsString()\n    fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder (range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters (pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStars,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_imports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStargazers,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor (private configService: ConfigService) {}\n\n  get stripe () {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer (id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession (customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\"),\n  ],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor (\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription (subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [\n    StripeSubscriptionModule,\n    CustomerModule,\n    StripeModule,\n    UserModule,\n  ],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor (\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService,\n  ) {}\n\n  private async manageSubscriptionStatusChange (subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw (new BadRequestException);\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, { expand: [\"default_payment_method\"] });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(`Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`);\n      throw (new BadRequestException);\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook (@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw (new BadRequestException);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserSubmissions,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n  })\n  readonly notification_count?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n    access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor (\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById (\n    @Param(\"username\") username: string,\n  ): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor (\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async findUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId (userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor (\n    private readonly userService: UserService,\n    private readonly userFollowService: UserFollowService,\n  ) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiConflictResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser (\n    @Body() createHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser (\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, { ...updateHighlightDto, shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser (\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(highlightId, userId, emojiId);\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor (\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (pageOptionsDto: HighlightOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    if (pageOptionsDto.repo) {\n      queryBuilder\n\n        // eslint-disable-next-line no-useless-escape\n        .where(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`, { repo: decodeURIComponent(pageOptionsDto.repo) });\n    }\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllHighlightRepos (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .distinct(true)\n\n      // eslint-disable-next-line no-useless-escape\n      .select(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')`, \"full_name\")\n      .where(`user_highlights.url LIKE '%github.com%'`);\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const subQuery = this.userHighlightRepository.manager.createQueryBuilder()\n      .from(`(${queryBuilder.getQuery()})`, \"subquery_for_count\")\n      .setParameters(queryBuilder.getParameters())\n      .select(\"count(full_name)\");\n\n    const countQueryResult = await subQuery.getRawOne();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.user_id = :userId\", { userId })\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserHighlight (userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : (new Date),\n    });\n\n    return this.userHighlightRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight (highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight (highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions (highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder\n      .addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReaction[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction (highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction (userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction (id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService,\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"]);\n\n    if (!canAccess) {\n      throw new (UnauthorizedException);\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember (\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"], false);\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n      @Body() updateInsightMemberDto: UpdateInsightMemberDto,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new (UnauthorizedException);\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @UserId() userId: string,\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser (\n    @Body() createInsightDto: CreateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw (new BadRequestException);\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async repo => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Body() updateInsightDto: UpdateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter(insightRepo => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(repo => !updateInsightDto.repos.find(repoInfo => `${repoInfo.id}` === `${repo.repo_id}`));\n\n      const reposToRemoveRequests = reposToRemove.map(async insightRepo => this.insightsRepoService.removeInsightRepo(insightRepo.id));\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map(cr => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(repoInfo => !currentRepoIds.find(id => `${id}` === `${repoInfo.id}`));\n\n      const repoToAddRequests = reposToAdd.map(async repo => this.insightsRepoService.addInsightRepo(insight.id, repo));\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new (UnprocessableEntityException);\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n      DbUserHighlight,\n      DbUserHighlightReaction,\n      DbUserToUserFollows,\n      DbUserTopRepo,\n      DbUserNotification,\n      DbRepo,\n    ], \"ApiConnection\"),\n    PullRequestModule,\n    RepoModule,\n  ],\n  controllers: [UserController, UserHighlightsController, UserFollowsController, UserNotificationController],\n  providers: [UserService, UserController, UserHighlightsService, UserHighlightsController, UserFollowService, RepoService, RepoFilterService, UserNotificationService],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserNotification})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor (\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserNotification })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications (\n    @UserId() userId: number,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor (\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .andWhere(\"user_notifications.read_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n    const notificationIds = entities.map(notification => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification (userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: (new Date),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n    });\n  }\n\n  async addUserFollowerNotification (userId: number, followedUserId: number ) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n    });\n  }\n\n  async addUserHighlightNotification (userId: number, highlightUserId: number ) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n    });\n  }\n\n  async markNotificationsAsRead (notificationIds: number[]) {\n    const updates = notificationIds.map(async id => this.userNotificationRepository.update(id, { read_at: (new Date) }));\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nUserReposService \n\nUserReposService \n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserRepo,\n    ], \"ApiConnection\"),\n  ],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor (\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserRepo (userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: UserRepoOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder\n      .where(\"user_repos.user_id = :userId\", { userId });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"./entities/user-notification.constants\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\",\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByUsername (username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"LOWER(login) = :username\", { username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter(identity => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      return await this.findOneById(id, true);\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : (new Date),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser (id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding (id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole (id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests (id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences (id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail (email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserVotes,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.33.0 (2023-05-11)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd endpoint for fetching user notifications (#155) (01301c9)\nadd first commit and pull request date (08f1679)\nadd user notification count to session data (#158) (1c3378e)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect misaligned migrations to real values (bb26d27)\ncorrect npm package not releasing (672ea80)\ncorrect server versioning (1225197)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\nnormalize pull requests status for queries (a057e0e)\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.9 (2023-05-11)\n🐛 Bug Fixes\n\nnormalize pull requests status for queries (a057e0e)\n\n1.33.0-beta.8 (2023-05-11)\n🐛 Bug Fixes\n\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.7 (2023-05-11)\n🍕 Features\n\nadd user notification count to session data (#158) (1c3378e)\n\n1.33.0-beta.6 (2023-05-11)\n🍕 Features\n\nadd endpoint for fetching user notifications (#155) (01301c9)\n\n🐛 Bug Fixes\n\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\n\n1.33.0-beta.5 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect server versioning (1225197)\n\n1.33.0-beta.4 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect misaligned migrations to real values (bb26d27)\n\n1.33.0-beta.3 (2023-05-05)\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\n\n1.33.0-beta.2 (2023-05-04)\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n1.33.0-beta.1 (2023-05-04)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n1.33.0-alpha.3 (2023-05-04)\n🤖 Build System\n\nupdate dependencies (abb24de)\n\n1.33.0-alpha.2 (2023-05-03)\n🐛 Bug Fixes\n\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n1.33.0-alpha.1 (2023-05-03)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\n\n1.32.0-alpha.1 (2023-04-28)\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\n\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n1.29.0-alpha.3 (2023-03-21)\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n🍕 Features\n\nexperimental build improvements (70a6e7b)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\n\n1.32.0 (2023-05-02)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.32.0-beta.1 (2023-04-26)\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        21 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    26 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.33.0\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return parseInt(request.user?.user_metadata.sub as string, 10);\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
