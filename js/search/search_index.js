var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiServicesModule.html",[0,1.191,1,3.009]],["body/modules/ApiServicesModule.html",[0,2.095,1,6.138,2,2.654,3,3.281,4,6.429,5,6.429,6,6.429,7,5.411,8,0.006,9,3.342,10,2.803,11,2.654,12,0.078,13,0.078,14,0.069,15,7.191,16,7.191,17,3.54,18,3.685,19,0.113,20,0.881,21,7.191,22,0.095,23,0.221,24,0.005,25,0.005]],["title/modules/AppModule.html",[0,1.191,26,3.763]],["body/modules/AppModule.html",[0,1.106,2,1.061,3,1.731,8,0.006,9,1.764,10,1.121,11,1.061,12,0.031,13,0.031,14,0.028,17,1.187,19,0.134,20,0.352,22,0.038,23,0.088,24,0.003,25,0.003,26,7.78,27,2.57,28,2.57,29,5.101,30,5.354,31,5.354,32,5.354,33,4.883,34,5.354,35,5.354,36,5.354,37,5.354,38,5.354,39,5.354,40,4.693,41,5.354,42,4.883,43,4.234,44,5.354,45,5.354,46,5.101,47,5.354,48,5.354,49,4.373,50,5.101,51,5.354,52,2.874,53,2.794,54,0.556,55,2.874,56,4.524,57,6.344,58,0.158,59,2.874,60,0.54,61,0.704,62,0.259,63,0.277,64,2.874,65,0.556,66,2.101,67,2.874,68,2.874,69,1.347,70,0.855,71,5.673,72,5.046,73,1.715,74,4.045,75,2.37,76,4.045,77,2.37,78,2.874,79,2.101,80,4.045,81,5.594,82,0.713,83,5.594,84,2.874,85,2.874,86,2.37,87,2.37,88,2.37,89,3.73,90,3.73,91,3.73,92,3.73,93,3.73,94,3.73,95,3.73,96,4.524,97,1.916,98,2.874,99,1.944,100,1.523,101,2.221,102,1.916,103,2.794,104,2.874,105,2.614,106,2.001,107,2.794,108,2.22,109,2.794,110,2.22,111,2.794,112,2.22,113,2.898,114,2.874,115,3.114,116,2.898,117,2.874,118,2.794,119,2.874,120,2.57,121,2.874,122,2.874,123,2.874,124,2.874,125,2.874,126,2.001,127,2.22,128,2.874,129,4.524,130,2.22,131,2.874,132,2.874,133,2.7,134,2.874,135,3.015,136,4.524,137,0.955,138,3.149,139,2.57,140,3.149,141,3.149,142,2.874,143,2.37,144,1.841,145,2.874,146,2.874,147,3.494,148,2.57,149,3.149,150,2.37,151,3.149,152,2.874,153,2.621,154,1.566,155,2.37,156,2.794,157,3.149,158,2.001,159,2.614,160,5.101,161,1.841,162,2.874,163,3.015,164,2.22,165,3.015,166,2.22,167,2.898,168,2.57,169,2.536,170,1.411,171,1.775,172,3.015,173,0.926,174,2.101,175,3.306,176,1.611,177,3.015,178,2.22,179,3.015,180,2.22,181,2.874,182,2.794,183,2.37,184,2.874,185,1.024,186,1.523,187,2.22,188,2.874,189,4.524,190,2.874,191,2.874,192,2.874,193,2.874,194,2.57,195,2.874,196,3.357,197,4.524,198,1.389,199,5.594,200,4.524,201,9.087,202,2.874,203,3.494,204,2.874,205,3.494,206,2.874,207,2.614,208,2.874,209,4.045,210,2.874,211,3.306,212,2.874,213,4.524,214,2.804,215,1.458,216,4.524,217,3.149,218,1.246,219,2.874,220,4.045,221,4.045,222,2.874,223,4.524,224,4.045,225,2.874,226,5.594,227,3.73,228,2.874,229,2.874,230,2.874,231,2.874,232,2.874,233,2.874,234,2.874,235,2.874,236,2.874,237,2.874,238,2.874,239,2.874,240,2.101,241,2.874,242,2.874,243,2.22,244,2.874,245,1.661,246,2.874,247,2.874,248,2.874,249,2.874,250,2.874,251,2.874,252,2.874,253,2.874,254,2.57,255,2.874,256,2.874,257,1.841,258,2.37,259,1.916,260,2.22,261,2.874,262,2.22,263,2.22,264,0.792,265,2.874,266,1.156,267,1.265,268,2.874,269,2.874]],["title/controllers/AuthController.html",[270,1.044,271,3.763]],["body/controllers/AuthController.html",[8,0.006,12,0.032,13,0.032,14,0.028,19,0.118,20,0.359,22,0.039,23,0.09,24,0.003,25,0.003,54,0.889,58,0.424,60,1.451,61,0.912,62,0.427,63,0.744,65,1.494,79,2.141,101,3.148,102,1.953,137,2.062,218,1.265,264,0.807,266,1.447,270,0.628,271,3.547,272,0.771,273,2.62,274,1.063,275,3.943,276,0.132,277,1.908,278,4.593,279,6.412,280,6.412,281,6.412,282,6.964,283,6.964,284,6.412,285,2.93,286,6.367,287,0.947,288,2.93,289,4.593,290,3.027,291,4.126,292,6.09,293,2.93,294,2.93,295,2.93,296,2.928,297,2.93,298,2.93,299,4.107,300,5.733,301,5.664,302,5.664,303,5.581,304,2.836,305,2.93,306,2.93,307,1.136,308,4.022,309,4.686,310,2.93,311,5.855,312,4.686,313,5.479,314,4.032,315,2.93,316,3.042,317,2.93,318,2.93,319,5.286,320,2.93,321,2.93,322,6.771,323,5.398,324,2.93,325,4.806,326,5.733,327,4.593,328,5.065,329,5.664,330,2.93,331,2.93,332,5.398,333,2.93,334,4.641,335,2.93,336,2.93,337,2.93,338,6.591,339,2.04,340,2.93,341,2.93,342,2.93,343,2.141,344,1.405,345,1.286,346,3.584,347,3.398,348,3.618,349,3.176,350,2.951,351,1.063,352,0.441,353,1.953,354,2.85,355,2.263,356,3.775,357,2.62,358,3.775,359,2.62,360,5.664,361,2.62,362,2.62,363,2.62,364,5.378,365,2.93,366,2.93,367,2.93,368,1.187,369,2.62,370,2.62,371,2.62,372,2.93,373,2.93,374,1.009,375,2.93,376,3.462,377,2.85,378,2.93,379,2.93,380,1.842,381,3.943,382,4.593,383,3.787,384,4.107,385,1.791,386,1.974,387,4.107,388,5.664,389,1.286,390,3.787,391,5.664,392,1.81,393,2.62,394,1.694,395,0.96,396,1.553,397,2.416,398,3.547,399,3.787,400,4.107,401,3.547,402,3.547,403,3.547,404,3.547,405,3.547,406,2.255,407,3.547,408,3.547,409,3.547,410,4.107,411,1.945,412,2.93,413,1.694,414,2.263,415,2.93,416,1.389,417,2.93,418,2.93,419,2.93,420,2.93,421,1.145,422,2.93,423,4.593,424,2.263,425,2.93,426,2.93,427,2.93,428,2.93,429,2.93,430,2.93,431,2.93,432,2.93,433,3.787,434,2.93,435,5.065,436,0.434,437,2.93,438,2.93,439,2.93,440,2.93,441,2.93,442,2.93,443,2.93,444,2.93,445,2.93,446,2.93,447,2.93,448,2.93,449,2.93,450,3.547,451,2.93,452,2.93]],["title/modules/AuthModule.html",[0,1.191,29,3.392]],["body/modules/AuthModule.html",[0,1.889,2,2.243,3,2.958,8,0.006,9,3.013,10,2.369,11,2.243,12,0.066,13,0.066,14,0.059,17,3.191,18,3.322,19,0.129,20,0.745,22,0.08,23,0.186,24,0.004,25,0.004,29,7.096,33,6.292,49,5.634,50,6.572,53,3.13,126,4.231,137,1.283,138,4.231,139,5.434,143,5.01,271,6.565,272,2.035,368,4.047,369,5.434,453,5.434,454,5.434,455,5.434,456,5.434,457,6.572,458,7.303,459,6.077,460,7.73,461,5.01,462,5.434,463,6.077,464,6.077]],["title/classes/BakeRepoDto.html",[23,0.149,465,3.561]],["body/classes/BakeRepoDto.html",[8,0.006,12,0.071,13,0.071,14,0.064,19,0.107,22,0.087,23,0.25,24,0.005,25,0.005,58,0.447,62,0.447,214,2.525,276,0.297,287,0.998,352,0.993,374,2.802,406,4.646,421,1.262,436,1.428,465,5.948,466,1.846,467,7.891,468,5.901,469,1.401,470,8.462,471,3.296,472,2.39,473,7.278,474,2.219,475,5.948,476,5.901,477,6.599,478,3.996,479,8.139,480,5.666,481,8.139,482,8.139,483,5.097,484,6.599,485,3.574,486,5.666,487,3.233,488,2.197,489,3.497]],["title/controllers/BlogSummaryController.html",[270,1.044,490,3.763]],["body/controllers/BlogSummaryController.html",[8,0.006,12,0.067,13,0.067,14,0.059,19,0.122,20,0.756,22,0.081,23,0.189,24,0.004,25,0.004,54,1.51,58,0.339,60,1.16,61,0.684,62,0.362,63,0.594,65,1.194,173,1.988,218,1.7,267,1.726,270,1.322,272,1.624,274,2.238,276,0.278,277,1.731,287,0.756,290,3.297,308,3.104,344,2.958,345,2.708,346,3.498,347,4.136,350,2.881,351,2.238,352,0.928,368,2.499,374,2.125,376,2.766,377,2.278,380,1.422,411,1.624,416,1.11,421,0.957,490,6.028,491,6.028,492,5.087,493,6.171,494,7.805,495,6.171,496,6.926,497,5.517,498,6.979,499,4.658,500,6.979,501,7.805,502,6.171,503,4.251,504,3.459,505,5.517,506,7.805,507,1.925,508,4.819,509,4.251,510,2.827,511,2.958,512,5.703,513,4.766,514,5.959,515,3.81,516,4.766,517,6.171,518,6.171,519,2.199,520,5.517,521,6.171,522,6.171,523,2.238]],["title/modules/BlogSummaryModule.html",[0,1.191,30,3.561]],["body/modules/BlogSummaryModule.html",[0,2.026,2,2.509,3,3.172,8,0.006,9,3.231,10,2.65,11,2.509,12,0.073,13,0.073,14,0.066,17,3.422,18,3.563,19,0.122,20,0.833,22,0.089,23,0.209,24,0.005,25,0.005,30,7.302,40,6.218,53,3.356,185,2.422,186,3.602,187,5.25,272,2.182,490,6.906,491,5.25,514,7.06,515,5.118,516,5.25,524,6.078,525,6.078,526,6.798,527,6.078,528,6.078,529,6.078]],["title/injectables/BlogSummaryService.html",[514,3.392,530,0.826]],["body/injectables/BlogSummaryService.html",[8,0.006,12,0.062,13,0.062,14,0.055,19,0.109,20,0.705,22,0.076,23,0.176,24,0.004,25,0.004,54,1.443,58,0.454,60,1.556,61,0.918,62,0.384,63,0.797,65,1.443,185,2.048,186,3.046,245,3.322,259,3.831,264,1.583,266,2.115,276,0.259,277,1.674,290,2.966,307,1.032,380,1.719,394,3.322,413,3.322,416,1.342,436,1.378,491,6.767,496,6.402,498,6.669,499,3.43,507,2.327,511,2.756,512,6.634,513,4.44,514,5.192,519,2.048,530,1.265,531,1.822,532,4.739,533,5.192,534,4.002,535,5.216,536,5.14,537,7.458,538,5.748,539,5.45,540,5.612,541,6.32,542,5.14,543,4.941,544,3.831,545,4.002,546,3.831,547,3.831,548,4.201,549,2.693,550,4.002,551,4.201,552,4.201,553,4.201,554,4.201,555,4.739,556,3.831,557,4.739,558,5.14,559,5.14,560,4.002,561,5.303,562,3.55,563,5.748,564,5.748,565,5.192,566,4.002,567,4.201,568,5.14,569,4.739,570,4.002,571,5.063,572,4.002,573,4.002,574,4.002]],["title/interfaces/ChatResponse.html",[575,3.009,576,3.763]],["body/interfaces/ChatResponse.html",[8,0.006,12,0.066,13,0.066,14,0.059,19,0.112,20,0.747,22,0.08,23,0.187,24,0.004,25,0.004,62,0.415,72,5.257,73,3.639,137,1.288,186,3.231,218,1.68,260,4.71,276,0.274,277,1.233,307,0.76,308,3.068,344,2.923,380,1.962,381,5.392,411,2.039,416,1.097,436,1.261,469,1.333,519,2.173,523,2.211,530,1.314,535,3.419,556,4.064,561,5.737,575,3.765,576,6.575,577,4.71,578,4.71,579,5.027,580,8.009,581,7.746,582,7.79,583,5.027,584,5.452,585,3.419,586,5.452,587,6.926,588,5.453,589,4.71,590,5.027,591,4.245,592,5.027,593,5.452,594,5.452,595,3.906,596,5.452,597,5.452,598,4.71,599,5.452,600,5.452,601,5.452,602,5.452,603,5.452,604,2.251,605,5.452,606,4.71,607,5.027,608,5.452,609,2.211,610,5.452,611,2.568,612,5.452,613,3.419,614,5.452,615,5.452,616,5.452]],["title/controllers/CodeExplanationController.html",[270,1.044,617,3.763]],["body/controllers/CodeExplanationController.html",[8,0.006,12,0.067,13,0.067,14,0.06,19,0.122,20,0.758,22,0.081,23,0.19,24,0.004,25,0.004,54,1.512,58,0.339,60,1.162,61,0.686,62,0.362,63,0.595,65,1.196,173,1.992,218,1.703,270,1.324,272,1.627,274,2.241,276,0.278,277,1.732,287,0.758,290,2.645,308,3.11,344,2.963,345,2.712,346,3.502,347,4.14,350,2.884,351,2.241,352,0.93,368,2.503,374,2.128,376,2.771,377,2.281,380,1.424,411,1.627,416,1.112,421,0.958,503,4.256,504,3.465,507,1.928,508,4.825,509,4.256,510,2.832,511,2.963,519,2.203,523,2.241,617,6.035,618,3.291,619,5.207,620,5.527,621,4.303,622,6.035,623,6.181,624,7.119,625,6.181,626,7.813,627,5.71,628,6.441,629,4.825,630,5.096,631,6.181,632,4.421,633,5.527,634,5.964,635,5.527,636,4.517,637,4.517,638,3.367,639,6.181,640,4.774,641,5.71,642,6.181]],["title/injectables/CodeExplanationService.html",[530,0.826,634,3.392]],["body/injectables/CodeExplanationService.html",[8,0.006,12,0.064,13,0.064,14,0.057,19,0.111,20,0.728,22,0.078,23,0.182,24,0.004,25,0.004,54,1.474,58,0.461,60,1.58,61,0.932,62,0.39,63,0.81,65,1.474,185,2.116,186,3.146,245,3.431,264,1.635,266,2.148,276,0.267,277,1.7,307,1.048,380,1.755,394,3.431,411,1.563,413,3.431,416,1.37,436,1.245,499,3.543,507,2.376,511,2.846,519,2.116,530,1.291,531,1.882,533,5.301,534,4.133,535,5.261,539,5.565,540,5.681,543,4.545,544,3.957,545,4.133,546,3.957,547,3.957,548,4.339,549,2.781,550,4.133,560,4.133,561,4.878,565,5.301,566,4.133,567,4.339,570,4.133,571,5.125,572,4.133,573,4.133,574,4.133,618,3.735,619,5.911,624,6.481,628,6.278,632,4.339,633,5.309,634,5.301,643,5.309,644,7.616,645,5.937,646,7.616,647,5.937,648,5.937,649,4.339,650,4.895,651,4.895,652,4.895]],["title/controllers/CodeRefactorSuggestionController.html",[270,1.044,653,3.763]],["body/controllers/CodeRefactorSuggestionController.html",[8,0.006,12,0.066,13,0.066,14,0.059,19,0.122,20,0.747,22,0.08,23,0.187,24,0.004,25,0.004,54,1.499,58,0.335,60,1.146,61,0.676,62,0.359,63,0.587,65,1.18,173,1.965,218,1.68,270,1.306,272,1.605,274,2.211,276,0.274,277,1.721,287,0.747,290,2.623,308,3.068,344,2.923,345,2.676,346,3.472,347,4.105,350,2.859,351,2.211,352,0.917,368,2.469,374,2.1,376,2.733,377,2.251,380,1.405,411,1.605,416,1.097,421,0.945,503,4.219,504,3.419,507,1.902,508,4.783,509,4.219,510,2.793,511,2.923,519,2.173,523,2.211,618,3.263,619,5.163,621,4.245,622,5.983,627,5.661,629,4.783,630,5.027,632,4.393,636,4.456,637,4.456,638,3.321,640,4.71,641,6.162,653,5.983,654,6.578,655,5.452,656,6.098,657,7.1,658,6.098,659,7.746,660,5.392,661,6.098,662,4.71,663,5.927,664,5.027,665,6.098,666,6.098]],["title/injectables/CodeRefactorSuggestionService.html",[530,0.826,663,3.392]],["body/injectables/CodeRefactorSuggestionService.html",[8,0.006,12,0.061,13,0.061,14,0.054,19,0.108,20,0.691,22,0.074,23,0.173,24,0.004,25,0.004,54,1.426,58,0.45,60,1.542,61,0.91,62,0.38,63,0.79,65,1.426,185,2.01,186,2.989,245,3.26,259,3.759,264,1.554,266,2.096,276,0.254,277,1.658,304,3.483,307,1.022,380,1.698,394,3.26,411,1.485,413,3.26,416,1.325,421,0.874,436,1.215,499,3.366,507,2.298,511,2.704,519,2.01,530,1.249,531,1.788,533,5.128,534,3.927,535,5.189,539,5.383,540,5.572,543,4.396,544,3.759,545,3.927,546,3.759,547,3.759,548,4.122,549,2.642,550,3.927,551,4.122,552,4.122,553,4.122,554,4.122,560,3.927,561,4.719,565,5.128,566,3.927,567,4.122,570,3.927,571,5.027,572,3.927,573,3.927,574,3.927,618,3.663,619,5.797,632,4.865,641,5.468,649,4.122,650,6.764,651,4.65,652,4.65,654,6.443,657,6.356,662,4.356,663,5.128,667,4.65,668,6.587,669,5.043,670,6.587,671,5.043,672,5.043,673,5.043,674,5.043,675,3.927,676,4.356,677,5.043,678,3.483,679,6.587,680,4.65,681,3.162,682,4.65]],["title/controllers/CodeTestSuggestionController.html",[270,1.044,683,3.763]],["body/controllers/CodeTestSuggestionController.html",[8,0.006,12,0.067,13,0.067,14,0.059,19,0.122,20,0.755,22,0.081,23,0.189,24,0.004,25,0.004,54,1.509,58,0.338,60,1.158,61,0.683,62,0.362,63,0.593,65,1.192,173,1.985,218,1.697,270,1.32,272,1.622,274,2.234,276,0.277,277,1.729,287,0.755,290,2.64,308,3.099,344,2.953,345,2.703,346,3.495,347,4.131,350,2.878,351,2.234,352,0.926,368,2.494,374,2.121,376,2.761,377,2.274,380,1.42,411,1.622,416,1.108,421,0.955,503,4.247,504,3.454,507,1.922,508,4.814,509,4.247,510,2.822,511,2.953,519,2.195,523,2.234,618,3.284,619,5.196,621,4.288,622,6.022,627,5.697,629,4.814,630,5.079,632,4.414,636,4.502,637,4.502,638,3.355,640,4.758,641,5.701,662,4.758,664,5.079,683,6.022,684,5.508,685,6.16,686,7.115,687,6.16,688,7.796,689,5.992,690,6.16,691,5.955,692,6.16,693,6.16]],["title/injectables/CodeTestSuggestionService.html",[530,0.826,691,3.392]],["body/injectables/CodeTestSuggestionService.html",[8,0.006,12,0.062,13,0.062,14,0.055,19,0.109,20,0.705,22,0.076,23,0.176,24,0.004,25,0.004,54,1.443,58,0.454,60,1.556,61,0.918,62,0.384,63,0.797,65,1.443,185,2.048,186,3.046,245,3.322,259,3.831,264,1.583,266,2.115,276,0.259,277,1.674,304,3.55,307,1.032,380,1.719,394,3.322,413,3.322,416,1.342,421,0.891,499,3.43,507,2.327,511,2.756,519,2.048,530,1.265,531,1.822,533,5.192,534,4.002,535,5.216,540,4.777,544,3.831,545,4.002,546,3.831,547,3.831,549,2.693,550,4.002,551,4.201,552,4.201,553,4.201,554,4.201,560,4.002,561,4.777,565,5.192,566,4.002,570,4.002,571,5.063,572,4.002,573,4.002,574,4.002,618,3.69,619,5.839,632,4.801,641,4.971,649,4.201,650,6.826,651,4.739,662,4.44,667,4.739,669,5.14,671,5.14,672,5.14,673,5.14,674,5.14,675,4.002,676,4.44,677,5.14,678,3.55,679,6.669,680,4.739,681,3.223,682,4.739,686,6.402,689,6.2,691,5.192,694,7.458,695,7.458,696,7.458,697,5.748]],["title/classes/CommitAuthorDto.html",[23,0.149,698,4.017]],["body/classes/CommitAuthorDto.html",[8,0.006,12,0.077,13,0.077,14,0.069,19,0.112,22,0.094,23,0.262,24,0.005,25,0.005,58,0.392,62,0.424,276,0.322,287,0.876,325,4.79,352,1.075,395,2.798,421,1.108,436,1.402,466,1.999,469,1.47,471,2.894,474,2.057,485,3.459,487,3.394,488,2.38,698,7.043,699,6.391,700,9.138,701,5.473,702,5.473,703,7.148,704,7.148,705,5.521]],["title/injectables/CommitAuthorsService.html",[530,0.826,706,3.392]],["body/injectables/CommitAuthorsService.html",[7,5.016,8,0.006,12,0.062,13,0.062,14,0.055,19,0.125,20,0.704,22,0.075,23,0.176,24,0.004,25,0.004,54,1.442,58,0.48,60,1.555,61,0.917,62,0.384,63,0.797,65,1.601,70,1.707,82,1.423,116,3.676,198,1.762,218,1.581,264,2.052,266,1.904,276,0.258,277,1.88,296,2.868,307,1.031,380,2.018,389,1.879,411,1.511,416,1.488,523,2.081,530,1.263,531,1.819,706,5.187,707,8.114,708,5.132,709,3.842,710,7.451,711,6.662,712,5.739,713,2.646,714,5.739,715,7.451,716,5.739,717,7.451,718,2.376,719,5.739,720,6.662,721,5.739,722,3.657,723,2.37,724,2.045,725,1.557,726,1.943,727,2.118,728,3.676,729,4.731,730,5.739,731,3.657,732,5.739,733,3.416,734,3.34,735,3.825,736,3.676,737,4.433,738,4.061,739,2.817]],["title/classes/CommitsDto.html",[23,0.149,740,4.017]],["body/classes/CommitsDto.html",[8,0.006,12,0.078,13,0.078,14,0.069,19,0.113,22,0.094,23,0.263,24,0.005,25,0.005,58,0.394,62,0.425,276,0.323,287,0.88,352,1.079,421,1.113,436,1.404,466,2.007,469,1.474,471,2.906,474,2.062,485,3.468,487,3.402,488,2.389,701,5.486,740,7.06,741,6.417,742,8.185,743,7.657,744,7.657,745,7.176,746,7.176,747,6.417]],["title/injectables/CommitsService.html",[530,0.826,748,3.392]],["body/injectables/CommitsService.html",[7,4.919,8,0.006,12,0.057,13,0.057,14,0.051,19,0.122,20,0.649,22,0.07,23,0.162,24,0.004,25,0.004,54,1.367,58,0.485,60,1.594,61,0.941,62,0.393,63,0.817,65,1.642,70,1.575,82,1.313,118,3.269,198,1.625,218,1.458,264,1.946,266,1.805,276,0.238,277,1.93,296,2.978,307,1.19,380,2.037,389,2.238,411,1.393,416,1.526,523,1.919,530,1.198,531,1.678,709,3.723,713,2.564,718,2.485,722,3.468,723,2.185,724,1.886,725,1.436,726,1.792,727,1.954,728,3.391,731,3.468,733,3.649,734,3.564,735,4.708,736,4.525,737,4.088,738,3.903,739,2.598,748,4.918,749,4.733,750,7.064,751,7.064,752,6.316,753,5.293,754,5.293,755,7.064,756,5.293,757,7.064,758,5.293,759,7.064,760,5.293,761,6.316,762,5.293,763,4.364,764,5.293,765,5.293,766,5.293,767,5.293]],["title/modules/ContributionModule.html",[0,1.191,31,3.561]],["body/modules/ContributionModule.html",[0,1.994,2,2.445,3,3.122,8,0.006,9,3.18,10,2.582,11,2.445,12,0.072,13,0.072,14,0.064,17,3.368,18,3.506,19,0.129,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,31,7.271,43,5.575,53,3.303,69,3.103,70,1.97,97,4.414,99,2.847,100,3.51,103,5.037,198,2.034,272,2.147,472,1.718,768,5.922,769,6.623,770,5.922,771,5.922,772,7.037,773,6.623,774,6.827,775,5.461,776,5.922,777,6.623,778,4.611]],["title/classes/ContributionPageOptionsDto.html",[23,0.149,779,3.561]],["body/classes/ContributionPageOptionsDto.html",[8,0.006,12,0.06,13,0.06,14,0.054,19,0.107,22,0.096,23,0.225,24,0.004,25,0.004,58,0.494,62,0.417,63,0.938,267,2.745,276,0.252,287,1.103,307,1.018,352,0.842,385,2.857,386,3.15,466,1.565,469,1.261,488,1.864,549,2.622,611,3.442,718,2.404,724,1.994,725,1.518,779,5.356,780,6.043,781,2.936,782,2.966,783,2.612,784,5.447,785,3.598,786,4.109,787,3.829,788,7.421,789,2.623,790,3.791,791,7.308,792,4.109,793,4.582,794,5.356,795,5.597,796,5.004,797,2.888,798,3.992,799,2.966,800,3.048,801,4.862,802,3.34,803,4.112,804,2.888,805,3.138,806,3.234,807,3.048,808,3.234,809,3.598,810,2.622,811,2.509,812,3.138,813,3.138,814,3.234,815,3.598,816,3.585,817,3.434,818,4.374,819,5.102,820,6.043,821,4.109,822,5.597]],["title/injectables/ContributionService.html",[530,0.826,772,3.392]],["body/injectables/ContributionService.html",[8,0.006,12,0.064,13,0.064,14,0.057,19,0.127,20,0.729,22,0.078,23,0.182,24,0.004,25,0.004,54,1.475,58,0.418,60,1.433,61,0.845,62,0.354,63,0.734,65,1.151,70,1.769,82,1.475,103,3.672,198,1.826,215,1.916,218,2.1,264,2.1,266,1.519,276,0.268,277,1.701,296,2.497,307,1.048,380,2.115,411,2.007,416,1.07,530,1.293,531,1.885,713,2.682,718,1.948,723,2.455,724,2.119,725,1.613,726,2.013,727,2.195,733,3.148,772,5.307,775,4.903,779,6.485,781,2.013,788,4.903,791,5.318,803,2.992,804,3.069,823,5.318,824,5.081,825,5.947,826,5.947,827,7.624,828,5.081,829,6.535,830,5.947,831,4.14,832,4.903,833,4.593,834,4.702,835,3.437,836,5.318,837,5.947,838,5.947,839,5.318,840,5.318,841,5.947,842,5.318,843,5.318,844,5.947,845,4.903,846,4.903,847,4.274,848,4.14,849,3.672,850,3.549]],["title/controllers/ContributorController.html",[270,1.044,851,3.763]],["body/controllers/ContributorController.html",[8,0.006,12,0.067,13,0.067,14,0.06,19,0.127,20,0.76,22,0.082,23,0.19,24,0.004,25,0.004,54,1.515,58,0.34,60,1.166,61,0.688,62,0.363,63,0.597,65,1.2,153,4.354,154,3.378,173,2.523,267,1.735,270,1.329,272,1.633,274,2.249,276,0.279,277,1.735,287,0.76,290,2.651,296,2.564,349,3.11,350,2.89,351,2.249,352,0.933,374,2.136,377,2.289,416,1.116,519,2.21,638,4.265,718,2.001,725,1.683,726,2.1,727,2.289,821,3.477,851,6.048,852,5.546,853,5.973,854,9.294,855,6.203,856,6.586,857,5.113,858,7.001,859,5.451,860,4.835,861,4.39,862,6.203,863,5.973,864,6.203,865,3.366,866,2.841,867,2.973,868,2.78,869,2.973,870,5.299,871,4.533,872,5.016,873,5.113,874,6.203,875,5.546,876,5.113,877,5.546,878,6.203]],["title/controllers/ContributorInsightsController.html",[270,1.044,879,3.763]],["body/controllers/ContributorInsightsController.html",[8,0.006,12,0.05,13,0.05,14,0.044,19,0.118,20,0.564,22,0.061,23,0.141,24,0.004,25,0.004,54,1.243,58,0.439,60,1.504,61,0.888,62,0.423,63,0.771,65,1.549,153,3.465,154,2.508,173,2.07,218,1.769,267,1.288,270,0.987,272,1.212,274,1.67,276,0.207,277,1.936,287,0.981,290,3.09,296,2.989,349,3.344,350,3.107,351,1.67,352,0.693,374,1.585,377,2.954,416,1.44,472,2.367,519,1.641,649,4.694,660,6.07,718,2.332,726,1.559,727,1.7,787,3.009,809,4.28,811,3.908,821,2.582,853,6.354,863,6.454,865,3.618,866,2.109,867,2.207,868,2.064,869,2.207,870,4.568,871,3.365,872,4.114,873,3.796,875,4.117,877,7.157,879,4.961,880,7.527,881,4.117,882,4.605,883,8.418,884,8.418,885,8.418,886,8.418,887,4.605,888,7.05,889,4.605,890,9.127,891,6.372,892,5.743,893,4.28,894,8.004,895,4.605,896,4.605,897,4.605,898,4.605,899,4.605,900,4.605,901,5.743,902,4.605,903,4.605,904,4.605,905,2.458,906,4.605,907,4.117,908,4.605,909,4.605,910,6.599,911,4.605,912,4.605,913,4.605,914,4.605,915,4.605,916,4.605,917,4.605]],["title/modules/ContributorModule.html",[0,1.191,32,3.561]],["body/modules/ContributorModule.html",[0,2.044,2,2.548,3,3.201,8,0.006,9,3.261,10,2.691,11,2.548,12,0.075,13,0.075,14,0.067,19,0.128,20,0.846,22,0.091,23,0.212,24,0.005,25,0.005,32,7.119,42,6.493,53,3.387,69,3.233,70,2.053,153,3.919,154,3.759,155,5.69,156,4.262,157,4.805,158,4.805,198,2.119,272,2.202,821,3.869,851,6.952,879,6.952,918,6.902,919,6.902,920,6.902,921,6.902,922,6.902,923,6.171]],["title/classes/CreateBlogSummaryDto.html",[23,0.149,496,3.561]],["body/classes/CreateBlogSummaryDto.html",[8,0.006,12,0.057,13,0.057,14,0.051,19,0.092,22,0.069,23,0.216,24,0.004,25,0.004,58,0.498,62,0.466,276,0.236,287,1.112,290,3.188,307,1.173,352,0.79,421,1.407,436,1.466,466,1.47,469,1.21,471,3.674,474,2.267,485,3.752,487,3.502,488,1.75,496,5.137,500,6.286,512,7.099,541,6.138,543,5.262,562,4.341,588,5.648,789,1.879,924,8.285,925,4.332,926,7.922,927,7.922,928,7.083,929,5.137,930,4.698,931,4.698,932,5.789,933,3.84,934,5.137,935,5.137,936,5.137,937,5.137,938,5.137,939,5.137,940,5.137,941,5.137,942,5.137,943,4.698,944,3.451,945,3.658,946,4.698,947,3.658,948,4.698,949,4.332,950,5.796,951,5.796,952,5.796,953,6.531,954,4.698,955,3.245,956,5.074,957,3.245,958,3.245,959,3.658,960,3.658,961,3.658,962,3.502,963,3.658,964,3.658,965,4.332,966,3.84]],["title/classes/CreateEndorsementDto.html",[23,0.149,967,3.392]],["body/classes/CreateEndorsementDto.html",[8,0.006,12,0.058,13,0.096,14,0.052,19,0.094,22,0.07,23,0.218,24,0.004,25,0.004,58,0.501,62,0.462,63,0.686,137,1.8,257,4.561,276,0.241,287,1.118,307,1.204,352,0.806,389,2.072,395,3.297,406,4.184,421,1.414,436,1.351,466,1.498,469,1.225,471,3.593,474,2.328,475,5.203,485,3.694,487,3.386,488,1.783,713,2.152,789,1.903,810,2.509,815,3.495,817,3.336,956,5.46,967,4.956,968,8.325,969,4.416,970,7.151,971,7.151,972,3.747,973,7.151,974,7.151,975,7.466,976,6.366,977,5.356,978,5.356,979,5.203,980,5.356,981,5.356,982,5.356,983,5.356,984,6.366,985,4.416,986,5.356,987,5.356,988,5.356,989,5.356,990,5.356,991,4.789,992,5.356,993,4.789,994,5.356,995,4.137]],["title/classes/CreateInsightDto.html",[23,0.149,996,3.561]],["body/classes/CreateInsightDto.html",[8,0.006,12,0.065,13,0.065,14,0.058,19,0.118,22,0.08,23,0.26,24,0.004,25,0.004,58,0.466,61,1.023,62,0.461,185,2.158,196,3.533,214,2.318,276,0.273,287,1.04,313,5.141,352,0.911,389,1.376,421,1.316,436,1.323,466,1.694,469,1.327,471,3.436,474,2.272,478,4.386,483,4.678,485,3.618,486,5.369,487,3.064,488,2.017,489,3.209,713,2.331,781,3.025,996,5.636,997,7.366,998,4.993,999,6.555,1000,3.436,1001,4.611,1002,5.957,1003,6.057,1004,5.416,1005,6.057,1006,6.042,1007,4.941,1008,6.897,1009,5.009,1010,5.416,1011,6.057,1012,4.426,1013,4.037,1014,4.993,1015,4.216,1016,6.057,1017,3.74]],["title/classes/CreateInsightMemberDto.html",[23,0.149,1018,3.763]],["body/classes/CreateInsightMemberDto.html",[8,0.006,12,0.076,13,0.076,14,0.068,19,0.112,22,0.093,23,0.26,24,0.005,25,0.005,58,0.388,62,0.422,276,0.318,287,0.866,325,5.408,352,1.062,421,1.095,436,1.397,466,1.976,469,1.46,471,2.86,474,2.043,485,3.435,488,2.352,705,5.456,997,6.994,1001,4.867,1015,5.906,1018,6.552,1019,5.824,1020,6.199,1021,7.585,1022,6.316,1023,7.064,1024,7.585]],["title/classes/CreateIssueSummaryDto.html",[23,0.149,1025,3.561]],["body/classes/CreateIssueSummaryDto.html",[8,0.006,12,0.055,13,0.055,14,0.049,19,0.09,22,0.067,23,0.21,24,0.004,25,0.004,58,0.504,62,0.468,276,0.228,287,1.125,290,3.161,307,1.163,352,0.761,421,1.467,436,1.477,466,1.416,469,1.18,471,3.716,474,2.248,485,3.78,487,3.565,488,1.686,515,6.079,541,6.061,543,5.196,562,4.234,588,5.577,789,1.832,925,4.174,928,6.951,929,5.681,930,4.527,931,4.527,932,5.681,933,3.7,934,5.01,935,5.01,936,5.01,937,5.01,938,5.01,939,5.01,940,5.01,941,5.01,942,5.01,943,4.527,944,3.366,945,3.525,946,4.527,947,3.525,948,4.527,949,4.174,950,5.653,951,5.653,952,5.653,953,6.409,954,4.527,955,3.126,956,4.98,957,3.126,958,3.126,959,3.525,960,3.525,961,3.525,962,3.374,963,3.525,964,3.525,965,4.174,966,3.7,1025,5.01,1026,8.348,1027,7.774,1028,7.774,1029,7.774,1030,5.295,1031,5.063]],["title/classes/CreateLogDto.html",[23,0.149,1032,3.763]],["body/classes/CreateLogDto.html",[8,0.006,12,0.074,13,0.074,14,0.066,19,0.09,22,0.09,23,0.255,24,0.005,25,0.005,58,0.491,62,0.415,63,0.935,240,6.54,257,5.733,267,2.795,276,0.306,287,1.097,436,1.439,466,1.905,469,1.428,487,3.7,488,2.268,585,5.017,817,4.364,1032,6.409,1033,8.329,1034,6.09,1035,8.95,1036,6.811,1037,6.811,1038,6.811]],["title/classes/CreateUserCollaborationDto.html",[23,0.149,1039,3.763]],["body/classes/CreateUserCollaborationDto.html",[8,0.006,12,0.071,13,0.071,14,0.063,19,0.107,22,0.086,23,0.249,24,0.005,25,0.005,58,0.446,62,0.447,137,1.861,173,2.617,207,5.464,276,0.296,287,0.995,352,0.989,421,1.259,436,1.46,466,1.839,469,1.398,471,3.288,474,2.216,485,3.568,487,3.5,488,2.189,540,4.212,585,5.3,979,5.934,1039,6.272,1040,7.264,1041,5.421,1042,6.406,1043,8.121,1044,8.121,1045,7.261,1046,6.575,1047,6.575,1048,6.575,1049,6.575,1050,5.879,1051,4.577,1052,5.078,1053,6.575,1054,5.879]],["title/classes/CreateUserHighlightDto.html",[23,0.149,1055,3.561]],["body/classes/CreateUserHighlightDto.html",[8,0.006,12,0.053,13,0.053,14,0.047,19,0.088,22,0.065,23,0.206,24,0.004,25,0.004,58,0.488,62,0.469,63,0.792,137,1.922,170,4.713,185,2.93,196,3.504,276,0.221,287,1.09,352,0.738,395,3.266,406,4.227,421,1.378,436,1.497,466,1.372,469,1.155,471,3.329,474,2.33,485,3.487,487,3.532,488,1.633,489,2.599,515,4.143,540,3.142,562,5.317,595,3.142,681,3.762,789,1.311,790,2.066,810,3.143,815,3.754,817,3.583,905,2.568,955,3.029,1007,4.298,1009,4.61,1040,7.504,1050,4.386,1054,4.386,1055,4.903,1056,4.386,1057,5.589,1058,7.648,1059,6.351,1060,5.317,1061,4.905,1062,4.905,1063,6,1064,4.472,1065,5.182,1066,3.008,1067,4.905,1068,4.905,1069,4.143,1070,5.182,1071,5.532,1072,5.532,1073,4.905,1074,4.905,1075,4.905,1076,4.905,1077,6.838,1078,4.905,1079,6.71,1080,6.71,1081,4.905,1082,6,1083,4.905,1084,4.905,1085,6.71,1086,4.386,1087,2.927,1088,4.905,1089,2.247,1090,4.905,1091,4.386,1092,3.788]],["title/injectables/CustomLogger.html",[530,0.826,1093,3.561]],["body/injectables/CustomLogger.html",[8,0.006,12,0.051,13,0.051,14,0.045,19,0.106,20,0.574,22,0.062,23,0.144,24,0.004,25,0.004,54,1.258,58,0.493,60,1.647,61,0.972,62,0.417,63,0.844,65,1.639,72,5.551,73,2.794,240,6.189,245,4.659,257,6.484,264,1.29,266,1.907,267,2.087,276,0.211,277,1.979,416,1.523,436,1.519,469,1.118,507,2.642,530,1.102,531,1.484,571,5.195,585,5.488,783,2.316,789,1.251,831,6.102,1093,5.454,1094,8.194,1095,4.187,1096,7.463,1097,8.989,1098,6.153,1099,6.647,1100,7.463,1101,6.673,1102,6.499,1103,8.062,1104,6.102,1105,6.499,1106,6.499,1107,4.682,1108,6.499,1109,8.062,1110,4.682,1111,6.499,1112,4.682,1113,6.499,1114,4.682,1115,6.499,1116,4.682,1117,4.682,1118,4.682,1119,4.187,1120,4.682,1121,4.682,1122,4.682,1123,4.682,1124,8.47,1125,4.682,1126,4.682,1127,6.499]],["title/modules/CustomerModule.html",[0,1.191,33,3.248]],["body/modules/CustomerModule.html",[0,2.066,2,2.592,3,3.235,8,0.006,9,3.295,10,2.738,11,2.592,12,0.076,13,0.076,14,0.068,17,3.49,18,3.633,19,0.124,20,0.861,22,0.092,23,0.215,24,0.005,25,0.005,33,6.594,53,2.844,69,3.29,70,2.089,141,4.889,198,2.156,358,6.786,1128,6.279,1129,6.279,1130,6.279,1131,7.023,1132,6.279,1133,7.023,1134,7.023]],["title/injectables/CustomerService.html",[358,3.248,530,0.826]],["body/injectables/CustomerService.html",[8,0.006,12,0.063,13,0.063,14,0.056,19,0.116,20,0.718,22,0.077,23,0.18,24,0.004,25,0.004,54,1.461,58,0.501,60,1.659,61,0.979,62,0.409,63,0.85,65,1.708,70,1.743,82,1.453,141,4.08,198,1.799,264,2.08,266,1.497,276,0.264,277,1.969,307,1.165,316,2.6,358,5.033,380,1.74,389,2.074,416,1.588,436,1.385,507,2.607,530,1.281,531,1.858,709,3.873,713,2.667,723,2.42,733,3.118,734,3.385,739,3.707,1132,5.24,1135,5.24,1136,6.752,1137,7.552,1138,7.552,1139,5.86,1140,5.86,1141,7.552,1142,7.552,1143,7.891,1144,5.86,1145,5.86,1146,7.552,1147,5.86,1148,7.552,1149,5.86,1150,5.86,1151,5.86,1152,5.86,1153,5.86,1154,5.86]],["title/classes/DatabaseLoggerMiddleware.html",[23,0.149,130,3.763]],["body/classes/DatabaseLoggerMiddleware.html",[8,0.006,12,0.09,13,0.048,14,0.043,19,0.096,20,0.546,22,0.083,23,0.137,24,0.003,25,0.003,54,1.215,58,0.505,60,1.872,61,1.021,62,0.42,63,0.872,65,1.716,66,6.078,82,1.105,86,3.674,87,3.674,88,3.674,130,5.613,217,5.79,218,1.228,240,5.311,264,1.228,266,2.205,267,2.033,276,0.201,307,0.906,394,2.576,413,2.576,416,1.655,436,1.483,466,1.246,469,1.08,507,2.461,571,3.628,585,4.663,789,1.191,831,6.302,865,3.891,1099,7.114,1101,6.499,1155,8.34,1156,3.674,1157,5.176,1158,7.268,1159,6.278,1160,6.278,1161,6.278,1162,6.278,1163,6.278,1164,6.278,1165,6.278,1166,6.278,1167,6.278,1168,10.06,1169,4.457,1170,6.278,1171,4.457,1172,6.278,1173,4.457,1174,6.278,1175,4.457,1176,6.278,1177,4.457,1178,1.877,1179,6.278,1180,4.457,1181,6.278,1182,4.457,1183,4.457,1184,3.985,1185,4.457,1186,4.457,1187,7.89,1188,4.457,1189,7.268,1190,4.457,1191,3.985,1192,4.457,1193,7.268,1194,4.457,1195,4.457,1196,4.457]],["title/entities/DbBakedRepo.html",[113,3.121,1197,1.245]],["body/entities/DbBakedRepo.html",[8,0.006,12,0.062,13,0.062,14,0.056,19,0.115,22,0.076,23,0.177,24,0.004,25,0.004,58,0.481,61,0.64,62,0.421,82,1.43,113,4.787,118,5.417,215,1.858,276,0.259,287,1.075,307,1.093,352,0.867,389,1.992,395,3.249,406,3.669,421,1.285,436,1.107,469,1.286,473,6.683,474,2.242,475,5.461,604,2.128,713,2.814,783,2.055,784,3.843,944,3.669,972,3.885,1197,1.909,1198,8.126,1199,4.014,1200,8.292,1201,6.641,1202,3.294,1203,5.767,1204,4.46,1205,4.46,1206,5.203,1207,4.754,1208,4.214,1209,7.474,1210,5.156,1211,6.161,1212,3.552,1213,4.754,1214,5.767,1215,5.767,1216,4.754,1217,3.76,1218,3.086,1219,5.461,1220,2.976,1221,3.485,1222,2.291,1223,2.291,1224,3.501,1225,5.156,1226,5.767,1227,3.333,1228,3.056,1229,4.787,1230,5.767,1231,5.767]],["title/entities/DbCommitAuthors.html",[116,3.121,1197,1.245]],["body/entities/DbCommitAuthors.html",[8,0.006,12,0.067,13,0.067,14,0.06,19,0.118,22,0.081,23,0.19,24,0.004,25,0.004,58,0.47,61,0.686,62,0.417,82,1.533,116,5.005,118,5.559,214,2.99,215,1.992,276,0.278,287,1.05,307,0.973,352,0.93,389,2.044,395,3.22,421,0.958,436,1.157,469,1.345,474,1.882,604,2.281,701,5.005,702,5.005,783,2.203,784,4.12,944,3.836,1197,1.996,1201,6.784,1202,2.455,1204,4.663,1205,4.663,1206,5.439,1208,4.517,1212,3.164,1213,5.096,1217,3.931,1218,3.226,1219,5.71,1220,3.19,1221,3.104,1222,2.455,1223,2.455,1224,4.014,1225,5.527,1227,3.572,1228,3.275,1229,3.959,1232,5.527,1233,8.567,1234,5.096,1235,3.358,1236,6.181,1237,7.813,1238,6.181,1239,6.181,1240,6.181]],["title/entities/DbCommits.html",[118,3.009,1197,1.245]],["body/entities/DbCommits.html",[8,0.006,12,0.053,13,0.053,14,0.047,19,0.113,22,0.064,23,0.149,24,0.004,25,0.004,58,0.499,61,0.845,62,0.445,82,1.208,113,5.252,115,2.392,116,5.252,118,4.124,215,1.57,276,0.219,287,1.114,307,1.105,352,0.733,389,2.101,395,3.292,421,1.332,436,1.214,469,1.149,472,1.732,474,2.287,604,1.798,701,5.927,702,4.278,742,6.814,743,5.972,747,5.972,783,1.736,784,3.247,905,2.556,944,4.025,1197,1.706,1201,3.56,1202,3.412,1204,4.893,1205,4.893,1206,5.708,1211,6.283,1212,3.593,1213,4.016,1217,3.36,1218,3.547,1220,2.514,1221,3.525,1222,1.935,1223,1.935,1224,3.57,1227,2.815,1228,2.581,1229,3.121,1241,4.356,1242,8.591,1243,8.591,1244,8.591,1245,8.591,1246,7.621,1247,3.638,1248,4.872,1249,4.466,1250,4.872,1251,4.872,1252,5.465,1253,4.872,1254,4.872,1255,4.872,1256,4.872,1257,4.872,1258,6.679,1259,4.872,1260,4.872,1261,4.872,1262,4.151,1263,4.151,1264,4.872,1265,4.872,1266,4.872,1267,4.872,1268,4.872]],["title/entities/DbContribution.html",[103,3.009,1197,1.245]],["body/entities/DbContribution.html",[8,0.006,12,0.042,13,0.042,14,0.038,19,0.098,22,0.051,23,0.12,24,0.003,25,0.003,58,0.497,61,0.824,62,0.45,63,0.795,82,0.969,99,3.192,100,2.07,103,3.527,137,1.206,153,2.676,214,2.842,215,1.259,276,0.176,287,1.111,307,1.089,314,2.738,352,0.588,385,2.632,386,2.902,389,1.795,395,3.289,406,3.879,421,1.355,436,1.1,469,0.983,472,2.049,474,2.309,475,4.174,604,1.442,609,2.693,638,3.111,678,3.527,713,1.726,783,1.392,789,2.336,819,4.7,820,5.566,821,4.43,893,3.646,905,3.345,944,3.646,972,3.702,1066,3.329,1089,2.617,1178,3.681,1197,1.459,1202,3.279,1204,4.433,1205,4.433,1206,5.171,1212,3.008,1217,2.874,1218,3.408,1220,2.016,1221,3.386,1222,1.552,1223,1.552,1224,3.163,1228,2.07,1229,2.503,1235,3.192,1247,2.128,1249,3.111,1252,4.95,1262,3.111,1263,3.111,1269,3.494,1270,3.314,1271,5.107,1272,4.046,1273,3.907,1274,3.907,1275,5.107,1276,5.712,1277,3.907,1278,3.907,1279,2.676,1280,4.064,1281,3.7,1282,6.998,1283,2.617,1284,4.293,1285,1.873,1286,3.835,1287,4.004,1288,3.067,1289,3.907,1290,2.413,1291,3.907,1292,3.907,1293,3.907,1294,4.412,1295,4.412,1296,2.72,1297,3.907,1298,3.907,1299,3.907,1300,3.494,1301,3.907,1302,2.56,1303,3.111,1304,3.027,1305,2.413,1306,3.907,1307,5.712,1308,3.907,1309,3.907,1310,3.027,1311,2.617,1312,3.111,1313,3.163,1314,3.018,1315,3.907,1316,3.221,1317,2.258,1318,3.221,1319,3.907,1320,3.494]],["title/entities/DbCustomer.html",[141,3.392,1197,1.245]],["body/entities/DbCustomer.html",[8,0.006,12,0.071,13,0.071,14,0.063,19,0.107,22,0.086,23,0.202,24,0.005,25,0.005,58,0.446,61,0.729,62,0.409,82,1.631,137,1.715,141,5.653,144,5.202,215,2.119,276,0.296,287,0.995,307,1.012,389,2.147,395,3.154,421,1.259,433,6.695,436,1.203,469,1.398,474,2.216,604,2.427,783,2.343,797,4.191,944,3.987,1143,7.879,1197,2.075,1202,3.226,1204,4.846,1205,4.846,1212,3.288,1217,4.086,1218,3.353,1220,3.393,1221,3.5,1222,2.612,1223,2.612,1229,4.212,1321,5.879,1322,5.078,1323,6.575,1324,5.879,1325,6.575,1326,6.575,1327,3.228,1328,5.879]],["title/entities/DbEmoji.html",[167,3.121,1197,1.245]],["body/entities/DbEmoji.html",[8,0.006,12,0.049,13,0.049,14,0.044,19,0.104,22,0.059,23,0.139,24,0.004,25,0.004,58,0.498,61,0.961,62,0.449,63,0.835,82,1.121,160,3.145,167,4.06,169,4.45,170,4.104,171,2.79,214,2.426,215,1.456,276,0.203,287,1.114,307,0.79,314,3.039,352,0.68,385,2.854,386,3.147,389,1.663,395,3.292,406,4.104,421,1.344,436,1.284,469,1.091,474,2.298,604,1.668,609,2.299,611,1.903,681,4.45,789,2.121,893,3.112,905,3.317,1066,2.841,1089,2.07,1178,3.65,1197,1.62,1202,3.153,1208,3.302,1212,2.567,1218,3.277,1219,4.632,1221,3.321,1222,1.795,1223,1.795,1224,3.43,1235,2.724,1270,3.594,1279,2.97,1280,4.02,1281,3.558,1283,2.904,1284,3.663,1285,2.166,1286,3.803,1287,3.97,1288,3.277,1290,2.79,1302,2.841,1303,3.453,1304,3.359,1305,2.79,1310,3.359,1311,2.904,1312,3.453,1313,3.43,1317,2.611,1329,4.04,1330,7.322,1331,4.88,1332,6.131,1333,4.518,1334,4.518,1335,6.638,1336,4.413,1337,4.896,1338,4.04,1339,4.06,1340,4.518,1341,4.413,1342,3.725,1343,4.518,1344,4.518,1345,4.518,1346,5.226,1347,6.339,1348,4.518,1349,4.518,1350,4.518,1351,4.518,1352,3.359,1353,4.04,1354,3.302,1355,3.011,1356,4.518]],["title/entities/DbEndorsement.html",[182,3.009,1197,1.245]],["body/entities/DbEndorsement.html",[8,0.006,12,0.05,13,0.091,14,0.044,19,0.084,22,0.06,23,0.141,24,0.004,25,0.004,58,0.5,61,0.509,62,0.462,63,0.878,82,1.139,137,1.688,182,3.959,215,1.48,257,4.107,276,0.207,287,1.118,307,1.085,385,2.88,389,2.104,395,3.297,406,3.148,421,1.414,436,1.351,469,1.104,474,2.305,604,1.695,609,2.325,713,1.938,789,1.713,905,2.454,944,4.277,970,6.605,971,6.605,972,3.461,973,6.605,974,6.605,975,7.497,976,5.733,979,4.686,984,5.733,993,4.107,995,3.547,1066,2.874,1089,2.104,1178,2.701,1197,1.638,1202,3.552,1204,5.199,1205,5.199,1212,2.596,1218,3.692,1221,3.623,1222,1.824,1223,1.824,1279,2.152,1280,3.436,1281,2.874,1283,2.937,1285,2.202,1286,2.814,1287,2.937,1288,2.647,1302,2.874,1311,2.937,1313,3.004,1327,2.255,1339,5.581,1341,4.464,1342,3.787,1352,3.397,1354,3.356,1357,4.107,1358,4.593,1359,3.356,1360,4.593,1361,4.593,1362,4.107,1363,4.593,1364,4.593,1365,4.593,1366,6.412,1367,4.952,1368,4.593,1369,6.175,1370,4.593,1371,4.593,1372,4.593,1373,3.356,1374,4.107]],["title/entities/DbInsight.html",[133,2.908,1197,1.245]],["body/entities/DbInsight.html",[8,0.006,12,0.041,13,0.041,14,0.036,19,0.103,22,0.05,23,0.116,24,0.003,25,0.003,58,0.5,61,0.935,62,0.445,63,0.785,82,0.937,101,3.587,102,2.517,115,1.854,133,3.325,135,4.87,137,1.781,185,1.985,214,3.313,215,1.217,276,0.17,287,1.117,307,0.91,352,0.568,385,2.581,386,2.845,389,1.915,395,3.296,421,1.37,436,1.082,469,0.959,474,2.323,478,3.587,562,3.44,604,1.394,609,2.957,632,1.949,781,2.474,783,1.346,789,2.313,893,2.735,905,3.121,944,3.587,999,5.113,1000,2.68,1001,4.951,1002,4.303,1015,2.629,1066,3.655,1087,3.325,1089,3.033,1178,3.435,1197,1.423,1202,3.239,1204,4.361,1205,4.361,1206,3.878,1208,2.76,1212,2.256,1217,2.803,1218,3.367,1219,4.071,1220,2.875,1221,3.35,1222,1.5,1223,1.5,1224,3.101,1235,2.394,1247,2.057,1249,3.034,1252,3.713,1262,3.034,1263,3.034,1270,3.25,1279,3.101,1280,3.965,1281,3.655,1283,2.552,1285,1.81,1286,3.578,1287,3.736,1288,3.367,1302,3.655,1310,2.952,1311,2.552,1312,3.034,1313,3.423,1327,2.735,1352,2.952,1359,2.76,1375,3.377,1376,6.62,1377,6.62,1378,3.038,1379,3.776,1380,4.071,1381,2.76,1382,3.776,1383,3.377,1384,3.776,1385,5.34,1386,6.534,1387,5.571,1388,4.981,1389,3.776,1390,3.776,1391,3.776,1392,3.776,1393,4.981,1394,5.571,1395,3.776,1396,5.571,1397,3.776,1398,4.593,1399,3.776,1400,3.878,1401,2.917,1402,3.776,1403,3.776,1404,3.776,1405,3.776,1406,2.419,1407,3.776]],["title/entities/DbInsightMember.html",[165,3.248,1197,1.245]],["body/entities/DbInsightMember.html",[8,0.006,12,0.041,13,0.041,14,0.037,19,0.074,22,0.05,23,0.117,24,0.003,25,0.003,58,0.494,61,0.906,62,0.448,63,0.906,82,0.943,137,1.182,165,3.73,214,3.319,215,1.224,276,0.171,287,1.103,307,0.913,325,4.109,385,2.59,386,2.856,389,1.919,395,3.281,421,1.396,436,1.285,469,0.963,474,2.346,604,1.403,609,3.145,681,4.109,705,2.935,783,1.354,789,2.184,893,2.748,905,3.445,944,2.748,1001,4.218,1015,6.266,1020,6.877,1064,3.73,1066,3.664,1089,3.358,1178,3.652,1197,1.43,1202,3.247,1204,3.34,1205,3.34,1212,2.266,1217,2.816,1218,3.489,1220,2.888,1221,3.357,1222,1.51,1223,1.51,1235,3.513,1270,3.262,1279,3.434,1280,4.103,1281,3.887,1283,2.564,1285,1.822,1286,3.805,1287,3.973,1288,3.026,1296,2.645,1302,3.664,1310,2.966,1311,2.564,1312,3.049,1313,3.66,1327,2.748,1339,3.585,1341,3.896,1352,2.966,1354,2.777,1359,2.777,1369,4.323,1378,2.59,1380,4.09,1381,2.777,1400,3.896,1401,2.935,1408,7.525,1409,3.398,1410,6.035,1411,4.855,1412,5.941,1413,6.644,1414,3.398,1415,4.625,1416,3.8,1417,3.8,1418,3.8,1419,3.398,1420,3.8,1421,2.434,1422,3.8,1423,6.554,1424,3.8,1425,3.8,1426,5.004,1427,4.323,1428,3.8,1429,5.004,1430,5.004,1431,3.398,1432,4.323,1433,3.8,1434,3.8,1435,3.8,1436,3.398,1437,3.398]],["title/entities/DbInsightRepo.html",[135,3.248,1197,1.245]],["body/entities/DbInsightRepo.html",[8,0.006,12,0.05,13,0.05,14,0.045,19,0.106,22,0.061,23,0.143,24,0.004,25,0.004,58,0.492,61,0.892,62,0.436,63,0.774,82,1.154,133,4.798,135,4.312,174,3.4,185,2.305,215,1.499,276,0.209,287,1.1,307,1.09,352,0.7,385,2.9,389,2.11,395,3.277,421,1.356,436,0.958,469,1.113,472,2.373,474,2.31,489,2.465,604,1.717,609,2.915,681,3.627,783,1.658,789,2.148,905,3.077,972,3.484,1001,4.987,1017,4.593,1066,3.604,1069,3.995,1089,2.964,1178,3.386,1197,1.653,1199,3.239,1202,3.194,1207,3.835,1212,2.62,1216,3.835,1217,3.255,1218,3.319,1220,3.339,1221,3.357,1222,1.848,1223,1.848,1224,3.031,1247,2.534,1249,3.524,1262,3.524,1263,3.524,1270,3.651,1279,3.031,1280,3.933,1281,3.604,1283,2.964,1285,2.23,1286,3.528,1287,3.683,1288,3.319,1302,3.604,1310,3.428,1311,2.964,1313,3.484,1327,3.651,1352,3.428,1380,4.728,1381,3.4,1383,4.16,1408,7.543,1411,6.175,1421,4.144,1438,4.16,1439,4.652,1440,3.593,1441,4.16,1442,4.652,1443,4.652,1444,4.652,1445,4.16,1446,4.652]],["title/entities/DbLog.html",[151,3.392,1197,1.245]],["body/entities/DbLog.html",[8,0.006,12,0.07,13,0.07,14,0.062,19,0.085,22,0.085,23,0.199,24,0.004,25,0.004,58,0.517,61,0.719,62,0.437,82,1.607,151,5.603,215,2.088,240,6.397,257,5.608,276,0.292,287,1.154,385,3.413,389,1.988,395,3.335,436,1.456,469,1.385,585,4.908,783,2.309,905,3.08,1197,2.056,1217,4.049,1218,4.017,1311,4.01,1352,3.434,1447,5.795,1448,6.481,1449,6.481,1450,6.481,1451,6.481,1452,6.481,1453,6.481,1454,6.481,1455,6.481]],["title/entities/DbPRInsight.html",[172,3.248,1197,1.245]],["body/entities/DbPRInsight.html",[8,0.006,12,0.049,13,0.049,14,0.044,19,0.084,22,0.06,23,0.139,24,0.004,25,0.004,58,0.476,61,0.503,62,0.458,82,1.125,157,6.202,172,4.236,173,2.871,214,3.654,215,1.461,276,0.204,287,1.064,307,1.207,389,1.666,395,3.236,421,1.345,469,1.094,474,2.3,604,1.674,611,2.677,618,3.753,638,4.726,713,1.921,783,1.616,789,2.552,811,2.849,819,6.041,905,2.432,1060,5.358,1178,2.677,1197,1.624,1202,3.447,1212,2.573,1217,3.197,1218,3.583,1220,3.28,1221,3.539,1222,1.802,1223,1.802,1228,2.403,1235,4.104,1252,4.236,1272,5.154,1280,2.732,1286,2.789,1287,2.912,1288,2.624,1302,2.849,1303,3.462,1304,3.368,1339,5.824,1456,4.055,1457,7.337,1458,7.337,1459,5.667,1460,5.707,1461,7.337,1462,5.683,1463,7.337,1464,4.535,1465,4.535,1466,7.951,1467,6.356,1468,6.356,1469,6.356,1470,6.356,1471,4.535,1472,4.535,1473,4.535,1474,4.535,1475,6.356,1476,6.356,1477,6.356,1478,6.356,1479,6.356,1480,4.055,1481,4.535,1482,5.683,1483,4.535,1484,3.157,1485,4.535,1486,7.337]],["title/entities/DbPullRequest.html",[156,3.009,1197,1.245]],["body/entities/DbPullRequest.html",[8,0.006,12,0.022,13,0.063,14,0.02,19,0.059,22,0.027,23,0.064,24,0.002,25,0.002,58,0.512,61,0.645,62,0.453,63,0.922,82,0.514,153,4.509,156,2.142,157,6.523,173,3.101,185,1.236,207,3.637,214,3.23,215,0.668,243,4.038,276,0.093,287,1.144,307,1.087,314,2.506,352,0.312,385,1.743,386,1.922,389,1.322,395,3.325,406,1.702,421,1.453,436,1.371,469,0.597,472,0.899,474,2.387,478,3.439,489,1.098,562,3.593,604,0.765,609,0.752,618,3.947,681,4.598,702,3.349,713,1.048,783,0.739,789,2.352,790,1.461,893,2.567,905,3.23,972,2.095,1017,2.761,1030,4.494,1051,1.443,1060,5.064,1069,2.142,1070,2.679,1178,3.166,1197,0.886,1202,3.676,1212,1.404,1217,1.745,1218,3.528,1220,1.07,1221,3.692,1222,0.823,1223,0.823,1224,1.625,1234,1.709,1235,3.011,1252,4.67,1272,1.129,1279,0.971,1280,3.783,1281,3.37,1283,1.589,1286,3.299,1287,3.444,1288,3.104,1294,2.679,1295,4.038,1302,3.37,1303,4.095,1304,3.983,1311,1.589,1313,1.625,1317,3.363,1339,2.221,1432,2.679,1440,1.601,1480,1.853,1484,1.443,1487,1.853,1488,4.472,1489,4.472,1490,4.472,1491,4.472,1492,3.687,1493,4.472,1494,3.687,1495,4.472,1496,5.819,1497,4.472,1498,5.819,1499,4.472,1500,5.819,1501,5.974,1502,3.687,1503,4.472,1504,5.819,1505,4.472,1506,4.472,1507,5.819,1508,4.472,1509,4.472,1510,5.228,1511,2.534,1512,2.073,1513,2.073,1514,5.228,1515,5.228,1516,3.468,1517,2.073,1518,2.073,1519,2.073,1520,2.073,1521,2.073,1522,2.073,1523,2.859,1524,3.468,1525,3.468,1526,2.073,1527,3.468,1528,5.228,1529,2.073,1530,2.073,1531,2.073,1532,2.073,1533,3.101,1534,2.073,1535,5.228,1536,2.073,1537,2.073,1538,2.073,1539,2.073,1540,3.468,1541,2.073,1542,2.073,1543,3.468,1544,3.468,1545,4.472,1546,3.468,1547,3.468,1548,3.468,1549,3.468,1550,3.468,1551,1.853,1552,2.073,1553,3.468,1554,2.073,1555,2.073,1556,2.073,1557,2.073,1558,2.073,1559,2.073,1560,2.073,1561,2.073,1562,2.073,1563,2.073,1564,2.073,1565,2.073,1566,4.675,1567,2.073,1568,2.073,1569,2.073,1570,2.073,1571,2.073,1572,2.073,1573,2.073,1574,2.073,1575,3.468,1576,3.468,1577,3.101,1578,3.468,1579,2.073,1580,2.073,1581,2.073,1582,2.073,1583,2.073,1584,2.073,1585,2.073,1586,1.709,1587,5.974,1588,5.228,1589,1.853,1590,2.073,1591,2.073,1592,1.853,1593,2.073,1594,1.853,1595,2.073,1596,2.004,1597,2.221]],["title/classes/DbPullRequestContributor.html",[23,0.149,863,3.392]],["body/classes/DbPullRequestContributor.html",[8,0.006,12,0.071,13,0.071,14,0.064,19,0.087,22,0.087,23,0.202,24,0.005,25,0.005,58,0.446,62,0.377,63,0.783,153,3.809,173,3.048,207,4.698,276,0.296,287,0.997,314,3.897,386,3.79,395,3.155,421,1.26,436,1.204,466,1.842,469,1.399,474,2.217,604,2.431,618,3.714,702,5.208,863,5.66,872,5.649,893,3.991,905,3.111,1060,5.02,1202,3.23,1221,3.503,1222,2.617,1223,2.617,1280,3.494,1281,3.644,1302,3.644,1303,4.428,1304,4.308,1317,4.698,1492,7.27,1594,7.269,1598,5.89,1599,6.587,1600,6.587]],["title/entities/DbRepoToUserStargazers.html",[111,3.009,1197,1.245]],["body/entities/DbRepoToUserStargazers.html",[8,0.006,12,0.049,13,0.049,14,0.044,19,0.11,22,0.059,23,0.139,24,0.004,25,0.004,58,0.498,61,0.812,62,0.439,63,0.835,82,1.121,99,3.412,101,3.897,102,3.011,111,3.914,115,2.218,137,1.879,214,2.426,215,1.456,276,0.203,287,1.114,307,1.08,314,3.039,352,0.68,385,2.854,386,3.147,389,2.021,395,3.292,421,1.296,469,1.091,472,2.168,474,2.253,604,1.668,609,2.299,713,1.916,789,2.121,893,3.112,905,3.317,972,3.916,1066,2.841,1089,2.07,1178,3.65,1197,1.62,1202,2.909,1212,3.509,1218,3.023,1221,3.153,1222,1.795,1223,1.795,1224,3.719,1228,2.394,1235,2.724,1247,3.453,1249,4.324,1262,3.988,1263,3.988,1270,3.594,1279,2.97,1280,4.02,1281,3.558,1283,2.904,1284,3.663,1285,2.166,1286,3.803,1287,3.97,1288,3.277,1290,2.79,1302,2.841,1303,3.453,1304,3.359,1305,2.79,1310,3.359,1311,2.904,1312,3.453,1313,3.43,1317,2.611,1327,2.218,1352,3.359,1378,3.259,1421,2.894,1601,4.04,1602,7.145,1603,4.518,1604,4.518,1605,3.145,1606,4.518,1607,4.518,1608,4.518,1609,3.145,1610,4.518,1611,4.518,1612,4.518,1613,4.518,1614,4.518,1615,4.518,1616,3.145,1617,4.518,1618,4.04]],["title/entities/DbRepoToUserStars.html",[107,3.009,1197,1.245]],["body/entities/DbRepoToUserStars.html",[8,0.006,12,0.049,13,0.049,14,0.044,19,0.11,22,0.059,23,0.139,24,0.004,25,0.004,58,0.498,61,0.812,62,0.439,63,0.835,82,1.121,99,3.412,101,3.897,102,3.011,107,3.914,115,2.218,137,1.879,214,2.426,215,1.456,276,0.203,287,1.114,307,1.08,314,3.039,352,0.68,385,2.854,386,3.147,389,2.021,395,3.292,421,1.296,469,1.091,472,2.168,474,2.253,604,1.668,609,2.299,713,1.916,789,2.121,893,3.112,905,3.317,972,3.916,1066,2.841,1089,2.07,1178,3.65,1197,1.62,1202,2.909,1212,3.509,1218,3.023,1221,3.153,1222,1.795,1223,1.795,1224,3.719,1228,2.394,1235,2.724,1247,3.453,1249,4.324,1262,3.988,1263,3.988,1270,3.594,1279,2.97,1280,4.02,1281,3.558,1283,2.904,1284,3.663,1285,2.166,1286,3.803,1287,3.97,1288,3.277,1290,2.79,1302,2.841,1303,3.453,1304,3.359,1305,2.79,1310,3.359,1311,2.904,1312,3.453,1313,3.43,1317,2.611,1327,2.218,1352,3.359,1378,3.259,1421,2.894,1605,3.145,1609,3.145,1616,3.145,1619,4.04,1620,6.694,1621,4.518,1622,4.518,1623,4.518,1624,4.518,1625,4.518,1626,4.518,1627,4.518,1628,4.518,1629,4.518,1630,4.518,1631,4.518,1632,4.518,1633,4.04]],["title/entities/DbRepoToUserSubmissions.html",[109,3.009,1197,1.245]],["body/entities/DbRepoToUserSubmissions.html",[8,0.006,12,0.046,13,0.046,14,0.041,19,0.108,22,0.056,23,0.132,24,0.003,25,0.003,58,0.5,61,0.789,62,0.438,63,0.863,82,1.063,99,3.333,101,3.807,102,2.858,109,3.772,115,2.105,137,1.851,185,2.177,214,3.137,215,1.381,276,0.193,287,1.118,307,1.062,314,2.928,352,0.645,385,2.774,386,3.058,389,1.991,395,3.297,421,1.321,469,1.051,472,2.126,474,2.277,478,2.999,604,1.583,609,2.215,713,1.846,789,2.19,893,2.999,905,3.261,972,3.84,1066,2.738,1087,3.645,1089,1.964,1178,3.589,1197,1.561,1202,3.08,1212,3.45,1218,3.202,1221,3.256,1222,1.703,1223,1.703,1224,3.633,1228,2.272,1235,2.625,1247,3.327,1249,4.224,1262,3.876,1263,3.876,1270,3.493,1279,2.862,1280,3.976,1281,3.819,1283,2.798,1284,3.53,1285,2.055,1286,3.739,1287,3.903,1288,3.202,1290,2.648,1302,2.738,1303,3.327,1304,3.237,1305,2.648,1310,3.237,1311,2.798,1312,3.327,1313,3.333,1317,2.478,1327,2.105,1352,3.237,1378,3.195,1385,4.464,1388,3.834,1421,2.746,1605,2.985,1609,2.985,1616,2.985,1634,3.834,1635,6.362,1636,7.389,1637,4.288,1638,4.288,1639,4.288,1640,6.108,1641,6.108,1642,4.288,1643,4.288,1644,4.288,1645,4.288,1646,4.288,1647,4.288,1648,4.288,1649,4.288,1650,4.288,1651,4.288,1652,3.834]],["title/entities/DbRepoToUserVotes.html",[105,2.816,1197,1.245]],["body/entities/DbRepoToUserVotes.html",[8,0.006,12,0.049,13,0.049,14,0.044,19,0.11,22,0.059,23,0.139,24,0.004,25,0.004,58,0.498,61,0.812,62,0.439,63,0.835,82,1.121,99,3.412,101,3.897,102,3.011,105,3.663,115,2.218,137,1.879,214,2.426,215,1.456,276,0.203,287,1.114,307,1.08,314,3.039,352,0.68,385,2.854,386,3.147,389,2.021,395,3.292,421,1.296,469,1.091,472,2.168,474,2.253,604,1.668,609,2.299,713,1.916,789,2.121,893,3.112,905,3.317,972,3.916,1066,2.841,1089,2.07,1178,3.65,1197,1.62,1202,2.909,1212,3.509,1218,3.023,1221,3.153,1222,1.795,1223,1.795,1224,3.719,1228,2.394,1235,2.724,1247,3.453,1249,4.324,1262,3.988,1263,3.988,1270,3.594,1279,2.97,1280,4.02,1281,3.558,1283,2.904,1284,3.663,1285,2.166,1286,3.803,1287,3.97,1288,3.277,1290,2.79,1302,2.841,1303,3.453,1304,3.359,1305,2.79,1310,3.359,1311,2.904,1312,3.453,1313,3.43,1317,2.611,1327,2.218,1352,3.359,1378,3.259,1421,2.894,1605,3.145,1609,3.145,1616,3.145,1653,4.04,1654,6.694,1655,4.518,1656,4.518,1657,4.518,1658,4.518,1659,4.518,1660,4.518,1661,4.518,1662,4.518,1663,4.518,1664,4.518,1665,4.518,1666,4.518,1667,4.04]],["title/entities/DbSubscription.html",[149,3.392,1197,1.245]],["body/entities/DbSubscription.html",[8,0.006,12,0.033,13,0.033,14,0.029,19,0.076,22,0.04,23,0.093,24,0.003,25,0.003,58,0.499,61,0.336,62,0.453,63,0.884,82,0.751,137,0.995,149,3.279,214,1.802,215,0.975,276,0.136,287,1.115,307,0.813,352,0.455,385,2.254,389,1.606,395,3.293,421,1.396,436,1.197,469,0.811,474,2.346,478,3.203,604,1.117,609,3.379,611,1.275,675,4.542,676,5.782,681,4.197,783,1.078,789,2.49,905,3.749,991,2.706,1066,4.177,1089,3.804,1178,3.865,1197,1.203,1202,2.808,1212,2.642,1217,2.37,1218,3.717,1220,1.562,1221,2.974,1222,1.202,1223,1.202,1224,2.206,1234,2.495,1235,2.024,1252,4.349,1279,3.89,1280,4.25,1281,4.177,1283,2.989,1284,5.385,1285,1.451,1286,4.027,1287,4.204,1288,3.789,1296,5.626,1311,2.158,1313,3.976,1338,2.706,1378,2.254,1668,7.088,1669,2.706,1670,5.17,1671,5.17,1672,5.17,1673,5.17,1674,5.17,1675,5.17,1676,4.466,1677,5.17,1678,5.829,1679,4.529,1680,5.17,1681,5.17,1682,4.71,1683,3.026,1684,6.242,1685,3.026,1686,4.71,1687,3.026,1688,3.026,1689,4.768,1690,6.525,1691,3.026,1692,3.026,1693,3.026,1694,3.026,1695,3.026,1696,3.026,1697,4.211,1698,3.026,1699,3.026,1700,3.026,1701,3.026,1702,4.225,1703,3.026,1704,6.525,1705,3.026,1706,3.026,1707,3.026,1708,3.026,1709,2.706,1710,3.026,1711,3.026,1712,3.026]],["title/classes/DbTopUser.html",[23,0.149,1713,3.561]],["body/classes/DbTopUser.html",[8,0.006,12,0.078,13,0.078,14,0.069,19,0.095,22,0.095,23,0.221,24,0.005,25,0.005,58,0.395,62,0.334,63,0.827,137,1.813,176,4.813,276,0.324,287,0.883,395,3.003,421,1.117,436,1.271,466,2.015,469,1.477,474,2.067,604,2.659,1051,5.976,1202,2.862,1221,3.41,1222,2.862,1223,2.862,1713,6.273,1714,7.676,1715,6.442,1716,7.087,1717,7.205]],["title/entities/DbUserCollaboration.html",[179,3.248,1197,1.245]],["body/entities/DbUserCollaboration.html",[8,0.006,12,0.036,13,0.036,14,0.032,19,0.091,22,0.044,23,0.103,24,0.003,25,0.003,58,0.494,61,0.686,62,0.447,63,0.886,82,0.835,101,3.986,137,2.014,173,2.517,179,3.408,214,2.99,215,1.085,276,0.152,287,1.103,307,0.86,325,3.87,352,0.507,385,2.41,386,2.657,389,2.017,395,3.281,421,1.354,436,1.157,469,0.88,474,2.308,585,4.161,604,1.243,609,3.168,783,1.2,789,2.236,893,2.51,905,3.521,944,3.388,1042,6.672,1045,4.572,1052,2.601,1064,4.6,1066,3.502,1089,3.4,1178,3.679,1197,1.306,1202,2.948,1204,4.119,1205,4.119,1212,2.07,1217,2.573,1218,3.353,1220,2.639,1221,3.104,1222,1.338,1223,1.338,1224,2.896,1235,3.358,1247,2.785,1249,3.76,1262,3.367,1263,3.367,1270,3.034,1279,3.477,1280,4.12,1281,3.916,1283,2.343,1285,1.614,1286,3.834,1287,4.002,1288,2.85,1296,3.56,1302,3.502,1310,2.709,1311,2.343,1312,2.785,1313,3.66,1327,1.653,1339,4.421,1341,3.56,1352,2.709,1354,2.461,1359,2.461,1362,3.011,1367,3.949,1369,3.949,1374,3.011,1378,2.893,1380,3.737,1381,2.461,1400,3.56,1401,2.601,1414,3.011,1415,4.303,1419,3.011,1426,6.172,1427,5.331,1679,4.754,1718,5.624,1719,3.011,1720,6.181,1721,6.181,1722,5.527,1723,7.422,1724,5.113,1725,3.368,1726,3.368,1727,3.368,1728,3.368,1729,5.113,1730,4.216,1731,5.113,1732,3.368,1733,3.368,1734,3.368,1735,3.368,1736,3.368,1737,3.368,1738,3.368,1739,3.368,1740,3.368,1741,3.368,1742,5.113,1743,3.368,1744,2.157,1745,3.368,1746,3.368,1747,3.368]],["title/entities/DbUserHighlight.html",[159,2.816,1197,1.245]],["body/entities/DbUserHighlight.html",[8,0.006,12,0.031,13,0.06,14,0.027,19,0.09,22,0.037,23,0.087,24,0.002,25,0.002,58,0.505,61,0.923,62,0.456,63,0.908,82,0.701,101,3.085,137,1.873,153,2.944,159,2.579,169,3.523,170,4.798,171,1.744,173,2.025,176,2.502,185,2.592,196,2.534,214,3.523,215,0.91,276,0.127,287,1.128,307,0.783,352,0.425,385,2.156,386,2.377,389,1.73,395,3.308,406,3.359,421,1.404,436,1.364,469,0.768,472,1.157,474,2.354,478,3.875,489,2.365,562,4.225,595,1.81,604,1.043,681,4.426,783,1.007,789,2.224,905,3.465,1007,4.025,1009,2.502,1017,3.416,1051,1.967,1057,4.042,1059,4.853,1060,1.744,1063,3.99,1064,5.262,1065,6.097,1066,3.539,1069,4.491,1070,3.447,1071,3.679,1072,3.679,1077,2.526,1082,5.619,1086,3.99,1089,2.879,1091,2.526,1178,3.325,1197,1.14,1202,3.429,1208,2.064,1212,2.544,1217,2.245,1218,3.26,1219,3.261,1220,1.458,1221,3.479,1222,1.122,1223,1.122,1224,2.591,1229,1.81,1235,3.126,1247,1.539,1249,3.423,1262,3.013,1263,2.431,1270,2.715,1279,2.944,1280,3.892,1281,3.539,1283,2.044,1285,1.354,1286,3.464,1287,3.617,1288,2.594,1296,1.967,1310,2.365,1311,2.044,1312,2.431,1313,3.205,1322,2.182,1327,2.191,1331,3.686,1346,3.679,1378,2.667,1380,3.261,1381,2.064,1400,3.107,1401,2.182,1430,3.99,1431,2.526,1432,5.617,1437,2.526,1440,2.182,1587,5.619,1716,5,1718,5.725,1744,1.81,1748,2.526,1749,5.641,1750,6.842,1751,4.946,1752,2.825,1753,2.825,1754,4.853,1755,4.463,1756,2.825,1757,2.825,1758,4.463,1759,2.825,1760,2.825,1761,2.825,1762,2.825,1763,2.825,1764,2.825,1765,2.825,1766,2.825,1767,3.679,1768,2.825,1769,2.825,1770,2.825,1771,4.463,1772,2.825,1773,2.825,1774,2.825,1775,2.825,1776,2.825,1777,2.825,1778,2.825,1779,2.825,1780,2.825,1781,2.825,1782,2.526,1783,2.825,1784,2.526,1785,2.526,1786,2.825,1787,2.825]],["title/entities/DbUserHighlightReaction.html",[169,2.732,1197,1.245]],["body/entities/DbUserHighlightReaction.html",[8,0.006,12,0.041,13,0.041,14,0.036,19,0.107,22,0.05,23,0.116,24,0.003,25,0.003,58,0.5,61,0.81,62,0.447,63,0.905,82,0.937,101,3.25,137,1.722,159,3.826,161,2.419,167,4.24,168,3.377,169,4.369,170,4.798,214,3.597,215,1.217,276,0.17,287,1.117,307,1.016,314,2.671,352,0.568,385,2.581,386,2.845,389,2.007,395,3.233,421,1.264,436,1.082,469,0.959,474,2.221,604,1.394,609,2.02,681,3.123,789,1.953,893,2.735,905,3.121,1066,2.497,1089,1.73,1178,3.435,1197,1.423,1202,2.903,1212,3.505,1218,3.218,1221,3.096,1222,1.5,1223,1.5,1224,3.651,1228,2.001,1235,3.965,1247,3.606,1249,4.442,1262,3.98,1263,3.98,1270,3.25,1279,2.61,1280,3.863,1281,3.276,1283,2.552,1284,3.22,1285,1.81,1286,3.578,1287,3.736,1288,3.017,1290,2.332,1300,3.377,1302,2.497,1303,3.034,1304,2.952,1305,2.332,1310,2.952,1311,2.552,1312,3.034,1313,3.101,1317,2.182,1327,1.854,1332,7.124,1335,5.695,1339,5.223,1341,5.087,1342,3.113,1352,2.952,1354,4.071,1359,2.76,1378,3.038,1432,4.303,1551,3.377,1718,5.696,1744,2.419,1767,6.425,1788,3.377,1789,6.019,1790,5.113,1791,3.776,1792,3.776,1793,3.776,1794,3.776,1795,3.776,1796,3.776,1797,3.776,1798,3.776,1799,3.776,1800,3.776,1801,3.776,1802,3.776,1803,3.776,1804,3.776,1805,3.776,1806,3.377,1807,3.776,1808,3.776,1809,3.776,1810,3.776,1811,3.776]],["title/classes/DbUserHighlightReactionResponse.html",[23,0.149,1812,3.248]],["body/classes/DbUserHighlightReactionResponse.html",[8,0.006,12,0.07,13,0.07,14,0.062,19,0.12,22,0.106,23,0.268,24,0.004,25,0.004,58,0.355,62,0.3,63,0.774,160,4.503,169,3.627,170,3.947,171,3.995,185,2.305,196,3.683,267,2.559,276,0.291,287,0.793,352,0.973,396,4.26,421,1.246,436,1.296,466,1.809,469,1.384,472,2.085,474,2.106,487,3.475,488,2.154,489,3.428,595,4.144,718,2.054,724,2.305,725,1.755,782,3.428,783,2.865,810,3.031,815,4.294,817,4.098,1009,4.507,1092,4.996,1335,5.875,1789,4.996,1790,4.996,1812,5.358,1813,6.628,1814,7.211,1815,6.628,1816,6.209,1817,6.469,1818,6.469,1819,6.469,1820,5.784,1821,4.312,1822,3.995,1823,5.784,1824,5.784,1825,5.784]],["title/classes/DbUserHighlightRepo.html",[23,0.149,1826,3.561]],["body/classes/DbUserHighlightRepo.html",[8,0.006,12,0.077,13,0.077,14,0.069,19,0.094,22,0.094,23,0.218,24,0.005,25,0.005,58,0.391,61,0.945,62,0.33,63,0.821,170,4.642,185,3.037,276,0.32,287,0.873,395,2.988,421,1.104,436,1.262,466,1.991,469,1.467,472,2.21,474,2.053,489,4.516,604,2.628,1017,5.633,1069,5.263,1199,4.956,1202,2.828,1221,3.386,1222,2.828,1223,2.828,1826,6.229,1827,7.621,1828,7.12]],["title/entities/DbUserNotification.html",[177,3.248,1197,1.245]],["body/entities/DbUserNotification.html",[8,0.006,12,0.044,13,0.075,14,0.039,19,0.106,22,0.054,23,0.125,24,0.003,25,0.003,58,0.494,61,0.653,62,0.457,63,0.881,82,1.011,101,3.719,137,2.048,170,2.891,177,3.925,215,1.313,276,0.183,287,1.104,307,1.044,352,0.613,389,2.104,395,3.282,421,1.371,436,1.241,469,1.014,474,2.323,585,4.505,604,1.504,609,2.135,783,1.452,789,1.574,818,3.514,905,3.205,944,4.111,1021,5.266,1051,4.1,1064,3.925,1066,3.396,1089,2.698,1178,3.191,1197,1.505,1202,3.327,1204,4.998,1205,4.998,1212,2.385,1217,2.963,1218,3.566,1220,2.103,1221,3.43,1222,1.619,1223,1.619,1224,2.759,1229,2.61,1247,2.219,1249,3.208,1252,5.049,1262,3.208,1263,3.208,1279,2.759,1280,3.8,1281,3.396,1283,2.698,1285,1.953,1286,3.324,1287,3.471,1288,2.431,1296,2.837,1302,2.64,1311,2.698,1313,3.24,1322,3.147,1324,3.643,1327,2,1328,3.643,1355,3.925,1378,2.696,1398,4.855,1427,4.548,1718,5.649,1744,2.61,1829,3.643,1830,6.183,1831,7.185,1832,5.701,1833,6.183,1834,5.701,1835,4.075,1836,4.075,1837,4.075,1838,4.075,1839,7.72,1840,4.075,1841,3.925,1842,4.075,1843,4.075,1844,4.075,1845,4.855,1846,4.075,1847,5.266,1848,4.075,1849,5.266,1850,4.075,1851,4.075,1852,4.814,1853,4.075,1854,4.075,1855,3.359,1856,3.643,1857,4.075,1858,3.643,1859,3.643,1860,4.075]],["title/entities/DbUserRepo.html",[140,3.392,1197,1.245]],["body/entities/DbUserRepo.html",[8,0.006,12,0.058,13,0.058,14,0.052,19,0.094,22,0.071,23,0.165,24,0.004,25,0.004,58,0.487,61,0.888,62,0.432,63,0.687,82,1.332,137,1.928,138,6.356,140,4.966,185,2.542,215,1.731,276,0.242,287,1.089,307,1.138,385,3.123,389,1.819,395,3.265,421,1.377,436,1.057,469,1.228,472,2.368,474,2.329,489,2.846,604,1.983,609,2.587,681,4,783,1.914,789,1.906,905,2.73,972,3.752,1017,4.946,1066,3.198,1069,4.405,1089,2.461,1178,3.005,1197,1.823,1199,3.74,1202,3.39,1207,4.429,1212,3.697,1216,4.429,1217,3.589,1218,2.946,1220,2.772,1221,3.528,1222,2.134,1223,2.134,1229,3.441,1279,2.517,1280,3.668,1281,3.198,1283,3.268,1285,2.575,1286,3.131,1287,3.268,1288,2.946,1302,3.198,1311,3.268,1313,3.342,1322,4.149,1327,3.932,1378,3.123,1440,4.149,1782,6.379,1785,6.379,1861,6.085,1862,5.372,1863,5.372,1864,5.372,1865,5.372]],["title/entities/DbUserToUserFollows.html",[163,3.248,1197,1.245]],["body/entities/DbUserToUserFollows.html",[8,0.006,12,0.053,13,0.053,14,0.047,19,0.101,22,0.065,23,0.151,24,0.004,25,0.004,58,0.488,61,0.545,62,0.436,63,0.857,82,1.22,137,2.009,163,4.48,214,2.573,215,1.585,276,0.221,287,1.091,307,1.109,314,3.223,352,0.74,385,2.986,386,3.292,389,1.739,395,3.267,421,1.336,469,1.157,474,2.291,604,1.815,609,2.438,789,2.2,893,3.3,905,3.405,1066,3.013,1089,2.253,1178,3.748,1197,1.717,1202,3.042,1212,3.603,1218,3.162,1221,3.27,1222,1.954,1223,1.954,1224,3.149,1228,2.606,1235,2.889,1270,3.76,1279,3.149,1280,4.089,1281,3.69,1283,3.08,1284,3.885,1285,2.358,1286,3.905,1287,4.076,1288,3.399,1290,3.037,1302,3.013,1303,3.662,1304,3.562,1305,3.037,1310,3.562,1311,3.08,1312,3.662,1313,3.588,1317,2.842,1327,2.414,1352,3.562,1378,2.986,1421,3.15,1605,3.424,1609,3.424,1616,3.424,1718,5.625,1866,4.398,1867,5.915,1868,6.194,1869,4.918,1870,4.918,1871,6.011,1872,4.918,1873,4.918,1874,4.918,1875,4.918,1876,4.055]],["title/entities/DbUserTopRepo.html",[175,3.561,1197,1.245]],["body/entities/DbUserTopRepo.html",[8,0.006,12,0.047,13,0.047,14,0.042,19,0.109,22,0.057,23,0.134,24,0.003,25,0.003,58,0.494,61,0.797,62,0.436,63,0.825,82,1.083,99,3.36,100,2.313,101,3.838,137,1.861,175,4.521,176,5.433,214,2.368,215,1.406,276,0.323,287,1.104,307,1.068,314,2.966,352,0.657,385,2.801,386,3.089,389,2.002,395,3.281,421,1.279,469,1.065,472,2.436,474,2.236,604,1.611,609,2.243,713,1.87,789,2.089,893,3.037,905,3.28,972,3.866,1059,4.778,1066,2.773,1089,2,1178,3.61,1197,1.581,1199,3.039,1202,2.855,1210,3.903,1212,3.47,1218,2.967,1221,3.105,1222,1.734,1223,1.734,1224,3.662,1228,2.313,1235,2.659,1247,3.37,1249,4.258,1262,3.914,1263,3.914,1270,3.528,1279,2.898,1280,3.991,1281,3.504,1284,3.575,1285,2.093,1286,3.761,1287,3.926,1288,3.228,1290,2.696,1302,2.773,1303,3.37,1304,3.278,1305,2.696,1310,3.278,1311,2.834,1312,3.37,1313,3.367,1317,2.523,1327,2.143,1352,3.278,1378,3.217,1421,2.796,1438,3.903,1441,3.903,1605,3.039,1609,3.039,1616,3.039,1718,5.656,1744,2.796,1877,4.365,1878,5.1,1879,4.365,1880,4.365,1881,4.365,1882,4.365,1883,4.365,1884,4.365,1885,4.365,1886,4.365,1887,4.365]],["title/controllers/EmojiController.html",[270,1.044,1888,3.763]],["body/controllers/EmojiController.html",[8,0.006,12,0.069,13,0.069,14,0.062,19,0.126,20,0.785,22,0.084,23,0.196,24,0.004,25,0.004,54,1.545,58,0.351,60,1.203,61,0.71,62,0.37,63,0.616,65,1.239,167,5.115,270,1.371,272,1.685,274,2.321,276,0.288,277,1.76,287,0.785,290,2.704,348,3.741,349,3.172,350,2.948,351,2.321,352,0.963,374,2.204,377,2.362,416,1.151,421,0.992,507,1.997,519,2.281,718,2.444,724,2.281,725,1.736,861,4.477,865,2.751,866,2.932,867,3.068,868,2.869,869,3.068,1353,8.388,1888,6.168,1889,5.723,1890,9.115,1891,6.4,1892,4.677,1893,5.115,1894,6.4,1895,6.4,1896,4.232,1897,6.4,1898,6.06,1899,5.723,1900,5.277,1901,6.4,1902,6.4,1903,6.4,1904,6.4,1905,6.4]],["title/modules/EmojiModule.html",[0,1.191,34,3.561]],["body/modules/EmojiModule.html",[0,2.071,2,2.602,3,3.243,8,0.006,9,3.303,10,2.748,11,2.602,12,0.076,13,0.076,14,0.068,17,3.499,19,0.127,20,0.864,22,0.093,23,0.216,24,0.005,25,0.005,34,7.155,53,2.855,69,3.303,70,2.097,167,4.516,198,2.165,272,2.231,1888,7.016,1898,6.816,1899,6.304,1900,5.812,1906,6.304,1907,6.304,1908,7.05,1909,7.05,1910,7.05]],["title/injectables/EmojiService.html",[530,0.826,1898,3.392]],["body/injectables/EmojiService.html",[8,0.006,12,0.067,13,0.067,14,0.06,19,0.127,20,0.759,22,0.081,23,0.19,24,0.004,25,0.004,54,1.514,58,0.47,60,1.47,61,0.867,62,0.363,63,0.753,65,1.514,70,1.842,82,1.536,167,3.966,198,1.901,215,1.995,218,2.154,264,2.154,266,1.582,276,0.279,277,1.733,380,2.076,411,2.059,416,1.407,507,1.932,530,1.326,531,1.963,709,3.953,713,2.722,718,2.424,723,2.557,724,2.787,725,1.68,726,2.096,727,2.285,733,2.557,734,2.775,824,5.213,828,5.213,834,4.773,835,3.578,847,4.385,848,4.31,849,3.823,850,3.695,1898,5.445,1900,5.105,1911,5.536,1912,6.192,1913,6.192,1914,7.822,1915,6.192,1916,6.192,1917,6.192,1918,6.192,1919,6.192,1920,5.105]],["title/controllers/EndorsementController.html",[270,1.044,1921,3.763]],["body/controllers/EndorsementController.html",[8,0.006,12,0.036,13,0.036,14,0.032,19,0.112,20,0.405,22,0.043,23,0.101,24,0.003,25,0.003,54,0.976,58,0.456,60,1.563,61,0.922,62,0.436,63,0.801,65,1.61,137,1.704,182,5.661,207,4.807,218,1.389,266,0.845,267,1.41,270,0.708,272,0.87,274,1.199,276,0.149,277,1.972,287,1.02,290,3.181,299,4.508,308,2.537,344,2.417,345,1.451,347,2.672,348,2.863,349,3.385,350,3.209,351,1.199,352,0.497,354,3.075,355,2.553,374,1.138,377,3.146,380,1.162,389,1.762,411,1.327,416,1.533,421,0.782,436,1.449,472,2.292,507,2.595,519,1.178,598,2.553,660,3.51,718,2.559,724,1.178,725,0.897,861,4.874,865,3.334,866,1.515,867,1.585,868,1.482,869,1.585,967,5.933,975,6.827,1373,6.551,1892,2.416,1896,3.623,1921,3.894,1922,2.956,1923,7.361,1924,6.837,1925,7.361,1926,6.837,1927,6.582,1928,7.361,1929,7.361,1930,6.837,1931,3.306,1932,3.306,1933,3.306,1934,3.306,1935,3.306,1936,5.042,1937,3.306,1938,2.956,1939,4.942,1940,5.042,1941,4.508,1942,3.306,1943,3.306,1944,3.306,1945,3.306,1946,5.042,1947,6.582,1948,3.306,1949,4.508,1950,3.306,1951,3.306,1952,2.956,1953,3.306,1954,4.629,1955,3.306,1956,3.306,1957,3.306,1958,5.637,1959,3.306,1960,3.306,1961,3.306,1962,3.306,1963,3.306,1964,3.306,1965,3.894,1966,2.553,1967,3.306,1968,3.306,1969,1.623,1970,1.853,1971,3.915,1972,2.956,1973,2.956,1974,2.726,1975,2.726,1976,2.416,1977,2.956,1978,3.306,1979,2.956,1980,3.306,1981,2.553,1982,3.306,1983,2.416,1984,2.726,1985,3.306,1986,6.582,1987,3.306,1988,3.306,1989,3.306,1990,3.306,1991,3.306,1992,3.306,1993,3.51,1994,3.36,1995,3.306,1996,3.306,1997,4.508,1998,3.306,1999,3.306,2000,3.306,2001,3.306,2002,3.306,2003,3.306,2004,4.157,2005,4.157,2006,3.306,2007,3.306,2008,3.306,2009,2.956,2010,3.306,2011,3.306]],["title/modules/EndorsementModule.html",[0,1.191,35,3.561]],["body/modules/EndorsementModule.html",[0,1.935,1,5.886,2,2.329,3,3.029,8,0.006,9,3.086,10,2.46,11,2.329,12,0.068,13,0.068,14,0.061,17,3.268,18,3.402,19,0.13,20,0.774,22,0.083,23,0.194,24,0.004,25,0.004,29,6.636,35,7.371,49,5.689,53,3.205,69,2.957,70,1.877,120,5.643,126,4.393,182,3.897,198,1.938,272,2.084,975,4.874,1921,6.68,1971,6.434,1972,5.643,1975,5.203,1976,5.785,1977,5.643,2012,5.643,2013,5.643,2014,6.311,2015,5.643,2016,6.311,2017,4.612,2018,4.612,2019,5.643,2020,6.311]],["title/injectables/EndorsementService.html",[530,0.826,1971,3.121]],["body/injectables/EndorsementService.html",[7,4.487,8,0.006,12,0.041,13,0.041,14,0.037,19,0.111,20,0.469,22,0.05,23,0.117,24,0.003,25,0.003,54,1.088,58,0.502,60,1.694,61,1,62,0.418,63,0.868,65,1.745,70,1.138,82,0.949,137,1.187,182,2.362,198,1.174,218,1.053,264,1.549,266,1.437,276,0.172,277,2.014,304,3.472,307,1.021,316,2.821,380,2.002,389,1.67,396,2.98,411,1.48,416,1.595,436,1.45,472,2.338,507,2.71,523,1.387,530,0.954,531,1.212,709,3.226,713,2.222,718,2.6,722,2.76,723,1.579,724,1.363,725,1.037,728,2.45,733,3.969,734,3.672,736,5.247,738,3.274,739,1.877,824,3.748,828,3.748,967,5.453,1000,2.7,1227,4.734,1373,4.109,1927,5.028,1949,3.42,1952,5.028,1954,3.356,1971,3.602,1973,3.42,1974,3.153,1975,3.153,1997,5.028,2021,3.42,2022,5.623,2023,5.623,2024,5.623,2025,3.472,2026,3.602,2027,3.824,2028,3.824,2029,5.623,2030,3.824,2031,5.623,2032,3.824,2033,3.824,2034,5.623,2035,3.824,2036,5.623,2037,3.824,2038,5.623,2039,3.824,2040,3.824,2041,5.623,2042,3.824,2043,3.472,2044,3.824,2045,5.623,2046,3.824,2047,3.824,2048,3.824,2049,3.824,2050,3.824,2051,3.824,2052,7.834,2053,3.824,2054,5.498,2055,6.669,2056,5.028,2057,3.824,2058,6.669,2059,5.623,2060,5.623,2061,3.824,2062,5.623,2063,3.824,2064,3.824,2065,3.824,2066,3.42,2067,2.954,2068,3.824,2069,3.824,2070,3.824]],["title/guards/EndorsementTokenGuard.html",[1976,3.561,2071,3.763]],["body/guards/EndorsementTokenGuard.html",[8,0.006,12,0.07,13,0.07,14,0.063,19,0.106,20,0.796,22,0.085,23,0.199,24,0.004,25,0.004,54,1.559,58,0.442,60,1.514,61,0.894,62,0.374,63,0.776,65,1.256,72,5.928,73,3.874,173,2.092,196,2.974,203,5.014,214,3.083,264,1.788,276,0.292,380,2.171,416,1.576,478,3.187,519,2.314,530,1.366,598,5.014,1157,5.353,1976,5.888,1981,5.014,1983,4.744,1984,7.223,2072,5.805,2073,7.834,2074,5.805,2075,9.162,2076,5.353,2077,6.492,2078,8.057,2079,8.192,2080,6.492,2081,8.761,2082,6.492,2083,6.492,2084,6.492,2085,6.492,2086,6.492,2087,8.057]],["title/classes/FilterOptionsDto.html",[23,0.149,2088,3.392]],["body/classes/FilterOptionsDto.html",[8,0.006,12,0.056,13,0.056,14,0.05,19,0.11,22,0.068,23,0.213,24,0.004,25,0.004,58,0.514,62,0.445,63,0.959,185,2.471,267,2.819,276,0.232,287,1.149,307,0.977,352,0.775,436,1.422,466,1.44,469,1.194,472,2.034,474,1.67,487,3.333,488,1.715,489,2.729,549,2.413,611,3.303,718,2.355,725,1.881,781,2.655,782,2.729,783,2.471,785,3.405,786,3.888,787,3.674,789,2.565,790,3.534,792,3.888,793,4.396,797,2.658,798,3.778,799,2.729,800,2.805,801,4.704,802,3.073,803,3.945,804,2.658,805,2.887,806,2.976,807,2.805,808,2.976,809,3.405,810,2.413,811,2.308,812,2.887,813,2.887,814,2.976,815,4.299,816,3.299,817,4.103,818,3.073,985,4.246,1822,4.842,2088,4.828,2089,7.83,2090,4.842,2091,5.226,2092,5.57,2093,3.763,2094,4.246,2095,5.068,2096,3.977,2097,4.605,2098,3.585,2099,4.246,2100,4.605,2101,3.432,2102,3.763]],["title/classes/GenerateCodeExplanationDto.html",[23,0.149,624,3.561]],["body/classes/GenerateCodeExplanationDto.html",[8,0.006,12,0.062,13,0.062,14,0.056,19,0.098,22,0.076,23,0.23,24,0.004,25,0.004,58,0.482,62,0.46,276,0.26,287,1.076,307,1.197,352,0.869,421,1.519,436,1.404,466,1.615,469,1.288,471,3.554,474,2.243,485,3.682,487,3.296,488,1.923,543,5.426,588,5.824,618,3.829,624,5.467,632,5.055,789,1.999,929,4.221,932,6.064,933,4.221,934,5.467,935,5.467,936,5.467,937,5.467,938,5.467,939,5.467,940,5.467,941,5.467,942,5.467,944,3.673,945,4.021,947,4.021,955,3.567,956,5.315,957,3.567,958,3.567,959,4.021,960,4.021,961,4.021,962,3.85,963,4.021,964,4.021,966,4.221,2103,6.644,2104,5.164,2105,6.409,2106,5.776,2107,5.776,2108,5.776,2109,5.776]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[23,0.149,657,3.561]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[8,0.006,12,0.062,13,0.062,14,0.055,19,0.098,22,0.075,23,0.228,24,0.004,25,0.004,58,0.48,62,0.46,276,0.258,287,1.073,307,1.195,352,0.862,421,1.441,436,1.402,466,1.602,469,1.281,471,3.543,474,2.238,485,3.672,487,3.284,488,1.908,543,5.412,588,5.809,618,3.82,632,5.048,641,5.832,654,6.314,657,5.439,789,1.989,929,4.187,932,6.041,933,4.187,934,5.439,935,5.439,936,5.439,937,5.439,938,5.439,939,5.439,940,5.439,941,5.439,942,5.439,944,3.654,945,3.989,947,3.989,955,3.538,956,5.295,957,3.538,958,3.538,959,3.989,960,3.989,961,3.989,962,3.819,963,3.989,964,3.989,966,4.187,2103,6.628,2105,6.385,2110,4.724,2111,5.73,2112,5.123,2113,5.73,2114,5.123]],["title/classes/GenerateCodeTestSuggestionDto.html",[23,0.149,686,3.561]],["body/classes/GenerateCodeTestSuggestionDto.html",[8,0.006,12,0.068,13,0.068,14,0.061,19,0.104,22,0.083,23,0.242,24,0.004,25,0.004,58,0.474,62,0.457,276,0.283,287,1.059,307,1.218,352,0.946,421,1.447,436,1.279,466,1.759,469,1.359,471,3.497,474,2.181,485,3.668,487,3.138,488,2.094,588,5.978,618,3.815,632,5.089,641,5.264,686,5.772,689,6.037,929,4.596,944,3.878,945,4.378,947,4.378,956,5.532,957,3.883,958,3.883,959,4.378,960,4.378,961,4.378,962,4.191,963,4.378,964,4.378,2103,6.619,2105,6.67,2110,5.185,2112,5.623,2114,5.623,2115,6.289]],["title/classes/GeneratePullRequestDescriptionDto.html",[23,0.149,2116,3.561]],["body/classes/GeneratePullRequestDescriptionDto.html",[8,0.006,12,0.054,13,0.054,14,0.048,19,0.089,22,0.065,23,0.208,24,0.004,25,0.004,58,0.49,62,0.463,63,0.796,153,4.28,173,2.943,196,3.103,276,0.224,287,1.094,307,1.158,352,0.748,421,1.522,436,1.462,466,1.391,469,1.166,471,3.349,474,2.296,485,3.503,487,3.285,488,1.656,541,6.023,543,5.163,588,5.542,606,5.231,618,3.847,701,4.338,789,1.81,810,3.173,815,3.781,817,3.608,932,5.628,933,3.634,934,4.949,935,4.949,936,4.949,937,4.949,938,4.949,939,4.949,940,4.949,941,4.949,942,4.949,944,3.325,945,3.462,947,3.462,949,4.099,950,5.584,951,5.584,952,5.584,953,6.35,955,3.07,956,4.934,957,3.07,958,3.07,959,3.462,960,3.462,961,3.462,962,3.314,963,3.462,964,3.462,965,4.099,966,3.634,1009,3.797,1060,5.107,1511,3.634,2103,6.676,2105,5.949,2116,4.949,2117,4.446,2118,7.702,2119,7.736,2120,4.972,2121,4.972,2122,4.972,2123,4.972,2124,4.972,2125,4.972,2126,4.972,2127,4.972,2128,4.972,2129,4.972,2130,4.446,2131,4.972,2132,4.446,2133,4.972,2134,4.972,2135,4.972]],["title/controllers/HealthController.html",[270,1.044,2136,3.763]],["body/controllers/HealthController.html",[8,0.006,12,0.059,13,0.059,14,0.052,19,0.113,20,0.665,22,0.071,23,0.167,24,0.004,25,0.004,54,1.39,58,0.394,65,1.39,72,4.972,73,3.24,77,4.475,185,3.054,211,3.967,258,4.475,262,5.548,263,6.884,264,1.495,266,2.34,267,1.518,270,1.163,272,1.429,274,1.968,276,0.244,277,2.032,287,0.881,290,2.901,349,3.198,350,2.972,351,1.968,352,0.816,374,3.216,377,2.651,416,1.292,507,2.241,1087,5.114,2136,5.548,2137,4.854,2138,8.188,2139,9.158,2140,5.429,2141,7.184,2142,7.184,2143,5.429,2144,5.429,2145,7.184,2146,5.429,2147,7.184,2148,7.184,2149,7.184,2150,8.052,2151,7.184,2152,7.184,2153,5.429,2154,5.429,2155,5.429,2156,5.429,2157,5.429,2158,6.423,2159,7.184,2160,5.429,2161,5.429,2162,5.429,2163,5.429,2164,5.429,2165,5.429,2166,7.184,2167,5.429,2168,5.429,2169,5.429,2170,5.429,2171,5.429,2172,5.429,2173,5.429,2174,5.429,2175,5.429,2176,5.429,2177,5.429,2178,5.429,2179,5.429,2180,5.429,2181,5.429,2182,5.429]],["title/modules/HealthModule.html",[0,1.191,36,3.561]],["body/modules/HealthModule.html",[0,2.149,2,2.77,8,0.006,12,0.081,13,0.081,14,0.072,19,0.123,20,0.92,22,0.099,23,0.23,24,0.005,25,0.005,36,6.426,53,3.039,76,7.862,77,6.187,272,2.315,2136,7.204,2183,7.505,2184,7.505]],["title/controllers/HighlightController.html",[270,1.044,2185,3.763]],["body/controllers/HighlightController.html",[8,0.006,12,0.039,13,0.039,14,0.035,19,0.119,20,0.447,22,0.048,23,0.112,24,0.003,25,0.003,54,1.05,58,0.457,60,1.567,61,0.925,62,0.433,63,0.803,65,1.613,115,1.788,137,1.145,159,5.059,160,2.536,161,2.334,170,4.495,173,2.593,176,3.041,267,1.019,270,0.781,272,0.959,274,1.321,276,0.164,277,1.967,287,1.022,290,3.162,296,3.059,303,5.156,307,1.173,316,3.114,344,1.746,345,1.599,346,2.905,348,3.364,349,3.403,350,3.162,351,1.321,352,0.548,368,1.475,374,1.254,376,2.432,377,3.077,389,1.828,416,1.5,421,1.248,503,4.384,509,3.911,510,1.669,519,1.298,718,2.405,724,1.298,725,1.472,726,1.233,727,1.345,787,2.541,861,4.803,865,1.566,866,1.669,867,1.746,868,1.633,869,1.746,1000,2.196,1275,4.85,1331,4.32,1459,4.19,1749,6.635,1812,3.615,1821,5.556,1826,4.736,1939,4.666,1965,4.19,1969,1.788,1970,2.042,2026,3.475,2185,4.19,2186,3.257,2187,6.439,2188,6.481,2189,7.18,2190,6.42,2191,7.18,2192,7.18,2193,7.18,2194,6.481,2195,3.643,2196,3.643,2197,5.425,2198,3.35,2199,5.425,2200,4.472,2201,4.998,2202,4.85,2203,3.643,2204,3.643,2205,3.643,2206,5.795,2207,3.643,2208,3.257,2209,3.257,2210,3.643,2211,3.643,2212,3.643,2213,3.003,2214,3.643,2215,3.643,2216,3.257,2217,3.643,2218,3.643,2219,3.257,2220,3.257,2221,3.257,2222,3.257,2223,3.643,2224,3.643,2225,3.643,2226,5.425,2227,3.643,2228,4.025,2229,1.93,2230,4.151,2231,3.643,2232,2.814,2233,2.042,2234,3.643,2235,3.643,2236,3.643,2237,3.003,2238,5.795,2239,3.643,2240,3.257,2241,3.643,2242,3.643,2243,3.643,2244,3.643,2245,3.964,2246,3.475,2247,3.643,2248,3.643,2249,3.643,2250,3.257,2251,3.643,2252,3.643,2253,3.257,2254,3.257,2255,3.643,2256,3.257,2257,3.257,2258,3.643,2259,3.643]],["title/modules/HighlightModule.html",[0,1.191,37,3.561]],["body/modules/HighlightModule.html",[0,2.071,2,2.602,3,3.243,8,0.006,9,3.303,10,2.748,11,2.602,12,0.076,13,0.076,14,0.068,19,0.127,20,0.864,22,0.093,23,0.216,24,0.005,25,0.005,37,7.155,49,5.843,53,3.431,69,3.303,70,2.097,126,4.908,159,4.074,160,4.908,161,4.516,198,2.165,272,2.231,2185,7.016,2260,7.05,2261,7.05,2262,7.05,2263,6.304,2264,7.05]],["title/classes/HighlightOptionsDto.html",[23,0.149,1821,3.248]],["body/classes/HighlightOptionsDto.html",[8,0.006,12,0.059,13,0.059,14,0.053,19,0.113,22,0.095,23,0.249,24,0.004,25,0.004,58,0.491,62,0.415,63,0.935,160,3.831,169,3.085,170,3.979,171,3.398,185,2.583,196,3.321,267,2.756,276,0.248,287,1.097,307,1.01,352,0.828,396,2.916,421,1.124,436,1.201,466,1.539,469,1.248,472,2.322,474,1.952,487,3.22,488,1.832,489,2.916,549,2.578,611,3.414,718,2.395,724,1.961,725,1.493,781,2.454,782,2.916,783,2.888,785,3.558,786,4.064,787,3.797,789,2.542,790,3.628,792,3.085,793,3.085,797,2.84,798,3.948,799,2.916,800,2.997,801,4.83,802,3.284,803,4.078,804,2.84,805,3.085,806,3.18,807,2.997,808,3.18,809,3.558,810,3.396,811,2.467,812,3.085,813,3.085,814,3.18,815,3.979,817,3.797,1009,3.085,1092,4.25,1335,4.021,1789,4.25,1790,4.25,1812,3.668,1813,5.976,1814,4.537,1815,4.537,1816,4.25,1820,4.92,1821,4.831,1822,4.476,1823,4.92,1824,4.92,1825,4.92,2096,4.25,2265,5.503]],["title/injectables/HttpLoggerMiddleware.html",[127,3.763,530,0.826]],["body/injectables/HttpLoggerMiddleware.html",[8,0.006,12,0.065,13,0.065,14,0.058,19,0.117,20,0.741,22,0.101,23,0.185,24,0.004,25,0.004,54,1.491,58,0.423,60,1.136,61,0.671,62,0.28,63,0.582,65,1.17,66,4.419,86,4.985,87,4.985,88,4.985,127,6.55,173,3.038,217,6.216,218,2.122,260,5.951,266,2.167,276,0.272,380,2.058,416,1.525,469,1.326,530,1.307,531,1.917,556,6.465,585,4.32,591,6.216,789,2.059,790,2.547,1156,4.985,1157,4.985,1367,4.67,2266,7.582,2267,5.951,2268,7.705,2269,8.929,2270,6.047,2271,7.705,2272,6.047,2273,7.705,2274,4.985,2275,4.985,2276,6.047,2277,6.047,2278,5.407,2279,6.047,2280,6.047,2281,7.705,2282,7.984,2283,7.705,2284,6.047,2285,6.047,2286,6.047,2287,6.047,2288,6.047,2289,6.047]],["title/controllers/InsightController.html",[270,1.044,2290,3.763]],["body/controllers/InsightController.html",[8,0.006,12,0.057,13,0.057,14,0.051,19,0.122,20,0.642,22,0.069,23,0.161,24,0.004,25,0.004,54,1.358,58,0.385,60,1.319,61,0.778,62,0.409,63,0.676,65,1.358,133,4.721,137,1.67,173,1.688,218,1.443,267,1.465,270,1.123,272,1.379,274,1.9,276,0.236,277,1.833,287,0.86,290,2.86,291,3.621,296,2.767,303,4.494,307,1.187,316,3.122,339,3.647,345,2.299,346,3.145,347,3.718,348,3.706,349,3.142,350,2.92,351,1.9,352,0.788,368,2.122,374,1.804,376,2.349,377,2.59,380,1.207,389,2,411,1.847,416,0.942,421,1.31,503,3.822,504,2.937,509,3.822,510,2.4,519,1.867,523,1.9,781,3.069,1001,4.969,1406,3.356,1896,2.776,1939,3.822,1966,4.047,1969,2.572,1970,2.937,2026,4.494,2228,4.435,2229,2.776,2290,5.419,2291,4.685,2292,8.449,2293,8.449,2294,5.239,2295,4.32,2296,5.784,2297,5.239,2298,7.016,2299,5.419,2300,5.239,2301,5.239,2302,4.685,2303,4.884,2304,4.685,2305,5.781,2306,5.239,2307,5.127,2308,7.016,2309,3.829,2310,4.32,2311,3.829,2312,4.885,2313,3.492,2314,5.239,2315,4.32,2316,4.32,2317,5.239,2318,5.784,2319,4.685,2320,5.239,2321,4.685,2322,5.239]],["title/injectables/InsightMemberService.html",[530,0.826,2323,3.248]],["body/injectables/InsightMemberService.html",[7,4.625,8,0.006,12,0.046,13,0.046,14,0.041,19,0.117,20,0.518,22,0.056,23,0.13,24,0.003,25,0.003,54,1.169,58,0.49,60,1.64,61,0.968,62,0.405,63,0.84,65,1.689,70,1.256,82,1.047,165,4.702,166,3.261,196,3.528,198,1.296,214,1.616,218,1.163,264,1.664,266,1.803,276,0.19,277,1.98,296,2.776,307,1.132,316,2.806,380,2.011,389,1.851,392,5.234,396,2.237,411,1.857,416,1.635,436,1.396,507,2.201,523,1.531,530,1.025,531,1.339,709,3.379,713,2.327,718,2.166,722,2.966,723,1.743,724,1.505,725,1.145,726,1.43,727,1.558,728,2.705,731,2.966,733,3.5,734,3.162,736,2.705,738,4,739,2.966,789,1.128,790,1.778,1001,2.179,1406,2.705,1596,3.492,1920,3.481,2025,3.731,2043,3.731,2056,3.775,2312,4.755,2313,2.814,2321,3.775,2323,4.027,2324,7.492,2325,3.775,2326,5.402,2327,7.055,2328,5.402,2329,6.042,2330,5.402,2331,4.222,2332,7.055,2333,4.222,2334,6.042,2335,6.042,2336,4.222,2337,7.286,2338,4.222,2339,3.955,2340,4.222,2341,7.601,2342,8.149,2343,7.701,2344,4.222,2345,6.042,2346,4.222,2347,4.222,2348,6.042,2349,4.222,2350,5.402,2351,4.222,2352,3.261,2353,4.222,2354,4.222,2355,4.222,2356,4.222,2357,4.222,2358,4.222,2359,4.222,2360,6.042,2361,4.222,2362,4.222,2363,3.775,2364,4.222,2365,4.222,2366,4.222,2367,4.222,2368,4.222,2369,4.222,2370,4.222]],["title/classes/InsightOptionsDto.html",[23,0.149,2371,4.017]],["body/classes/InsightOptionsDto.html",[8,0.006,12,0.055,13,0.055,14,0.049,19,0.102,22,0.09,23,0.21,24,0.004,25,0.004,58,0.512,62,0.439,63,0.956,176,2.831,267,2.814,276,0.227,287,1.144,307,0.967,352,0.759,436,1.382,466,1.412,469,1.178,472,2.013,487,3.306,488,1.681,549,2.365,611,3.27,718,2.343,724,1.799,725,1.37,781,2.317,782,2.675,783,2.439,785,3.359,786,3.837,787,3.637,789,2.578,790,3.663,792,3.837,793,4.352,796,4.515,797,2.606,798,3.727,799,2.675,800,2.75,801,4.666,802,3.013,803,3.906,804,2.606,805,2.831,806,2.918,807,2.75,808,2.918,809,3.359,810,2.365,811,2.263,812,2.831,813,2.831,814,2.918,815,4.27,816,3.234,817,4.075,818,4.084,853,3.515,891,5.001,1000,2.044,1355,3.365,1597,3.234,1702,3.69,1822,4.794,2090,4.794,2091,5.174,2092,5.538,2093,3.69,2095,3.69,2098,4.764,2102,3.69,2371,5.642,2372,6.718,2373,5.049,2374,5.049,2375,7.763,2376,5.049,2377,5.049,2378,4.162,2379,4.162,2380,3.515,2381,4.162,2382,4.162,2383,4.162]],["title/classes/InsightPageOptionsDto.html",[23,0.149,2384,3.392]],["body/classes/InsightPageOptionsDto.html",[8,0.006,12,0.068,13,0.068,14,0.061,19,0.083,22,0.083,23,0.194,24,0.004,25,0.004,58,0.498,62,0.421,63,0.942,267,2.736,276,0.284,287,1.112,307,1.078,466,1.765,469,1.362,549,2.957,611,3.643,718,2.472,724,2.249,725,1.712,781,2.928,782,3.344,783,2.821,785,3.886,786,4.438,787,4.052,789,2.614,790,3.82,792,3.538,793,3.538,797,3.257,798,4.312,799,3.344,800,3.437,801,5.085,802,3.766,803,4.351,804,3.257,805,3.538,806,3.647,807,3.437,808,3.647,809,3.886,810,2.957,811,2.829,812,3.538,813,3.538,814,3.647,2372,4.874,2384,5.511]],["title/injectables/InsightRepoService.html",[530,0.826,2385,3.392]],["body/injectables/InsightRepoService.html",[8,0.006,12,0.068,13,0.068,14,0.06,19,0.123,20,0.767,22,0.082,23,0.192,24,0.004,25,0.004,54,1.524,58,0.473,60,1.619,61,0.955,62,0.4,63,0.83,65,1.524,70,1.861,82,1.552,115,3.071,135,4.17,198,1.921,264,2.168,266,1.598,276,0.282,277,1.923,307,1.185,389,1.421,416,1.416,472,2.234,507,2.456,530,1.335,531,1.983,713,2.732,723,2.583,972,2.931,1006,5.791,1013,4.17,1014,5.158,1017,3.863,1411,4.572,2324,7.454,2341,6.491,2352,4.832,2385,5.481,2386,5.594,2387,7.873,2388,7.873,2389,6.256,2390,6.256,2391,7.873,2392,7.873,2393,6.256,2394,7.873,2395,6.256,2396,6.256,2397,6.256,2398,5.158,2399,5.594,2400,6.256]],["title/modules/InsightsModule.html",[0,1.191,38,3.561]],["body/modules/InsightsModule.html",[0,1.836,1,5.762,2,2.146,3,2.875,8,0.006,9,2.929,10,2.266,11,2.146,12,0.063,13,0.063,14,0.056,17,3.102,18,3.229,19,0.131,20,0.713,22,0.076,23,0.178,24,0.004,25,0.004,38,7.377,49,5.569,53,3.042,69,2.723,70,1.729,115,2.854,126,4.047,133,3.469,135,5.007,137,1.586,165,5.007,166,4.49,198,1.785,272,1.978,1001,4.295,2017,4.248,2018,4.248,2290,6.429,2311,4.248,2312,6.133,2313,3.874,2323,6.219,2352,5.802,2385,6.914,2401,5.198,2402,5.198,2403,5.198,2404,5.813,2405,5.813,2406,6.429,2407,6.429,2408,7.513,2409,4.49,2410,5.813,2411,4.792,2412,5.813]],["title/injectables/InsightsService.html",[530,0.826,2312,3.009]],["body/injectables/InsightsService.html",[8,0.006,12,0.051,13,0.051,14,0.045,19,0.118,20,0.574,22,0.062,23,0.144,24,0.004,25,0.004,54,1.258,58,0.493,60,1.647,61,0.972,62,0.407,63,0.844,65,1.696,70,1.393,82,1.161,133,3.878,137,0.989,198,1.438,215,1.509,218,2.056,264,1.79,266,1.196,276,0.211,277,1.979,296,2.64,307,1.159,316,3.156,380,2.072,389,1.924,392,5.412,411,1.965,416,1.577,436,1.105,507,2.328,523,1.698,530,1.102,531,1.484,709,3.538,713,2.436,718,1.66,722,3.19,723,1.933,724,1.668,725,1.27,726,1.585,727,1.728,731,3.19,733,3.329,734,2.099,738,3.664,739,2.299,781,1.585,834,4.272,835,2.706,847,3.643,848,3.26,849,2.891,850,2.794,1001,4.371,1227,2.706,1235,2.013,1270,2.299,1378,2.533,1410,3.616,1411,3.422,1415,3.26,1436,4.187,1445,5.811,1596,3.756,2025,4.013,2043,4.013,2311,3.422,2312,4.013,2339,4.184,2384,5.612,2413,4.187,2414,6.499,2415,5.019,2416,6.499,2417,6.499,2418,4.682,2419,4.682,2420,6.499,2421,6.499,2422,4.682,2423,4.682,2424,5.357,2425,4.682,2426,4.682,2427,6.499,2428,4.682,2429,6.499,2430,4.682,2431,3.86,2432,4.682,2433,6.499,2434,4.682,2435,4.682,2436,6.499,2437,6.499,2438,4.682,2439,4.682,2440,4.682,2441,4.682,2442,4.682,2443,4.682,2444,4.682,2445,4.682]],["title/controllers/IssueSummaryController.html",[270,1.044,2446,3.763]],["body/controllers/IssueSummaryController.html",[8,0.006,12,0.067,13,0.067,14,0.06,19,0.122,20,0.762,22,0.082,23,0.191,24,0.004,25,0.004,54,1.517,58,0.341,60,1.168,61,0.689,62,0.364,63,0.598,65,1.202,173,2.002,218,1.711,267,1.738,270,1.331,272,1.636,274,2.253,276,0.28,277,1.736,287,0.762,290,3.302,308,3.126,344,2.978,345,2.726,346,3.514,347,4.154,350,2.893,351,2.253,352,0.934,368,2.516,374,2.139,376,2.785,377,2.293,380,1.432,411,1.636,416,1.118,421,0.963,492,5.122,497,5.555,499,4.678,503,4.27,504,3.483,505,5.555,507,1.938,508,4.84,509,4.27,510,2.846,511,2.978,513,4.799,515,5.303,516,4.799,519,2.214,520,5.555,523,2.253,1025,6.938,2446,6.054,2447,6.054,2448,4.799,2449,8.064,2450,6.213,2451,6.213,2452,7.839,2453,5.978,2454,6.213,2455,6.213,2456,6.213,2457,6.213]],["title/modules/IssueSummaryModule.html",[0,1.191,39,3.561]],["body/modules/IssueSummaryModule.html",[0,2.026,2,2.509,3,3.172,8,0.006,9,3.231,10,2.65,11,2.509,12,0.073,13,0.073,14,0.066,17,3.422,18,3.563,19,0.122,20,0.833,22,0.089,23,0.209,24,0.005,25,0.005,39,7.302,40,6.218,53,3.356,185,2.422,186,3.602,187,5.25,272,2.182,515,5.118,516,5.25,528,6.078,529,6.078,2446,6.906,2447,5.25,2453,7.06,2458,6.078,2459,6.078,2460,6.078,2461,6.798]],["title/injectables/IssueSummaryService.html",[530,0.826,2453,3.392]],["body/injectables/IssueSummaryService.html",[8,0.006,12,0.061,13,0.061,14,0.054,19,0.108,20,0.689,22,0.074,23,0.172,24,0.004,25,0.004,54,1.423,58,0.449,60,1.54,61,0.908,62,0.38,63,0.789,65,1.423,185,2.004,186,2.979,245,3.25,259,3.748,264,1.549,266,2.093,276,0.253,277,1.656,290,3.052,307,1.021,380,1.694,394,3.25,413,3.25,416,1.322,421,0.872,436,1.37,499,3.356,507,2.294,511,2.696,513,4.343,515,5.71,519,2.004,530,1.247,531,1.783,532,4.636,533,5.118,534,3.914,535,5.184,536,5.028,539,5.372,540,5.565,541,6.276,542,5.028,543,4.888,544,3.748,545,3.914,546,3.748,547,3.748,548,4.109,549,2.634,550,3.914,551,4.109,552,4.109,553,4.109,554,4.109,555,4.636,556,3.748,557,4.636,558,5.028,559,5.028,560,3.914,561,4.709,562,3.472,565,5.118,566,3.914,567,4.109,568,5.028,569,4.636,570,3.914,571,5.021,572,3.914,573,3.914,574,3.914,678,3.472,1025,6.349,1030,5.678,2447,6.71,2448,4.343,2449,6.574,2453,5.118,2462,7.352,2463,5.623,2464,5.028,2465,5.623,2466,5.623,2467,5.028,2468,7.352,2469,5.623,2470,5.623,2471,5.623,2472,5.623]],["title/modules/LogModule.html",[0,1.191,2473,3.763]],["body/modules/LogModule.html",[0,2.023,2,2.504,3,3.168,8,0.006,9,3.227,10,2.645,11,2.504,12,0.073,13,0.073,14,0.065,17,3.418,18,3.558,19,0.128,20,0.832,22,0.089,23,0.208,24,0.005,25,0.005,53,2.747,69,3.179,70,2.019,71,7.403,73,4.049,151,4.723,217,4.723,227,5.594,1093,7.409,1104,6.755,1119,6.067,2473,7.715,2474,6.067,2475,6.067,2476,6.067,2477,6.785,2478,6.067,2479,6.785,2480,6.785]],["title/injectables/LogService.html",[530,0.826,1104,3.392]],["body/injectables/LogService.html",[8,0.006,12,0.071,13,0.071,14,0.064,19,0.124,20,0.809,22,0.087,23,0.202,24,0.005,25,0.005,54,1.575,58,0.447,60,1.53,61,0.903,62,0.377,63,0.784,65,1.277,70,1.963,82,1.637,151,4.594,196,3.023,227,5.441,264,2.242,266,1.686,276,0.297,277,1.784,380,1.521,411,1.737,416,1.187,507,2.059,511,3.164,530,1.38,531,2.092,613,3.7,713,2.785,723,2.725,1032,7.116,1099,5.441,1104,5.666,2478,5.901,2481,5.901,2482,8.139,2483,6.599,2484,6.599,2485,8.139,2486,8.139,2487,6.599,2488,6.599,2489,6.599,2490,8.139,2491,6.599,2492,6.599,2493,6.599]],["title/modules/OpenAiModule.html",[0,1.191,40,3.121]],["body/modules/OpenAiModule.html",[0,2.09,2,2.644,3,3.273,8,0.006,9,3.335,10,2.792,11,2.644,12,0.077,13,0.077,14,0.069,17,3.532,18,3.676,19,0.113,20,0.878,22,0.094,23,0.22,24,0.005,25,0.005,40,6.362,185,2.552,186,3.795,535,5.722,544,4.773,578,5.532,2494,6.404,2495,6.404,2496,6.404,2497,7.162]],["title/injectables/OpenAiService.html",[530,0.826,535,2.732]],["body/injectables/OpenAiService.html",[8,0.006,12,0.062,13,0.062,14,0.056,19,0.109,20,0.708,22,0.076,23,0.177,24,0.004,25,0.004,54,1.448,58,0.41,60,1.406,61,0.83,62,0.385,63,0.72,65,1.118,72,5.752,73,3.447,137,1.22,186,4.397,218,1.591,260,4.461,264,1.591,276,0.26,277,1.677,307,1.034,308,2.906,344,2.769,380,1.912,381,5.208,411,1.969,416,1.039,436,1.404,507,1.802,519,2.058,523,2.094,530,1.269,531,1.831,535,4.194,556,3.85,561,5.622,575,3.567,576,5.778,578,6.409,579,4.762,580,5.164,582,7.68,583,4.762,584,5.164,585,3.238,586,6.689,587,7.848,588,5.824,589,4.461,590,4.762,591,4.021,592,4.762,593,5.164,594,5.164,595,3.7,596,5.164,597,5.164,598,4.461,599,5.164,600,5.164,601,5.164,602,5.164,603,5.164,604,2.132,605,5.164,606,4.461,607,4.762,608,6.689,609,2.094,610,5.164,611,2.433,612,5.164,613,3.238,614,5.164,615,5.164,616,5.164,2076,4.762,2498,7.481,2499,5.776,2500,5.776]],["title/classes/PageDto.html",[23,0.149,726,1.65]],["body/classes/PageDto.html",[8,0.006,12,0.068,13,0.068,14,0.061,19,0.119,22,0.083,23,0.266,24,0.004,25,0.004,58,0.475,60,1.188,61,0.701,62,0.449,63,0.609,196,3.63,264,1.741,267,2.667,276,0.284,287,0.971,352,0.951,466,1.768,469,1.364,485,3.505,488,2.105,613,5.24,726,2.683,781,2.14,834,5.185,835,3.653,1007,4.05,1009,4.853,1012,4.62,1092,4.883,2501,5.653,2502,7.072,2503,7.925,2504,6.507,2505,7.925,2506,6.322,2507,6.322,2508,6.322,2509,6.322,2510,6.322,2511,6.322,2512,8.656,2513,6.322,2514,6.322]],["title/classes/PageMetaDto.html",[23,0.149,834,2.582]],["body/classes/PageMetaDto.html",[8,0.006,12,0.056,13,0.056,14,0.05,19,0.092,22,0.068,23,0.159,24,0.004,25,0.004,58,0.507,60,0.975,61,0.575,62,0.428,63,0.499,196,3.193,214,2.667,264,1.919,267,2.806,276,0.233,287,1.108,307,1.231,352,0.78,421,1.401,466,1.451,469,1.199,471,3.66,474,2.351,478,4.131,485,3.739,591,4.851,609,3.183,611,3.544,718,1.325,781,3.306,785,3.863,834,3.693,847,4.921,1355,4.645,1385,6.149,1386,7.524,1689,5.093,2502,3.79,2515,7.251,2516,4.638,2517,7.87,2518,7.87,2519,7.87,2520,5.187,2521,6.499,2522,6.969,2523,6.969,2524,5.187,2525,7.524,2526,7.524,2527,5.187,2528,6.969,2529,5.187,2530,5.187,2531,6.231,2532,5.187,2533,5.187,2534,6.488,2535,5.187,2536,5.745,2537,5.187,2538,5.187,2539,5.187,2540,5.187,2541,5.187,2542,5.187]],["title/interfaces/PageMetaParameters.html",[575,3.009,2521,3.763]],["body/interfaces/PageMetaParameters.html",[8,0.006,12,0.08,13,0.08,14,0.071,19,0.097,22,0.097,24,0.005,25,0.005,62,0.404,276,0.333,307,1.155,469,1.501,575,4.568,577,5.713,718,2.572,725,2.007,781,2.504,847,5.368,2502,5.405,2515,5.713,2521,6.734,2543,6.614]],["title/classes/PageOptionsDto.html",[23,0.149,718,1.245]],["body/classes/PageOptionsDto.html",[8,0.006,12,0.057,13,0.057,14,0.051,19,0.112,22,0.07,23,0.244,24,0.004,25,0.004,58,0.486,62,0.438,63,0.909,267,2.741,276,0.239,287,1.042,307,1.203,352,0.8,416,0.956,421,0.824,466,1.487,469,1.219,488,1.77,549,3.319,609,1.928,611,4.025,718,1.81,781,2.698,782,2.817,785,3.912,786,4.467,787,4.147,789,2.619,790,3.579,792,2.981,793,3.972,797,4.112,798,3.859,799,3.754,800,2.896,803,4.675,804,4.112,805,2.981,807,2.896,809,4.345,810,2.491,811,3.176,812,2.981,813,2.981,815,4.345,816,3.406,817,4.147,818,3.173,833,4.106,955,3.283,957,3.283,958,3.283,1012,3.885,2380,4.932,2515,7.031,2534,4.383,2536,4.383,2544,5.841,2545,6.154,2546,5.317,2547,5.317,2548,5.317,2549,4.754,2550,4.754,2551,5.317,2552,7.006,2553,5.317,2554,5.841,2555,4.383,2556,5.317,2557,5.317,2558,4.754]],["title/injectables/PagerService.html",[7,2.582,530,0.826]],["body/injectables/PagerService.html",[7,4.284,8,0.006,12,0.071,13,0.071,14,0.063,19,0.126,20,0.8,22,0.086,23,0.2,24,0.004,25,0.004,54,1.564,58,0.358,60,1.519,61,0.724,62,0.375,63,0.629,65,1.263,82,1.619,215,2.103,218,2.227,276,0.294,277,1.775,380,1.863,411,1.718,416,1.174,507,2.036,530,1.371,531,2.069,575,4.031,718,2.41,725,1.771,726,2.21,733,3.338,735,4.351,834,4.864,835,3.772,847,4.532,849,4.031,850,3.895,1197,1.668,2339,4.532,2559,5.382,2560,7.853,2561,6.528,2562,7.089,2563,6.528,2564,5.837,2565,5.837,2566,4.77,2567,7.229,2568,5.837,2569,5.382]],["title/interfaces/PaginationInput.html",[575,3.009,2562,3.763]],["body/interfaces/PaginationInput.html",[7,3.503,8,0.006,12,0.071,13,0.071,14,0.064,19,0.127,20,0.81,22,0.087,23,0.203,24,0.005,25,0.005,62,0.378,82,1.64,215,2.13,218,2.244,276,0.297,277,1.336,380,1.878,411,1.74,416,1.189,469,1.402,530,1.382,575,4.082,577,5.106,718,2.557,725,1.794,726,2.238,733,3.91,735,4.406,834,4.885,835,3.821,847,4.568,849,4.082,850,3.945,2339,5.169,2559,5.451,2560,5.911,2562,6.822,2564,5.911,2565,5.911,2566,4.831,2567,7.286,2568,5.911,2569,5.451]],["title/controllers/PizzaOvenController.html",[270,1.044,2570,3.763]],["body/controllers/PizzaOvenController.html",[8,0.006,12,0.037,13,0.037,14,0.033,19,0.118,20,0.414,22,0.044,23,0.104,24,0.003,25,0.003,54,0.992,58,0.46,60,1.574,61,0.929,62,0.434,63,0.806,65,1.621,113,4.43,115,1.659,116,4.43,118,4.832,173,1.089,218,0.931,264,0.931,266,1.583,267,1.733,270,0.724,272,0.89,274,1.226,276,0.152,277,1.97,287,1.027,290,3.17,296,3.016,307,1.158,308,1.701,344,2.458,347,2.717,348,3.24,349,3.327,350,3.166,351,1.226,352,0.508,374,1.164,377,3.091,380,0.779,389,2.188,411,0.89,416,1.462,421,1.072,465,5.718,472,1.793,480,4.313,503,2.793,504,1.895,508,3.167,509,2.793,523,1.226,701,5.839,702,5.012,706,3.57,711,6.184,713,2.09,718,2.461,720,3.023,724,1.205,725,0.917,726,1.144,727,1.248,729,2.787,748,4.313,752,6.184,761,3.023,763,2.787,861,4.695,865,2.663,866,1.549,867,1.621,868,1.515,869,1.621,1000,2.076,1201,5.054,1211,6.905,1896,4.146,1939,5.016,1966,4.785,1969,1.659,2209,3.023,2228,4.387,2246,3.285,2250,3.023,2282,4.585,2570,3.961,2571,6.624,2572,3.023,2573,6.196,2574,6.184,2575,6.916,2576,6.916,2577,7.434,2578,7.434,2579,5.54,2580,3.023,2581,3.38,2582,3.38,2583,3.38,2584,3.38,2585,3.38,2586,3.38,2587,3.38,2588,3.38,2589,3.38,2590,3.38,2591,3.38,2592,3.38,2593,3.38,2594,3.38,2595,3.38,2596,3.38,2597,4.585,2598,3.38,2599,3.38,2600,3.38,2601,3.38,2602,5.128,2603,3.38,2604,3.38,2605,3.38,2606,3.38,2607,3.38,2608,3.38,2609,2.611,2610,5.54,2611,5.128,2612,3.38,2613,3.38,2614,5.128,2615,5.128,2616,3.023,2617,3.023,2618,4.313,2619,3.023,2620,2.787,2621,3.023,2622,3.023,2623,3.38,2624,3.38,2625,3.38,2626,3.38,2627,3.38,2628,3.38,2629,3.38,2630,3.38,2631,3.38,2632,3.38,2633,3.38,2634,3.38,2635,3.38,2636,3.38,2637,3.38,2638,3.38,2639,3.38,2640,3.38,2641,3.38,2642,3.38,2643,3.38,2644,3.38,2645,3.38,2646,3.38,2647,3.38,2648,5.128,2649,3.38,2650,3.38,2651,3.38,2652,3.38]],["title/modules/PizzaOvenModule.html",[0,1.191,41,3.561]],["body/modules/PizzaOvenModule.html",[0,1.865,1,5.8,2,2.199,3,2.921,8,0.006,9,2.975,10,2.322,11,2.199,12,0.064,13,0.064,14,0.057,17,3.151,18,3.28,19,0.13,20,0.73,22,0.078,23,0.183,24,0.004,25,0.004,41,7.373,53,3.09,69,2.791,70,1.772,74,6.824,75,4.911,113,3.816,115,2.924,116,4.888,118,4.713,198,1.829,272,2.009,480,5.313,701,3.816,706,6.938,729,4.911,748,6.938,763,4.911,2017,4.353,2018,4.353,2570,6.504,2571,4.601,2618,6.938,2619,5.326,2620,4.911,2621,5.326,2622,5.326,2653,5.326,2654,5.957,2655,5.326,2656,5.326,2657,5.957,2658,5.957,2659,5.957]],["title/injectables/PizzaOvenService.html",[530,0.826,2618,3.392]],["body/injectables/PizzaOvenService.html",[7,4.858,8,0.006,12,0.054,13,0.054,14,0.049,19,0.127,20,0.618,22,0.066,23,0.155,24,0.004,25,0.004,54,1.323,58,0.477,60,1.563,61,0.922,62,0.386,63,0.801,65,1.61,70,1.5,72,5.661,73,3.009,75,4.157,82,1.251,113,3.23,115,2.475,198,1.548,203,3.894,205,3.894,218,1.389,264,1.883,266,2.125,267,1.41,276,0.227,277,1.911,296,2.936,307,0.967,380,2.113,389,1.762,406,2.475,411,1.327,416,1.496,436,1.013,465,6.078,470,4.508,523,1.828,530,1.159,531,1.598,613,2.827,709,3.65,713,2.514,718,2.29,722,3.356,723,2.082,724,1.797,725,1.368,726,1.707,727,1.861,728,3.23,731,3.356,733,3.203,734,3.065,735,3.36,736,3.23,737,3.894,738,3.808,739,2.475,2571,6.924,2574,6.113,2579,6.113,2580,6.113,2616,4.508,2617,4.508,2618,4.759,2620,4.157,2660,4.508,2661,6.837,2662,5.042,2663,9.168,2664,5.042,2665,6.837,2666,5.042,2667,6.837,2668,5.042,2669,5.042,2670,6.837,2671,5.042,2672,5.042,2673,5.042,2674,5.042,2675,5.042,2676,5.042,2677,5.042,2678,5.042,2679,5.042,2680,5.042,2681,5.042,2682,5.042,2683,5.042,2684,5.042]],["title/classes/PullRequestContributorInsightsDto.html",[23,0.149,888,3.561]],["body/classes/PullRequestContributorInsightsDto.html",[8,0.006,12,0.061,13,0.061,14,0.055,19,0.115,22,0.075,23,0.252,24,0.004,25,0.004,58,0.496,62,0.438,63,0.94,173,2.381,267,2.706,276,0.255,287,1.108,307,1.126,352,0.852,436,1.095,466,1.585,469,1.272,487,2.935,488,1.887,549,3.462,609,2.055,611,3.67,618,3.112,718,2.412,724,2.019,725,1.537,781,2.502,783,2.633,785,4.037,786,4.143,787,3.852,789,2.586,790,3.67,792,3.177,793,3.177,797,3.813,798,4.025,799,3.916,800,3.087,801,4.885,803,4.137,804,2.924,805,3.177,806,3.275,807,3.087,808,3.275,809,3.628,810,2.655,811,2.54,812,3.177,813,3.177,814,3.275,815,4.037,817,3.852,821,4.143,872,4.733,888,5.4,957,3.499,958,3.499,1012,4.141,2090,5.077,2098,3.945,2380,3.945,2552,6.092,2554,4.672,2555,4.672,2685,5.067,2686,5.667,2687,5.667]],["title/classes/PullRequestContributorOptionsDto.html",[23,0.149,856,3.561]],["body/classes/PullRequestContributorOptionsDto.html",[8,0.006,12,0.054,13,0.054,14,0.049,19,0.109,22,0.066,23,0.21,24,0.004,25,0.004,58,0.512,62,0.443,63,0.956,173,2.801,185,2.436,267,2.813,276,0.227,287,1.143,307,0.967,352,0.758,436,1.416,466,1.41,469,1.177,472,2.012,474,2.003,487,3.304,488,1.679,489,2.672,549,2.362,611,3.267,618,3.662,718,2.342,724,1.797,725,1.855,781,2.315,782,2.672,783,2.436,785,3.356,786,3.833,787,3.634,789,2.492,790,3.503,792,3.833,793,4.349,797,2.602,798,3.724,799,2.672,800,2.746,801,4.663,802,3.009,803,3.903,804,2.602,805,2.827,806,2.914,807,2.746,808,2.914,809,3.356,810,2.362,811,2.26,812,2.827,813,2.827,814,2.914,815,4.268,816,3.23,817,4.073,818,3.009,821,4.874,856,4.996,872,5.569,1822,4.79,2090,4.79,2091,5.17,2092,5.536,2093,3.684,2094,4.157,2095,4.996,2096,3.894,2097,4.508,2098,3.51,2099,4.157,2100,4.508,2101,3.36,2102,3.684,2688,4.508,2689,3.894]],["title/controllers/PullRequestController.html",[270,1.044,2690,3.763]],["body/controllers/PullRequestController.html",[8,0.006,12,0.053,13,0.053,14,0.047,19,0.126,20,0.603,22,0.065,23,0.151,24,0.004,25,0.004,54,1.301,58,0.42,60,1.439,61,0.849,62,0.413,63,0.737,65,1.482,153,4.344,154,4.484,156,5.322,158,3.424,172,4.48,173,2.777,174,3.594,264,1.355,266,1.717,267,1.88,270,1.054,272,1.295,274,1.783,276,0.221,277,1.901,287,0.939,290,3.013,296,2.914,349,3.27,350,3.038,351,1.783,352,0.74,374,1.693,377,2.827,416,1.378,595,3.15,618,3.467,621,3.424,636,3.594,637,3.594,638,4.695,718,2.454,724,1.753,725,2.078,726,1.665,727,1.815,781,1.665,809,2.414,857,4.055,858,6.011,859,4.68,860,4.151,861,4.615,865,2.114,866,2.253,867,2.358,868,2.205,869,2.358,870,4.729,871,3.594,876,4.055,893,3.3,1406,4.306,1460,3.15,1939,3.662,2088,5.731,2201,4.68,2213,4.055,2237,4.055,2313,3.278,2690,5.192,2691,4.398,2692,8.232,2693,8.232,2694,8.232,2695,4.918,2696,4.918,2697,6.722,2698,6.011,2699,4.918,2700,4.918,2701,4.918,2702,6.722,2703,4.918,2704,4.918,2705,6.016,2706,4.918,2707,4.398,2708,5.192,2709,4.398,2710,4.68,2711,4.918,2712,6.011,2713,4.918,2714,4.918,2715,4.918,2716,4.918,2717,4.918,2718,4.918,2719,4.918,2720,4.918,2721,4.918,2722,4.918]],["title/controllers/PullRequestDescriptionController.html",[270,1.044,2723,3.763]],["body/controllers/PullRequestDescriptionController.html",[8,0.006,12,0.066,13,0.066,14,0.059,19,0.122,20,0.747,22,0.08,23,0.187,24,0.004,25,0.004,54,1.499,58,0.335,60,1.146,61,0.676,62,0.359,63,0.587,65,1.18,153,3.629,154,4.219,173,2.979,218,1.68,270,1.306,272,1.605,274,2.211,276,0.274,277,1.721,287,0.747,290,2.623,308,3.068,313,4.064,344,2.923,345,2.676,346,3.472,347,4.105,350,2.859,351,2.211,352,0.917,368,2.469,374,2.1,376,2.733,377,2.251,380,1.405,411,1.605,416,1.097,421,1.465,503,4.219,504,3.419,507,1.902,508,4.783,509,4.219,510,2.793,511,2.923,519,2.173,523,2.211,618,3.263,621,4.245,622,6.918,627,5.661,629,4.783,636,4.456,637,4.456,638,3.321,640,4.71,660,5.392,1060,4.783,2116,7.1,2723,5.983,2724,5.452,2725,6.098,2726,6.098,2727,6.098,2728,6.098,2729,5.452,2730,5.927,2731,5.452,2732,6.098,2733,6.098]],["title/injectables/PullRequestDescriptionService.html",[530,0.826,2730,3.392]],["body/injectables/PullRequestDescriptionService.html",[8,0.006,12,0.06,13,0.06,14,0.053,19,0.107,20,0.678,22,0.073,23,0.17,24,0.004,25,0.004,54,1.407,58,0.446,60,1.527,61,0.901,62,0.377,63,0.782,65,1.407,153,3.406,154,4.701,173,2.966,185,1.97,186,2.929,245,3.195,259,3.684,264,1.523,266,2.076,276,0.249,277,1.642,307,1.012,380,1.675,394,3.195,413,3.195,416,1.308,421,1.338,436,1.363,499,3.299,507,2.268,511,2.65,519,1.97,530,1.233,531,1.753,533,5.061,534,3.848,535,5.16,539,5.313,540,5.528,541,6.242,543,4.848,544,3.684,545,3.848,546,3.684,547,3.684,548,4.04,549,2.59,550,3.848,551,4.04,552,4.04,553,4.04,554,4.04,555,4.558,556,3.684,560,3.848,561,4.657,565,5.061,566,3.848,567,4.04,569,4.558,570,3.848,571,4.988,572,3.848,573,3.848,574,3.848,606,5.615,618,3.635,632,2.853,649,4.04,652,4.558,668,6.501,670,6.501,678,3.414,1060,3.414,2116,6.307,2119,4.943,2464,4.943,2467,4.943,2729,4.943,2730,5.061,2734,4.943,2735,5.528,2736,5.528,2737,5.528,2738,5.528,2739,5.528,2740,5.528,2741,4.943,2742,5.528,2743,5.528,2744,5.528,2745,5.528,2746,5.528]],["title/injectables/PullRequestInsightsService.html",[530,0.826,2710,3.392]],["body/injectables/PullRequestInsightsService.html",[8,0.006,12,0.056,13,0.056,14,0.05,19,0.119,20,0.638,22,0.068,23,0.16,24,0.004,25,0.004,54,1.351,58,0.462,60,1.583,61,0.874,62,0.436,63,0.759,65,1.525,70,1.548,82,1.29,154,4.786,172,4.654,173,2.915,174,3.801,198,1.597,218,1.433,245,5.341,264,1.923,266,1.784,276,0.234,277,1.411,296,1.704,307,1.05,380,1.941,411,1.369,416,1.256,436,1.034,523,1.886,530,1.184,531,1.649,595,3.332,618,3.701,709,3.697,713,2.546,722,3.428,723,2.148,725,1.411,733,2.148,734,3.13,738,3.869,789,1.866,790,2.941,811,3.13,860,3.212,1000,2.106,1272,4.588,1459,4.017,1460,6.212,1462,4.651,2054,4.288,2088,6.298,2090,3.212,2339,4.723,2504,3.621,2566,3.801,2707,4.651,2708,4.017,2710,4.861,2747,4.651,2748,6.982,2749,7.882,2750,5.202,2751,5.707,2752,5.202,2753,6.982,2754,5.202,2755,5.202,2756,5.202,2757,5.202,2758,5.202,2759,5.756,2760,3.621,2761,3.801,2762,5.202,2763,5.202,2764,5.202,2765,5.202,2766,5.202,2767,5.202,2768,4.288,2769,5.202,2770,5.202,2771,5.202,2772,5.202,2773,5.202,2774,5.202,2775,5.202,2776,5.202,2777,4.651,2778,4.651,2779,4.651,2780,5.202]],["title/modules/PullRequestModule.html",[0,1.191,42,3.248]],["body/modules/PullRequestModule.html",[0,1.731,2,1.962,3,2.711,8,0.006,9,2.762,10,2.073,11,1.962,12,0.057,13,0.057,14,0.051,17,2.925,18,3.045,19,0.132,20,0.652,22,0.07,23,0.163,24,0.004,25,0.004,40,5.831,42,6.755,53,2.869,69,2.491,70,1.582,153,4.147,154,2.896,156,3.283,158,3.701,172,4.722,173,2.738,174,3.885,185,1.895,186,2.817,187,4.106,198,1.632,272,1.865,617,6.154,618,2.239,632,4.698,634,6.338,635,4.754,653,6.154,654,4.932,663,6.338,664,5.841,683,6.154,689,3.543,691,6.338,870,6.053,871,3.885,923,4.754,2313,3.543,2690,6.154,2708,5.472,2710,6.338,2723,6.154,2730,6.338,2731,4.754,2760,3.701,2781,4.754,2782,4.754,2783,4.754,2784,4.754,2785,6.338,2786,5.317,2787,4.754,2788,5.317,2789,5.317,2790,5.317,2791,5.317,2792,5.317]],["title/classes/PullRequestPageOptionsDto.html",[23,0.149,2705,3.561]],["body/classes/PullRequestPageOptionsDto.html",[8,0.006,12,0.046,13,0.046,14,0.041,19,0.102,22,0.093,23,0.186,24,0.003,25,0.003,58,0.513,62,0.445,63,0.957,173,2.881,185,2.751,267,2.823,276,0.191,287,1.145,307,0.882,352,0.639,385,2.365,386,2.608,436,1.42,466,1.188,469,1.044,472,1.836,474,2.045,487,3.244,488,1.414,489,2.25,549,1.99,611,2.981,618,3.766,718,2.234,724,1.513,725,1.646,781,3.126,782,2.25,783,2.162,784,4.717,785,2.978,786,3.401,787,3.316,789,2.497,790,3.44,792,4.329,793,4.902,797,2.192,798,3.305,799,2.25,800,2.313,801,4.329,802,2.535,803,3.561,804,2.192,805,2.381,806,2.454,807,2.313,808,2.454,809,2.978,810,1.99,811,1.904,812,2.381,813,2.381,814,2.454,815,4.389,816,2.721,817,4.188,818,4.874,821,3.968,872,5.727,1051,2.957,1494,5.002,1502,5.002,1586,5.002,1679,4.534,1822,4.371,2090,4.371,2091,4.717,2092,5.245,2093,3.104,2095,5.172,2096,3.28,2098,2.957,2099,3.501,2101,2.831,2102,3.104,2549,3.798,2688,3.798,2689,3.28,2705,4.434,2793,4.247,2794,4.247,2795,7.818,2796,7.078,2797,4.247,2798,3.798,2799,4.247,2800,4.247,2801,7.594,2802,4.247,2803,4.247,2804,4.247,2805,4.247]],["title/injectables/PullRequestService.html",[530,0.826,870,3.009]],["body/injectables/PullRequestService.html",[8,0.006,12,0.034,13,0.034,14,0.03,19,0.119,20,0.381,22,0.041,23,0.095,24,0.003,25,0.003,54,0.931,58,0.478,60,1.607,61,0.948,62,0.397,63,0.823,65,1.655,70,0.925,82,0.771,154,4.814,156,1.92,158,2.165,173,2.133,198,0.955,215,1.895,218,2.085,264,1.325,266,1.692,276,0.14,277,1.915,296,2.895,307,0.825,380,2.284,386,1.337,411,1.743,416,1.288,436,1.06,530,0.816,531,0.986,609,1.128,618,3.723,675,2.165,709,2.905,713,2.001,718,2.455,723,1.284,724,1.714,725,1.796,726,1.053,727,1.148,731,2.361,733,3.838,734,2.637,781,1.053,785,1.527,787,4.536,803,1.564,804,2.482,811,3.538,821,3.712,824,3.206,828,3.206,832,2.564,833,2.402,834,4.531,835,1.797,845,3.966,846,3.966,847,4.426,848,2.165,849,1.92,850,3.511,856,5.96,860,2.97,863,4.095,870,2.97,873,2.564,888,5.532,907,2.78,1000,3.065,1272,3.204,1288,2.734,1460,5.056,1484,4.609,1492,2.564,2054,6.241,2090,5.458,2092,1.92,2101,2.073,2545,2.402,2705,4.299,2708,2.402,2709,5.92,2751,4.088,2759,6.241,2760,2.165,2761,2.272,2768,3.966,2806,2.78,2807,4.81,2808,5.883,2809,4.81,2810,4.81,2811,4.81,2812,4.301,2813,5.883,2814,4.81,2815,3.11,2816,5.26,2817,3.11,2818,4.81,2819,3.11,2820,3.11,2821,4.81,2822,3.11,2823,3.11,2824,3.11,2825,3.11,2826,3.11,2827,3.11,2828,3.11,2829,3.11,2830,3.11,2831,2.78,2832,3.11,2833,3.11,2834,3.11,2835,3.11,2836,3.11,2837,3.11,2838,3.11,2839,3.11,2840,6.508,2841,7.571,2842,3.11,2843,3.11,2844,3.11,2845,3.11,2846,3.11,2847,3.11,2848,3.11,2849,4.301,2850,6.621,2851,6.621,2852,7.894,2853,3.11,2854,3.11,2855,3.11,2856,2.564,2857,3.11,2858,3.966,2859,6.621,2860,3.11,2861,4.81,2862,3.11,2863,3.11,2864,3.11,2865,5.883,2866,5.883,2867,5.883,2868,4.81,2869,3.11,2870,4.81,2871,4.81,2872,4.81,2873,4.81,2874,4.81,2875,4.81,2876,3.11]],["title/controllers/RepoContributionsController.html",[270,1.044,774,3.763]],["body/controllers/RepoContributionsController.html",[8,0.006,12,0.056,13,0.056,14,0.05,19,0.123,20,0.632,22,0.068,23,0.158,24,0.004,25,0.004,54,1.343,58,0.381,60,1.305,61,0.77,62,0.389,63,0.668,65,1.343,103,4.846,266,1.318,267,1.941,270,1.105,272,1.358,274,1.87,276,0.232,277,1.824,287,0.851,290,2.842,296,2.749,307,0.978,348,3.676,349,3.117,350,2.896,351,1.87,352,0.776,374,2.39,377,2.562,380,1.6,389,1.907,411,1.827,416,1.249,421,1.076,436,1.337,472,2.56,519,1.838,718,2.306,725,1.399,726,1.746,727,1.903,738,3.408,772,5.463,774,5.362,775,4.252,776,4.611,779,6.739,781,1.746,836,4.611,865,3.373,866,2.363,867,2.472,868,2.312,869,2.472,1000,2.088,1282,3.983,1314,6.484,1893,5.377,1896,4.448,1939,3.781,1954,5.01,1969,2.532,1993,3.59,1994,3.437,2201,4.833,2228,3.892,2246,3.303,2877,7.017,2878,4.611,2879,8.761,2880,8.761,2881,5.157,2882,5.157,2883,8.395,2884,6.942,2885,6.942,2886,5.157,2887,5.157,2888,5.157,2889,5.157,2890,4.158,2891,3.303,2892,3.59,2893,3.59,2894,5.157,2895,6.942,2896,3.59,2897,6.942,2898,6.942,2899,5.157,2900,3.59]],["title/controllers/RepoController.html",[270,1.044,2901,3.763]],["body/controllers/RepoController.html",[8,0.006,12,0.052,13,0.052,14,0.046,19,0.121,20,0.588,22,0.063,23,0.147,24,0.004,25,0.004,54,1.278,58,0.447,60,1.531,61,0.903,62,0.427,63,0.784,65,1.576,99,3.888,267,1.341,270,1.027,272,1.262,274,1.738,276,0.216,277,1.949,287,0.998,290,3.121,296,3.019,307,0.942,348,3.54,349,3.393,350,3.153,351,1.738,352,0.721,374,1.651,377,3.006,389,1.716,416,1.465,421,1.024,436,1.308,472,2.426,519,1.708,713,2.461,718,2.081,725,1.792,726,1.623,727,1.77,781,1.623,824,5.428,828,3.195,857,3.952,859,4.598,860,4.079,861,4.566,865,2.061,866,2.196,867,2.298,868,2.149,869,2.298,876,3.952,1000,3.459,1896,4.315,1939,5.02,1954,4.86,1966,3.703,1969,2.353,1994,3.195,2025,5.029,2043,2.96,2213,3.952,2228,3.703,2237,3.952,2295,3.952,2316,3.952,2409,3.703,2890,4.004,2892,3.337,2893,3.337,2896,3.337,2900,3.337,2901,5.102,2902,4.287,2903,8.144,2904,7.282,2905,4.86,2906,4.598,2907,4.794,2908,4.794,2909,5.951,2910,4.794,2911,5.906,2912,4.794,2913,4.287,2914,4.794,2915,4.794,2916,4.794,2917,3.952,2918,5.906,2919,3.503,2920,4.794,2921,4.794,2922,4.794,2923,4.598,2924,4.794,2925,3.337,2926,4.794,2927,4.794]],["title/modules/RepoFilterModule.html",[0,1.191,2785,3.392]],["body/modules/RepoFilterModule.html",[0,2.093,2,2.649,3,3.277,8,0.006,9,3.338,10,2.798,11,2.649,12,0.078,13,0.078,14,0.069,17,3.536,18,3.681,19,0.113,20,0.88,22,0.094,23,0.22,24,0.005,25,0.005,472,1.861,2751,6.304,2761,5.244,2785,6.917,2928,6.417,2929,6.417,2930,6.417,2931,5.916,2932,7.176]],["title/injectables/RepoFilterService.html",[530,0.826,2751,3.009]],["body/injectables/RepoFilterService.html",[8,0.006,12,0.055,13,0.055,14,0.049,19,0.11,20,0.62,22,0.066,23,0.155,24,0.004,25,0.004,54,1.326,58,0.376,60,1.46,61,0.76,62,0.36,63,0.66,65,1.326,66,3.695,82,1.254,245,3.959,276,0.35,307,0.853,380,1.165,416,0.909,436,1.151,472,2.015,530,1.162,531,1.603,613,4.355,629,4.23,660,5.797,725,1.858,733,2.828,785,2.482,787,4.077,789,1.83,790,2.885,799,4.116,811,2.266,859,4.768,860,5.906,865,2.944,1000,2.047,1227,2.922,1235,2.944,1272,4.231,1288,2.088,1337,3.905,1460,3.239,1482,4.521,1484,3.52,1597,3.239,1969,4.404,2088,5.797,2090,4.23,2091,3.37,2092,3.122,2101,3.37,2339,4.668,2504,3.52,2566,3.695,2751,4.23,2759,5.647,2778,4.521,2779,4.521,2931,6.405,2933,4.521,2934,6.85,2935,6.85,2936,6.85,2937,5.056,2938,8.327,2939,6.85,2940,5.056,2941,6.85,2942,5.056,2943,6.405,2944,5.056,2945,5.056,2946,5.056,2947,5.056,2948,6.85,2949,5.056,2950,5.056,2951,7.769,2952,5.056,2953,5.056,2954,5.056,2955,6.125,2956,6.85,2957,5.056,2958,5.056,2959,6.85,2960,5.056,2961,5.056,2962,5.056,2963,5.056,2964,4.521,2965,5.056,2966,5.056]],["title/classes/RepoInfo.html",[23,0.149,1006,3.121]],["body/classes/RepoInfo.html",[8,0.006,12,0.073,13,0.073,14,0.065,19,0.108,22,0.088,23,0.253,24,0.005,25,0.005,58,0.452,61,0.913,62,0.449,185,2.933,276,0.302,287,1.009,307,1.155,352,1.011,389,2.161,421,1.276,436,1.374,466,1.88,469,1.417,471,3.333,472,2.405,474,2.233,476,6.011,485,3.603,487,3.27,488,2.238,489,3.562,956,5.273,1006,5.273,1069,5.083,2967,6.502,2968,6.011,2969,7.956,2970,6.722,2971,6.722,2972,6.722,2973,6.722]],["title/modules/RepoModule.html",[0,1.191,43,2.816]],["body/modules/RepoModule.html",[0,2.007,2,2.472,3,3.143,8,0.006,9,3.202,10,2.611,11,2.472,12,0.072,13,0.072,14,0.065,17,3.391,18,3.53,19,0.127,20,0.821,22,0.088,23,0.205,24,0.005,25,0.005,43,5.761,53,3.326,69,3.137,70,1.992,99,2.879,198,2.056,272,2.162,778,4.662,2409,5.173,2760,4.662,2785,6.734,2787,5.988,2890,5.364,2901,6.861,2917,5.521,2974,5.988,2975,6.697,2976,5.988,2977,5.988,2978,6.697,2979,6.697]],["title/classes/RepoPageOptionsDto.html",[23,0.149,2905,2.908]],["body/classes/RepoPageOptionsDto.html",[8,0.006,12,0.057,13,0.057,14,0.05,19,0.104,22,0.104,23,0.215,24,0.004,25,0.004,58,0.483,61,0.777,62,0.408,63,0.927,176,2.933,267,2.715,276,0.235,287,1.079,307,0.985,352,0.787,385,2.733,386,3.013,466,1.463,469,1.206,488,1.742,549,2.451,611,3.329,718,2.365,724,1.864,725,1.419,781,2.859,782,2.772,783,2.498,784,5.268,785,3.441,786,3.93,787,3.703,789,2.594,790,3.708,792,3.93,793,4.432,794,6.764,797,2.7,798,3.818,799,2.772,800,2.85,801,4.734,802,3.122,803,3.977,804,2.7,805,2.933,806,3.024,807,2.85,808,3.024,809,3.441,810,2.451,811,2.345,812,2.933,813,2.933,814,3.024,815,3.441,816,3.351,817,3.284,818,4.717,853,3.642,891,5.122,1000,2.118,1355,3.487,1597,3.351,1702,3.823,2378,4.313,2379,4.313,2380,3.642,2381,4.313,2382,4.313,2383,4.313,2448,5.414,2905,4.183,2967,5.122,2980,6.517,2981,4.678,2982,5.232,2983,4.678,2984,5.414,2985,6.267,2986,6.267,2987,5.779,2988,5.414,2989,5.779,2990,5.779,2991,5.414,2992,5.232]],["title/classes/RepoSearchOptionsDto.html",[23,0.149,2909,3.561]],["body/classes/RepoSearchOptionsDto.html",[8,0.006,12,0.054,13,0.054,14,0.048,19,0.109,22,0.066,23,0.209,24,0.004,25,0.004,58,0.518,62,0.443,63,0.962,267,2.825,276,0.225,287,1.157,307,0.962,352,0.752,436,1.379,466,1.398,469,1.17,472,2.15,487,3.293,488,1.665,549,2.342,611,3.253,718,2.118,725,1.844,781,2.615,782,2.649,783,2.422,784,4.531,785,3.337,786,3.811,787,3.619,789,2.594,790,3.651,792,4.33,793,4.647,794,5.645,797,2.58,798,3.703,799,2.649,800,2.723,801,4.86,802,2.984,803,3.886,804,2.58,805,2.803,806,2.89,807,2.723,808,2.89,809,3.337,810,2.342,811,2.241,812,2.803,813,2.803,814,2.89,815,4.256,816,3.203,817,4.061,818,2.984,985,4.122,1822,4.77,2090,4.77,2091,5.148,2092,5.522,2093,3.654,2094,4.122,2095,3.654,2098,4.733,2101,3.332,2102,3.654,2798,4.471,2905,4.946,2909,4.968,2919,6.335,2967,6.335,2980,4.122,2981,4.471,2993,5,2994,5,2995,5]],["title/injectables/RepoService.html",[530,0.826,2890,2.582]],["body/injectables/RepoService.html",[8,0.006,12,0.036,13,0.036,14,0.032,19,0.116,20,0.407,22,0.044,23,0.102,24,0.003,25,0.003,54,0.979,58,0.468,60,1.604,61,0.965,62,0.396,63,0.802,65,1.612,70,0.988,82,0.824,99,1.428,103,3.124,105,1.919,107,2.051,109,2.051,111,2.051,137,0.701,185,1.184,198,1.02,215,1.63,218,2.141,243,4.734,264,1.394,266,1.885,276,0.149,277,1.855,296,2.795,307,1.007,316,2.676,334,2.214,380,2.224,389,1.556,411,1.942,416,1.498,436,1.417,472,1.913,523,1.835,530,0.858,531,1.053,609,1.204,709,3.007,713,2.071,718,1.885,722,3.009,723,1.371,724,1.184,725,1.663,726,1.124,727,1.226,731,2.484,733,3.439,734,2.747,738,3.815,739,2.484,781,1.124,787,3.641,789,1.352,790,2.131,794,2.427,803,1.671,804,2.611,809,3.009,811,3.072,824,4.085,828,2.214,831,3.522,832,2.738,833,2.565,834,4.282,835,1.919,839,4.524,840,4.524,842,2.97,843,2.97,845,4.171,846,4.171,847,3.842,848,2.312,849,3.124,850,3.019,860,2.051,972,1.556,1197,1.566,1235,2.175,1272,2.756,1288,2.531,1314,3.908,1320,2.97,1460,4.39,1484,3.522,1618,2.97,1633,2.97,1652,2.97,1667,2.97,1954,1.982,1981,2.565,2025,3.124,2043,2.051,2067,2.565,2091,2.214,2092,2.051,2101,2.214,2339,3.842,2398,4.171,2504,2.312,2566,2.427,2751,4.232,2760,2.312,2761,2.427,2768,2.738,2812,4.524,2816,5.48,2831,4.524,2840,2.738,2849,2.97,2856,2.738,2890,2.681,2904,4.524,2905,4.09,2909,5.008,2913,4.524,2917,2.738,2918,4.524,2919,2.427,2980,2.738,2984,4.734,2987,2.738,2988,2.565,2989,2.738,2990,2.738,2991,2.565,2996,2.97,2997,5.06,2998,5.06,2999,6.129,3000,3.321,3001,3.321,3002,5.06,3003,5.06,3004,3.321,3005,3.321,3006,6.129,3007,3.321,3008,3.321,3009,3.321,3010,3.321,3011,5.06,3012,3.321,3013,3.321,3014,6.129,3015,3.321,3016,6.129,3017,3.321,3018,5.06,3019,3.321,3020,5.06,3021,3.321,3022,3.321,3023,3.321,3024,3.321,3025,3.321,3026,5.06,3027,3.321,3028,3.321,3029,3.321,3030,3.321,3031,3.321,3032,3.321,3033,7.376,3034,7.376,3035,2.97,3036,2.738,3037,2.97,3038,3.321,3039,3.321,3040,3.321,3041,3.321,3042,3.321,3043,3.321,3044,3.321,3045,3.321,3046,3.321,3047,3.321,3048,3.321,3049,3.321,3050,3.321,3051,3.321,3052,3.321,3053,3.321,3054,3.321,3055,3.321,3056,3.321,3057,3.321,3058,3.321,3059,3.321,3060,3.321,3061,3.321,3062,3.321,3063,2.97,3064,3.321,3065,3.321,3066,5.06,3067,3.321,3068,3.321,3069,5.06,3070,3.321,3071,3.321,3072,2.97,3073,3.321,3074,3.321]],["title/controllers/RepoStarController.html",[270,1.044,3075,3.763]],["body/controllers/RepoStarController.html",[8,0.006,12,0.038,13,0.038,14,0.034,19,0.118,20,0.429,22,0.046,23,0.107,24,0.003,25,0.003,54,1.019,58,0.414,60,1.419,61,0.837,62,0.43,63,0.727,65,1.777,99,2.721,100,1.855,107,4.661,108,2.704,137,1.112,266,0.895,267,1.473,270,0.75,272,0.922,274,1.27,276,0.158,277,1.89,287,0.925,290,2.987,291,2.718,296,2.89,307,1.206,316,3.391,345,1.537,346,3.555,348,3.536,349,3.15,350,2.927,351,1.27,352,0.527,368,1.418,374,1.813,376,3.384,377,2.786,380,1.622,389,1.923,411,1.853,416,1.358,421,1.408,436,1.345,472,2.62,510,1.604,519,1.248,718,1.346,725,0.95,726,1.186,727,1.292,738,3.456,781,1.186,861,2.952,865,2.264,866,1.604,867,1.679,868,1.57,869,1.679,1000,2.563,1013,2.334,1620,7.583,1896,3.73,1939,4.806,1954,5.052,1969,1.719,1970,1.963,1993,3.666,1994,3.51,2228,3.549,2229,1.855,2303,4.901,2890,3.354,2891,2.243,2892,2.438,2893,2.438,2896,3.666,2900,3.666,2905,4.201,2906,2.438,2923,2.438,2925,2.438,2984,2.704,3075,4.067,3076,7.091,3077,3.131,3078,7.04,3079,7.549,3080,7.549,3081,7.04,3082,7.549,3083,3.502,3084,3.502,3085,5.437,3086,7.04,3087,7.04,3088,5.145,3089,4.746,3090,4.901,3091,3.502,3092,3.502,3093,3.502,3094,3.502,3095,3.502,3096,3.502,3097,6.538,3098,3.502,3099,3.502,3100,3.502,3101,4.692,3102,3.502,3103,3.502,3104,3.502,3105,3.502,3106,2.559,3107,5.031,3108,4.406,3109,3.131,3110,2.704,3111,3.502,3112,3.502,3113,3.502,3114,5.266,3115,3.502,3116,3.502,3117,3.502,3118,5.266,3119,3.502]],["title/controllers/RepoStargazeController.html",[270,1.044,3120,3.763]],["body/controllers/RepoStargazeController.html",[8,0.006,12,0.038,13,0.038,14,0.034,19,0.118,20,0.433,22,0.046,23,0.108,24,0.003,25,0.003,54,1.025,58,0.416,60,1.424,61,0.84,62,0.431,63,0.729,65,1.78,99,2.733,100,1.87,111,4.677,112,2.726,137,1.119,266,0.902,267,1.481,270,0.756,272,0.929,274,1.28,276,0.159,277,1.893,287,0.928,290,2.993,291,2.734,296,2.895,307,1.207,316,3.393,345,1.549,346,3.565,348,3.548,349,3.16,350,2.936,351,1.28,352,0.531,368,1.429,374,1.824,376,3.395,377,2.796,380,1.629,389,1.927,411,1.861,416,1.362,421,1.41,436,1.347,472,2.633,510,1.617,519,1.258,718,1.353,725,0.957,726,1.195,727,1.303,738,3.47,781,1.195,861,2.97,865,2.277,866,1.617,867,1.692,868,1.582,869,1.692,1000,2.575,1013,2.352,1602,5.243,1841,5.301,1868,6.463,1896,3.745,1939,4.815,1954,5.064,1969,1.732,1970,1.978,1993,3.688,1994,3.531,2228,3.565,2229,1.87,2246,3.393,2890,3.37,2891,2.261,2892,2.457,2893,2.457,2896,3.688,2900,3.688,2905,4.218,2906,2.457,2923,2.457,2925,2.457,3037,3.155,3088,5.165,3089,4.758,3106,2.579,3107,5.048,3110,2.726,3120,4.091,3121,7.112,3122,3.155,3123,7.574,3124,7.574,3125,7.574,3126,7.574,3127,7.574,3128,3.529,3129,3.529,3130,5.297,3131,7.068,3132,6.32,3133,3.529,3134,3.529,3135,3.529,3136,3.529,3137,3.529,3138,3.529,3139,3.529,3140,3.529,3141,3.529,3142,5.297,3143,3.529,3144,3.529,3145,3.529,3146,3.529,3147,4.427,3148,3.155,3149,3.529,3150,3.529,3151,3.871,3152,5.297,3153,3.529,3154,3.529,3155,4.736,3156,5.297,3157,3.529]],["title/controllers/RepoSubmitController.html",[270,1.044,3158,3.763]],["body/controllers/RepoSubmitController.html",[8,0.006,12,0.038,13,0.038,14,0.034,19,0.118,20,0.428,22,0.046,23,0.107,24,0.003,25,0.003,54,1.016,58,0.413,60,1.416,61,0.836,62,0.43,63,0.726,65,1.775,99,2.714,100,1.848,109,4.654,110,2.694,137,1.109,266,0.891,267,1.469,270,0.747,272,0.918,274,1.265,276,0.157,277,1.889,287,0.924,290,2.984,291,2.71,296,2.887,307,1.205,316,3.389,345,1.531,346,3.55,348,3.531,349,3.146,350,2.923,351,1.265,352,0.525,368,1.412,374,1.808,376,3.378,377,2.782,380,1.619,389,1.92,411,1.85,416,1.356,421,1.406,436,1.344,472,2.619,510,1.598,519,1.243,718,1.342,725,0.946,726,1.181,727,1.287,738,3.449,781,1.181,861,2.944,865,2.257,866,1.598,867,1.672,868,1.564,869,1.672,1000,2.557,1013,2.325,1636,8.066,1896,3.723,1939,4.801,1954,5.046,1969,1.712,1970,1.956,1993,3.655,1994,3.5,2228,3.54,2229,1.848,2246,3.364,2303,4.891,2890,3.346,2891,2.234,2892,2.428,2893,2.428,2896,3.655,2900,3.655,2905,4.193,2906,2.428,2923,2.428,2925,2.428,3036,2.876,3085,5.427,3088,5.135,3089,4.741,3090,4.891,3101,4.683,3106,2.549,3107,5.023,3110,2.694,3158,4.056,3159,7.081,3160,3.119,3161,7.536,3162,7.536,3163,7.536,3164,7.536,3165,7.536,3166,3.488,3167,3.488,3168,7.027,3169,7.027,3170,3.488,3171,3.488,3172,3.488,3173,3.488,3174,3.488,3175,3.488,3176,7.081,3177,3.488,3178,3.488,3179,3.488,3180,3.488,3181,3.488,3182,3.488,3183,3.488,3184,4.396,3185,3.119,3186,2.876,3187,3.488,3188,3.488,3189,5.251,3190,3.488,3191,3.488,3192,5.251,3193,3.488]],["title/controllers/RepoVoteController.html",[270,1.044,3194,3.763]],["body/controllers/RepoVoteController.html",[8,0.006,12,0.035,13,0.035,14,0.031,19,0.117,20,0.396,22,0.043,23,0.099,24,0.003,25,0.003,54,0.959,58,0.422,60,1.445,61,0.853,62,0.431,63,0.74,65,1.823,99,2.59,100,1.713,105,4.211,106,2.25,137,1.69,266,0.826,267,1.386,270,0.692,272,0.851,274,1.172,276,0.145,277,1.904,287,0.942,290,3.019,291,3.968,296,2.83,307,1.22,316,3.405,345,1.418,346,3.588,348,3.414,349,3.18,350,2.954,351,1.172,352,0.486,368,1.309,374,1.706,376,3.446,377,2.838,380,1.557,389,1.875,411,1.779,416,1.383,421,1.415,436,1.321,472,2.611,507,1.008,510,1.481,519,1.152,718,1.266,725,0.877,726,1.094,727,1.193,738,3.317,781,1.094,829,4.704,861,2.778,865,2.13,866,1.481,867,1.549,868,1.449,869,1.549,1000,2.44,1013,2.154,1654,7.513,1896,3.58,1939,4.858,1954,4.928,1969,1.587,1970,1.812,1993,3.45,1994,3.303,2228,3.788,2229,1.713,2303,4.704,2890,3.193,2891,2.07,2892,2.25,2893,2.25,2896,3.45,2900,3.45,2905,4.032,2906,2.25,2923,2.25,2925,2.25,3035,2.89,3085,5.219,3088,4.938,3089,4.63,3090,4.704,3101,4.503,3106,2.362,3107,4.857,3110,2.496,3194,3.827,3195,7.157,3196,2.89,3197,6.757,3198,7.287,3199,7.287,3200,6.042,3201,6.757,3202,7.287,3203,3.232,3204,3.232,3205,6.757,3206,6.757,3207,3.232,3208,3.232,3209,3.232,3210,3.232,3211,3.232,3212,3.232,3213,6.315,3214,3.232,3215,2.89,3216,3.232,3217,3.232,3218,4.404,3219,3.232,3220,3.232,3221,3.232,3222,3.232,3223,3.232,3224,3.232,3225,3.232,3226,2.362,3227,3.232,3228,4.195,3229,2.89,3230,3.232,3231,3.232,3232,3.232,3233,3.232,3234,3.232,3235,3.232,3236,4.956,3237,3.232,3238,3.232,3239,3.232,3240,4.956,3241,3.232]],["title/modules/StarModule.html",[0,1.191,44,3.561]],["body/modules/StarModule.html",[0,1.994,2,2.445,3,3.122,8,0.006,9,3.18,10,2.582,11,2.445,12,0.072,13,0.072,14,0.064,17,3.368,18,3.506,19,0.129,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,43,5.575,44,7.271,53,3.303,69,3.103,70,1.97,97,4.414,99,2.847,100,3.51,107,5.037,108,5.116,198,2.034,272,2.147,472,1.718,778,4.611,3075,6.827,3108,7.037,3109,5.922,3242,5.922,3243,5.922,3244,6.623,3245,5.922,3246,6.623,3247,6.623]],["title/injectables/StarService.html",[530,0.826,3108,3.392]],["body/injectables/StarService.html",[8,0.006,12,0.059,13,0.059,14,0.052,19,0.113,20,0.665,22,0.071,23,0.167,24,0.004,25,0.004,54,1.39,58,0.47,60,1.513,61,0.893,62,0.373,63,0.775,65,1.558,70,1.615,82,1.346,107,3.352,108,4.193,198,1.667,218,2.218,264,1.979,266,1.387,276,0.244,277,1.851,296,2.806,307,1.225,316,3.363,380,2.054,411,2.256,416,1.541,472,1.863,523,2.92,530,1.218,531,1.721,709,3.76,713,2.59,722,2.665,723,2.241,731,3.527,733,2.966,734,3.22,739,3.527,829,6.503,972,2.543,1378,2.116,1620,4.193,3089,4.027,3090,3.779,3097,5.922,3108,5.001,3248,4.854,3249,7.184,3250,7.184,3251,5.429,3252,5.429,3253,7.184,3254,5.429,3255,7.184,3256,5.429,3257,7.184,3258,5.429,3259,3.352,3260,5.429,3261,5.429,3262,7.184,3263,7.184,3264,9.158,3265,7.184,3266,4.788,3267,5.429,3268,5.429,3269,3.967,3270,5.429]],["title/modules/StargazeModule.html",[0,1.191,45,3.561]],["body/modules/StargazeModule.html",[0,1.994,2,2.445,3,3.122,8,0.006,9,3.18,10,2.582,11,2.445,12,0.072,13,0.072,14,0.064,17,3.368,18,3.506,19,0.129,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,43,5.575,45,7.271,53,3.303,69,3.103,70,1.97,97,4.414,99,2.847,100,3.51,111,5.037,112,5.116,198,2.034,272,2.147,472,1.718,778,4.611,3120,6.827,3147,7.037,3148,5.922,3271,5.922,3272,5.922,3273,5.922,3274,6.623,3275,6.623,3276,6.623]],["title/injectables/StargazeService.html",[530,0.826,3147,3.392]],["body/injectables/StargazeService.html",[8,0.006,12,0.058,13,0.058,14,0.052,19,0.112,20,0.661,22,0.071,23,0.166,24,0.004,25,0.004,54,1.385,58,0.469,60,1.509,61,0.89,62,0.372,63,0.773,65,1.553,70,1.605,82,1.338,111,3.332,112,4.168,198,1.657,218,2.211,264,1.971,266,1.379,276,0.243,277,1.848,296,2.8,307,1.224,316,3.36,380,2.05,411,2.25,416,1.538,472,2.082,523,2.911,530,1.213,531,1.711,709,3.751,713,2.584,722,2.649,723,2.228,731,3.513,733,3.53,734,3.207,739,3.513,829,6.493,972,2.528,1378,2.104,1841,3.596,3089,4.011,3132,6.398,3147,4.981,3259,3.332,3266,4.769,3269,3.943,3277,4.825,3278,7.155,3279,7.155,3280,5.396,3281,5.396,3282,7.155,3283,5.396,3284,7.155,3285,5.396,3286,7.155,3287,5.396,3288,5.396,3289,5.396,3290,7.155,3291,7.155,3292,9.142,3293,7.155,3294,5.396,3295,5.396,3296,5.396]],["title/modules/StripeModule.html",[0,1.191,457,3.392]],["body/modules/StripeModule.html",[0,2.093,2,2.649,3,3.277,8,0.006,9,3.338,10,2.798,11,2.649,12,0.078,13,0.078,14,0.069,17,3.536,18,3.681,19,0.113,20,0.88,22,0.094,23,0.22,24,0.005,25,0.005,53,2.906,356,6.804,457,6.917,3297,6.417,3298,6.417,3299,6.417,3300,7.176,3301,7.176]],["title/injectables/StripeService.html",[356,3.248,530,0.826]],["body/injectables/StripeService.html",[8,0.006,12,0.062,13,0.062,14,0.055,19,0.109,20,0.705,22,0.076,23,0.176,24,0.004,25,0.004,54,1.443,58,0.498,60,1.556,61,0.918,62,0.406,63,0.874,65,1.443,72,5.745,73,3.43,144,6.066,196,2.633,218,1.583,264,1.583,266,2.115,276,0.259,277,1.881,292,4.739,307,1.032,316,1.979,325,4.912,356,4.971,380,1.325,389,1.694,411,1.513,416,1.489,433,6.149,436,1.378,469,1.284,507,2.327,519,2.048,530,1.265,531,1.822,611,2.421,831,4.002,1136,6.669,1302,2.577,1316,4.739,1676,4.44,1678,4.739,1684,4.44,1697,5.14,2076,4.739,2544,6.149,3302,5.14,3303,8.279,3304,7.458,3305,7.458,3306,7.458,3307,5.748,3308,7.458,3309,5.748,3310,5.748,3311,5.748,3312,8.279,3313,5.748,3314,5.748,3315,5.14,3316,5.748,3317,5.748,3318,5.748,3319,5.748,3320,5.748,3321,5.748,3322,5.748,3323,5.748,3324,5.748,3325,5.14,3326,5.748,3327,5.748,3328,5.748,3329,5.748,3330,5.748,3331,5.748]],["title/modules/StripeSubscriptionModule.html",[0,1.191,46,3.392]],["body/modules/StripeSubscriptionModule.html",[0,2.059,2,2.577,3,3.224,8,0.006,9,3.284,10,2.722,11,2.577,12,0.075,13,0.075,14,0.067,17,3.478,18,3.621,19,0.124,20,0.856,22,0.092,23,0.214,24,0.005,25,0.005,46,6.879,53,2.827,69,3.271,70,2.077,144,4.472,147,5.393,149,4.86,150,5.756,198,2.144,1668,5.393,3332,6.243,3333,6.243,3334,6.243,3335,7.083,3336,6.982,3337,6.243,3338,6.982]],["title/injectables/StripeSubscriptionService.html",[530,0.826,3335,3.392]],["body/injectables/StripeSubscriptionService.html",[8,0.006,12,0.072,13,0.072,14,0.064,19,0.121,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,54,1.579,58,0.485,60,1.533,61,0.905,62,0.378,63,0.786,65,1.579,70,1.97,82,1.643,144,4.243,149,4.611,150,5.461,198,2.034,264,2.247,266,1.692,276,0.298,277,1.787,392,5.459,416,1.467,507,2.066,530,1.383,531,2.1,709,4.049,713,2.788,723,2.735,1668,7.126,1684,5.116,3335,5.679,3339,5.922,3340,8.158,3341,6.623,3342,6.623,3343,8.158,3344,6.623,3345,8.158,3346,6.623,3347,6.623,3348,6.623,3349,6.623]],["title/modules/StripeWebHookModule.html",[0,1.191,47,3.561]],["body/modules/StripeWebHookModule.html",[0,1.974,2,2.405,3,3.09,8,0.006,9,3.148,10,2.54,11,2.405,12,0.07,13,0.07,14,0.063,17,2.69,18,3.471,19,0.126,20,0.799,22,0.086,23,0.2,24,0.004,25,0.004,33,6.404,46,6.689,47,7.4,49,5.734,53,3.27,126,4.536,143,5.372,144,4.174,147,5.032,148,5.826,272,2.126,457,6.689,462,5.826,3350,5.826,3351,5.826,3352,6.516,3353,7.299,3354,5.032,3355,6.516,3356,6.516]],["title/controllers/StripeWebhookController.html",[270,1.044,3353,3.561]],["body/controllers/StripeWebhookController.html",[8,0.006,12,0.047,13,0.047,14,0.042,19,0.12,20,0.534,22,0.057,23,0.134,24,0.003,25,0.003,54,1.196,58,0.339,60,1.162,61,0.686,62,0.287,63,0.595,65,1.196,72,4.435,73,2.602,137,1.305,144,4.6,147,3.367,217,4.303,218,2.272,264,1.201,266,2.339,270,0.934,272,1.148,274,1.581,276,0.196,277,1.732,287,0.534,316,2.69,344,2.09,349,2.455,351,1.581,352,0.656,354,3.613,355,3.367,356,4.786,357,3.899,358,4.786,359,3.899,374,1.501,380,2.219,385,1.7,389,1.404,394,2.52,411,2.255,413,2.52,414,4.774,416,0.784,435,6.421,436,1.391,507,1.928,508,4.825,523,2.604,571,2.52,595,5.488,609,2.242,797,2.25,1191,3.899,1341,3.035,1378,1.7,1670,3.899,1671,3.899,1672,3.899,1673,3.899,1674,3.899,1675,3.899,1676,3.367,1677,3.899,1678,3.594,1679,3.959,1680,3.899,1681,3.899,1684,6.617,1702,3.186,2943,3.594,3335,4.999,3337,3.899,3353,4.517,3354,5.547,3357,5.921,3358,3.594,3359,6.181,3360,6.181,3361,4.36,3362,7.813,3363,4.36,3364,4.36,3365,5.921,3366,6.181,3367,4.36,3368,6.181,3369,3.594,3370,4.36,3371,3.594,3372,3.367,3373,5.527,3374,5.527,3375,5.527,3376,5.527,3377,4.36,3378,4.36,3379,4.36,3380,7.181,3381,4.36,3382,4.36,3383,4.36,3384,4.36,3385,4.36,3386,4.36,3387,3.899,3388,4.36,3389,7.181,3390,4.36,3391,6.181,3392,4.36,3393,4.36,3394,4.36,3395,4.36,3396,4.36,3397,4.36,3398,4.36,3399,4.36,3400,4.36,3401,4.36,3402,4.36,3403,4.36,3404,4.36,3405,4.36,3406,4.36,3407,4.36,3408,4.36,3409,6.181,3410,4.36,3411,4.36,3412,4.36,3413,4.36,3414,4.36,3415,4.36,3416,7.181,3417,4.36,3418,4.36,3419,4.36,3420,6.421,3421,4.36,3422,3.594,3423,4.36,3424,4.36,3425,4.36,3426,4.36,3427,6.181,3428,4.36,3429,4.36,3430,4.36,3431,4.36,3432,4.36,3433,4.36,3434,4.36,3435,4.36,3436,4.36,3437,4.36]],["title/modules/SubmitModule.html",[0,1.191,48,3.561]],["body/modules/SubmitModule.html",[0,1.994,2,2.445,3,3.122,8,0.006,9,3.18,10,2.582,11,2.445,12,0.072,13,0.072,14,0.064,17,3.368,18,3.506,19,0.129,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,43,5.575,48,7.271,53,3.303,69,3.103,70,1.97,97,4.414,99,2.847,100,3.51,109,5.037,110,5.116,198,2.034,272,2.147,472,1.718,778,4.611,3158,6.827,3184,7.037,3185,5.922,3438,5.922,3439,6.623,3440,5.922,3441,5.922,3442,6.623,3443,6.623]],["title/injectables/SubmitService.html",[530,0.826,3184,3.392]],["body/injectables/SubmitService.html",[8,0.006,12,0.059,13,0.059,14,0.052,19,0.113,20,0.665,22,0.071,23,0.167,24,0.004,25,0.004,54,1.39,58,0.47,60,1.513,61,0.893,62,0.373,63,0.775,65,1.558,70,1.615,82,1.346,109,3.352,110,4.193,198,1.667,218,2.218,264,1.979,266,1.387,276,0.244,277,1.851,296,2.806,307,1.225,316,3.363,380,2.054,411,2.256,416,1.541,472,1.863,523,2.92,530,1.218,531,1.721,709,3.76,713,2.59,722,2.665,723,2.241,731,3.527,733,2.966,734,3.22,739,3.527,829,6.503,972,2.543,1378,2.116,3089,4.027,3090,3.779,3184,5.001,3186,4.475,3259,3.352,3266,4.788,3269,3.967,3444,4.854,3445,7.184,3446,7.184,3447,5.429,3448,5.429,3449,7.184,3450,5.429,3451,7.184,3452,5.429,3453,7.184,3454,5.429,3455,5.429,3456,5.429,3457,7.184,3458,7.184,3459,9.158,3460,7.184,3461,7.184,3462,5.429,3463,5.429,3464,5.429]],["title/classes/SupabaseAuthDto.html",[23,0.149,364,3.763]],["body/classes/SupabaseAuthDto.html",[8,0.006,12,0.031,13,0.031,14,0.028,19,0.038,22,0.038,23,0.089,24,0.003,25,0.003,58,0.519,61,0.852,62,0.439,63,0.961,137,2.094,214,2.81,221,4.06,267,2.853,275,6.62,276,0.13,287,1.16,291,4.48,307,0.793,313,5.786,314,2.177,325,3.877,352,0.434,353,6.062,364,3.507,381,5.347,383,4.626,384,5.017,385,2.188,386,2.412,389,1.274,390,4.626,398,4.334,399,4.626,400,5.017,401,5.341,402,5.341,403,4.334,404,5.341,405,4.334,406,4.017,407,4.334,408,4.334,409,4.334,410,5.017,421,1.467,436,1.458,466,0.808,469,0.782,471,1.169,474,2.41,478,3.604,485,1.839,609,3.037,678,2.804,810,4.411,815,4.646,819,3.161,893,3.123,1066,3.566,1087,2.71,1089,3.645,1178,1.913,1212,1.839,1271,4.06,1272,2.473,1280,3.419,1281,3.566,1283,2.08,1284,4.598,1318,3.744,1327,2.229,1336,3.161,1385,4.648,1406,2.909,1429,4.06,1589,4.06,1597,2.909,1716,3.318,1754,4.913,1839,3.744,1983,4.648,3465,8.503,3466,2.583,3467,2.888,3468,2.888,3469,4.541,3470,4.541,3471,2.888,3472,2.888,3473,3.744,3474,4.06,3475,2.888,3476,3.318,3477,2.888,3478,4.541,3479,2.888,3480,4.06,3481,4.06,3482,2.888,3483,2.888,3484,2.888,3485,6.361,3486,4.541,3487,2.888,3488,4.541,3489,2.888,3490,2.888,3491,4.06,3492,4.06,3493,2.888,3494,4.541,3495,4.541,3496,2.888,3497,4.541,3498,2.888,3499,4.541,3500,2.888,3501,2.888,3502,3.744,3503,4.06,3504,2.888,3505,2.888,3506,4.541,3507,4.06,3508,2.888,3509,2.888]],["title/injectables/SupabaseGuard.html",[368,1.973,530,0.826]],["body/injectables/SupabaseGuard.html",[8,0.006,12,0.083,13,0.083,14,0.074,19,0.117,20,0.939,22,0.101,23,0.235,24,0.005,25,0.005,368,3.604,461,6.318,530,1.51,531,2.43,783,2.731,3510,6.853,3511,7.664,3512,7.664]],["title/injectables/SupabaseStrategy.html",[458,3.561,530,0.826]],["body/injectables/SupabaseStrategy.html",[8,0.006,12,0.07,13,0.07,14,0.062,19,0.12,20,0.794,22,0.085,23,0.199,24,0.004,25,0.004,54,1.557,58,0.48,60,1.513,61,0.893,62,0.373,63,0.775,65,1.557,66,4.736,79,4.736,137,1.368,264,2.411,275,4.512,276,0.292,277,1.77,286,7.548,353,5.364,395,2.636,416,1.166,458,5.881,461,5.343,507,2.022,530,1.365,531,2.055,783,2.309,3365,5.343,3513,5.795,3514,8.048,3515,7.196,3516,6.481,3517,8.048,3518,8.754,3519,6.481,3520,8.048,3521,6.481,3522,6.481,3523,6.481,3524,6.481,3525,6.481,3526,6.481,3527,6.481,3528,6.481,3529,6.481,3530,6.481,3531,6.481,3532,6.481,3533,6.481,3534,6.481,3535,6.481,3536,6.481,3537,6.481,3538,6.481,3539,6.481]],["title/classes/TopUsersDto.html",[23,0.149,3540,3.561]],["body/classes/TopUsersDto.html",[8,0.006,12,0.062,13,0.062,14,0.055,19,0.109,22,0.076,23,0.254,24,0.004,25,0.004,58,0.481,62,0.439,63,0.896,137,1.575,267,2.714,276,0.259,287,1.015,307,1.219,316,2.851,352,0.865,389,1.694,416,1.034,421,0.891,466,1.608,469,1.284,488,1.914,549,3.494,609,2.084,611,4.087,781,2.803,785,4.064,789,2.531,790,3.487,797,4.272,798,4.062,799,3.952,800,3.131,807,3.131,810,2.693,815,4.301,817,4.105,957,3.55,958,3.55,1012,4.201,1272,4.062,1822,4.605,2245,4.201,2380,5.192,2534,4.739,2536,4.739,2544,6.149,2545,6.394,2550,5.14,2552,6.826,2554,6.149,2555,4.739,3540,5.45,3541,8.118,3542,5.14,3543,5.748,3544,5.748,3545,7.458,3546,5.748,3547,5.748,3548,5.748]],["title/classes/UpdateEndorsementDto.html",[23,0.149,3549,4.017]],["body/classes/UpdateEndorsementDto.html",[8,0.006,12,0.083,13,0.083,14,0.074,19,0.117,22,0.101,23,0.235,24,0.005,25,0.005,304,4.722,352,1.15,466,2.139,783,2.725,967,5.324,969,6.305,1974,6.305,3549,7.33,3550,6.838,3551,7.648,3552,7.648]],["title/classes/UpdateInsightDto.html",[23,0.149,2305,3.561]],["body/classes/UpdateInsightDto.html",[8,0.006,12,0.073,13,0.073,14,0.065,19,0.089,22,0.089,23,0.208,24,0.005,25,0.005,58,0.49,61,0.991,62,0.45,196,3.108,276,0.305,287,1.095,304,4.19,313,4.522,436,1.226,466,1.898,469,1.425,471,3.618,474,2.152,478,4.064,483,5.241,713,2.051,781,2.803,783,2.95,801,5.009,996,7.091,998,5.594,999,6.394,1000,3.352,1001,4.272,1002,5.241,1004,6.067,1006,5.303,1007,4.346,1008,6.067,1009,3.804,1010,6.067,2305,6.05,2310,5.594,3553,5.594,3554,6.785,3555,6.785,3556,6.785]],["title/classes/UpdateInsightMemberDto.html",[23,0.149,3557,3.763]],["body/classes/UpdateInsightMemberDto.html",[8,0.006,12,0.076,13,0.076,14,0.068,19,0.111,22,0.092,23,0.259,24,0.005,25,0.005,58,0.385,62,0.42,276,0.315,287,0.859,352,1.054,421,1.087,436,1.393,466,1.96,469,1.453,471,2.838,474,2.033,485,3.419,487,3.354,488,2.334,955,4.328,1001,4.854,1019,5.779,1020,6.17,1410,7.434,1415,5.878,2299,5.413,3553,6.961,3557,6.521,3558,7.009,3559,6.961,3560,5.878,3561,7.009,3562,7.009]],["title/classes/UpdateUserCollaborationDto.html",[23,0.149,3563,3.763]],["body/classes/UpdateUserCollaborationDto.html",[8,0.006,12,0.076,13,0.076,14,0.068,19,0.112,22,0.093,23,0.26,24,0.005,25,0.005,58,0.388,62,0.422,137,1.791,173,2.733,254,7.585,276,0.318,287,0.866,352,1.062,421,1.095,436,1.397,466,1.976,469,1.46,471,2.86,474,2.043,485,3.435,487,3.37,488,2.352,955,4.362,1041,5.824,1042,5.906,1679,6.179,3563,6.552,3564,6.199,3565,7.064,3566,7.064,3567,5.824,3568,7.064]],["title/classes/UpdateUserDto.html",[23,0.149,322,3.561]],["body/classes/UpdateUserDto.html",[8,0.006,12,0.041,13,0.041,14,0.037,19,0.074,22,0.05,23,0.172,24,0.003,25,0.003,58,0.507,61,0.868,62,0.465,63,0.939,137,2.04,207,4.247,214,1.462,267,2.479,276,0.172,287,1.133,322,4.106,325,4.39,338,7.877,352,0.575,395,3.262,401,6.048,402,6.048,403,5.147,404,6.048,405,5.147,406,4.486,407,5.147,408,5.147,409,5.147,421,1.433,424,6.048,436,1.502,466,1.068,469,0.967,471,2.275,474,2.38,478,3.607,480,4.639,485,2.699,486,3.911,487,3.363,488,1.272,585,3.15,678,3.47,705,2.951,810,4.222,815,4.486,817,4.281,1022,3.416,1024,5.024,1087,2.28,1178,2.366,1336,3.911,1597,2.447,1815,4.632,1983,4.106,3473,4.632,3474,3.416,3476,4.106,3480,5.024,3481,5.024,3491,5.024,3492,3.416,3502,7.16,3503,3.416,3507,3.416,3560,2.659,3564,6.824,3569,3.416,3570,4.632,3571,3.82,3572,3.82,3573,5.619,3574,3.82,3575,3.82,3576,3.82,3577,3.82,3578,3.82,3579,3.82,3580,3.82,3581,3.82,3582,3.82,3583,3.82,3584,3.82,3585,3.82,3586,3.82,3587,6.57,3588,3.82,3589,3.82,3590,3.82,3591,7.348,3592,5.619,3593,5.024,3594,5.619,3595,5.619,3596,3.82,3597,3.82,3598,3.82,3599,3.82,3600,7.83,3601,3.82,3602,3.82,3603,3.82]],["title/classes/UpdateUserEmailPreferencesDto.html",[23,0.149,323,3.561]],["body/classes/UpdateUserEmailPreferencesDto.html",[8,0.006,12,0.071,13,0.071,14,0.063,19,0.106,22,0.086,23,0.248,24,0.004,25,0.004,58,0.444,62,0.446,137,2.058,214,3.097,276,0.294,287,0.992,323,5.914,325,5.292,352,0.984,395,3.226,421,1.255,466,1.829,469,1.393,471,3.277,474,2.212,478,4.835,483,6.251,485,3.559,486,6.119,488,2.177,638,4.408,1042,5.634,1336,5.634,3564,6.423,3604,5.847,3605,7.859,3606,7.859,3607,6.54,3608,8.094,3609,6.54]],["title/classes/UpdateUserProfileInterestsDto.html",[23,0.149,332,3.561]],["body/classes/UpdateUserProfileInterestsDto.html",[8,0.006,12,0.076,13,0.076,14,0.068,19,0.111,22,0.093,23,0.26,24,0.005,25,0.005,58,0.386,62,0.421,137,1.787,196,3.877,276,0.317,287,0.863,332,6.185,334,6.422,352,1.058,395,2.973,421,1.091,436,1.395,466,1.968,469,1.457,471,2.849,474,2.038,485,3.427,488,2.343,1007,5.421,1009,5.28,2689,5.435,3564,6.185,3610,6.292,3611,5.801,3612,7.037,3613,5.435]],["title/controllers/UserCollaborationController.html",[270,1.044,3614,3.763]],["body/controllers/UserCollaborationController.html",[8,0.006,12,0.043,13,0.043,14,0.038,19,0.124,20,0.489,22,0.052,23,0.122,24,0.003,25,0.003,54,1.122,58,0.412,60,1.41,61,0.832,62,0.398,63,0.722,65,1.452,79,2.915,137,2.07,173,2.679,179,4.999,180,3.081,218,2.066,264,1.099,266,1.482,267,1.622,270,0.855,272,1.05,274,1.447,275,2.777,276,0.18,277,1.864,286,6.184,287,0.919,290,2.905,291,2.993,296,2.81,303,5.104,307,1.117,308,2.918,311,2.777,316,3.268,339,2.777,343,2.915,344,2.78,345,1.751,346,3.362,347,3.073,348,3.201,349,2.714,350,2.769,351,1.447,352,0.6,353,2.659,354,3.437,368,1.615,374,1.374,376,3.063,377,2.522,380,1.836,389,1.552,392,2.463,411,2.189,416,1.043,421,1.235,436,1.18,503,4.34,504,2.236,509,3.722,510,1.827,511,1.912,523,2.103,638,2.173,718,2.124,724,1.421,725,1.082,726,1.351,727,1.472,865,2.493,866,1.827,867,1.912,868,1.788,869,1.912,979,2.915,1039,6.79,1042,6.239,1679,2.555,1892,2.915,1893,3.715,1938,3.567,1969,1.958,1970,2.236,2009,3.567,2026,3.715,2198,3.581,2201,2.777,2229,2.114,2233,2.236,2303,4.037,2307,4.993,2309,2.915,2609,3.081,3101,3.865,3107,3.865,3259,2.463,3563,6.421,3614,4.479,3615,4.605,3616,3.567,3617,3.989,3618,7.125,3619,7.125,3620,7.501,3621,6.109,3622,3.989,3623,5.799,3624,6.833,3625,3.567,3626,5.799,3627,5.185,3628,3.989,3629,3.989,3630,3.567,3631,6.109,3632,3.989,3633,3.989,3634,3.989,3635,3.989,3636,3.989,3637,3.567,3638,3.989,3639,3.989,3640,3.989,3641,2.555,3642,4.756,3643,3.567,3644,5.799,3645,3.989,3646,2.777,3647,3.989,3648,3.989,3649,3.989,3650,3.567,3651,3.989,3652,3.989,3653,6.833,3654,3.989,3655,5.799,3656,3.989,3657,3.989,3658,3.989,3659,3.567,3660,3.989,3661,3.989]],["title/injectables/UserCollaborationService.html",[530,0.826,3642,3.392]],["body/injectables/UserCollaborationService.html",[7,4.814,8,0.006,12,0.053,13,0.053,14,0.047,19,0.12,20,0.597,22,0.064,23,0.149,24,0.004,25,0.004,54,1.292,58,0.499,60,1.668,61,0.984,62,0.412,63,0.854,65,1.717,70,1.449,82,1.208,137,1.029,179,4.451,180,3.763,198,1.496,218,1.342,264,1.84,266,1.706,276,0.219,277,1.99,296,2.685,307,0.95,316,2.958,380,1.89,389,1.951,392,5.479,411,1.282,416,1.596,436,1.39,507,2.377,523,1.767,530,1.133,531,1.544,709,3.598,713,2.478,718,2.321,722,3.279,723,2.012,724,1.736,725,1.322,726,1.649,727,1.798,728,3.121,731,3.279,733,3.385,734,2.994,736,3.121,738,3.741,739,2.392,1227,2.815,1596,2.815,1722,4.356,2025,4.124,2043,4.124,2233,2.731,2339,4.273,3615,5.347,3618,5.972,3619,6.814,3621,5.972,3630,4.356,3637,5.972,3642,4.649,3659,7.681,3662,4.356,3663,6.679,3664,4.872,3665,4.872,3666,6.679,3667,6.679,3668,4.872,3669,4.872,3670,4.872,3671,4.872,3672,6.679,3673,4.872,3674,4.872,3675,4.872,3676,4.872,3677,4.872,3678,4.872,3679,4.872,3680,4.872,3681,4.872,3682,4.872,3683,4.872,3684,4.872]],["title/controllers/UserController.html",[270,1.044,3685,3.763]],["body/controllers/UserController.html",[8,0.006,12,0.043,13,0.043,14,0.038,19,0.126,20,0.49,22,0.053,23,0.123,24,0.003,25,0.003,54,1.123,58,0.437,60,1.498,61,0.884,62,0.422,63,0.768,65,1.543,99,2.495,100,2.116,101,2.849,137,1.988,153,3.516,154,2.175,156,3.584,157,2.78,158,2.78,159,3.354,161,2.558,176,4.663,207,5.263,264,1.1,266,1.917,270,0.856,272,1.051,274,1.448,276,0.18,277,1.932,287,0.977,290,3.083,296,2.982,328,3.571,348,3.735,349,3.304,350,3.07,351,1.448,352,0.601,354,3.44,374,1.375,377,2.943,380,1.338,396,3.075,411,1.528,416,1.434,421,1.163,436,1.382,638,3.161,718,2.522,724,1.423,725,1.083,726,1.352,727,1.474,865,3.226,866,1.829,867,1.914,868,1.79,869,1.914,870,4.222,871,2.918,1000,3.228,1713,4.996,1744,2.558,1893,4.807,1896,4.659,1939,4.088,1969,1.96,2004,5.637,2005,5.637,2187,5.796,2200,3.292,2206,3.571,2216,3.571,2230,4.379,2232,3.084,2233,2.239,2238,3.571,2245,4.241,2257,3.571,2712,3.571,2890,3.623,2891,2.558,2906,2.78,2911,3.571,2923,2.78,2925,2.78,3540,5.484,3641,2.558,3646,2.78,3685,4.483,3686,3.571,3687,7.972,3688,7.972,3689,7.972,3690,5.804,3691,5.804,3692,3.994,3693,3.994,3694,6.187,3695,3.994,3696,3.994,3697,3.994,3698,3.994,3699,3.994,3700,3.994,3701,3.994,3702,3.994,3703,3.994,3704,3.994,3705,3.994,3706,3.994,3707,5.804,3708,3.994,3709,3.994,3710,3.994,3711,5.804,3712,3.994,3713,3.994,3714,3.571,3715,3.571,3716,3.571,3717,3.571,3718,3.571,3719,3.994,3720,3.994,3721,3.994,3722,3.994,3723,3.994,3724,3.994,3725,5.189,3726,3.994,3727,3.994,3728,3.994,3729,3.994]],["title/controllers/UserEndorsementController.html",[270,1.044,3730,3.763]],["body/controllers/UserEndorsementController.html",[8,0.006,12,0.06,13,0.06,14,0.053,19,0.125,20,0.676,22,0.072,23,0.169,24,0.004,25,0.004,54,1.404,58,0.398,60,1.364,61,0.805,62,0.4,63,0.699,65,1.404,137,1.82,182,5.531,183,4.544,267,1.541,270,1.181,272,1.451,274,1.999,276,0.248,277,1.859,287,0.889,290,2.919,291,4.448,307,1.146,316,3.084,345,2.419,346,3.636,349,3.222,350,2.994,351,1.999,352,0.829,368,2.232,374,1.898,376,3.252,377,2.678,416,1.305,507,2.264,510,2.525,519,1.964,718,2.555,724,1.964,725,1.495,861,4.833,865,3.487,866,2.525,867,2.642,868,2.47,869,2.642,1373,6.299,1939,4.695,1947,6.488,1958,5.982,1971,5.196,1979,4.928,1986,6.488,2229,2.92,3615,4.688,3730,5.604,3731,4.928,3732,5.511,3733,8.62,3734,8.62,3735,5.511,3736,5.511,3737,5.604,3738,5.511,3739,5.511,3740,5.511,3741,5.511,3742,4.928,3743,5.511,3744,5.511,3745,5.511,3746,5.511,3747,5.511,3748,5.511,3749,5.511]],["title/injectables/UserFollowService.html",[530,0.826,3750,3.248]],["body/injectables/UserFollowService.html",[8,0.006,12,0.048,13,0.048,14,0.042,19,0.113,20,0.539,22,0.058,23,0.135,24,0.003,25,0.003,54,1.203,58,0.471,60,1.555,61,0.918,62,0.384,63,0.797,65,1.601,70,1.308,82,1.091,137,1.747,163,2.931,164,3.396,198,1.35,215,2.004,218,2.16,264,1.713,266,1.843,276,0.198,277,1.92,296,2.814,307,1.239,316,3.297,354,4.443,380,2.114,396,2.33,411,2.375,416,1.545,507,1.372,523,2.844,530,1.055,531,1.394,709,3.442,713,2.37,722,2.159,723,1.816,731,3.053,733,3.725,734,3.516,739,3.542,849,2.715,1378,1.714,1596,3.594,1841,4.145,1867,3.396,2233,2.465,3089,2.465,3259,2.715,3266,4.145,3269,4.544,3615,5.104,3641,2.817,3750,4.145,3751,3.932,3752,6.219,3753,6.219,3754,6.219,3755,6.219,3756,4.397,3757,5.657,3758,4.397,3759,6.219,3760,6.219,3761,8.066,3762,4.397,3763,4.397,3764,6.219,3765,4.397,3766,6.219,3767,8.316,3768,4.397,3769,6.219,3770,4.397,3771,3.396,3772,4.397,3773,4.397,3774,3.625,3775,4.397,3776,4.397,3777,6.219,3778,7.215,3779,7.215,3780,9.021,3781,4.544,3782,6.219,3783,6.219,3784,6.219,3785,4.397,3786,6.219,3787,4.397,3788,4.397,3789,4.397]],["title/controllers/UserFollowsController.html",[270,1.044,3790,3.763]],["body/controllers/UserFollowsController.html",[8,0.006,12,0.051,13,0.051,14,0.045,19,0.118,20,0.575,22,0.062,23,0.144,24,0.004,25,0.004,54,1.26,58,0.41,60,1.405,61,0.829,62,0.393,63,0.72,65,1.641,137,2.12,163,4.339,164,3.626,207,5.381,266,1.199,267,1.821,270,1.006,272,1.236,274,1.702,276,0.211,277,1.882,287,0.916,290,2.97,291,3.36,296,2.873,307,1.16,316,3.332,345,2.06,346,3.618,348,3.781,349,2.586,350,2.979,351,1.702,352,0.706,354,3.76,368,1.901,374,1.616,376,3.35,377,2.759,380,1.722,396,2.487,411,1.967,416,1.344,421,1.36,436,1.379,510,2.151,519,1.673,629,4.02,1288,2.688,1841,4.339,1868,5.619,1896,4.277,1969,2.305,1970,2.632,2004,6.162,2005,6.162,2229,2.487,2233,2.632,3088,4.757,3089,3.65,3106,3.431,3107,4.981,3151,5.898,3155,5.821,3615,4.664,3641,3.007,3646,3.268,3718,4.198,3725,6.683,3750,4.981,3781,4.757,3790,5.028,3791,4.198,3792,7.474,3793,8.478,3794,7.474,3795,4.694,3796,4.694,3797,6.51,3798,6.51,3799,4.694,3800,4.694,3801,4.694,3802,5.821,3803,4.694,3804,4.694,3805,4.694,3806,6.51,3807,4.694,3808,4.694,3809,4.694,3810,3.87,3811,4.694,3812,4.694,3813,4.694,3814,4.694,3815,4.694,3816,4.694]],["title/controllers/UserHighlightsController.html",[270,1.044,3817,3.763]],["body/controllers/UserHighlightsController.html",[8,0.006,12,0.029,13,0.029,14,0.026,19,0.11,20,0.327,22,0.035,23,0.082,24,0.002,25,0.002,54,0.825,58,0.438,60,1.499,61,0.884,62,0.422,63,0.768,65,1.543,115,1.309,137,2.011,159,3.843,161,1.708,169,2.39,170,4.78,171,1.647,173,2.782,218,1.953,267,0.746,270,0.571,272,0.702,274,0.967,276,0.12,277,1.933,287,0.978,290,3.084,291,4.618,296,2.983,303,5.606,307,1.235,308,2.679,311,2.967,314,2.043,316,3.396,339,4.234,343,1.949,344,2.043,345,1.17,346,3.575,347,2.821,348,3.623,349,3.072,350,3.018,351,0.967,352,0.401,368,1.08,374,0.918,376,3.467,377,2.943,380,1.402,389,1.51,396,3.223,411,2.036,416,1.276,421,1.387,436,1.05,503,4.874,504,2.39,509,4.344,510,1.222,511,1.278,519,0.95,523,0.967,718,1.554,725,0.723,726,0.903,727,0.984,865,2.289,1000,1.726,1055,6.104,1057,1.949,1331,3.549,1332,5.75,1812,2.841,1821,4.962,1826,3.115,1941,5.439,1965,4.698,1969,1.309,1970,3.729,2187,4.112,2198,3.756,2200,3.514,2202,5.439,2219,2.384,2220,2.384,2221,2.384,2222,2.384,2228,4.174,2229,1.413,2230,3.411,2232,2.059,2233,2.39,2240,2.384,2246,4.26,2253,2.384,2254,2.384,2256,2.384,2295,2.198,2302,2.384,2316,2.198,2319,2.384,2609,2.059,3101,4.054,3107,2.841,3151,3.115,3259,1.647,3266,1.777,3613,2.059,3615,4.726,3625,2.384,3646,1.856,3817,3.292,3818,2.384,3819,2.666,3820,6.651,3821,4.761,3822,6.651,3823,6.651,3824,6.651,3825,6.651,3826,6.651,3827,6.083,3828,6.651,3829,2.666,3830,6.915,3831,2.666,3832,2.666,3833,2.666,3834,2.666,3835,7.12,3836,2.666,3837,4.262,3838,2.384,3839,2.666,3840,5.325,3841,2.666,3842,4.262,3843,2.666,3844,2.666,3845,2.666,3846,2.666,3847,2.666,3848,2.666,3849,2.666,3850,2.666,3851,2.666,3852,6.083,3853,4.262,3854,2.666,3855,2.666,3856,2.666,3857,2.666,3858,2.666,3859,2.666,3860,2.666,3861,2.666,3862,2.384,3863,2.666,3864,5.325,3865,2.384,3866,2.384,3867,2.666,3868,2.384,3869,2.666,3870,2.666,3871,2.666,3872,2.666,3873,2.666,3874,2.384,3875,5.325,3876,2.666,3877,2.666,3878,2.666,3879,2.666,3880,2.666,3881,2.666,3882,2.666,3883,2.666,3884,4.262,3885,2.666,3886,2.666,3887,2.666,3888,2.666,3889,2.666,3890,2.666,3891,2.666,3892,2.666,3893,2.666]],["title/injectables/UserHighlightsService.html",[530,0.826,2230,3.121]],["body/injectables/UserHighlightsService.html",[7,3.801,8,0.006,12,0.026,13,0.026,14,0.023,19,0.113,20,0.298,22,0.032,23,0.075,24,0.002,25,0.002,54,0.766,58,0.486,60,1.649,61,0.973,62,0.411,63,0.845,65,1.698,70,0.724,82,0.604,137,1.341,153,1.141,159,2.289,161,1.559,169,2.221,170,3.901,171,1.503,198,1.216,215,1.613,218,1.976,264,1.091,266,1.739,276,0.225,277,1.991,296,2.763,307,1.245,316,3.335,354,3.609,380,2.146,389,1.31,392,3.092,396,2.653,406,1.195,411,2.183,416,1.54,436,1.177,450,3.059,472,1.027,507,2.332,511,1.167,523,1.816,530,0.672,531,0.772,562,1.503,589,1.88,590,2.007,591,1.695,592,2.007,609,0.883,613,2.807,709,2.532,713,2.168,718,2.353,722,2.458,723,1.005,724,1.411,725,1.075,726,0.824,727,0.899,728,1.559,731,1.944,733,3.694,734,2.846,736,3.207,738,3.34,739,2.458,787,1.856,811,1.091,824,2.64,828,2.64,831,4.016,834,3.057,835,1.407,847,2.221,850,1.453,860,1.503,905,0.932,1055,4.216,1057,1.779,1227,2.894,1235,1.702,1270,1.944,1272,2.157,1331,1.623,1332,1.88,1378,1.544,1460,1.559,1511,1.779,1596,3.334,1751,2.177,1767,2.007,1789,3.059,1790,1.88,1806,2.177,1812,2.64,1814,2.007,1821,3.845,1867,1.88,1871,2.177,1876,2.007,2025,2.446,2043,2.446,2067,1.88,2190,3.541,2208,2.177,2230,2.537,2233,2.221,2307,1.779,2339,2.807,2363,2.177,2415,3.059,2424,3.265,2840,2.007,2856,2.007,2858,3.265,2943,2.007,2955,3.541,2964,2.177,3063,2.177,3089,1.365,3259,1.503,3266,1.623,3615,5.17,3641,1.559,3750,4.78,3757,4.594,3767,5.677,3771,1.88,3774,4.128,3810,2.007,3830,7.271,3835,7.375,3866,2.177,3868,2.177,3894,2.177,3895,3.961,3896,3.961,3897,3.961,3898,3.961,3899,3.961,3900,3.961,3901,3.961,3902,3.961,3903,3.961,3904,3.961,3905,3.961,3906,2.435,3907,4.477,3908,2.435,3909,3.961,3910,3.961,3911,2.435,3912,3.961,3913,2.435,3914,3.961,3915,5.677,3916,2.435,3917,2.435,3918,3.961,3919,2.435,3920,3.961,3921,2.435,3922,2.435,3923,2.435,3924,3.961,3925,2.435,3926,3.961,3927,2.435,3928,3.961,3929,2.435,3930,2.435,3931,3.961,3932,2.435,3933,3.961,3934,2.435,3935,2.435,3936,2.435,3937,3.961,3938,2.435,3939,2.435,3940,2.177,3941,2.435,3942,3.961,3943,3.961,3944,3.961,3945,2.435,3946,2.435,3947,2.435,3948,3.961,3949,2.177,3950,2.435,3951,2.435,3952,2.435,3953,2.435,3954,2.435,3955,2.435,3956,2.435,3957,2.435,3958,2.435,3959,2.435,3960,2.435,3961,2.435,3962,2.435,3963,3.961,3964,2.435,3965,2.435,3966,2.435,3967,2.435,3968,2.435,3969,2.435,3970,2.435,3971,2.435,3972,2.435,3973,2.435,3974,2.435,3975,3.961,3976,2.435,3977,2.177,3978,2.435,3979,2.007,3980,2.435,3981,2.435,3982,2.435,3983,2.435,3984,2.435,3985,2.435,3986,3.541,3987,2.435,3988,2.435,3989,2.435,3990,2.435,3991,5.007,3992,2.435,3993,2.435,3994,2.435,3995,3.961,3996,3.961,3997,2.435,3998,2.435,3999,2.435,4000,5.007,4001,2.435,4002,2.435,4003,3.961,4004,2.435,4005,2.435]],["title/controllers/UserInsightMemberController.html",[270,1.044,2407,3.763]],["body/controllers/UserInsightMemberController.html",[8,0.006,12,0.035,13,0.035,14,0.031,19,0.12,20,0.396,22,0.042,23,0.099,24,0.003,25,0.003,54,0.958,58,0.371,60,1.269,61,0.749,62,0.401,63,0.65,65,1.307,133,3.594,137,1.046,165,4.014,166,2.494,173,2.176,214,1.236,218,2.204,264,0.889,266,1.539,267,1.385,270,0.692,272,0.85,274,1.171,276,0.145,277,1.802,287,0.828,290,2.795,296,2.704,303,5.534,307,1.208,308,3.03,311,3.447,313,2.152,314,1.548,316,3.263,343,2.36,344,1.548,345,1.417,346,3.265,347,3.192,348,3.412,349,2.893,350,2.688,351,1.171,352,0.486,354,3.03,355,2.494,368,1.308,374,1.112,376,3.027,377,2.493,380,2.08,389,1.534,392,1.994,411,2.402,416,1.083,421,1.28,436,1.138,503,4.186,504,1.81,509,3.679,510,1.479,511,1.548,523,2.641,718,1.265,725,0.876,726,1.093,727,1.192,781,1.093,865,2.128,866,1.479,867,1.548,868,1.447,869,1.548,1001,5.078,1015,2.248,1018,6.376,1020,6.422,1378,1.931,1410,3.825,1411,2.36,1412,2.887,1415,4.193,1423,2.887,1893,3.172,1896,2.624,1969,1.585,1970,1.81,2026,3.172,2198,3.058,2201,3.447,2228,4.084,2229,1.711,2246,4.326,2296,4.083,2299,4.652,2303,3.447,2307,5.323,2309,2.36,2311,2.36,2312,3.719,2313,2.152,2315,2.662,2318,4.083,2323,4.014,2326,5.386,2328,4.428,2330,6.513,2337,2.887,2341,6.806,2350,2.887,2352,2.494,2384,4.702,2407,3.825,2411,2.662,2431,2.662,3089,1.81,3101,3.301,3259,1.994,3557,6.538,3559,6.005,3560,5.071,3627,2.887,3694,4.083,4006,6.005,4007,2.887,4008,2.887,4009,5.386,4010,7.284,4011,3.229,4012,3.229,4013,4.952,4014,4.952,4015,4.952,4016,6.023,4017,3.229,4018,2.887,4019,3.229,4020,4.428,4021,3.229,4022,3.229,4023,3.229,4024,7.686,4025,3.229,4026,3.229,4027,3.229,4028,3.229,4029,2.887,4030,3.229,4031,3.229,4032,4.428,4033,4.952,4034,2.887,4035,3.229,4036,3.229,4037,4.952,4038,4.952,4039,6.039,4040,6.513,4041,3.229,4042,3.229,4043,6.872,4044,4.952,4045,3.229,4046,3.229,4047,3.229,4048,3.229,4049,4.952,4050,3.229,4051,3.229,4052,3.229,4053,3.229,4054,3.229,4055,4.952,4056,4.952,4057,4.952,4058,4.952,4059,3.229,4060,3.229,4061,3.229,4062,3.229,4063,3.229,4064,3.229]],["title/controllers/UserInsightsController.html",[270,1.044,2406,3.763]],["body/controllers/UserInsightsController.html",[8,0.006,12,0.04,13,0.04,14,0.036,19,0.122,20,0.453,22,0.049,23,0.113,24,0.003,25,0.003,54,1.061,58,0.359,60,1.228,61,0.857,62,0.399,63,0.629,65,1.265,133,4.315,137,1.816,173,1.766,218,2.228,264,1.018,266,1.67,267,1.533,270,0.792,272,0.973,274,1.34,276,0.166,277,1.776,287,0.801,290,2.739,291,3.731,296,2.65,303,5.51,307,1.095,308,2.758,311,3.816,314,3.133,316,3.25,339,3.816,343,2.7,344,2.628,345,1.622,346,3.241,347,3.463,348,3.387,349,2.872,350,2.669,351,1.34,352,0.556,368,1.496,374,1.272,376,2.93,377,2.412,380,2.025,389,1.484,394,2.135,411,2.205,413,2.135,414,2.854,416,1.176,421,1.254,436,0.968,472,2.003,503,3.938,504,2.072,508,3.385,509,3.56,510,1.693,511,1.771,523,2.37,718,1.401,725,1.002,726,1.251,727,1.364,781,2.615,865,2.356,866,1.693,867,1.771,868,1.656,869,1.771,996,6.286,999,4.234,1000,2.928,1001,4.789,1006,2.367,1378,1.441,1393,3.304,1406,4.632,1533,3.304,1689,2.7,1892,2.7,1893,3.512,1896,2.905,1969,1.814,2026,2.367,2198,4.036,2228,3.073,2229,1.958,2246,2.367,2296,5.388,2304,4.902,2305,6.422,2307,4.006,2309,2.7,2310,4.52,2311,2.7,2312,4.036,2313,2.463,2315,3.046,2318,4.52,2323,4.356,2384,5.033,2385,3.816,2406,4.234,2409,2.854,2411,3.046,2431,3.046,2609,2.854,3101,3.654,3372,2.854,3559,3.046,3560,2.572,3694,4.52,3821,6.465,3862,3.304,3874,3.304,4006,5.961,4008,3.304,4009,6.906,4018,3.304,4029,3.304,4032,4.902,4034,3.304,4039,3.304,4040,3.304,4043,4.902,4065,3.304,4066,7.723,4067,3.695,4068,3.695,4069,3.695,4070,3.695,4071,3.695,4072,3.695,4073,3.695,4074,5.482,4075,3.695,4076,3.695,4077,3.695,4078,3.695,4079,5.482,4080,3.695,4081,5.482,4082,3.695,4083,3.695,4084,3.695,4085,3.695,4086,3.695,4087,3.695,4088,3.695,4089,3.695,4090,3.695,4091,3.695,4092,3.695,4093,3.695,4094,3.695,4095,5.482,4096,3.695,4097,3.695,4098,3.695,4099,3.695,4100,3.695,4101,3.695,4102,3.695,4103,3.695,4104,3.695,4105,3.695,4106,3.695,4107,3.695,4108,3.695,4109,3.695,4110,3.695]],["title/modules/UserModule.html",[0,1.191,49,2.908]],["body/modules/UserModule.html",[0,1.533,1,5.326,2,1.643,3,2.4,8,0.006,9,2.445,10,1.735,11,1.643,12,0.048,13,0.048,14,0.043,17,2.59,18,2.696,19,0.133,20,0.546,22,0.059,23,0.137,24,0.003,25,0.003,42,5.749,43,4.985,49,6.064,53,2.54,69,2.085,70,1.324,97,2.967,99,2.696,100,2.359,101,3.079,115,2.185,137,1.969,153,2.085,154,2.425,155,3.67,159,3.625,161,2.851,163,4.181,164,3.438,169,3.517,170,2.185,171,2.749,175,4.584,176,2.496,177,4.181,178,3.438,179,4.181,180,3.438,182,3.873,183,3.67,198,1.367,272,1.651,354,4.788,1744,2.851,1971,6.097,2017,3.253,2018,3.253,2019,3.98,2230,6.097,2232,3.438,2233,4.836,2263,3.98,2751,5.326,2760,3.099,2761,3.253,2890,5.043,2891,2.851,3614,5.61,3641,2.851,3642,6.004,3643,3.98,3685,6.091,3730,5.61,3742,3.98,3750,6.344,3757,5.525,3771,3.438,3790,5.61,3810,3.67,3817,6.091,4111,3.98,4112,3.98,4113,3.98,4114,4.451,4115,4.451,4116,5.61,4117,5.61,4118,4.451,4119,4.451,4120,4.451,4121,4.451,4122,4.451,4123,4.451]],["title/controllers/UserNotificationController.html",[270,1.044,4116,3.763]],["body/controllers/UserNotificationController.html",[8,0.006,12,0.066,13,0.066,14,0.058,19,0.128,20,0.744,22,0.08,23,0.186,24,0.004,25,0.004,54,1.494,58,0.333,60,1.14,61,0.673,62,0.358,63,0.584,65,1.174,137,1.888,177,4.044,178,4.686,270,1.3,272,1.597,274,2.2,276,0.273,277,1.717,287,0.744,290,2.614,291,3.985,296,2.529,303,4.946,307,1.058,316,3.078,339,4.223,345,2.662,346,3.461,348,3.617,349,3.067,350,2.85,351,2.2,352,0.912,368,2.457,374,2.089,376,2.719,377,2.239,416,1.091,421,0.941,510,2.779,519,2.162,718,2.48,724,2.162,725,1.646,726,2.054,727,2.239,865,3.319,1834,5.002,1892,4.433,1965,5.964,2229,3.215,2233,3.401,3615,4.462,3646,4.223,3757,5.44,3771,4.686,3838,5.425,3865,5.425,3979,7.371,4116,5.964,4124,5.425,4125,6.067,4126,9.232,4127,6.067,4128,6.067,4129,6.067,4130,6.067,4131,6.067]],["title/injectables/UserNotificationService.html",[530,0.826,3757,3.121]],["body/injectables/UserNotificationService.html",[8,0.006,12,0.044,13,0.044,14,0.039,19,0.118,20,0.497,22,0.053,23,0.124,24,0.003,25,0.003,54,1.136,58,0.485,60,1.621,61,0.956,62,0.429,63,0.83,65,1.669,70,1.207,82,1.006,170,2.882,177,2.703,178,3.133,198,1.245,215,1.891,218,2.209,264,1.617,266,1.5,276,0.183,277,1.969,307,1.255,311,2.824,316,3.187,354,4.339,380,2.106,389,0.921,392,4.259,396,2.149,411,2.27,416,1.504,450,5.328,507,2.502,530,0.995,531,1.286,585,4.238,709,3.317,713,2.285,718,2.256,723,1.675,724,2.092,725,1.1,726,1.373,727,1.497,731,2.882,733,2.424,734,1.818,735,2.703,834,4.006,835,2.344,847,3.291,848,2.824,849,2.505,850,2.421,905,2.246,1227,2.344,1378,2.947,1816,3.133,1830,3.627,1831,6.76,1832,6.233,1833,3.627,1834,3.344,1841,2.703,1852,5.263,1855,3.344,2233,3.291,2339,3.867,2415,4.534,3615,5.201,3641,2.598,3737,3.133,3757,3.76,3761,6.76,3774,3.344,3835,6.894,3915,7.896,4132,3.627,4133,5.87,4134,5.87,4135,5.87,4136,5.87,4137,5.87,4138,4.056,4139,4.056,4140,5.87,4141,5.87,4142,4.056,4143,5.87,4144,4.056,4145,5.87,4146,4.056,4147,5.87,4148,4.056,4149,4.056,4150,4.056,4151,5.87,4152,4.056,4153,5.87,4154,4.056,4155,5.87,4156,4.056,4157,4.056,4158,4.056,4159,4.056,4160,4.056,4161,4.056,4162,4.056,4163,4.056,4164,4.056,4165,4.056,4166,4.056,4167,4.056,4168,4.056,4169,4.056,4170,4.056,4171,4.056,4172,4.056,4173,4.056,4174,6.898,4175,6.898,4176,4.056,4177,7.56,4178,4.056,4179,4.056,4180,4.056,4181,4.056,4182,4.056]],["title/classes/UserOnboardingDto.html",[23,0.149,309,3.561]],["body/classes/UserOnboardingDto.html",[8,0.006,12,0.071,13,0.071,14,0.064,19,0.107,22,0.087,23,0.249,24,0.005,25,0.005,58,0.446,62,0.447,137,1.717,196,3.724,276,0.296,287,0.997,309,5.941,334,6.304,352,0.991,395,3.155,421,1.26,424,7.306,436,1.461,466,1.842,469,1.399,471,3.292,474,2.217,485,3.571,487,3.23,488,2.193,1007,5.208,1009,5.162,1597,4.219,2689,5.088,3587,8.234,3611,5.431,3613,5.088,4183,7.885,4184,5.89,4185,6.587,4186,6.587,4187,6.587]],["title/controllers/UserRecommendationController.html",[270,1.044,4117,3.763]],["body/controllers/UserRecommendationController.html",[8,0.006,12,0.068,13,0.068,14,0.061,19,0.125,20,0.771,22,0.083,23,0.193,24,0.004,25,0.004,54,1.529,58,0.345,60,1.182,61,0.697,62,0.292,63,0.606,65,1.217,137,1.668,266,1.607,267,2.209,270,1.347,272,1.655,274,2.28,276,0.283,277,1.746,287,0.771,290,2.674,291,4.076,307,1.076,316,2.973,334,4.191,345,2.76,346,3.541,349,3.138,350,2.915,351,2.28,352,0.946,354,4.345,368,2.546,374,2.165,376,2.819,377,2.321,380,1.82,411,1.655,416,1.131,450,4.857,507,1.962,510,2.881,519,2.241,1000,3.198,1893,5.06,2229,3.332,2890,4.576,2891,4.028,3615,4.565,3641,4.028,3646,4.378,4117,6.101,4188,5.623,4189,6.289,4190,9.058,4191,6.289,4192,6.289,4193,7.899,4194,6.289,4195,6.289,4196,6.289,4197,5.623,4198,6.289,4199,6.289,4200,6.289,4201,6.289]],["title/classes/UserRepoOptionsDto.html",[23,0.149,4202,3.248]],["body/classes/UserRepoOptionsDto.html",[8,0.006,12,0.068,13,0.068,14,0.061,19,0.083,22,0.083,23,0.193,24,0.004,25,0.004,58,0.497,62,0.42,63,0.942,267,2.735,276,0.283,287,1.111,307,1.077,466,1.762,469,1.361,472,1.634,549,2.951,611,3.64,718,2.471,724,2.245,725,1.709,781,2.677,782,3.338,783,2.818,785,3.882,786,4.433,787,4.049,789,2.613,790,3.817,792,3.532,793,3.532,797,3.251,798,4.307,799,3.338,800,3.431,801,5.081,802,3.76,803,4.348,804,3.251,805,3.532,806,3.641,807,3.431,808,3.641,809,3.882,810,2.951,811,2.824,812,3.532,813,3.532,814,3.641,1861,4.199,3226,4.604,4202,5.27]],["title/classes/UserRepoOptionsDto-1.html",[23,0.124,611,1.708,4202,2.703]],["body/classes/UserRepoOptionsDto-1.html",[8,0.006,12,0.072,13,0.072,14,0.064,19,0.116,22,0.107,23,0.271,24,0.005,25,0.005,58,0.363,62,0.428,105,4.714,106,4.611,137,1.399,196,4.05,267,2.472,276,0.298,287,0.812,307,1.149,312,5.961,352,0.996,421,1.265,466,1.852,469,1.404,471,2.682,472,1.718,474,2.129,478,4.005,485,3.579,486,5.679,488,2.205,613,3.713,817,3.822,910,7.288,1000,3.303,1009,5.172,1228,3.51,1596,3.828,1861,5.437,2198,5.037,3213,5.961,3218,4.84,3226,5.961,3611,5.461,4202,5.437,4203,5.461,4204,6.623,4205,5.922]],["title/modules/UserReposModule.html",[0,1.191,50,3.392]],["body/modules/UserReposModule.html",[0,2.019,1,5.986,2,2.495,3,3.161,8,0.006,9,3.22,10,2.635,11,2.495,12,0.073,13,0.073,14,0.065,17,3.41,18,3.55,19,0.125,20,0.829,22,0.089,23,0.207,24,0.005,25,0.005,50,6.95,53,3.345,69,3.167,70,2.011,115,3.318,137,1.744,138,4.706,140,4.706,198,2.075,1861,4.505,2017,4.94,2018,4.94,4206,6.044,4207,6.044,4208,6.044,4209,6.76,4210,7.406,4211,6.76,4212,6.76,4213,6.76]],["title/injectables/UserReposService.html",[530,0.826,4210,3.561]],["body/injectables/UserReposService.html",[7,4.881,8,0.006,12,0.055,13,0.055,14,0.05,19,0.123,20,0.629,22,0.068,23,0.158,24,0.004,25,0.004,54,1.34,58,0.48,60,1.575,61,0.929,62,0.389,63,0.807,65,1.622,70,1.528,82,1.274,115,2.521,137,1.084,138,6.274,140,4.819,198,1.577,218,1.414,264,1.907,266,1.769,276,0.231,277,1.919,296,2.745,307,1.123,316,3.172,370,4.592,380,2.016,389,1.778,411,1.352,416,1.507,436,1.16,472,2.173,507,1.602,523,1.862,530,1.174,531,1.628,709,3.677,713,2.533,718,1.769,722,3.398,723,2.12,725,1.393,726,1.739,727,1.895,728,3.289,731,3.398,733,3.233,734,2.302,736,3.289,737,3.966,738,3.844,739,2.521,972,2.406,1006,5.368,1013,3.422,1014,4.234,1017,3.171,1378,2.002,1596,2.968,1861,6.007,2025,4.274,2043,4.274,2339,4.39,2398,4.234,2399,4.592,2415,5.346,2424,5.707,4202,5.585,4210,5.058,4214,4.592,4215,6.922,4216,5.135,4217,5.135,4218,6.922,4219,6.922,4220,5.135,4221,5.135,4222,5.135,4223,5.135,4224,5.135,4225,6.922,4226,5.135,4227,5.135,4228,5.135,4229,5.135]],["title/injectables/UserService.html",[354,2.451,530,0.826]],["body/injectables/UserService.html",[8,0.006,12,0.027,13,0.027,14,0.025,19,0.115,20,0.312,22,0.033,23,0.078,24,0.002,25,0.002,54,0.794,58,0.475,60,1.578,61,0.982,62,0.389,63,0.808,65,1.651,70,0.756,82,0.631,101,2.905,137,2.006,169,1.425,170,1.248,171,1.57,196,3.18,198,1.26,207,4.012,214,2.265,215,0.819,218,2.383,264,1.13,266,1.048,276,0.114,277,1.958,296,2.639,304,1.57,307,1.168,309,4.325,312,1.858,314,2.837,316,2.39,319,2.096,322,4.325,323,4.325,325,4.261,332,4.325,334,2.734,354,2.064,361,2.273,362,2.273,363,2.273,371,2.273,380,2.019,381,4.52,383,3.382,385,0.991,386,1.093,387,2.273,389,1.907,390,3.382,394,4.221,396,1.347,398,1.964,399,3.382,401,1.964,402,1.964,403,1.964,404,1.964,405,1.964,406,1.248,407,1.964,408,1.964,409,1.964,411,2.306,413,4.221,414,5.641,416,1.482,424,3.169,436,1.162,478,1.248,507,1.609,523,2.517,530,0.696,531,0.806,571,2.371,583,2.096,609,0.922,621,1.77,676,1.964,678,1.57,709,2.597,713,2.207,718,1.318,722,2.532,723,1.05,724,0.906,726,0.861,727,0.938,731,2.905,733,3.138,734,2.312,735,1.695,738,4.121,739,2.532,789,0.679,790,1.071,809,1.248,811,1.14,834,3.136,835,1.469,847,2.3,850,1.517,905,1.57,1000,1.029,1227,1.469,1235,2.984,1270,1.248,1272,3.781,1288,1.05,1331,1.695,1339,3.791,1378,2.307,1460,1.629,1484,2.856,1596,4.761,1679,2.628,1713,1.858,1716,2.998,1744,1.629,1784,3.668,1852,3.59,1855,2.096,1856,2.273,1867,3.169,1876,4.252,2025,2.533,2043,2.533,2066,2.273,2067,5.015,2233,2.3,2309,3.769,2339,3.64,2569,2.096,2777,2.273,2858,2.096,3072,2.273,3540,4.325,3605,2.273,3606,2.273,3714,2.273,3715,2.273,3716,2.273,3717,2.273,3907,4.611,3940,2.273,3949,2.273,3986,2.273,4230,2.273,4231,4.103,4232,4.103,4233,4.103,4234,4.103,4235,5.918,4236,4.103,4237,4.103,4238,4.103,4239,4.103,4240,4.103,4241,4.103,4242,2.543,4243,2.543,4244,4.103,4245,2.543,4246,4.103,4247,2.543,4248,4.103,4249,2.543,4250,5.918,4251,2.543,4252,4.103,4253,2.543,4254,4.103,4255,2.543,4256,2.543,4257,4.103,4258,2.543,4259,4.103,4260,2.543,4261,4.103,4262,2.543,4263,4.103,4264,2.543,4265,4.103,4266,2.543,4267,4.103,4268,2.543,4269,2.543,4270,2.543,4271,2.543,4272,2.543,4273,2.543,4274,2.543,4275,2.543,4276,6.493,4277,2.543,4278,2.543,4279,2.543,4280,2.543,4281,4.103,4282,2.543,4283,2.543,4284,2.543,4285,2.543,4286,2.543,4287,2.543,4288,2.543,4289,2.543,4290,4.103,4291,2.543,4292,2.543,4293,2.543,4294,4.103,4295,4.103,4296,4.103,4297,2.543,4298,2.543,4299,2.543,4300,2.543,4301,2.096,4302,2.543,4303,2.543,4304,2.543,4305,2.543,4306,4.103,4307,2.543,4308,2.543,4309,2.543,4310,2.543,4311,2.543,4312,6.942,4313,2.543,4314,2.543,4315,4.103,4316,3.668,4317,4.103,4318,2.543,4319,2.543,4320,2.543,4321,2.543,4322,2.543,4323,6.942,4324,2.543,4325,2.543,4326,2.543,4327,2.543,4328,2.543,4329,2.543,4330,2.543,4331,2.543,4332,4.103,4333,2.543,4334,2.543,4335,2.543,4336,5.918,4337,4.103,4338,2.543,4339,2.543,4340,2.543,4341,2.543]],["title/modules/VoteModule.html",[0,1.191,51,3.561]],["body/modules/VoteModule.html",[0,1.994,2,2.445,3,3.122,8,0.006,9,3.18,10,2.582,11,2.445,12,0.072,13,0.072,14,0.064,17,3.368,18,3.506,19,0.129,20,0.812,22,0.087,23,0.203,24,0.005,25,0.005,43,5.575,51,7.271,53,3.303,69,3.103,70,1.97,97,4.414,99,2.847,100,3.51,105,4.714,106,4.611,198,2.034,272,2.147,472,1.718,778,4.611,3194,6.827,3228,7.037,3229,5.922,4342,5.922,4343,5.922,4344,5.922,4345,6.623,4346,6.623,4347,6.623]],["title/injectables/VoteService.html",[530,0.826,3228,3.392]],["body/injectables/VoteService.html",[8,0.006,12,0.052,13,0.052,14,0.046,19,0.107,20,0.589,22,0.063,23,0.147,24,0.004,25,0.004,54,1.281,58,0.485,60,1.607,61,0.948,62,0.397,63,0.823,65,1.655,70,1.43,82,1.192,105,2.778,106,3.346,196,2.202,198,1.476,214,2.532,218,2.084,264,1.823,266,2.083,276,0.216,277,1.95,296,2.67,307,1.259,316,3.425,380,1.97,411,2.251,416,1.659,472,1.716,507,2.064,523,2.744,530,1.122,531,1.524,613,4.243,709,3.578,713,2.464,722,2.36,723,1.985,731,3.249,733,2.732,734,2.155,739,2.36,829,6.302,972,2.252,1378,1.874,1596,3.824,1654,3.713,3089,3.71,3090,3.346,3200,5.917,3213,6.248,3215,5.917,3228,4.607,3259,2.968,3266,4.411,3269,3.513,4348,4.298,4349,6.618,4350,6.618,4351,6.618,4352,4.807,4353,4.807,4354,6.618,4355,4.807,4356,6.618,4357,4.807,4358,4.807,4359,6.618,4360,4.807,4361,6.618,4362,4.807,4363,4.807,4364,4.807,4365,9.36,4366,7.568,4367,7.568,4368,4.807,4369,4.807,4370,4.807,4371,4.807,4372,4.807,4373,4.807]],["title/classes/VotedRepoDto.html",[23,0.149,3218,3.561]],["body/classes/VotedRepoDto.html",[8,0.006,12,0.07,13,0.07,14,0.063,19,0.115,22,0.106,23,0.269,24,0.004,25,0.004,58,0.443,62,0.437,105,5.067,106,4.528,137,1.703,196,3.695,267,1.819,276,0.293,287,0.989,307,1.005,312,4.753,352,0.978,421,1.251,466,1.819,469,1.388,471,2.634,472,2.092,474,2.112,478,4.5,485,3.55,486,5.615,488,2.166,613,4.916,817,4.108,910,5.362,1000,2.634,1009,4.916,1228,3.446,1596,4.662,1861,5.844,2198,4.016,3213,6.887,3218,5.895,3226,6.408,4202,4.335,4203,5.362,4205,5.816,4374,6.504,4375,6.504,4376,6.504]],["title/changelog.html",[4377,3.132,4378,3.343,4379,3.626]],["body/changelog.html",[0,0.244,3,1.71,8,0.006,11,0.193,12,0.02,13,0.011,14,0.027,24,0.001,25,0.001,53,0.404,60,0.269,61,0.474,62,0.131,63,0.096,80,0.893,82,0.702,99,0.429,101,0.49,103,0.617,105,1.055,107,1.127,109,1.127,111,1.127,137,1.897,144,1.169,153,3.459,170,2.281,173,1.652,176,2.955,185,1.008,194,0.893,207,1.055,211,3.852,215,1.497,217,0.695,218,1.231,243,1.105,245,1.055,257,0.64,258,1.505,259,0.665,262,1.947,263,1.105,266,0.644,270,0.827,275,2.978,287,0.122,290,0.338,291,2.486,292,3.359,300,1.632,304,0.324,308,0.502,312,1.842,313,1.68,314,3.82,319,0.823,325,1.023,326,1.632,334,1.217,338,2.991,344,0.875,353,3.098,374,1.907,381,0.695,385,0.983,389,0.876,393,0.893,395,0.327,396,3.469,397,2.991,398,0.771,406,0.702,416,0.56,421,0.283,469,0.883,472,1.94,478,0.49,480,1.271,499,2.165,512,0.73,515,0.617,546,0.665,556,1.68,571,1.264,582,0.823,589,2.802,604,2.044,607,5.808,609,2.136,611,0.221,613,2.034,628,0.823,629,0.324,632,3.784,638,3.61,654,0.695,660,1.97,678,1.557,680,1.804,682,1.804,689,2.572,701,1.401,702,0.64,713,0.855,744,0.893,781,1.055,785,1.659,787,0.855,789,0.267,790,0.602,809,1.894,818,0.596,819,1.755,821,0.56,853,2.686,859,1.271,860,1.557,865,1.998,868,0.818,891,1.334,892,0.893,901,0.893,905,1.192,944,0.896,962,0.665,979,0.73,995,0.405,1000,3.184,1001,2.857,1002,0.771,1015,0.365,1017,1.127,1020,0.73,1030,0.405,1042,0.996,1052,1.41,1057,0.73,1059,1.947,1060,1.127,1064,6.275,1065,4.276,1066,1.515,1069,0.617,1070,0.771,1071,0.432,1072,2.568,1087,1.089,1098,0.432,1178,0.421,1184,0.893,1197,1.505,1206,0.695,1235,0.615,1272,0.285,1280,1.339,1282,1.41,1283,1.155,1286,1.106,1294,1.947,1295,0.771,1302,4.009,1303,4.262,1304,2.045,1314,1.41,1316,2.991,1331,1.217,1335,0.73,1336,1.755,1337,1.41,1367,1.41,1369,2.611,1373,0.73,1378,0.389,1385,1.334,1398,2.333,1400,0.695,1406,2.472,1415,0.695,1427,4.548,1459,0.771,1501,0.893,1511,0.73,1577,2.254,1592,0.893,1602,0.823,1620,0.771,1635,0.893,1636,0.432,1654,2.406,1676,3.844,1679,1.812,1689,0.383,1709,0.893,1716,1.334,1730,2.787,1749,0.823,1754,0.771,1816,0.405,1822,1.557,1832,0.823,1839,1.505,1841,0.665,1845,0.823,1847,0.468,1849,0.893,1859,0.893,1893,1.169,1954,0.313,1970,1.023,1981,0.405,1983,0.73,1984,0.432,2026,4.245,2071,0.771,2072,0.893,2130,8.11,2132,0.893,2138,0.468,2158,5.54,2187,3.451,2198,6.103,2201,0.695,2245,3.396,2267,4.177,2274,0.823,2299,0.771,2502,2.651,2526,0.893,2531,2.254,2558,1.632,2610,0.893,2741,0.893,2919,1.045,2969,1.632,2988,0.405,2991,0.405,3036,0.823,3085,0.771,3097,0.823,3151,0.383,3176,0.893,3186,0.823,3213,1.334,3315,5.061,3387,0.893,3422,0.432,3473,0.823,3476,1.842,3502,0.823,3515,0.893,3560,0.695,3567,0.432,3570,1.505,3593,1.279,3631,0.893,3650,0.893,3737,1.947,3781,1.045,3802,1.956,3977,1.632,3979,3.359,4020,2.254,4197,0.893,4301,1.505,4316,1.632,4377,0.405,4379,1.632,4380,0.524,4381,1.825,4382,3.244,4383,1.825,4384,2.53,4385,1.956,4386,2.829,4387,9.158,4388,0.524,4389,0.524,4390,2.188,4391,3.628,4392,1.43,4393,0.524,4394,0.524,4395,0.524,4396,3.628,4397,9.169,4398,3.023,4399,0.524,4400,0.524,4401,4.075,4402,2.829,4403,4.713,4404,4.372,4405,3.115,4406,0.524,4407,0.524,4408,4.817,4409,3.628,4410,0.999,4411,0.524,4412,0.524,4413,6.098,4414,3.115,4415,2.829,4416,8.218,4417,0.524,4418,0.524,4419,7.576,4420,0.524,4421,0.524,4422,2.521,4423,4.468,4424,0.999,4425,0.999,4426,0.999,4427,3.115,4428,0.999,4429,0.999,4430,0.999,4431,0.999,4432,0.999,4433,0.999,4434,0.999,4435,0.999,4436,0.999,4437,3.115,4438,3.38,4439,0.468,4440,0.524,4441,0.524,4442,0.999,4443,0.999,4444,0.999,4445,0.999,4446,0.999,4447,0.999,4448,0.999,4449,0.999,4450,0.999,4451,0.999,4452,0.999,4453,0.999,4454,4.276,4455,0.999,4456,5.272,4457,3.45,4458,1.43,4459,2.53,4460,0.524,4461,1.825,4462,4.648,4463,7.935,4464,0.999,4465,0.524,4466,0.524,4467,3.825,4468,0.524,4469,1.43,4470,0.999,4471,0.999,4472,2.521,4473,0.999,4474,0.999,4475,1.825,4476,0.823,4477,0.999,4478,4.45,4479,1.825,4480,0.999,4481,0.999,4482,2.521,4483,6.703,4484,0.999,4485,0.999,4486,3.115,4487,0.999,4488,0.999,4489,0.999,4490,0.999,4491,0.999,4492,4.585,4493,0.999,4494,0.999,4495,0.999,4496,0.999,4497,0.999,4498,0.999,4499,0.999,4500,5.537,4501,3.628,4502,0.999,4503,5.777,4504,2.521,4505,0.999,4506,0.999,4507,0.999,4508,0.999,4509,0.999,4510,0.524,4511,3.628,4512,6.548,4513,6.059,4514,6.962,4515,3.643,4516,3.628,4517,0.999,4518,0.999,4519,2.785,4520,0.999,4521,3.244,4522,0.999,4523,0.999,4524,0.999,4525,0.999,4526,0.999,4527,0.999,4528,0.999,4529,0.999,4530,0.999,4531,0.999,4532,0.999,4533,0.999,4534,0.999,4535,0.999,4536,0.999,4537,0.999,4538,4.817,4539,3.115,4540,0.893,4541,0.999,4542,1.825,4543,1.505,4544,3.45,4545,0.893,4546,0.999,4547,0.999,4548,1.43,4549,6.196,4550,2.521,4551,6.981,4552,0.999,4553,0.999,4554,2.521,4555,0.999,4556,0.999,4557,0.999,4558,0.999,4559,0.999,4560,0.999,4561,1.825,4562,0.999,4563,0.999,4564,0.999,4565,0.999,4566,0.999,4567,0.999,4568,0.999,4569,4.075,4570,0.524,4571,0.893,4572,0.999,4573,5.272,4574,0.999,4575,0.999,4576,0.999,4577,0.999,4578,0.999,4579,0.999,4580,0.999,4581,0.999,4582,2.829,4583,0.999,4584,0.999,4585,2.188,4586,0.999,4587,0.999,4588,0.999,4589,0.999,4590,1.825,4591,0.999,4592,0.999,4593,2.521,4594,0.999,4595,0.999,4596,0.999,4597,0.999,4598,0.999,4599,0.999,4600,1.43,4601,0.999,4602,0.999,4603,0.999,4604,0.999,4605,0.999,4606,0.999,4607,0.999,4608,0.999,4609,1.43,4610,0.999,4611,0.999,4612,0.999,4613,0.999,4614,2.188,4615,0.999,4616,0.999,4617,0.999,4618,0.999,4619,0.999,4620,0.999,4621,0.999,4622,0.999,4623,0.999,4624,4.278,4625,2.188,4626,3.859,4627,1.825,4628,4.648,4629,4.648,4630,2.254,4631,1.825,4632,1.825,4633,1.825,4634,1.825,4635,1.825,4636,1.825,4637,2.521,4638,2.521,4639,2.521,4640,2.521,4641,2.829,4642,2.521,4643,2.521,4644,1.43,4645,2.521,4646,1.825,4647,1.632,4648,0.999,4649,0.999,4650,0.999,4651,0.999,4652,0.999,4653,0.893,4654,0.999,4655,9.228,4656,2.521,4657,1.825,4658,6.916,4659,1.825,4660,0.999,4661,0.999,4662,1.825,4663,0.999,4664,0.999,4665,1.825,4666,1.825,4667,2.521,4668,1.825,4669,1.825,4670,2.188,4671,2.188,4672,6.548,4673,0.999,4674,1.505,4675,1.825,4676,3.643,4677,2.521,4678,2.521,4679,2.521,4680,2.521,4681,2.521,4682,1.825,4683,1.825,4684,0.999,4685,0.999,4686,1.632,4687,0.999,4688,2.53,4689,2.521,4690,2.521,4691,0.893,4692,0.999,4693,4.648,4694,3.115,4695,1.825,4696,2.521,4697,1.825,4698,1.43,4699,1.43,4700,1.43,4701,1.43,4702,1.43,4703,0.999,4704,2.521,4705,0.999,4706,1.825,4707,3.628,4708,0.999,4709,0.999,4710,0.73,4711,0.999,4712,0.999,4713,0.999,4714,0.999,4715,0.999,4716,1.825,4717,2.188,4718,2.829,4719,1.43,4720,3.38,4721,1.43,4722,0.999,4723,0.893,4724,0.999,4725,0.999,4726,0.999,4727,0.999,4728,1.43,4729,0.524,4730,0.999,4731,0.999,4732,1.825,4733,0.999,4734,0.999,4735,0.524,4736,2.188,4737,0.999,4738,0.999,4739,0.999,4740,0.999,4741,0.999,4742,0.999,4743,0.999,4744,0.524,4745,0.524,4746,0.524,4747,0.999,4748,0.524,4749,0.524,4750,0.524,4751,0.999,4752,0.999,4753,0.999,4754,0.524,4755,1.43,4756,0.524,4757,0.524,4758,1.825,4759,0.524,4760,0.524,4761,0.999,4762,0.999,4763,0.999,4764,0.999,4765,0.999,4766,0.524,4767,0.524,4768,0.524,4769,0.524,4770,1.825,4771,3.244,4772,2.188,4773,2.188,4774,2.188,4775,2.188,4776,2.188,4777,2.188,4778,2.188,4779,1.956,4780,2.254,4781,2.188,4782,2.188,4783,2.188,4784,2.829,4785,4.278,4786,2.188,4787,2.829,4788,2.188,4789,1.825,4790,1.825,4791,1.825,4792,1.825,4793,1.825,4794,1.825,4795,1.825,4796,1.825,4797,1.825,4798,1.43,4799,1.43,4800,1.825,4801,1.825,4802,2.785,4803,1.825,4804,1.825,4805,1.825,4806,1.825,4807,1.825,4808,1.825,4809,4.278,4810,4.278,4811,2.188,4812,2.188,4813,0.999,4814,0.999,4815,1.825,4816,1.825,4817,0.999,4818,0.999,4819,1.825,4820,1.825,4821,1.825,4822,1.825,4823,2.785,4824,2.188,4825,3.995,4826,2.188,4827,1.825,4828,0.999,4829,0.999,4830,0.999,4831,1.43,4832,1.43,4833,0.999,4834,0.999,4835,0.524,4836,4.648,4837,3.628,4838,0.524,4839,0.524,4840,0.524,4841,0.524,4842,0.999,4843,0.999,4844,0.999,4845,4.468,4846,1.825,4847,2.188,4848,1.825,4849,4.075,4850,3.115,4851,1.825,4852,4.075,4853,1.825,4854,1.825,4855,1.825,4856,1.825,4857,1.825,4858,1.825,4859,0.999,4860,0.999,4861,0.999,4862,0.524,4863,0.999,4864,1.43,4865,0.524,4866,0.524,4867,1.43,4868,0.999,4869,0.999,4870,0.999,4871,0.999,4872,0.524,4873,0.999,4874,0.999,4875,0.999,4876,0.999,4877,0.999,4878,2.188,4879,0.999,4880,0.999,4881,0.999,4882,0.999,4883,0.999,4884,0.999,4885,0.999,4886,0.999,4887,0.999,4888,0.893,4889,0.999,4890,1.43,4891,0.999,4892,0.999,4893,0.999,4894,0.999,4895,0.999,4896,0.999,4897,1.825,4898,0.999,4899,0.999,4900,0.999,4901,0.999,4902,0.999,4903,0.999,4904,0.999,4905,0.999,4906,0.999,4907,1.825,4908,0.893,4909,0.999,4910,0.999,4911,0.999,4912,0.524,4913,1.43,4914,1.825,4915,0.999,4916,0.999,4917,0.999,4918,0.999,4919,0.999,4920,0.999,4921,3.115,4922,0.999,4923,0.999,4924,0.999,4925,0.999,4926,0.999,4927,0.999,4928,3.023,4929,0.999,4930,0.999,4931,0.893,4932,0.999,4933,0.999,4934,0.999,4935,0.999,4936,1.43,4937,1.632,4938,0.999,4939,0.999,4940,0.999,4941,0.999,4942,0.999,4943,0.999,4944,0.524,4945,1.825,4946,0.999,4947,0.999,4948,0.999,4949,0.999,4950,0.999,4951,0.999,4952,0.999,4953,0.999,4954,0.999,4955,2.188,4956,0.999,4957,0.999,4958,0.999,4959,0.999,4960,0.999,4961,1.825,4962,0.999,4963,0.999,4964,0.999,4965,0.999,4966,0.999,4967,0.999,4968,0.999,4969,1.43,4970,1.956,4971,0.999,4972,1.279,4973,0.999,4974,3.115,4975,0.999,4976,0.524,4977,0.893,4978,0.999,4979,0.999,4980,1.825,4981,0.999,4982,0.999,4983,2.521,4984,0.999,4985,0.893,4986,0.999,4987,0.999,4988,0.999,4989,0.999,4990,0.999,4991,0.999,4992,0.999,4993,0.999,4994,1.825,4995,0.999,4996,1.279,4997,1.825,4998,0.999,4999,0.999,5000,0.999,5001,0.999,5002,0.999,5003,0.999,5004,0.999,5005,5.408,5006,2.188,5007,2.829,5008,2.188,5009,0.999,5010,0.999,5011,0.999,5012,0.999,5013,0.999,5014,0.999,5015,0.999,5016,0.999,5017,0.999,5018,0.999,5019,0.999,5020,0.999,5021,0.999,5022,0.999,5023,0.999,5024,0.999,5025,0.999,5026,0.999,5027,0.999,5028,0.999,5029,0.999,5030,0.999,5031,0.999,5032,0.999,5033,0.999,5034,0.999,5035,0.999,5036,0.999,5037,0.893,5038,1.825,5039,0.999,5040,1.43,5041,1.43,5042,0.999,5043,0.893,5044,0.999,5045,0.999,5046,0.999,5047,0.999,5048,1.825,5049,0.999,5050,0.999,5051,0.999,5052,0.999,5053,0.999,5054,0.999,5055,0.999,5056,1.43,5057,0.999,5058,0.999,5059,0.999,5060,0.999,5061,0.999,5062,0.999,5063,0.999,5064,0.999,5065,0.999,5066,0.999,5067,0.999,5068,0.999,5069,0.999,5070,0.999,5071,0.999,5072,0.999,5073,0.999,5074,0.999,5075,0.999,5076,2.254,5077,0.823,5078,0.999,5079,0.999,5080,1.632,5081,0.999,5082,0.999,5083,1.632,5084,0.999,5085,0.999,5086,0.999,5087,0.999,5088,0.999,5089,0.999,5090,0.999,5091,2.188,5092,0.999,5093,0.999,5094,0.999,5095,0.999,5096,0.999,5097,0.999,5098,0.999,5099,1.43,5100,0.999,5101,0.524,5102,0.524,5103,0.524,5104,0.524,5105,0.524,5106,0.524,5107,0.524,5108,0.524,5109,0.524,5110,0.524,5111,0.524,5112,0.524,5113,0.524,5114,0.524,5115,2.521,5116,1.825,5117,0.999,5118,0.999,5119,0.999,5120,0.999,5121,0.893,5122,0.999,5123,0.999,5124,2.521,5125,0.999,5126,0.999,5127,0.524,5128,0.524,5129,0.524,5130,3.45,5131,0.524,5132,0.524,5133,0.524,5134,0.524,5135,0.524,5136,0.524,5137,0.524,5138,0.524,5139,0.524,5140,0.524,5141,0.771,5142,0.524,5143,0.524,5144,0.524,5145,0.524,5146,0.524,5147,0.524,5148,0.524,5149,0.524,5150,0.432,5151,0.893,5152,0.524,5153,0.524,5154,0.524,5155,0.524,5156,0.524,5157,0.524,5158,0.524,5159,0.468,5160,0.524,5161,0.524,5162,0.468,5163,0.468,5164,0.524,5165,0.524,5166,0.524,5167,0.524,5168,0.524,5169,0.524,5170,0.524,5171,0.524,5172,0.524,5173,0.524,5174,0.524,5175,0.999,5176,0.524,5177,0.524,5178,0.524,5179,0.524,5180,0.524,5181,0.524,5182,0.524,5183,0.999,5184,0.432,5185,0.524,5186,0.524,5187,0.524,5188,0.524,5189,0.524,5190,0.524,5191,0.524,5192,0.524,5193,0.524,5194,0.524,5195,0.524,5196,0.524,5197,0.524,5198,0.524,5199,0.524,5200,0.524,5201,0.524,5202,0.524,5203,0.524,5204,0.524,5205,0.524,5206,0.524,5207,1.279,5208,0.524,5209,0.524,5210,0.524,5211,0.524,5212,0.524,5213,0.524,5214,0.524,5215,0.524,5216,0.524,5217,0.524,5218,0.524,5219,0.524,5220,0.524,5221,0.524,5222,1.43,5223,0.524,5224,0.524,5225,0.524,5226,0.524,5227,0.524,5228,0.524,5229,0.524,5230,0.524,5231,0.524,5232,0.432,5233,0.524,5234,0.524,5235,0.524,5236,0.524,5237,0.524,5238,0.524,5239,0.524,5240,0.524,5241,0.999,5242,0.524,5243,0.893,5244,0.524,5245,0.524,5246,0.524,5247,0.999,5248,0.999,5249,0.524,5250,1.43,5251,0.524,5252,0.524,5253,0.999,5254,0.524,5255,0.524,5256,0.524,5257,0.524,5258,0.524,5259,0.524,5260,0.524,5261,0.524,5262,0.524,5263,0.524,5264,0.524,5265,0.524,5266,0.524,5267,0.524,5268,0.524,5269,0.524,5270,0.468,5271,0.524,5272,0.524,5273,0.524,5274,0.524,5275,0.524,5276,0.524,5277,0.524,5278,0.524,5279,0.524,5280,0.524,5281,0.524,5282,0.524,5283,0.524,5284,0.524,5285,0.524,5286,0.524,5287,0.524,5288,0.524,5289,0.524,5290,0.468,5291,0.524,5292,0.524,5293,0.524,5294,0.524,5295,0.524,5296,0.524,5297,0.524,5298,0.524,5299,0.524,5300,0.524,5301,0.524]],["title/coverage.html",[5302,5.507]],["body/coverage.html",[7,1.172,8,0.006,14,0.021,23,0.301,24,0.002,25,0.002,62,0.103,89,1.824,90,1.824,91,1.824,92,1.824,93,1.824,94,1.824,95,1.824,99,0.951,101,1.086,103,1.366,105,1.278,107,1.366,109,1.366,111,1.366,113,1.417,116,1.417,118,1.366,127,1.709,130,1.709,133,1.32,135,1.474,137,1.373,138,2.549,140,1.54,141,1.54,149,1.54,151,1.54,153,1.036,154,3.286,156,1.366,157,2.549,159,1.278,163,1.474,165,1.474,167,1.417,169,1.24,170,1.797,172,1.474,173,2.405,175,1.617,176,1.24,177,1.474,179,1.474,182,1.366,186,1.94,218,0.609,270,2.033,271,1.709,273,1.978,275,1.54,309,1.617,316,0.762,322,1.617,323,1.617,325,1.24,332,1.617,354,1.113,356,1.474,358,1.474,364,1.709,368,0.896,397,1.824,458,1.617,465,1.617,467,1.978,468,1.978,472,0.574,490,1.709,491,2.828,492,3.019,496,1.617,512,1.617,514,1.54,515,1.366,530,1.64,532,3.019,535,1.24,575,2.893,576,1.709,578,2.828,579,3.019,617,1.709,618,3.786,619,4.333,620,1.978,624,1.617,632,2.417,634,1.54,643,1.978,653,1.709,654,3.261,655,1.978,657,1.617,663,1.54,667,3.019,683,1.709,684,1.978,686,1.617,689,2.44,691,1.54,698,1.824,699,1.978,706,1.54,707,1.978,708,1.978,718,0.565,726,0.749,740,1.824,741,1.978,748,1.54,749,1.978,772,1.54,774,1.709,779,1.617,780,1.824,781,1.844,782,4.273,821,2.053,823,1.978,834,1.172,851,1.709,852,1.978,856,1.617,863,1.54,866,1.013,868,0.992,870,1.366,872,3.488,879,1.709,880,1.978,881,1.978,888,1.617,924,1.978,925,3.019,967,1.54,968,1.978,969,3.019,996,1.617,997,3.019,998,3.019,1001,2.417,1006,1.417,1018,1.709,1019,3.019,1025,1.617,1026,1.978,1032,1.709,1033,1.978,1034,1.978,1039,1.709,1040,3.019,1041,3.019,1055,1.617,1056,1.978,1093,1.617,1094,1.978,1095,1.978,1104,1.54,1135,1.978,1155,1.978,1156,3.019,1197,2.378,1198,1.978,1199,4.2,1212,0.896,1232,1.978,1241,1.978,1269,1.978,1272,5.652,1321,1.978,1329,1.978,1357,1.978,1375,1.978,1408,3.019,1409,1.978,1447,1.978,1456,1.978,1487,1.978,1598,1.978,1601,1.978,1619,1.978,1634,1.978,1653,1.978,1668,2.828,1669,1.978,1713,1.617,1714,1.978,1715,1.978,1718,4.249,1719,1.978,1748,1.978,1788,1.978,1812,1.474,1813,3.019,1821,1.474,1826,1.617,1827,1.978,1829,1.978,1852,1.54,1861,4.021,1866,1.978,1888,1.709,1889,1.978,1898,1.54,1911,1.978,1921,1.709,1922,1.978,1971,1.417,1976,1.617,2021,1.978,2071,1.709,2073,1.978,2074,1.978,2088,1.54,2089,1.978,2103,3.979,2104,1.978,2110,3.019,2116,1.617,2117,1.978,2136,1.709,2137,1.978,2185,1.709,2186,1.978,2230,1.417,2266,1.978,2275,1.824,2290,1.709,2291,1.978,2305,1.617,2312,1.366,2323,1.474,2324,3.019,2325,1.978,2371,1.824,2372,2.828,2384,1.54,2385,1.54,2386,1.978,2406,1.709,2407,1.709,2413,1.978,2446,1.709,2447,2.828,2453,1.54,2481,1.978,2501,1.978,2502,1.617,2515,3.618,2516,1.978,2521,1.709,2543,1.978,2559,3.019,2562,1.709,2570,1.709,2571,2.828,2572,1.978,2618,1.54,2660,1.978,2685,1.978,2690,1.709,2691,1.978,2705,1.617,2710,1.54,2723,1.709,2724,1.978,2730,1.54,2734,1.978,2747,1.978,2751,1.366,2806,1.978,2877,1.978,2878,1.978,2890,1.172,2901,1.709,2902,1.978,2905,1.32,2909,1.617,2919,1.617,2931,1.824,2933,1.978,2967,3.423,2968,1.978,2996,1.978,3075,1.709,3076,1.978,3077,1.978,3108,1.54,3120,1.709,3121,1.978,3122,1.978,3147,1.54,3158,1.709,3159,1.978,3160,1.978,3184,1.54,3194,1.709,3195,1.978,3196,1.978,3218,1.617,3226,3.423,3228,1.54,3248,1.978,3277,1.978,3302,1.978,3335,1.54,3339,1.978,3353,1.617,3354,3.618,3357,3.019,3358,3.019,3369,1.824,3371,1.824,3444,1.978,3465,1.978,3466,1.978,3510,1.978,3513,1.978,3540,1.617,3541,1.978,3542,1.978,3549,1.824,3550,1.978,3553,3.019,3557,1.709,3563,1.709,3564,3.979,3569,1.978,3604,1.978,3610,1.978,3614,1.709,3615,4.446,3616,1.978,3642,1.54,3662,1.978,3685,1.709,3686,1.978,3730,1.709,3731,1.978,3750,1.474,3751,1.978,3757,1.417,3790,1.709,3791,1.978,3817,1.709,3818,1.978,3894,1.978,4006,3.019,4007,1.978,4065,1.978,4116,1.709,4117,1.709,4124,1.978,4132,1.978,4183,1.978,4184,1.978,4188,1.978,4202,2.44,4203,3.019,4210,1.617,4214,1.978,4230,1.978,4348,1.978,4454,1.709,4888,1.978,4977,1.978,5151,7.574,5302,1.824,5303,2.212,5304,6.882,5305,2.212,5306,8.847,5307,9.79,5308,8.847,5309,3.019,5310,6.882,5311,9.053,5312,1.978,5313,1.978,5314,6.882,5315,8.471,5316,2.212,5317,5.445,5318,1.978,5319,1.978,5320,1.978,5321,3.274,5322,1.978,5323,1.978,5324,3.274,5325,1.978,5326,1.978,5327,1.978,5328,1.978,5329,8.064,5330,4.684,5331,1.978,5332,1.978,5333,2.212,5334,1.978,5335,2.212,5336,1.824,5337,2.212,5338,2.212,5339,2.212,5340,2.212]],["title/miscellaneous/enumerations.html",[5341,2.597,5342,5.247]],["body/miscellaneous/enumerations.html",[8,0.006,24,0.004,25,0.004,61,0.792,173,2.583,176,4.003,185,2.545,276,0.242,385,3.561,386,3.926,618,2.266,780,4.435,781,3.204,782,5.126,788,5.887,790,4.362,794,5.218,803,3.593,819,4.971,820,5.887,821,4.003,853,4.971,872,3.446,891,6.24,1000,2.892,1227,4.127,1346,4.435,1355,4.759,1494,5.887,1502,5.887,1586,5.887,1597,4.574,1702,5.218,1718,3.322,1852,4.971,1858,6.385,1868,4.971,1920,5.887,2092,4.41,2372,4.155,2378,5.887,2379,5.887,2380,4.971,2381,5.887,2382,5.887,2383,5.887,2448,5.515,2795,6.385,2801,6.385,2967,3.931,2983,6.385,2984,5.515,2985,6.385,2986,6.385,2987,5.887,2988,5.515,2989,5.887,2990,5.887,2991,5.515,5336,5.887,5341,3.446,5342,4.81,5343,5.38,5344,5.38,5345,5.38,5346,7.141,5347,7.141,5348,7.141,5349,4.81,5350,5.38,5351,4.81,5352,5.38,5353,4.81]],["title/miscellaneous/functions.html",[5341,2.597,5354,5.247]],["body/miscellaneous/functions.html",[8,0.005,24,0.005,25,0.005,276,0.356,5331,7.078,5332,8.523,5341,5.07,5354,7.078,5355,7.916]],["title/index.html",[276,0.182,4377,3.132,4378,3.343]],["body/index.html",[8,0.005,11,2.085,13,0.042,14,0.054,24,0.003,25,0.003,61,0.427,153,2.647,173,1.82,185,2.926,205,5.17,211,5.389,218,2.031,220,6.594,262,2.973,263,5.17,304,3.489,353,5.472,374,2.305,396,2.039,406,1.889,472,0.998,480,3.933,499,3.371,547,2.565,557,3.173,591,2.679,611,2.379,627,2.813,629,2.377,632,3.454,638,2.096,675,3.933,689,4.461,713,1.707,789,1.51,811,1.725,859,3.933,995,4.363,1052,6.066,1069,2.377,1087,4.401,1201,2.813,1282,2.973,1295,2.973,1336,2.679,1337,5.17,1400,2.679,1406,2.465,1511,2.813,1523,3.173,1689,2.813,1730,6.475,1868,2.679,2198,3.489,2267,5.17,2504,3.933,2545,2.973,2698,3.441,3151,2.813,3325,3.441,3365,3.173,3372,5.696,3476,6,3567,3.173,3570,3.173,3613,2.973,3737,4.363,3781,5.74,4301,3.173,4382,5.051,4398,3.441,4403,5.985,4404,5.696,4439,3.441,4454,2.973,4457,5.051,4459,5.051,4476,3.173,4478,6.594,4492,6.594,4513,3.441,4514,7.341,4515,3.441,4519,5.051,4543,6.769,4544,8.362,4545,5.985,4571,3.441,4630,3.441,4647,3.441,4674,3.173,4676,5.985,4686,3.441,4688,8.073,4691,3.441,4710,2.813,4723,5.051,4771,3.441,4779,3.441,4780,3.441,4823,5.051,4908,3.441,4928,3.441,4931,5.051,4937,5.051,4972,3.441,4985,3.441,4996,5.985,5076,5.051,5077,3.173,5080,3.441,5083,6.594,5121,3.441,5130,7.341,5141,4.363,5150,3.173,5162,3.441,5163,8.648,5184,3.173,5207,5.051,5232,5.518,5270,3.441,5290,3.441,5302,3.173,5356,3.849,5357,3.849,5358,5.051,5359,3.849,5360,3.849,5361,6.693,5362,3.441,5363,3.849,5364,3.849,5365,3.849,5366,3.849,5367,3.849,5368,3.849,5369,6.693,5370,5.649,5371,3.849,5372,3.849,5373,3.849,5374,3.849,5375,6.693,5376,3.849,5377,3.849,5378,3.849,5379,3.849,5380,3.849,5381,3.849,5382,3.849,5383,3.849,5384,3.849,5385,3.849,5386,3.849,5387,3.849,5388,3.849,5389,7.375,5390,3.849,5391,3.849,5392,3.849,5393,3.849,5394,3.849,5395,7.375,5396,5.649,5397,5.649,5398,5.649,5399,5.649,5400,5.649,5401,3.849,5402,3.849,5403,3.849,5404,3.849,5405,3.849,5406,3.849,5407,3.849,5408,3.849,5409,3.849,5410,3.849,5411,6.693,5412,3.849,5413,3.849,5414,3.849,5415,3.441,5416,8.485,5417,3.849,5418,3.849,5419,3.849,5420,5.649,5421,6.693,5422,3.849,5423,3.849,5424,3.849,5425,3.849,5426,3.849,5427,3.441,5428,3.849,5429,3.849,5430,3.849,5431,5.649,5432,3.849,5433,3.849,5434,3.441,5435,5.649,5436,3.849,5437,3.849,5438,3.849,5439,5.649,5440,3.849,5441,3.849,5442,3.849,5443,3.849,5444,3.849,5445,3.849,5446,3.849,5447,3.849,5448,5.649,5449,3.849,5450,3.849,5451,5.649,5452,3.849,5453,3.849,5454,3.849,5455,3.849,5456,3.849,5457,3.849,5458,5.649,5459,3.849,5460,5.649,5461,3.849,5462,3.849,5463,3.849,5464,3.849,5465,3.849,5466,3.849,5467,3.849,5468,3.849,5469,3.849,5470,3.849,5471,3.849,5472,3.849,5473,3.849,5474,3.849,5475,3.849,5476,5.649,5477,5.649,5478,3.849,5479,3.849,5480,3.849,5481,3.849,5482,3.849,5483,3.849,5484,3.849,5485,3.849,5486,3.849,5487,5.649,5488,3.849,5489,3.849,5490,3.849,5491,3.849,5492,3.849,5493,3.849,5494,3.849,5495,3.849,5496,3.849,5497,3.849,5498,3.849,5499,3.849,5500,3.849,5501,3.849,5502,5.649,5503,3.849,5504,3.849,5505,3.849,5506,3.849,5507,3.173]],["title/license.html",[4377,3.132,4378,3.343,4710,2.963]],["body/license.html",[8,0.005,11,2.463,24,0.005,25,0.005,185,2.378,629,4.12,1064,4.447,1087,3.982,1286,3.892,1294,5.153,1523,5.501,1754,5.153,1878,5.501,2267,6.329,2274,5.501,2597,5.966,3422,5.501,3781,4.876,4454,5.153,4653,5.966,4674,6.756,4710,4.876,5184,6.756,5362,8.908,5507,5.501,5508,8.869,5509,6.672,5510,8.195,5511,6.672,5512,6.672,5513,6.672,5514,6.672,5515,6.672,5516,6.672,5517,6.672,5518,6.672,5519,6.672,5520,6.672,5521,6.672,5522,6.672,5523,6.672,5524,6.672,5525,6.672,5526,6.672,5527,6.672,5528,8.195,5529,6.672,5530,6.672,5531,6.672,5532,6.672,5533,6.672,5534,6.672,5535,8.195,5536,8.195,5537,6.672,5538,6.672,5539,6.672,5540,6.672,5541,6.672,5542,6.672,5543,6.672,5544,6.672,5545,6.672,5546,6.672,5547,6.672,5548,6.672,5549,6.672,5550,6.672,5551,6.672,5552,6.672,5553,6.672,5554,6.672,5555,6.672,5556,6.672,5557,6.672,5558,6.672,5559,6.672]],["title/modules.html",[2,2.465]],["body/modules.html",[1,3.791,2,2.266,8,0.004,24,0.004,25,0.004,26,4.742,29,4.274,30,4.486,31,4.486,32,4.486,33,4.092,34,4.486,35,4.486,36,4.486,37,4.486,38,4.486,39,4.486,40,3.932,41,4.486,42,4.092,43,3.548,44,4.486,45,4.486,46,4.274,47,4.486,48,4.486,49,3.664,50,4.274,51,4.486,457,4.274,2473,4.742,2785,4.274,4802,9.243,5560,10.337,5561,10.337,5562,10.347,5563,5.489,5564,6.139]],["title/overview.html",[5565,5.973]],["body/overview.html",[1,5.192,2,1.081,3,1.757,4,2.618,5,2.618,6,2.618,7,4.091,8,0.006,9,1.789,10,1.141,11,1.081,24,0.003,25,0.003,26,7.774,27,2.618,28,2.618,29,6.45,30,5.841,31,5.841,32,5.087,33,5.327,34,5.087,35,6.365,36,4.137,37,5.087,38,6.602,39,5.841,40,5.264,41,6.533,42,6.321,43,5.166,44,5.841,45,5.841,46,5.374,47,6.365,48,5.841,49,5.893,50,5.721,51,5.841,215,0.943,272,0.771,354,3.884,356,5.146,358,5.146,368,3.126,453,2.618,454,2.618,455,2.618,456,2.618,457,5.374,458,5.642,466,0.819,514,5.374,524,2.618,525,2.618,527,2.618,531,0.928,535,4.328,577,2.261,611,1.233,634,3.941,663,3.941,691,3.941,706,5.374,748,5.374,768,2.618,770,2.618,771,2.618,772,5.374,870,4.767,1093,5.642,1104,3.941,1128,2.618,1129,2.618,1130,2.618,1304,1.551,1845,2.414,1898,3.941,1906,2.618,1907,2.618,1971,5.386,2012,2.618,2013,2.618,2015,2.618,2071,2.261,2230,4.945,2312,4.767,2323,3.773,2385,5.374,2401,2.618,2402,2.618,2403,2.618,2453,5.374,2458,2.618,2459,2.618,2460,2.618,2473,5.963,2474,2.618,2475,2.618,2476,2.618,2494,2.618,2495,2.618,2496,2.618,2618,5.374,2653,2.618,2655,2.618,2656,2.618,2710,3.941,2730,3.941,2751,4.936,2781,2.618,2782,2.618,2783,2.618,2784,2.618,2785,5.374,2890,4.455,2928,2.618,2929,2.618,2930,2.618,2974,2.618,2976,2.618,2977,2.618,3108,5.374,3147,5.374,3184,5.374,3228,5.374,3242,2.618,3243,2.618,3245,2.618,3271,2.618,3272,2.618,3273,2.618,3297,2.618,3298,2.618,3299,2.618,3332,2.618,3333,2.618,3334,2.618,3335,5.374,3350,2.618,3351,2.618,3353,4.684,3438,2.618,3440,2.618,3441,2.618,3642,3.941,3750,5.146,3757,3.626,4111,2.618,4112,2.618,4113,2.618,4206,2.618,4207,2.618,4208,2.618,4210,5.642,4342,2.618,4343,2.618,4344,2.618,4970,2.618,5565,2.618,5566,2.928,5567,2.928,5568,2.928]],["title/properties.html",[469,1.01,4467,3.626]],["body/properties.html",[8,0.006,24,0.005,25,0.005,79,5.329,185,3.081,353,4.86,421,1.131,469,1.255,475,6.318,702,4.671,713,2.204,1087,5.159,1318,6.012,2026,4.671,4384,6.52,4385,6.52,4404,5.632,4710,5.329,5043,6.52,5150,6.012,5243,6.52,5507,6.012,5563,6.52,5569,7.292,5570,7.292,5571,7.292,5572,7.292,5573,7.292,5574,7.292,5575,7.292,5576,7.292,5577,7.292,5578,7.292,5579,7.292,5580,7.292,5581,7.292,5582,7.292,5583,7.292,5584,7.292]],["title/miscellaneous/typealiases.html",[5341,2.597,5585,5.868]],["body/miscellaneous/typealiases.html",[8,0.005,24,0.005,25,0.005,62,0.367,276,0.356,5309,6.526,5341,5.07,5586,7.916,5587,9.069,5588,7.078]],["title/miscellaneous/variables.html",[5141,4.532,5341,2.597]],["body/miscellaneous/variables.html",[8,0.006,12,0.043,24,0.003,25,0.003,62,0.184,89,4.758,90,4.758,91,4.758,92,4.758,93,4.758,94,4.758,95,4.758,137,1.219,173,1.86,203,5.775,205,5.775,207,3.335,209,5.16,211,4.217,218,1.875,224,5.16,257,3.697,276,0.178,307,0.719,316,1.987,349,1.574,380,1.723,416,1.224,421,0.614,436,1.008,469,0.682,507,1.8,604,2.512,609,3.008,613,2.222,675,2.759,681,3.236,789,2.551,790,4.021,866,2.644,868,2.587,1007,2.538,1065,3.061,1098,3.267,1355,2.641,1566,5.16,1718,2.447,1852,4.018,1868,2.759,1878,4.758,1958,3.267,2079,5.16,2245,2.896,2275,4.758,2278,3.543,2504,4.018,2525,3.543,3354,4.457,3357,3.267,3358,4.758,3369,4.758,3371,4.758,3372,3.061,3373,3.543,3374,3.543,3375,3.543,3376,3.543,3420,3.543,3476,2.896,3560,2.759,4404,4.457,4476,3.267,4521,3.543,4540,3.543,4543,3.267,4825,5.16,5037,3.543,5077,3.267,5141,3.061,5159,3.543,5232,3.267,5309,3.267,5312,3.543,5313,5.16,5318,3.543,5319,5.16,5320,3.543,5321,5.16,5322,5.16,5323,5.16,5324,3.543,5325,6.086,5326,3.543,5327,3.543,5328,3.543,5334,3.543,5336,4.758,5341,2.538,5349,3.543,5351,3.543,5353,3.543,5358,3.543,5415,5.16,5427,5.16,5434,3.543,5588,5.16,5589,3.963,5590,3.963,5591,3.963,5592,5.771,5593,5.771,5594,3.963,5595,3.963,5596,3.963,5597,3.963,5598,3.963,5599,3.963,5600,3.963,5601,3.963,5602,3.963,5603,3.963,5604,5.771,5605,3.963,5606,3.963,5607,3.963,5608,3.963,5609,3.963,5610,8.563,5611,3.963,5612,3.963,5613,3.963,5614,3.963,5615,3.963,5616,3.963,5617,3.963,5618,3.963,5619,3.963,5620,3.963,5621,3.963,5622,3.963,5623,3.963,5624,3.963,5625,3.963,5626,3.963,5627,3.963,5628,3.963,5629,3.963,5630,5.771,5631,3.963,5632,3.963,5633,5.771,5634,3.963,5635,3.963,5636,5.771,5637,3.963,5638,5.771,5639,3.963,5640,5.771,5641,5.771,5642,3.963,5643,3.963,5644,5.771,5645,3.963,5646,3.963,5647,3.963,5648,3.963,5649,3.963,5650,3.963,5651,3.963,5652,3.963,5653,3.963,5654,3.963,5655,3.963,5656,3.963,5657,3.963,5658,3.963,5659,3.963,5660,3.963,5661,5.771,5662,3.963,5663,3.963,5664,3.963,5665,3.963,5666,5.771,5667,3.963,5668,3.963,5669,3.963,5670,3.963,5671,3.963,5672,3.963,5673,3.963,5674,3.963,5675,3.963,5676,3.963,5677,3.963,5678,3.963,5679,3.963,5680,3.963,5681,3.963,5682,3.963,5683,3.963,5684,3.963,5685,3.963,5686,3.963,5687,3.963,5688,3.963,5689,3.963,5690,3.963,5691,3.963,5692,3.963,5693,3.963,5694,3.963,5695,3.963,5696,5.771,5697,5.771,5698,3.963,5699,3.963]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1272,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":5604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":5307,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":5317,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":5330,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":5335,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":5337,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":5338,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":5311,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":5305,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":5306,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":5308,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":5315,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":5329,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":5310,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":5304,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":5314,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":4979,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":1065,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01301c9",{"_index":4661,"title":{},"body":{"changelog.html":{}}}],["01t00:30:00z",{"_index":5694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":4500,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":4483,"title":{},"body":{"changelog.html":{}}}],["03600f8",{"_index":4612,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":4991,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1427,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["04082d7",{"_index":5073,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":4551,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":4549,"title":{},"body":{"changelog.html":{}}}],["06dcc23",{"_index":4520,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":4463,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1303,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["0848443",{"_index":5220,"title":{},"body":{"changelog.html":{}}}],["08f1679",{"_index":4662,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":4836,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":5033,"title":{},"body":{"changelog.html":{}}}],["0b6d16a",{"_index":4560,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":4851,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1547,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":4870,"title":{},"body":{"changelog.html":{}}}],["0eb60f2",{"_index":4471,"title":{},"body":{"changelog.html":{}}}],["0fe8b4d",{"_index":4603,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":1480,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":611,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":5286,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":5283,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":5281,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":5277,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":4976,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":4969,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":4961,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":4944,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":4936,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":4913,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":4912,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":4906,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":4897,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":4895,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":4890,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":4885,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":4881,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":5274,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":4877,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":4873,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":4872,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":4867,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":4863,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":4845,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":4837,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":4835,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":4827,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":4770,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":4720,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":4751,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":5268,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":4747,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":4736,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":4735,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":4721,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":4729,"title":{},"body":{"changelog.html":{}}}],["1.32.0",{"_index":4719,"title":{},"body":{"changelog.html":{}}}],["1.33.0",{"_index":4624,"title":{},"body":{"changelog.html":{}}}],["1.33.1",{"_index":4617,"title":{},"body":{"changelog.html":{}}}],["1.34.0",{"_index":4609,"title":{},"body":{"changelog.html":{}}}],["1.35.0",{"_index":4606,"title":{},"body":{"changelog.html":{}}}],["1.36.0",{"_index":4600,"title":{},"body":{"changelog.html":{}}}],["1.37.0",{"_index":4585,"title":{},"body":{"changelog.html":{}}}],["1.38.0",{"_index":4581,"title":{},"body":{"changelog.html":{}}}],["1.38.1",{"_index":4576,"title":{},"body":{"changelog.html":{}}}],["1.38.2",{"_index":4572,"title":{},"body":{"changelog.html":{}}}],["1.38.3",{"_index":4570,"title":{},"body":{"changelog.html":{}}}],["1.39.0",{"_index":4550,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":5265,"title":{},"body":{"changelog.html":{}}}],["1.40.0",{"_index":4511,"title":{},"body":{"changelog.html":{}}}],["1.40.1",{"_index":4510,"title":{},"body":{"changelog.html":{}}}],["1.41.0",{"_index":4502,"title":{},"body":{"changelog.html":{}}}],["1.42.0",{"_index":4482,"title":{},"body":{"changelog.html":{}}}],["1.43.0",{"_index":4469,"title":{},"body":{"changelog.html":{}}}],["1.43.1",{"_index":4466,"title":{},"body":{"changelog.html":{}}}],["1.43.2",{"_index":4465,"title":{},"body":{"changelog.html":{}}}],["1.44.0",{"_index":4437,"title":{},"body":{"changelog.html":{}}}],["1.45.0",{"_index":4422,"title":{},"body":{"changelog.html":{}}}],["1.46.0",{"_index":4384,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.5.0",{"_index":5262,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":5260,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":5237,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":5234,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":5206,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":5202,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":5199,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":5196,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":5191,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":5189,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":5182,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":5180,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":5231,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":5229,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":5226,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":5224,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":5221,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":5217,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":5214,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":5211,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":5177,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":5173,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":5133,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":5129,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":5127,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":5158,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":5155,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":5153,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":5149,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":5146,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":5143,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":5140,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":5136,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":5115,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":5113,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":5111,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":5005,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":609,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1355,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1344,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":799,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["10000",{"_index":5644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":4821,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1582,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1538,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["109d081",{"_index":4564,"title":{},"body":{"changelog.html":{}}}],["10})@column({type",{"_index":1512,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":800,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":3315,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["113e98b",{"_index":4616,"title":{},"body":{"changelog.html":{}}}],["115",{"_index":4829,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":4805,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":4807,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":4803,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":4462,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":4833,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":1315,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":1292,"title":{},"body":{"entities/DbContribution.html":{}}}],["1225197",{"_index":4692,"title":{},"body":{"changelog.html":{}}}],["12345678",{"_index":1231,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["12345678})@primarycolumn('bigint",{"_index":1215,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["124",{"_index":4813,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":4817,"title":{},"body":{"changelog.html":{}}}],["128",{"_index":4768,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":4582,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":4766,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":4764,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":1859,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["133'})@column({type",{"_index":1844,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["135",{"_index":4749,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":4745,"title":{},"body":{"changelog.html":{}}}],["138",{"_index":4588,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":1089,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1296,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1285,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1381,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1401,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":1067,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["13db3c6",{"_index":4488,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":4438,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":4742,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":4730,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":4733,"title":{},"body":{"changelog.html":{}}}],["147",{"_index":4659,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":5052,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":1316,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":4724,"title":{},"body":{"changelog.html":{}}}],["151",{"_index":4726,"title":{},"body":{"changelog.html":{}}}],["154",{"_index":4702,"title":{},"body":{"changelog.html":{}}}],["155",{"_index":4660,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":5001,"title":{},"body":{"changelog.html":{}}}],["157",{"_index":4712,"title":{},"body":{"changelog.html":{}}}],["158",{"_index":4663,"title":{},"body":{"changelog.html":{}}}],["159",{"_index":4714,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":1277,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":4423,"title":{},"body":{"changelog.html":{}}}],["161",{"_index":4622,"title":{},"body":{"changelog.html":{}}}],["164",{"_index":4611,"title":{},"body":{"changelog.html":{}}}],["165",{"_index":4615,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":5257,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":5030,"title":{},"body":{"changelog.html":{}}}],["168",{"_index":4607,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":4789,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":4414,"title":{},"body":{"changelog.html":{}}}],["170",{"_index":4604,"title":{},"body":{"changelog.html":{}}}],["171",{"_index":4602,"title":{},"body":{"changelog.html":{}}}],["173",{"_index":4598,"title":{},"body":{"changelog.html":{}}}],["176",{"_index":4594,"title":{},"body":{"changelog.html":{}}}],["177",{"_index":4591,"title":{},"body":{"changelog.html":{}}}],["177882b",{"_index":4412,"title":{},"body":{"changelog.html":{}}}],["179",{"_index":4583,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":5120,"title":{},"body":{"changelog.html":{}}}],["17d7725",{"_index":4668,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":4409,"title":{},"body":{"changelog.html":{}}}],["182",{"_index":4579,"title":{},"body":{"changelog.html":{}}}],["185",{"_index":4574,"title":{},"body":{"changelog.html":{}}}],["189",{"_index":4552,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":1066,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["190",{"_index":4567,"title":{},"body":{"changelog.html":{}}}],["191",{"_index":4559,"title":{},"body":{"changelog.html":{}}}],["192",{"_index":4555,"title":{},"body":{"changelog.html":{}}}],["195",{"_index":4563,"title":{},"body":{"changelog.html":{}}}],["196",{"_index":1616,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1605,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["198",{"_index":4536,"title":{},"body":{"changelog.html":{}}}],["199",{"_index":4527,"title":{},"body":{"changelog.html":{}}}],["1bbeaf6",{"_index":5087,"title":{},"body":{"changelog.html":{}}}],["1c3378e",{"_index":4664,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":5004,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":4892,"title":{},"body":{"changelog.html":{}}}],["1fca4b0",{"_index":4407,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":1338,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":807,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":2698,"title":{},"body":{"controllers/PullRequestController.html":{},"index.html":{}}}],["2.build",{"_index":5410,"title":{},"body":{"index.html":{}}}],["2/3",{"_index":5316,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1369,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["200",{"_index":4540,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":4517,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":1284,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["202",{"_index":2628,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["2022",{"_index":1302,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["2023",{"_index":1064,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"license.html":{}}}],["20491d8",{"_index":4677,"title":{},"body":{"changelog.html":{}}}],["205",{"_index":4546,"title":{},"body":{"changelog.html":{}}}],["207",{"_index":4529,"title":{},"body":{"changelog.html":{}}}],["2073883",{"_index":4989,"title":{},"body":{"changelog.html":{}}}],["208",{"_index":4522,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":5145,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":5154,"title":{},"body":{"changelog.html":{}}}],["20d1957",{"_index":4435,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":4573,"title":{},"body":{"changelog.html":{}}}],["210",{"_index":4534,"title":{},"body":{"changelog.html":{}}}],["211",{"_index":4531,"title":{},"body":{"changelog.html":{}}}],["214",{"_index":4505,"title":{},"body":{"changelog.html":{}}}],["216",{"_index":4508,"title":{},"body":{"changelog.html":{}}}],["217",{"_index":4495,"title":{},"body":{"changelog.html":{}}}],["219",{"_index":4493,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":4402,"title":{},"body":{"changelog.html":{}}}],["227",{"_index":4484,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":1317,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1528,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1531,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1305,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:39.000000",{"_index":1485,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":1471,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":5235,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":4391,"title":{},"body":{"changelog.html":{}}}],["230",{"_index":4490,"title":{},"body":{"changelog.html":{}}}],["232",{"_index":4487,"title":{},"body":{"changelog.html":{}}}],["233",{"_index":4498,"title":{},"body":{"changelog.html":{}}}],["234343",{"_index":2973,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":2971,"title":{},"body":{"classes/RepoInfo.html":{}}}],["236",{"_index":4470,"title":{},"body":{"changelog.html":{}}}],["237133",{"_index":1327,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":1421,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["237133})@column('bigint",{"_index":1782,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":1359,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1322,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":1383,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["238",{"_index":4473,"title":{},"body":{"changelog.html":{}}}],["239",{"_index":4480,"title":{},"body":{"changelog.html":{}}}],["23b2a83",{"_index":4697,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":4386,"title":{},"body":{"changelog.html":{}}}],["242",{"_index":4440,"title":{},"body":{"changelog.html":{}}}],["244",{"_index":4452,"title":{},"body":{"changelog.html":{}}}],["245",{"_index":4442,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":5051,"title":{},"body":{"changelog.html":{}}}],["248",{"_index":4449,"title":{},"body":{"changelog.html":{}}}],["249",{"_index":4447,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1398,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["250",{"_index":959,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":5427,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":5422,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":945,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["251",{"_index":4445,"title":{},"body":{"changelog.html":{}}}],["255",{"_index":1206,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"changelog.html":{}}}],["256",{"_index":4428,"title":{},"body":{"changelog.html":{}}}],["257",{"_index":4431,"title":{},"body":{"changelog.html":{}}}],["259",{"_index":4434,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":4728,"title":{},"body":{"changelog.html":{}}}],["260",{"_index":4424,"title":{},"body":{"changelog.html":{}}}],["263",{"_index":4420,"title":{},"body":{"changelog.html":{}}}],["265",{"_index":4417,"title":{},"body":{"changelog.html":{}}}],["266",{"_index":4411,"title":{},"body":{"changelog.html":{}}}],["267",{"_index":4399,"title":{},"body":{"changelog.html":{}}}],["268",{"_index":4394,"title":{},"body":{"changelog.html":{}}}],["26f0f76",{"_index":4499,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":4970,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["270",{"_index":4406,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":5301,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":5280,"title":{},"body":{"changelog.html":{}}}],["275",{"_index":4388,"title":{},"body":{"changelog.html":{}}}],["27e2e8f",{"_index":4460,"title":{},"body":{"changelog.html":{}}}],["27f5115",{"_index":4474,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":1304,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"overview.html":{}}}],["286e864",{"_index":4812,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":1486,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":1463,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28a3b76",{"_index":4605,"title":{},"body":{"changelog.html":{}}}],["28f6699",{"_index":4743,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":4569,"title":{},"body":{"changelog.html":{}}}],["293c4d3",{"_index":4757,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":5024,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":5049,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":5293,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":5195,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":4880,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":4765,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":4894,"title":{},"body":{"changelog.html":{}}}],["2ee076b",{"_index":4673,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":5042,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":5568,"title":{},"body":{"overview.html":{}}}],["3.5",{"_index":5671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":5419,"title":{},"body":{"index.html":{}}}],["30",{"_index":809,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["3000",{"_index":5613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":5434,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":812,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":4501,"title":{},"body":{"changelog.html":{}}}],["31333",{"_index":1374,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31333})@column({type",{"_index":1362,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31e4d60",{"_index":5139,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1845,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{},"overview.html":{}}}],["3282435",{"_index":5057,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":5026,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":5230,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":5282,"title":{},"body":{"changelog.html":{}}}],["3549897",{"_index":4608,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":4799,"title":{},"body":{"changelog.html":{}}}],["35d4f6b",{"_index":4441,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":4954,"title":{},"body":{"changelog.html":{}}}],["365",{"_index":5405,"title":{},"body":{"index.html":{}}}],["37",{"_index":4918,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":5062,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":4919,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":4737,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":5566,"title":{},"body":{"overview.html":{}}}],["3918a78",{"_index":5251,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":4826,"title":{},"body":{"changelog.html":{}}}],["39e7ff4",{"_index":4530,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":4917,"title":{},"body":{"changelog.html":{}}}],["3d2b7eb",{"_index":4643,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":2286,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":4940,"title":{},"body":{"changelog.html":{}}}],["411c595",{"_index":4496,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":4938,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":991,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1707,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":977,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":4205,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["43",{"_index":4943,"title":{},"body":{"changelog.html":{}}}],["43311",{"_index":1857,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["43311})@column({type",{"_index":1837,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["436f2db",{"_index":4683,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1543,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["452a769",{"_index":4541,"title":{},"body":{"changelog.html":{}}}],["4552c66",{"_index":5123,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":4981,"title":{},"body":{"changelog.html":{}}}],["47",{"_index":5567,"title":{},"body":{"overview.html":{}}}],["475e5dd",{"_index":4772,"title":{},"body":{"changelog.html":{}}}],["47dc78b",{"_index":4646,"title":{},"body":{"changelog.html":{}}}],["480aab6",{"_index":4429,"title":{},"body":{"changelog.html":{}}}],["4828464",{"_index":4528,"title":{},"body":{"changelog.html":{}}}],["487c1a2",{"_index":4595,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":1328,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1324,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["4b264d5",{"_index":4984,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":4990,"title":{},"body":{"changelog.html":{}}}],["4c7261b",{"_index":4389,"title":{},"body":{"changelog.html":{}}}],["4deaadd",{"_index":4727,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1597,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":4186,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":3588,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":797,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1367,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5238f58",{"_index":4666,"title":{},"body":{"changelog.html":{}}}],["5385049",{"_index":4924,"title":{},"body":{"changelog.html":{}}}],["5432",{"_index":5429,"title":{},"body":{"index.html":{}}}],["544673a",{"_index":4731,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":4910,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":4971,"title":{},"body":{"changelog.html":{}}}],["56eb3bd",{"_index":4556,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":4902,"title":{},"body":{"changelog.html":{}}}],["5736810",{"_index":992,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":980,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["57568598",{"_index":1265,"title":{},"body":{"entities/DbCommits.html":{}}}],["57568598})@column({type",{"_index":1251,"title":{},"body":{"entities/DbCommits.html":{}}}],["58",{"_index":4904,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":4791,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":5294,"title":{},"body":{"changelog.html":{}}}],["58e4723",{"_index":4509,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":5047,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":5020,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":4862,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":4866,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":5289,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443",{"_index":747,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@column({type",{"_index":1258,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@isstring",{"_index":745,"title":{},"body":{"classes/CommitsDto.html":{}}}],["5eddeb1",{"_index":5164,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":4762,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":5248,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":4856,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":1525,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":5264,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":2721,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":4740,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1584,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1560,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":5055,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":5072,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":5259,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":5126,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":4891,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":5271,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":4953,"title":{},"body":{"changelog.html":{}}}],["638f9ec",{"_index":4558,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":5168,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":4893,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":4905,"title":{},"body":{"changelog.html":{}}}],["64d869f",{"_index":4651,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":4888,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":4797,"title":{},"body":{"changelog.html":{}}}],["670e3f9",{"_index":4400,"title":{},"body":{"changelog.html":{}}}],["672ea80",{"_index":4690,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":5135,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":4883,"title":{},"body":{"changelog.html":{}}}],["69319cc",{"_index":4450,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":5094,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":5100,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":4960,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":4860,"title":{},"body":{"changelog.html":{}}}],["6cf8091",{"_index":4436,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":5142,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":4778,"title":{},"body":{"changelog.html":{}}}],["6fa4a7d",{"_index":4636,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":962,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["70a6e7b",{"_index":4671,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":1228,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["71359796})@column",{"_index":1609,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["71359796})@column({type",{"_index":1300,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn('bigint",{"_index":1213,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{}}}],["71359796})@primarycolumn({type",{"_index":1473,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["71a164d",{"_index":4589,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":4879,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":5082,"title":{},"body":{"changelog.html":{}}}],["7338f09",{"_index":4657,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":5285,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":4875,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":4957,"title":{},"body":{"changelog.html":{}}}],["758b2d2",{"_index":4506,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":4725,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":4868,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":4767,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":5210,"title":{},"body":{"changelog.html":{}}}],["78133",{"_index":993,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@column({type",{"_index":1364,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":982,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":1016,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":5161,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":5148,"title":{},"body":{"changelog.html":{}}}],["7c846ec",{"_index":4654,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":4900,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":5297,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":4748,"title":{},"body":{"changelog.html":{}}}],["7e29c6e",{"_index":4669,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":5201,"title":{},"body":{"changelog.html":{}}}],["7f618bf",{"_index":4537,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":5236,"title":{},"body":{"changelog.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":947,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["80",{"_index":5678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["802fd4b",{"_index":4523,"title":{},"body":{"changelog.html":{}}}],["8080:3001",{"_index":5460,"title":{},"body":{"index.html":{}}}],["80a866f",{"_index":4698,"title":{},"body":{"changelog.html":{}}}],["81",{"_index":4865,"title":{},"body":{"changelog.html":{}}}],["81d7777",{"_index":4455,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":5246,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":4734,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":4853,"title":{},"body":{"changelog.html":{}}}],["83fe57d",{"_index":4709,"title":{},"body":{"changelog.html":{}}}],["84af9ff",{"_index":4547,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":4818,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":5084,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":5066,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":4806,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":4849,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":4850,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":4995,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":5176,"title":{},"body":{"changelog.html":{}}}],["88bc55a",{"_index":4485,"title":{},"body":{"changelog.html":{}}}],["88e08d2",{"_index":4632,"title":{},"body":{"changelog.html":{}}}],["88e0adc",{"_index":4715,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":4811,"title":{},"body":{"changelog.html":{}}}],["892ef0f",{"_index":4453,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":5090,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":4896,"title":{},"body":{"changelog.html":{}}}],["8a2cba4",{"_index":4468,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":5233,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":4814,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":4857,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":2558,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":813,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":5208,"title":{},"body":{"changelog.html":{}}}],["9134f41",{"_index":4518,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":4854,"title":{},"body":{"changelog.html":{}}}],["9427269",{"_index":4592,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":4746,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":5070,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":5213,"title":{},"body":{"changelog.html":{}}}],["94dbf47",{"_index":4425,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":5010,"title":{},"body":{"changelog.html":{}}}],["971adeb",{"_index":4695,"title":{},"body":{"changelog.html":{}}}],["9876543",{"_index":1267,"title":{},"body":{"entities/DbCommits.html":{}}}],["9876543})@column({type",{"_index":1256,"title":{},"body":{"entities/DbCommits.html":{}}}],["9895327",{"_index":4920,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":4788,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":4927,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":4750,"title":{},"body":{"changelog.html":{}}}],["9b75deb",{"_index":4532,"title":{},"body":{"changelog.html":{}}}],["9bee970",{"_index":4675,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":4858,"title":{},"body":{"changelog.html":{}}}],["9ca3e9b",{"_index":4494,"title":{},"body":{"changelog.html":{}}}],["9f75a41",{"_index":4535,"title":{},"body":{"changelog.html":{}}}],["9fc3be7",{"_index":4713,"title":{},"body":{"changelog.html":{}}}],["_stripe",{"_index":3303,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":1936,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["a057e0e",{"_index":4705,"title":{},"body":{"changelog.html":{}}}],["a08abfd",{"_index":5050,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":5252,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":4939,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":5160,"title":{},"body":{"changelog.html":{}}}],["a398b89",{"_index":4599,"title":{},"body":{"changelog.html":{}}}],["a46bd58",{"_index":4443,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":4794,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":5128,"title":{},"body":{"changelog.html":{}}}],["abb24de",{"_index":4644,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":4945,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":5534,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":5269,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":5267,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":3567,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"changelog.html":{},"index.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":3565,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":1724,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1462,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1457,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":3627,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1410,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":5209,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":2544,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":2342,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["account",{"_index":4578,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":4653,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":4649,"title":{},"body":{"changelog.html":{}}}],["active",{"_index":1702,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1701,"title":{},"body":{"entities/DbSubscription.html":{}}}],["actual",{"_index":5384,"title":{},"body":{"index.html":{}}}],["ad2c624",{"_index":4568,"title":{},"body":{"changelog.html":{}}}],["adapter",{"_index":4930,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":2198,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"index.html":{}}}],["addafeaturedhighlight",{"_index":2197,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addcustomer",{"_index":1136,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":3306,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":1142,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1511,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addfeatured",{"_index":3895,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":3910,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":2855,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":3992,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":3837,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":3820,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":3829,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2414,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2421,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":3821,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":4078,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":3836,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":4067,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":2326,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":4011,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":2335,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2387,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2392,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":4864,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":1488,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":4013,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":842,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":844,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":2839,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":3060,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":3064,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":2857,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["adds",{"_index":3101,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":2067,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["addselect(\"array_agg(users.login",{"_index":3989,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(emoji_id",{"_index":3988,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2365,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":2854,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":4371,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":2845,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":2847,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":3782,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":3943,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":2363,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect((qb",{"_index":3033,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":2773,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addusercollaboration",{"_index":3618,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":3622,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":3667,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":3752,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":3760,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":4133,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":4141,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":3896,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":3912,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":4134,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(highlightid",{"_index":4143,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":3897,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":3914,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreactionnotification",{"_index":4135,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreactionnotification(userid",{"_index":4145,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification",{"_index":4136,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":4147,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":4215,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":4219,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":4972,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":5254,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":3560,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":3596,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":5468,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":5058,"title":{},"body":{"changelog.html":{}}}],["ae44652",{"_index":4701,"title":{},"body":{"changelog.html":{}}}],["ae5415b",{"_index":4421,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":4963,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":5125,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":4775,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":5194,"title":{},"body":{"changelog.html":{}}}],["ai.module",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":2497,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":544,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":579,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["ai.service.ts:10",{"_index":2499,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":2500,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["alias",{"_index":3014,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5586,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":3018,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":3020,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":3019,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":3021,"title":{},"body":{"injectables/RepoService.html":{}}}],["aligns",{"_index":4426,"title":{},"body":{"changelog.html":{}}}],["all_prs",{"_index":1458,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":5625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":4618,"title":{},"body":{"changelog.html":{}}}],["allow_promotion_codes",{"_index":3322,"title":{},"body":{"injectables/StripeService.html":{}}}],["along",{"_index":5011,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":4790,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":4718,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":4838,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":4717,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":4716,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":4844,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":4843,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":4842,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":4841,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":4840,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":4839,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":3089,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["analyze",{"_index":559,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["and/or",{"_index":5526,"title":{},"body":{"license.html":{}}}],["ands",{"_index":1940,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":3072,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["andwhere(\"insight_members.access",{"_index":2362,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":2361,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"pull_requests.updated_at",{"_index":2875,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":3291,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":3263,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":3458,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":4373,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":3777,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":3779,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":3996,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":3995,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":4161,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(`now",{"_index":2844,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":2868,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":3071,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":2950,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":2963,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":551,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["api",{"_index":4404,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":5322,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":5358,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":5461,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":5379,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":2615,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apibadrequestresponse",{"_index":509,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apibody",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":3107,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":5117,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":5623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1224,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1234,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1290,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1247,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1208,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":5666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1221,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":1202,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional",{"_index":1313,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1279,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse",{"_index":866,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbbakedrepo",{"_index":2632,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommitauthors",{"_index":2641,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommits",{"_index":2648,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":2895,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1903,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":1986,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":4076,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":4036,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":2712,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":877,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":2923,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":3647,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2238,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2251,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":485,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":471,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":2510,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":815,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":2098,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":810,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":792,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":798,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":2095,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiservicesmodule",{"_index":1,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"authentication",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"blog",{"_index":518,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["apitags(\"contributors",{"_index":875,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":1902,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":1979,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":2154,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2236,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":2315,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"issue",{"_index":2455,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["apitags(\"pizza",{"_index":2624,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apitags(\"pull",{"_index":637,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":2893,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":3377,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":3646,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitoken",{"_index":2081,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":2308,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":4032,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":3314,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":4476,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["appearing",{"_index":5075,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":5432,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":602,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":2938,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applydecorators",{"_index":5622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applypagination",{"_index":2560,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":2561,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":2934,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":2936,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":26,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1640,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":5013,"title":{},"body":{"changelog.html":{}}}],["apt",{"_index":2464,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1576,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":5558,"title":{},"body":{"license.html":{}}}],["array",{"_index":1007,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":4080,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":5222,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1920,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":5480,"title":{},"body":{"index.html":{}}}],["assign",{"_index":5215,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":1514,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1489,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1490,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":5517,"title":{},"body":{"license.html":{}}}],["associating",{"_index":4901,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":5275,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":5006,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/dtos/user",{"_index":4270,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":510,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["auth/supabase.user.decorator",{"_index":2229,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authcontroller",{"_index":271,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authed",{"_index":4533,"title":{},"body":{"changelog.html":{}}}],["authenticate",{"_index":3514,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":3517,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["authguard",{"_index":3511,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":3512,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":29,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":702,"title":{},"body":{"classes/CommitAuthorDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/PizzaOvenController.html":{},"changelog.html":{},"properties.html":{}}}],["author/:id",{"_index":2651,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author/:id')@apioperation({operationid",{"_index":2606,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author_avatar",{"_index":1491,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_email",{"_index":700,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["author_login",{"_index":1492,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{}}}],["authorization",{"_index":599,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":2298,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":2597,"title":{},"body":{"controllers/PizzaOvenController.html":{},"license.html":{}}}],["authors.service",{"_index":2621,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["authors.service.ts",{"_index":708,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["authors.service.ts:11",{"_index":714,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:18",{"_index":716,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:24",{"_index":719,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:35",{"_index":721,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors/:id",{"_index":2636,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/:id')@apioperation({operationid",{"_index":2585,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list",{"_index":2640,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list')@apioperation({operationid",{"_index":2596,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authuser${relation",{"_index":3056,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":3057,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":5564,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1515,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1591,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1573,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":5022,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":4942,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":5157,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":5190,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":4999,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":5060,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":5273,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":5152,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":5258,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":5223,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":5063,"title":{},"body":{"changelog.html":{}}}],["b8e8c88",{"_index":4580,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":4915,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":4876,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":5014,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":5181,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":1477,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":5571,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":4656,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":5044,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":5119,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":508,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bag",{"_index":4665,"title":{},"body":{"changelog.html":{}}}],["bake",{"_index":2573,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["baked",{"_index":1211,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{}}}],["baked_repo",{"_index":1242,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits",{"_index":1266,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits)@joincolumn({name",{"_index":1248,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo_id",{"_index":1243,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repos",{"_index":1226,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["bakedreporepository",{"_index":2665,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakeoptionsinfo",{"_index":2614,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["bakerepodto",{"_index":465,"title":{"classes/BakeRepoDto.html":{}},"body":{"classes/BakeRepoDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["bakerepoinfo",{"_index":2672,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.url",{"_index":2678,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.wait",{"_index":2679,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["baking",{"_index":482,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["based",{"_index":660,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":1217,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":2997,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":3003,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":5249,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":709,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":5171,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":5278,"title":{},"body":{"changelog.html":{}}}],["bb26d27",{"_index":4687,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":5179,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":4889,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":5240,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":4869,"title":{},"body":{"changelog.html":{}}}],["bda124c",{"_index":4464,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":1051,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column('text",{"_index":1558,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["bdougie'})@column({type",{"_index":1762,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring",{"_index":1048,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2793,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":4822,"title":{},"body":{"changelog.html":{}}}],["bearer",{"_index":600,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["beautiful",{"_index":4925,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":4723,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":5439,"title":{},"body":{"index.html":{}}}],["below",{"_index":547,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["beneficial",{"_index":5441,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":4419,"title":{},"body":{"changelog.html":{}}}],["beta.10",{"_index":5110,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":5109,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":5108,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":5107,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":5106,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":5105,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":5104,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":5103,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":5102,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":5101,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":4413,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":4408,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":4401,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":4396,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":4390,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":4385,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.8",{"_index":4461,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":4548,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":5359,"title":{},"body":{"index.html":{}}}],["better",{"_index":4955,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":4947,"title":{},"body":{"changelog.html":{}}}],["bffc229",{"_index":4418,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":1252,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":3320,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":5363,"title":{},"body":{"index.html":{}}}],["bio",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["bits",{"_index":5474,"title":{},"body":{"index.html":{}}}],["blocking",{"_index":4759,"title":{},"body":{"changelog.html":{}}}],["blog",{"_index":512,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"changelog.html":{},"coverage.html":{}}}],["blog'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":502,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blog_post",{"_index":1079,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["blogmarkdown",{"_index":926,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["blogs",{"_index":493,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blogs/issue",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["blogsummarycontroller",{"_index":490,"title":{"controllers/BlogSummaryController.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"coverage.html":{}}}],["blogsummarymodule",{"_index":30,"title":{"modules/BlogSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsummaryservice",{"_index":514,"title":{"injectables/BlogSummaryService.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["blogtitle",{"_index":927,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["body.interests",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":478,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":5332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":2135,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1295,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":5466,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":5018,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":1430,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5562,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5560,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":2130,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["bugs",{"_index":5580,"title":{},"body":{"properties.html":{}}}],["build",{"_index":4514,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":731,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builder/selectquerybuilder",{"_index":2565,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["building",{"_index":4613,"title":{},"body":{"changelog.html":{}}}],["builds",{"_index":5458,"title":{},"body":{"index.html":{}}}],["business",{"_index":5447,"title":{},"body":{"index.html":{}}}],["c",{"_index":5509,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":4834,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":5188,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":5192,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":5244,"title":{},"body":{"changelog.html":{}}}],["c292277",{"_index":4584,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":4911,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":4760,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":4855,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":5061,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":4783,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":4808,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":4753,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":4038,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":2075,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":2078,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":1682,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1670,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1671,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":3328,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1686,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1672,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":4043,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":2327,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":2340,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":4916,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":4819,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":3319,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":4793,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":5440,"title":{},"body":{"index.html":{}}}],["catch",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":5255,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":5287,"title":{},"body":{"changelog.html":{}}}],["cc0b4de",{"_index":4448,"title":{},"body":{"changelog.html":{}}}],["cc2a57c",{"_index":4395,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":5198,"title":{},"body":{"changelog.html":{}}}],["cc526bc",{"_index":4491,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":5225,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":5132,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":4903,"title":{},"body":{"changelog.html":{}}}],["certificate",{"_index":5641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":5395,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":5391,"title":{},"body":{"index.html":{}}}],["cfe2a69",{"_index":4804,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":4554,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":1524,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1493,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":4379,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":4382,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channel",{"_index":5501,"title":{},"body":{"index.html":{}}}],["character",{"_index":1204,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":550,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5514,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":576,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["check",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":4231,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":4246,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":5478,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":3373,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":3432,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":3437,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":3434,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":3435,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":2343,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":3802,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["chinese",{"_index":941,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":580,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":2128,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["churned",{"_index":892,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"changelog.html":{}}}],["ci",{"_index":4516,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":5433,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5552,"title":{},"body":{"license.html":{}}}],["class",{"_index":23,"title":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["classes",{"_index":466,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":2288,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":1192,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2285,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":5056,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1593,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1571,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":5485,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":2275,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5573,"title":{},"body":{"properties.html":{}}}],["clone",{"_index":473,"title":{},"body":{"classes/BakeRepoDto.html":{},"entities/DbBakedRepo.html":{}}}],["clone_url",{"_index":1200,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["close",{"_index":1527,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1586,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1569,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1494,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":4658,"title":{},"body":{"changelog.html":{}}}],["cluster_apiservicesmodule",{"_index":4,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":5,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":6,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule",{"_index":524,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_exports",{"_index":525,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_imports",{"_index":526,"title":{},"body":{"modules/BlogSummaryModule.html":{}}}],["cluster_blogsummarymodule_providers",{"_index":527,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":768,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":770,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":769,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":771,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":918,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":919,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_customermodule",{"_index":1128,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":1130,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":1129,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1906,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1907,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":2012,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":2015,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":2014,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":2013,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2260,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2261,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2401,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2402,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2404,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2403,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule",{"_index":2458,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_exports",{"_index":2460,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_imports",{"_index":2461,"title":{},"body":{"modules/IssueSummaryModule.html":{}}}],["cluster_issuesummarymodule_providers",{"_index":2459,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":2474,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":2475,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":2476,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":2494,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":2495,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":2496,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule",{"_index":2653,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_exports",{"_index":2656,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_imports",{"_index":2654,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["cluster_pizzaovenmodule_providers",{"_index":2655,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":2781,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":2784,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":2782,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":2783,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":2928,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":2929,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":2930,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":2974,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":2977,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":2975,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":2976,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":3271,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":3272,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":3274,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":3273,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":3242,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":3245,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":3244,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":3243,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":3297,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":3299,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":3298,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":3332,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":3333,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":3334,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":3350,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":3351,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":3352,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":3438,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":3440,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":3439,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":3441,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":4111,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":4112,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":4114,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":4113,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":4206,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":4207,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":4209,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":4208,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":4342,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":4343,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":4345,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":4344,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":5408,"title":{},"body":{"index.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":3044,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"pull_requests\".\"id",{"_index":4299,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_follows\".\"id",{"_index":4294,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_highlights\".\"id",{"_index":4291,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":4283,"title":{},"body":{"injectables/UserService.html":{}}}],["code",{"_index":632,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":630,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1397,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":679,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":617,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codeexplanationservice",{"_index":634,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codename",{"_index":5600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":653,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":663,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codes",{"_index":4566,"title":{},"body":{"changelog.html":{}}}],["codetestsuggestioncontroller",{"_index":683,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codetestsuggestionservice",{"_index":691,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":1044,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":1731,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":1042,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":3624,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3639,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":4121,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":3616,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:110",{"_index":3640,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":3636,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":3633,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":3629,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":3644,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":1041,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":1049,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":3566,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":1047,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":1719,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:101",{"_index":1739,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:111",{"_index":1727,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:121",{"_index":1734,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:131",{"_index":1725,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":1728,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:36",{"_index":1743,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:43",{"_index":1737,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:51",{"_index":1741,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:59",{"_index":1736,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:70",{"_index":1733,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:81",{"_index":1738,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:91",{"_index":1726,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":3643,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":3662,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":3665,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":3669,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":3671,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":3668,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":3674,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":3673,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":3670,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":3654,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":1720,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":3631,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collection",{"_index":2526,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1546,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1218,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":1785,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1588,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1585,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1587,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1551,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1808,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":1043,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":5416,"title":{},"body":{"index.html":{}}}],["comment",{"_index":984,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["comments",{"_index":1030,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"entities/DbPullRequest.html":{},"injectables/IssueSummaryService.html":{},"changelog.html":{}}}],["commit",{"_index":701,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"changelog.html":{}}}],["commit_author",{"_index":1244,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits",{"_index":1268,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits)@joincolumn({name",{"_index":1254,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author_email",{"_index":1233,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_author_id",{"_index":1245,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_authors",{"_index":1240,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_authors.entity",{"_index":1264,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_date",{"_index":1246,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_hash",{"_index":742,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["commitauthordto",{"_index":698,"title":{"classes/CommitAuthorDto.html":{}},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["commitauthorservice",{"_index":2625,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["commitauthorsrepository",{"_index":715,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["commitauthorsservice",{"_index":706,"title":{"injectables/CommitAuthorsService.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["commitmessages",{"_index":2118,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["commits",{"_index":1201,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"index.html":{}}}],["commits.baked_repo",{"_index":1209,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["commits.commit_author",{"_index":1237,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commits.entity",{"_index":1225,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{}}}],["commits.service",{"_index":2622,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commitsdto",{"_index":740,"title":{"classes/CommitsDto.html":{}},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["commitsrepository",{"_index":755,"title":{},"body":{"injectables/CommitsService.html":{}}}],["commitsservice",{"_index":748,"title":{"injectables/CommitsService.html":{}},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["committing",{"_index":5469,"title":{},"body":{"index.html":{}}}],["common",{"_index":4800,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":832,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":867,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":2707,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":724,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{}}}],["common/dtos/page.dto",{"_index":727,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["common/filters/repo",{"_index":2760,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":2017,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["common/services/pager.service",{"_index":728,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["communication",{"_index":5393,"title":{},"body":{"index.html":{}}}],["community",{"_index":5494,"title":{},"body":{"index.html":{}}}],["company",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":5479,"title":{},"body":{"index.html":{}}}],["completely",{"_index":4776,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":5000,"title":{},"body":{"changelog.html":{}}}],["completion",{"_index":565,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":5673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5574,"title":{},"body":{"properties.html":{}}}],["component",{"_index":5270,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":1467,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":5165,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":5533,"title":{},"body":{"license.html":{}}}],["config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":5250,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":3470,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflict",{"_index":4682,"title":{},"body":{"changelog.html":{}}}],["conflictexception",{"_index":3259,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":4046,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":3266,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connect",{"_index":4577,"title":{},"body":{"changelog.html":{}}}],["connected_at",{"_index":4316,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["connection",{"_index":1878,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":4824,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":4777,"title":{},"body":{"changelog.html":{}}}],["console.error(\"openai",{"_index":573,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.log",{"_index":5059,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":4934,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":1096,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":1103,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":2553,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(bakedreporepository",{"_index":2662,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["constructor(commitauthorsrepository",{"_index":712,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["constructor(commitsrepository",{"_index":753,"title":{},"body":{"injectables/CommitsService.html":{}}}],["constructor(configservice",{"_index":2076,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":1102,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":825,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":1139,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":2503,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1912,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":2027,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":2331,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2389,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2418,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":2483,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":1165,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":534,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":2750,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":519,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["constructor(pullrequestrepository",{"_index":2815,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":3000,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":3280,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":3251,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":3447,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":4352,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":3341,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":2520,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":3664,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":3756,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":3906,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(usernotificationrepository",{"_index":4138,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":4216,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":4242,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":3591,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":5130,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["content",{"_index":561,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["contents",{"_index":5185,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":5697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":4512,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":5555,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":5489,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":1276,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":5487,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1282,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":775,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":776,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":31,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":788,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":791,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":779,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":827,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":1314,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":777,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":2878,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:23",{"_index":2889,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:40",{"_index":2886,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":3032,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":2987,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":772,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":821,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":921,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":873,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":1598,"title":{},"body":{"classes/DbPullRequestContributor.html":{},"coverage.html":{}}}],["contributor.dto.ts:14",{"_index":1600,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":1599,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.tolowercase",{"_index":2843,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/contributor.module",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":851,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributorinsightscontroller",{"_index":879,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributormodule",{"_index":32,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributors",{"_index":853,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["contributors/insights",{"_index":882,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller",{"_index":270,"title":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bake",{"_index":2623,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["controller(\"blogs",{"_index":517,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["controller(\"contributors",{"_index":874,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":908,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":1901,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":1978,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":2153,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2235,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":2314,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"issues",{"_index":2454,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["controller(\"prs",{"_index":636,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":2892,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":3378,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":3645,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":3743,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":3869,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":4034,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":4129,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":4196,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":3718,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":5496,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":4761,"title":{},"body":{"changelog.html":{}}}],["cool",{"_index":1045,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5528,"title":{},"body":{"license.html":{}}}],["copy",{"_index":5184,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":5508,"title":{},"body":{"license.html":{}}}],["corners",{"_index":2134,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["correct",{"_index":4655,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":4993,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":819,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["count(id",{"_index":3960,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["counting",{"_index":5079,"title":{},"body":{"changelog.html":{}}}],["counts",{"_index":4562,"title":{},"body":{"changelog.html":{}}}],["couple",{"_index":5475,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":5302,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":4103,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["create(createendorsementdto",{"_index":2031,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createblogsummarydto",{"_index":496,"title":{"classes/CreateBlogSummaryDto.html":{}},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["createcheckoutsession",{"_index":3304,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":3308,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3737,"title":{},"body":{"controllers/UserEndorsementController.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"index.html":{}}}],["created_at",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1311,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":1923,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":1931,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":967,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":3840,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":996,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":4083,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":4079,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":4084,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":3555,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":3554,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":3556,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":1018,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":4053,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createissuesummarydto",{"_index":1025,"title":{"classes/CreateIssueSummaryDto.html":{}},"body":{"classes/CreateIssueSummaryDto.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["createlog",{"_index":2482,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":2486,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":1032,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator((_data",{"_index":5696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repo",{"_index":3027,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":3043,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":3998,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":1039,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createuserhighlightdto",{"_index":1055,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":4878,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":1283,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["creator",{"_index":976,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":970,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctx",{"_index":2083,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":2085,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1689,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["current_month",{"_index":2864,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["current_period_end_at",{"_index":1673,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1674,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentmonthquery",{"_index":2860,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["currentrepoids",{"_index":4101,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":4106,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":4089,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":4093,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":4102,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":2479,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":1132,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":1133,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":3374,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":3376,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":3375,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":3380,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":33,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":1141,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1326,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":358,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":1093,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":5455,"title":{},"body":{"index.html":{}}}],["d",{"_index":5423,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":5054,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":4816,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":5068,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":5170,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":5002,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":5097,"title":{},"body":{"changelog.html":{}}}],["d3afb4b",{"_index":4640,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":4769,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":4861,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":5118,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":5553,"title":{},"body":{"license.html":{}}}],["data",{"_index":613,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["data).pipe(map((resp",{"_index":2683,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["data.choices[0]?.message.content",{"_index":615,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":130,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":905,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":5693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(confirmed_at",{"_index":4322,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.created_at",{"_index":4319,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":4320,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":3972,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":3878,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2279,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":1459,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/HighlightController.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":811,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["db",{"_index":1847,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["dbapiconfig",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbbakedrepo",{"_index":113,"title":{"entities/DbBakedRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["dbbakedrepo})@apinotfoundresponse({description",{"_index":2582,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbc66f3",{"_index":5053,"title":{},"body":{"changelog.html":{}}}],["dbcommitauthors",{"_index":116,"title":{"entities/DbCommitAuthors.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommitauthors})@apinotfoundresponse({description",{"_index":2586,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits",{"_index":118,"title":{"entities/DbCommits.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitsService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommits})@apinotfoundresponse({description",{"_index":2589,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcontribution",{"_index":103,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":2885,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":141,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":167,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1895,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":182,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":1934,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":1967,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbinsight",{"_index":133,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":165,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":4015,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":135,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":2296,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":151,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":172,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":156,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequestcontributor",{"_index":863,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":3703,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":111,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":3131,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":107,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":3087,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":109,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":3169,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":105,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":3206,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":2911,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbsubscription",{"_index":149,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbtopuser",{"_index":1713,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuser",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":179,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":3623,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":159,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":3964,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":169,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse",{"_index":1812,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":2221,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":3832,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1826,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":3854,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2200,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbusernotification",{"_index":177,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbuserrepo",{"_index":140,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":175,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":163,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":3808,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":2772,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":5114,"title":{},"body":{"changelog.html":{}}}],["de24c6b",{"_index":4446,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":4950,"title":{},"body":{"changelog.html":{}}}],["de83f90",{"_index":4432,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":4909,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":5518,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5559,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1098,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1106,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":2947,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":3955,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":5266,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["default",{"_index":789,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":3385,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":5640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["delete",{"_index":1970,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":2319,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/featured",{"_index":2248,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":3888,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":3116,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":3154,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":3191,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":3238,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":3119,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":3157,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":3193,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":3241,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":3815,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id",{"_index":2009,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":4063,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":2302,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":2225,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3845,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3084,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3129,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3167,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3204,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3093,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3135,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3172,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3209,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3805,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":1938,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":4025,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":1533,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":1270,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["deletedatecolumn",{"_index":1310,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":1924,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":2010,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":1937,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":3822,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":3841,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":3823,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":3844,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":1941,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":3898,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":3918,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":3899,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":3920,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":1380,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":1495,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":5166,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":4755,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":4707,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":4459,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deprecated",{"_index":4648,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":4645,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1227,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":2789,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":2724,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:22",{"_index":2728,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":2729,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":2117,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":2122,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":2126,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":2127,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":2125,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":2124,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":2121,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":2731,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":2734,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":2737,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":2736,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":2735,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":2105,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5572,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":4908,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["developer",{"_index":5174,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":4543,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["df56c4f",{"_index":4884,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":4771,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":4785,"title":{},"body":{"changelog.html":{}}}],["diff",{"_index":2119,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":2739,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["digital",{"_index":4628,"title":{},"body":{"changelog.html":{}}}],["diivi",{"_index":1825,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["direction.constant",{"_index":833,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":5346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":2741,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["directory",{"_index":5389,"title":{},"body":{"index.html":{}}}],["disable",{"_index":590,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{}}}],["discord",{"_index":3473,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["discord.find",{"_index":5497,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["disk",{"_index":2156,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":2152,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1336,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":3605,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":1330,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":2852,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["distribute",{"_index":5524,"title":{},"body":{"license.html":{}}}],["dit",{"_index":5462,"title":{},"body":{"index.html":{}}}],["do.dockerfile",{"_index":4458,"title":{},"body":{"changelog.html":{}}}],["doadmin",{"_index":5636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":995,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"changelog.html":{},"index.html":{}}}],["doc'})@column({type",{"_index":1371,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":989,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":4544,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":5368,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":4457,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dockerfile.local",{"_index":5414,"title":{},"body":{"index.html":{}}}],["docr",{"_index":5008,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":4521,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":5121,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["documentation",{"_index":4454,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":4383,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":5159,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["dot",{"_index":5569,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1437,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1431,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":5028,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":3249,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":3255,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":3278,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":3284,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":3123,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":3128,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":3124,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":3134,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":3078,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":3117,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":3083,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":3079,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":3092,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":3445,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":3451,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":3161,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":3166,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":3162,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":3171,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":4349,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":4356,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":3197,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":3239,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":3203,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":3198,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":3208,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1496,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["drop",{"_index":4525,"title":{},"body":{"changelog.html":{}}}],["dry",{"_index":5162,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dto/create",{"_index":1973,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos",{"_index":5086,"title":{},"body":{"changelog.html":{}}}],["dtos/baked",{"_index":2616,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["dtos/contribution",{"_index":836,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":511,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":2942,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":2234,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2431,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/page",{"_index":2567,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":2568,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":2709,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":2918,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":3716,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/update",{"_index":2309,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duplicated",{"_index":4526,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":2277,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":5319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":4439,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dutch",{"_index":939,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":4796,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":5039,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":5228,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":5172,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":4871,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":5031,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":4935,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":5089,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":4992,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":5276,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1092,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{}}}],["eba258a",{"_index":5122,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":5147,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":4830,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":5036,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":3559,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["ee86c56",{"_index":4481,"title":{},"body":{"changelog.html":{}}}],["email",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":4341,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":1335,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1909,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1899,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1789,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1888,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":3830,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":34,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1914,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1353,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1898,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["enable",{"_index":4542,"title":{},"body":{"changelog.html":{}}}],["encounter",{"_index":5438,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":5488,"title":{},"body":{"index.html":{}}}],["end",{"_index":676,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbSubscription.html":{},"injectables/UserService.html":{}}}],["ended_at",{"_index":1675,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":975,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":2019,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":3731,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":3738,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":3741,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":1974,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":969,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":978,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":981,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:26",{"_index":983,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:34",{"_index":986,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:41",{"_index":988,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:48",{"_index":990,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":1972,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":3742,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":1921,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":35,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":2029,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1373,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"changelog.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":2057,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":2055,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":2065,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":1971,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":1976,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpoint",{"_index":4416,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2158,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":2142,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":5295,"title":{},"body":{"changelog.html":{}}}],["english",{"_index":932,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":933,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["entire",{"_index":555,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"overview.html":{}}}],["entities.length",{"_index":2869,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities/baked",{"_index":2620,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["entities/commit_authors.entity",{"_index":729,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/commits.entity",{"_index":763,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/emoji.entity",{"_index":1900,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":1975,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/insight",{"_index":2352,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":2311,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":2708,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":2917,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/top",{"_index":3714,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user",{"_index":2233,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1197,"title":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":818,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":5342,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":793,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":4937,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":4823,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":5357,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":5692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1578,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":571,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":1108,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":616,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":3412,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":574,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":4676,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":3952,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":589,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":4809,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":4489,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":3422,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":3427,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":3431,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":4926,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":474,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["exception/responses",{"_index":4967,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["executioncontext",{"_index":2079,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":3883,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":3833,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":3085,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["existinguser",{"_index":4047,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":4052,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":4051,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":3384,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["experiment",{"_index":4637,"title":{},"body":{"changelog.html":{}}}],["experimental",{"_index":4670,"title":{},"body":{"changelog.html":{}}}],["explain",{"_index":5298,"title":{},"body":{"changelog.html":{}}}],["explanation",{"_index":628,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"changelog.html":{}}}],["explanation.controller",{"_index":2792,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":620,"title":{},"body":{"controllers/CodeExplanationController.html":{},"coverage.html":{}}}],["explanation.controller.ts:22",{"_index":631,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":633,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":2104,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["explanation.dto.ts:13",{"_index":2107,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":2109,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":2108,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":2106,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":635,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":643,"title":{},"body":{"injectables/CodeExplanationService.html":{},"coverage.html":{}}}],["explanation.service.ts:10",{"_index":648,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":647,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":645,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":5658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":22,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["exports",{"_index":18,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":5197,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":2274,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":5169,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":783,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":4415,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":3523,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":3537,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":3536,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":4933,"title":{},"body":{"changelog.html":{}}}],["f",{"_index":5413,"title":{},"body":{"index.html":{}}}],["f0304d4",{"_index":5112,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":5064,"title":{},"body":{"changelog.html":{}}}],["f212fb2",{"_index":4553,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":5092,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":4966,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":5078,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":5205,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":4786,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":4949,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":4975,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":5025,"title":{},"body":{"changelog.html":{}}}],["f73f891",{"_index":4681,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":4982,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":5032,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":5027,"title":{},"body":{"changelog.html":{}}}],["f9defe2",{"_index":4575,"title":{},"body":{"changelog.html":{}}}],["facilitate",{"_index":5387,"title":{},"body":{"index.html":{}}}],["fad79b1",{"_index":5015,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["false})@column('boolean",{"_index":1535,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1388,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1755,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":483,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":3577,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":4907,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":1387,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":4932,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":4968,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":5263,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":5017,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":5216,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":4848,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":4539,"title":{},"body":{"changelog.html":{}}}],["featured",{"_index":1749,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"changelog.html":{}}}],["featurehighlight",{"_index":2188,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":2195,"title":{},"body":{"controllers/HighlightController.html":{}}}],["features",{"_index":4387,"title":{},"body":{"changelog.html":{}}}],["fed79a1",{"_index":4708,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":4965,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":582,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"changelog.html":{}}}],["fetcher",{"_index":593,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":597,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":3852,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["fetching",{"_index":4590,"title":{},"body":{"changelog.html":{}}}],["ff434b5",{"_index":4623,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":4486,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":4852,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1523,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1822,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"changelog.html":{}}}],["filter((notification",{"_index":4163,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["filter.module",{"_index":2787,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":2932,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":2761,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":2933,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":2940,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:85",{"_index":2937,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":2941,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":4801,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":2088,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":860,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":2964,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":2955,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":2953,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":2949,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":2946,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":2768,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`repos.id",{"_index":2944,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filterservice",{"_index":2816,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2201,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":824,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":2924,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":828,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbakedrepos",{"_index":2661,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbakedrepos(pageoptionsdto",{"_index":2667,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbycontributor",{"_index":2807,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":2821,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":2022,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":2034,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":2879,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":2881,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":2023,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":2036,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":2880,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":2887,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoowneroruser",{"_index":2024,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":2038,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":1925,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":1944,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2415,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2424,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":4151,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallchurncontributors",{"_index":2808,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurncontributors(pageoptionsdto",{"_index":2823,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurnpullrequestcontributors",{"_index":883,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallchurnpullrequestcontributors(pageoptionsdto",{"_index":887,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallcommitauthors",{"_index":710,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitauthors(pageoptionsdto",{"_index":717,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitsbybakedrepoid",{"_index":750,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbybakedrepoid(pageoptionsdto",{"_index":757,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid",{"_index":751,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid(pageoptionsdto",{"_index":759,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcontributorswithfilters",{"_index":2809,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":2825,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":1890,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":1904,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1891,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":1926,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":1987,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":1950,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":1927,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":1952,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":1997,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":2041,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":3900,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":3924,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeaturedhighlights",{"_index":2189,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2242,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":2204,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfollowers",{"_index":3753,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowers(userid",{"_index":3764,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallhighlightreactions",{"_index":3901,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":3926,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":2190,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2252,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":2208,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":2191,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2239,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":2212,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":3687,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":3692,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":2328,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":2345,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":4009,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":4018,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallrecentcontributors",{"_index":2810,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":2827,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":884,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":896,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatcontributors",{"_index":2811,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatcontributors(pageoptionsdto",{"_index":2829,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatpullrequestcontributors",{"_index":885,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatpullrequestcontributors(pageoptionsdto",{"_index":899,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":2903,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":2926,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":2908,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalltopreposbyusername",{"_index":3688,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":3696,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":3619,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":3630,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercreatedendorsements",{"_index":3733,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":3745,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":3735,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername",{"_index":1928,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername(username",{"_index":1956,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":3734,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":3748,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":3739,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername",{"_index":1929,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername(username",{"_index":1960,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":3125,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":3137,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":3080,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":3095,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":3163,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":3174,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":3199,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":3211,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":2812,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":2831,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbakedrepobyid",{"_index":2574,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbakedrepobyid(@param(\"id",{"_index":2630,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findbakedrepobyid(id",{"_index":2580,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbycustomerid",{"_index":1137,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":1146,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":1138,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":1148,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcommitauthorbyid",{"_index":711,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(@param(\"id",{"_index":2637,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(id",{"_index":720,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid",{"_index":752,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(@param(\"id",{"_index":2645,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(id",{"_index":761,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcontributorpullrequests",{"_index":3689,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":3700,"title":{},"body":{"controllers/UserController.html":{}}}],["findendorsementbyid",{"_index":1930,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":2001,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":1963,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":2292,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":2317,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":2294,"title":{},"body":{"controllers/InsightController.html":{}}}],["findnewcontributorsintimerange",{"_index":2813,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":2833,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyemail",{"_index":4232,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":4248,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":2025,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(@param(\"id",{"_index":2920,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":2043,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":2904,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":2922,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":2913,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":3200,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":3232,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":3215,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyusername",{"_index":4233,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":4252,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":3690,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":3720,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":3705,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":3707,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":3902,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":3931,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findrecommendations",{"_index":2998,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":3011,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":1939,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtop",{"_index":3903,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtop(pageoptionsdto",{"_index":3933,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtophighlights",{"_index":2192,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(@query",{"_index":2258,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(pageoptionsdto",{"_index":2215,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtopusers",{"_index":4234,"title":{},"body":{"injectables/UserService.html":{}}}],["findtopusers(pageoptionsdto",{"_index":4254,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserfollowerbyid",{"_index":3754,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":3766,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserreporecommendations",{"_index":4190,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":4199,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":4191,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finish",{"_index":481,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["first",{"_index":1059,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["fitness",{"_index":5546,"title":{},"body":{"license.html":{}}}],["fix",{"_index":4647,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1575,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":2129,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fixes",{"_index":4397,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":1385,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":5227,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":5450,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1868,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":4119,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":3791,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:30",{"_index":3803,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:48",{"_index":3799,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:70",{"_index":3809,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":3810,"title":{},"body":{"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":3751,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":3758,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":3763,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":3765,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":3768,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:53",{"_index":3762,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:82",{"_index":3770,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":1841,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["followeduserid",{"_index":3761,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":1871,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["follower.user_id",{"_index":3982,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers",{"_index":3977,"title":{},"body":{"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["followers.map(async",{"_index":3980,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followeruserid",{"_index":3767,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":3780,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":3784,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":3781,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1867,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["followings",{"_index":3545,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["follows",{"_index":3151,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3853,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":3142,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1866,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:15",{"_index":1873,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:22",{"_index":1875,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:29",{"_index":1872,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:39",{"_index":1869,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:49",{"_index":1874,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:56",{"_index":1870,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":4174,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":4177,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":3797,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":3792,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":3795,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":3928,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["force",{"_index":4754,"title":{},"body":{"changelog.html":{}}}],["formal",{"_index":953,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":949,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1470,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":5467,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":4798,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1896,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":3088,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":2297,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":3495,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":5513,"title":{},"body":{"license.html":{}}}],["french",{"_index":935,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["from(`(${currentmonthquery.getquery",{"_index":2863,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":2873,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":2064,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":2851,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbuser",{"_index":4274,"title":{},"body":{"injectables/UserService.html":{}}}],["from(entity",{"_index":3023,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user",{"_index":1830,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["from_user_id",{"_index":1831,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1069,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":1017,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":2969,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":4977,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":5029,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":5354,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5531,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":4958,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":499,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{},"index.html":{}}}],["generateblogsummary",{"_index":498,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{}}}],["generateblogsummary(options",{"_index":537,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["generatecodeexplanation",{"_index":626,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":624,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["generatecoderefactor",{"_index":659,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":657,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generatecodetest",{"_index":688,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":686,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["generatecompletion",{"_index":2498,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":586,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":4996,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generatedescription",{"_index":668,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":670,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":644,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":646,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateissuesummary",{"_index":2449,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["generateissuesummary(@body",{"_index":2456,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(generateissuesummarydto",{"_index":2450,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(options",{"_index":2462,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["generateissuesummarydto",{"_index":2452,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateprdescription",{"_index":622,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":640,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":623,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":656,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":685,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":2725,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":533,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":539,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":695,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":2116,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":627,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generatetestsuggestion",{"_index":694,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":696,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generation",{"_index":4405,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":4773,"title":{},"body":{"changelog.html":{}}}],["genereateblogsummary",{"_index":494,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(@body",{"_index":521,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(genereateblogsummarydto",{"_index":495,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummarydto",{"_index":506,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["german",{"_index":936,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["get(\"/:id",{"_index":2316,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":2894,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":2254,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":2921,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":2899,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":3231,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":3719,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":3811,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":3723,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":3721,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":3726,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/churn",{"_index":914,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/commit",{"_index":2639,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/commit",{"_index":2650,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/repo/:id",{"_index":2647,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/created",{"_index":3744,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2241,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/following",{"_index":3892,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":3893,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":2717,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2237,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":3149,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":3111,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":3187,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":3230,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":909,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/received",{"_index":3747,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":912,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repeat",{"_index":916,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":4198,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":1992,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":1996,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":1989,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2250,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get(\"/search",{"_index":876,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":2157,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/top",{"_index":2257,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":2003,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":2007,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":2170,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":2000,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":4035,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(\"commit",{"_index":2635,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"commits/:id",{"_index":2644,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"repos/:id",{"_index":2629,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1892,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":2295,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":2888,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":2219,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":2914,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":2882,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3216,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":3706,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3801,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":3693,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":3701,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":3697,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/churn')@apioperation({operationid",{"_index":889,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/commit",{"_index":2595,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/commit",{"_index":2605,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/repo/:id')@apioperation({operationid",{"_index":2601,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3736,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":2205,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":3857,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":3851,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":2696,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":2213,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3138,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3096,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3175,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3212,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":904,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3740,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":897,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repeat')@apioperation({operationid",{"_index":900,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":4192,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":1953,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":1945,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":2209,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":857,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":2140,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":2216,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":1957,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":1961,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":2144,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":1964,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":4019,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('commit",{"_index":2584,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('commits/:id')@apioperation({operationid",{"_index":2588,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('repos/:id')@apioperation({operationid",{"_index":2581,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["getallhighlightreactions",{"_index":2193,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2255,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":2218,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":3824,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":3848,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":2814,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start",{"_index":2835,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getdomain",{"_index":5325,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":5660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":5655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":5657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":5659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":5656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowinghighlightrepos",{"_index":3825,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":3850,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":3826,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":3856,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowstatusbyusername",{"_index":3793,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":3800,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":2748,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":2755,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":2692,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":2719,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":2695,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":2935,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":2939,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":890,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["getschemapath(model",{"_index":5627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2550,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":3310,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":4377,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["gettop10highlights",{"_index":3711,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":3691,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":3728,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":3710,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":3827,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":3872,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":3859,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getusernotifications",{"_index":4126,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":4127,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getvotequery",{"_index":4350,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":4359,"title":{},"body":{"injectables/VoteService.html":{}}}],["ghcr.io/open",{"_index":5463,"title":{},"body":{"index.html":{}}}],["git",{"_index":4652,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/open",{"_index":5582,"title":{},"body":{"properties.html":{}}}],["github",{"_index":678,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":4310,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com/open",{"_index":1082,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":4321,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["given",{"_index":649,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["globals",{"_index":4631,"title":{},"body":{"changelog.html":{}}}],["goes",{"_index":1476,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["gpt",{"_index":5670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":5512,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5563,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"users.login",{"_index":2068,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":1998,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":2071,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":3110,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2072,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["guide",{"_index":5491,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":5492,"title":{},"body":{"index.html":{}}}],["hack",{"_index":4639,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":4290,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":5034,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":3359,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":3415,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":3361,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hash",{"_index":743,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["hasnextpage",{"_index":2517,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":2518,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":5016,"title":{},"body":{"changelog.html":{}}}],["headers",{"_index":598,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{}}}],["headers(\"x",{"_index":1982,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":2138,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":2184,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":2150,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":2147,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":2136,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":36,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":2141,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":2145,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":705,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1424,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1022,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@isstring",{"_index":703,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["hereby",{"_index":5511,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1729,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["hidden",{"_index":4980,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":4994,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2202,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":2220,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2263,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":3818,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:106",{"_index":3843,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:125",{"_index":3849,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:143",{"_index":3834,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:166",{"_index":3847,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:188",{"_index":3858,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:204",{"_index":3855,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:52",{"_index":3839,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:67",{"_index":3860,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:82",{"_index":3863,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":3879,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":3868,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":1056,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":1084,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":1076,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":1062,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":1068,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:48",{"_index":1081,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:58",{"_index":1074,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1748,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:107",{"_index":1777,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:114",{"_index":1753,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:121",{"_index":1769,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:132",{"_index":1757,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:143",{"_index":1764,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:154",{"_index":1763,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:167",{"_index":1772,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:175",{"_index":1781,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:183",{"_index":1768,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1761,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1783,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1779,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1774,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1760,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:67",{"_index":1776,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:77",{"_index":1765,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:87",{"_index":1756,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:97",{"_index":1752,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":3969,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":3971,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.taggedrepos",{"_index":3974,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":3970,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.type",{"_index":3973,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":3968,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":3887,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":3866,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight/entities/user",{"_index":3867,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_created",{"_index":5353,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlight_id",{"_index":1767,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_id=user_highlights.id",{"_index":3961,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":5351,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":2185,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightcreated",{"_index":5352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["highlightid",{"_index":3835,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":37,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1821,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":1346,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1347,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1787,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1766,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":2187,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["highlights.service",{"_index":2232,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":3894,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:101",{"_index":3925,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:112",{"_index":3934,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:135",{"_index":3911,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:154",{"_index":3936,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:174",{"_index":3929,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:18",{"_index":3908,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:214",{"_index":3923,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:225",{"_index":3913,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:249",{"_index":3938,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:253",{"_index":3919,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:257",{"_index":3927,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:279",{"_index":3932,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:296",{"_index":3916,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:30",{"_index":3917,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:328",{"_index":3921,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:36",{"_index":3930,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:57",{"_index":3922,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":3915,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5550,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5578,"title":{},"body":{"properties.html":{}}}],["host",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PizzaOvenService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":2084,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":5037,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":3954,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":2148,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":127,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1544,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1595,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1519,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":3474,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":3575,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/open",{"_index":475,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":3481,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1356,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1350,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":3507,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":3598,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":3492,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":3582,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpservice",{"_index":2663,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["httpstatus",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1468,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":952,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":1942,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":1966,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1212,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":4307,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter((identity",{"_index":4308,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":4309,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":910,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":894,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":5411,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":5238,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":4538,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":1157,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5542,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{}}}],["improve",{"_index":4921,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":4626,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":2468,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["included",{"_index":5537,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":4250,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":4674,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["inclusion",{"_index":4774,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":4941,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":276,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":4696,"title":{},"body":{"changelog.html":{}}}],["indexes",{"_index":4694,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":3485,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1386,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":4828,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":1014,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":2968,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":2972,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":2970,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2727,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4028,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":951,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ingesting",{"_index":5482,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":801,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":5288,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":530,"title":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":531,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":723,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbbakedrepo",{"_index":2676,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["injectrepository(dbcommitauthors",{"_index":730,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["injectrepository(dbcommits",{"_index":764,"title":{},"body":{"injectables/CommitsService.html":{}}}],["injectrepository(dbcontribution",{"_index":837,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":1150,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1917,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":2047,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2432,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":2353,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2396,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":2489,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":2762,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":2837,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":3017,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":3288,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":3260,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":3455,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":4363,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":3347,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":4271,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":3675,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":3939,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":3940,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(dbusernotification",{"_index":4156,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":4224,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":3772,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":2367,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":2054,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"user_highlight_reactions",{"_index":4277,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(\"user_highlights",{"_index":4275,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(\"users",{"_index":3774,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":3682,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":3681,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_notifications.from_user",{"_index":4159,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2435,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1432,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":3411,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":1001,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":2304,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4014,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":2408,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":4065,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:106",{"_index":4073,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:58",{"_index":4070,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:76",{"_index":4068,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":2310,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":998,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":1005,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":1003,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":1011,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1456,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:14",{"_index":1474,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:26",{"_index":1481,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:37",{"_index":1472,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:48",{"_index":1465,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:59",{"_index":1464,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:70",{"_index":1483,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":4040,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1446,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1442,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":4090,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":2101,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1411,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1436,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2368,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2369,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2366,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2364,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1445,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":2290,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":2092,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":2093,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":2960,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":2952,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":2954,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":2341,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":2337,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":4057,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":2334,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":2323,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2371,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":2384,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1393,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":4091,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1394,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2391,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2385,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2420,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1406,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.controller",{"_index":922,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":881,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["insights.controller.ts:22",{"_index":906,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:35",{"_index":898,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:48",{"_index":895,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:61",{"_index":902,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.dto",{"_index":907,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":2685,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{},"coverage.html":{}}}],["insights.dto.ts:11",{"_index":2687,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.id",{"_index":2443,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2437,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":2313,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":2747,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":2752,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":2754,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":2758,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:44",{"_index":2756,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":2332,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":38,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":4075,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":2312,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":5193,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":5431,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5430,"title":{},"body":{"index.html":{}}}],["installed",{"_index":5364,"title":{},"body":{"index.html":{}}}],["instance",{"_index":5370,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":572,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["instead",{"_index":4832,"title":{},"body":{"changelog.html":{}}}],["instructions",{"_index":673,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":1339,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserService.html":{}}}],["integrates",{"_index":5481,"title":{},"body":{"index.html":{}}}],["integration",{"_index":4513,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["integrations",{"_index":5576,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":3069,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":3610,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":3612,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":3068,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":575,"title":{"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["interfaces",{"_index":577,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":1553,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":1460,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["invalid",{"_index":503,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":1423,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1412,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1413,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":1021,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["invites",{"_index":4739,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1635,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":1376,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":4315,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":999,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":1009,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":2506,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":486,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":2493,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":1085,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":1024,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":816,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":822,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":2102,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":2556,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":2804,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":2805,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":2992,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":955,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":3568,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":966,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":965,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"pull_request",{"_index":1090,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isin([\"view",{"_index":3562,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":2557,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":2552,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":4044,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":956,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{}}}],["isoptional",{"_index":817,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":1035,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":487,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":985,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issue",{"_index":515,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"changelog.html":{},"coverage.html":{}}}],["issue'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2451,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["issuecomments",{"_index":1027,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issuedescription",{"_index":1028,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issues",{"_index":2448,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["issues/issue",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["issuesummarycontroller",{"_index":2446,"title":{"controllers/IssueSummaryController.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"coverage.html":{}}}],["issuesummarymodule",{"_index":39,"title":{"modules/IssueSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssueSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["issuesummaryservice",{"_index":2453,"title":{"injectables/IssueSummaryService.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["issuetitle",{"_index":1029,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["isurl",{"_index":3600,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":2087,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":3217,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":937,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":738,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":2898,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":847,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["items",{"_index":2525,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2689,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":2688,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2375,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2376,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":5137,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":5245,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":4301,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["join(\"\\n",{"_index":560,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1262,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{}}}],["js",{"_index":4269,"title":{},"body":{"injectables/UserService.html":{}}}],["js/dist/module/lib/types",{"_index":584,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json",{"_index":4427,"title":{},"body":{"changelog.html":{}}}],["json.stringify",{"_index":603,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":1196,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":3390,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":3525,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":5374,"title":{},"body":{"index.html":{}}}],["keyout",{"_index":5404,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5577,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5541,"title":{},"body":{"license.html":{}}}],["korean",{"_index":942,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1549,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1540,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1497,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1498,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":5654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":543,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":893,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":820,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1499,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["lastvaluefrom",{"_index":2673,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["lastvaluefrom(this.httpservice.post(`${host}:${port}/bake",{"_index":2682,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["latest",{"_index":3387,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":4738,"title":{},"body":{"changelog.html":{}}}],["leftjoin",{"_index":2865,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["leftjoin(\"users",{"_index":2056,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":3031,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":3029,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2436,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":3030,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":4795,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":944,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["letters",{"_index":3592,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":5453,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5554,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5551,"title":{},"body":{"license.html":{}}}],["lib",{"_index":5449,"title":{},"body":{"index.html":{}}}],["library",{"_index":4679,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":4710,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":785,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":2774,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":846,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5520,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5543,"title":{},"body":{"license.html":{}}}],["limits",{"_index":4952,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":592,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":3323,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1510,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":5046,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":3491,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":5116,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":4983,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":4931,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":5465,"title":{},"body":{"index.html":{}}}],["list",{"_index":2245,"title":{},"body":{"controllers/HighlightController.html":{},"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["list'})@isoptional()@type(undefined",{"_index":3546,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":2199,"title":{},"body":{"controllers/HighlightController.html":{}}}],["listallbakedrepos",{"_index":2575,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(@query",{"_index":2633,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(pageoptionsdto",{"_index":2591,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors",{"_index":2576,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(@query",{"_index":2642,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(pageoptionsdto",{"_index":2594,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid",{"_index":2577,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid(pageoptionsdto",{"_index":2600,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid",{"_index":2578,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid(pageoptionsdto",{"_index":2604,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallpullrequests",{"_index":2693,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":2713,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":2701,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1893,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["literal",{"_index":581,"title":{},"body":{"interfaces/ChatResponse.html":{}}}],["live",{"_index":5356,"title":{},"body":{"index.html":{}}}],["load",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":4898,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":3038,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":3041,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":3042,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":3040,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":3039,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":3476,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":5633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":5386,"title":{},"body":{"index.html":{}}}],["location",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":1099,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":1167,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":1111,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":2488,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":1034,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:10",{"_index":1038,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":1037,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":1036,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":2478,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":1119,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":2271,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":3379,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":1156,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":2270,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":1173,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":1175,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":1177,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":1171,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":1180,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":1169,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":1166,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":1182,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2272,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":1118,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":1095,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:19",{"_index":1112,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":1110,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":1116,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":1107,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":1114,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":1105,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":4825,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":5323,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":5448,"title":{},"body":{"index.html":{}}}],["login",{"_index":1716,"title":{},"body":{"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["loglevels",{"_index":1121,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":1159,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":1170,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":2473,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":1160,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":1172,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":1161,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":1174,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":1162,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":1176,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1454,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":1163,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":1179,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":1104,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":2485,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":1097,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":3046,"title":{},"body":{"injectables/RepoService.html":{}}}],["lower(author_login",{"_index":4300,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercase",{"_index":4722,"title":{},"body":{"changelog.html":{}}}],["machine",{"_index":5428,"title":{},"body":{"index.html":{}}}],["machines",{"_index":5365,"title":{},"body":{"index.html":{}}}],["made",{"_index":1758,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1592,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1564,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["maintainer",{"_index":4433,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":3570,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{}}}],["maker",{"_index":3602,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":3585,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["making",{"_index":5472,"title":{},"body":{"index.html":{}}}],["managed",{"_index":5021,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":3360,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":3366,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":4593,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":4987,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":5080,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":1263,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{}}}],["map",{"_index":2674,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["map((notification",{"_index":4165,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["mapping",{"_index":5426,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":500,"title":{},"body":{"controllers/BlogSummaryController.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["marknotificationsasread",{"_index":4137,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":4153,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":3601,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":3603,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2540,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":957,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":964,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(10000",{"_index":2555,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":961,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":549,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":540,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":1054,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1478,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":4959,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":1020,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":4016,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":4030,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2410,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":4007,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:136",{"_index":4031,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:173",{"_index":4026,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:59",{"_index":4022,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:89",{"_index":4017,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":4033,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":1019,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":1023,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":3561,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1409,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:108",{"_index":1425,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:25",{"_index":1420,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:32",{"_index":1422,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:39",{"_index":1435,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:50",{"_index":1433,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:61",{"_index":1416,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:71",{"_index":1417,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:81",{"_index":1434,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:88",{"_index":1418,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:98",{"_index":1428,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2411,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":2325,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":2333,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:21",{"_index":2338,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:27",{"_index":2347,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:41",{"_index":2336,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:45",{"_index":2351,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:49",{"_index":2349,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:53",{"_index":2344,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:81",{"_index":2346,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":4024,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":4020,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":2155,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":2151,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":546,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["merchantability",{"_index":5545,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1294,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"license.html":{}}}],["mergeable",{"_index":1500,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1501,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["merged_at",{"_index":1502,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["merged_by_login",{"_index":1503,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["message",{"_index":585,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":606,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":2502,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":835,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["meta.dto.ts",{"_index":2516,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":2529,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":2527,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":2532,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":2524,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":2522,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":2530,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":1832,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["metadata",{"_index":1676,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{}}}],["methods",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["microservice",{"_index":2611,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["middleware",{"_index":4929,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":4693,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":4672,"title":{},"body":{"changelog.html":{}}}],["milestone",{"_index":1080,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["min",{"_index":958,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":963,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2554,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":960,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimal",{"_index":4914,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":2380,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2379,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":1050,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["minlength(20",{"_index":1053,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":1088,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":5253,"title":{},"body":{"changelog.html":{}}}],["misaligned",{"_index":4684,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":5341,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":4519,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":5507,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":5175,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":2771,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":5457,"title":{},"body":{"index.html":{}}}],["mode",{"_index":3325,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":604,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":5668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5522,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":2718,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":2699,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":5095,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":2381,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2382,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":5218,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":5186,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":4779,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":3497,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":4986,"title":{},"body":{"changelog.html":{}}}],["my_postgres_container",{"_index":5420,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":5412,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":5424,"title":{},"body":{"index.html":{}}}],["n",{"_index":610,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":5425,"title":{},"body":{"index.html":{}}}],["names",{"_index":1070,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["naming",{"_index":4978,"title":{},"body":{"changelog.html":{}}}],["navigating",{"_index":5388,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":2745,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":5361,"title":{},"body":{"index.html":{}}}],["needs",{"_index":5452,"title":{},"body":{"index.html":{}}}],["nest",{"_index":5241,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":1117,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1222,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":1183,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":1186,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2273,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":3518,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{}}}],["newhighlight",{"_index":3975,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newinsight",{"_index":4081,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":4049,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":5402,"title":{},"body":{"index.html":{}}}],["newlog",{"_index":2490,"title":{},"body":{"injectables/LogService.html":{}}}],["newpullrequestcontributors",{"_index":886,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":903,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuser",{"_index":4317,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":3966,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":4226,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":591,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":2269,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":5291,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":5366,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1548,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":5406,"title":{},"body":{"index.html":{}}}],["non",{"_index":680,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"changelog.html":{}}}],["noninfringement",{"_index":5549,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":4703,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":4381,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":5409,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":722,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":4336,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":3269,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5535,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":3771,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":4132,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":4139,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":4150,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":4152,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:52",{"_index":4148,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:63",{"_index":4142,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:75",{"_index":4146,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:87",{"_index":4144,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:99",{"_index":4154,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":1839,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["notification.constants",{"_index":1855,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":5336,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":4120,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":4124,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:25",{"_index":4128,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":1829,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:17",{"_index":1840,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:24",{"_index":1854,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:31",{"_index":1838,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:42",{"_index":1853,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:52",{"_index":1843,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:62",{"_index":1848,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:71",{"_index":1850,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:81",{"_index":1846,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:89",{"_index":1836,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":4166,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification.read_at",{"_index":4164,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":4155,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":4180,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":3979,"title":{},"body":{"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["notified_at",{"_index":1833,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["notify",{"_index":4451,"title":{},"body":{"changelog.html":{}}}],["now",{"_index":1288,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":4688,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":5367,"title":{},"body":{"index.html":{}}}],["null",{"_index":1596,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["number",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":3885,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":2321,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":5643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":5652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":3593,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["numerical",{"_index":1475,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5570,"title":{},"body":{"properties.html":{}}}],["object",{"_index":2943,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":2566,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":1008,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":5390,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5516,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":4629,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":5505,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":845,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["old",{"_index":4621,"title":{},"body":{"changelog.html":{}}}],["omittype",{"_index":3865,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["omittype(dbuserhighlight",{"_index":3870,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbusernotification",{"_index":4130,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["onboarded",{"_index":3486,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":4184,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":4185,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":4187,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":4820,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":5373,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1219,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":3045,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":3047,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":40,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":535,"title":{"injectables/OpenAiService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["openapi",{"_index":5076,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["opening",{"_index":5470,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1983,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":3573,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":5664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":5400,"title":{},"body":{"index.html":{}}}],["operation",{"_index":4887,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["option",{"_index":479,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["optional",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.blogmarkdown",{"_index":564,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.blogtitle}\\n\\nblog",{"_index":563,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.code}\\n",{"_index":651,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":2744,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":2746,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.descriptionlength",{"_index":652,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":2742,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":2743,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":725,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":782,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2265,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":2094,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":2548,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":2993,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":796,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":2100,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:24",{"_index":1819,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["options.dto.ts:26",{"_index":2373,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":2798,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":2546,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":2097,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":2994,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2547,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":2377,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":2099,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":2982,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2374,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":2549,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":2551,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":2799,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":2800,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":2803,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":2794,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":2951,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["options.issuecomments",{"_index":2472,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuedescription}\\nissue",{"_index":2471,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuetitle}\\nissue",{"_index":2470,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.repo",{"_index":2945,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":2778,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":2779,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.summarylength",{"_index":568,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["options.temperature",{"_index":570,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":569,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":2948,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":1337,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":784,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"endorsements.created_at",{"_index":2052,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2444,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":3684,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":3948,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"user_notifications.notified_at",{"_index":4162,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["orderby(\"users.name",{"_index":2370,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":3058,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":786,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":803,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":3059,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":804,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":839,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1946,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["origin",{"_index":1307,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2281,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":2442,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":2061,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":5557,"title":{},"body":{"license.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":5204,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":5138,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":682,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"changelog.html":{}}}],["oven",{"_index":2610,"title":{},"body":{"controllers/PizzaOvenController.html":{},"changelog.html":{}}}],["oven.controller",{"_index":2658,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.controller.ts",{"_index":2572,"title":{},"body":{"controllers/PizzaOvenController.html":{},"coverage.html":{}}}],["oven.controller.ts:110",{"_index":2603,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:124",{"_index":2607,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:40",{"_index":2613,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:55",{"_index":2583,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:66",{"_index":2593,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:77",{"_index":2587,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:88",{"_index":2599,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:99",{"_index":2590,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.module",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["oven.module.ts",{"_index":2657,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.service",{"_index":2619,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["oven.service.ts",{"_index":2660,"title":{},"body":{"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["oven.service.ts:15",{"_index":2664,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:24",{"_index":2666,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:30",{"_index":2671,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:42",{"_index":2669,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:56",{"_index":2668,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["over",{"_index":2697,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":5565,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":5499,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1954,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owneroruser",{"_index":2059,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":3052,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":2062,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":5421,"title":{},"body":{"index.html":{}}}],["package",{"_index":4467,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["package.json",{"_index":5476,"title":{},"body":{"index.html":{}}}],["packages",{"_index":4859,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":781,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":2519,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":726,"title":{"classes/PageDto.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":850,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["pagemetadto",{"_index":834,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":2511,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":2521,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":718,"title":{"classes/PageOptionsDto.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":2537,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":840,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":843,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":2535,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":2840,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repo",{"_index":3063,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":3062,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":2859,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto:16",{"_index":808,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:23",{"_index":2686,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:28",{"_index":802,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":806,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":814,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pager",{"_index":4524,"title":{},"body":{"changelog.html":{}}}],["pager.service",{"_index":21,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":7,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["pages",{"_index":2531,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":3694,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":868,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":861,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":2883,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":4472,"title":{},"body":{"changelog.html":{}}}],["paginationinput",{"_index":2562,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["pair",{"_index":5394,"title":{},"body":{"index.html":{}}}],["param",{"_index":1969,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":3884,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2246,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":4055,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1993,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1994,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":1990,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"username",{"_index":2004,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":2533,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2543,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["params",{"_index":4507,"title":{},"body":{"changelog.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2856,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":3382,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":4311,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":5699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":2228,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":3551,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":3552,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5547,"title":{},"body":{"license.html":{}}}],["passed",{"_index":2740,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":3524,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":3522,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":3527,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["past",{"_index":2466,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["patch",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":3874,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":4054,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":3862,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":3638,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":4027,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["paths",{"_index":4678,"title":{},"body":{"changelog.html":{}}}],["pattern",{"_index":4587,"title":{},"body":{"changelog.html":{}}}],["payment_method_types",{"_index":3318,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1415,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":1414,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":2528,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":4625,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1690,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5510,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5529,"title":{},"body":{"license.html":{}}}],["person",{"_index":5515,"title":{},"body":{"license.html":{}}}],["persons",{"_index":5530,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":950,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["pgmigrate",{"_index":4782,"title":{},"body":{"changelog.html":{}}}],["picktype",{"_index":1820,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":1823,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["pid,hostname,context",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1750,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":4700,"title":{},"body":{"changelog.html":{}}}],["pipelines",{"_index":5300,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":480,"title":{},"body":{"classes/BakeRepoDto.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":3571,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza/entities/baked",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commit_authors.entity",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commits.entity",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/pizza",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza_oven_api=80",{"_index":5484,"title":{},"body":{"index.html":{}}}],["pizza_oven_host=\"http://example.com",{"_index":5483,"title":{},"body":{"index.html":{}}}],["pizzaconfig",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pizzaovencontroller",{"_index":2570,"title":{"controllers/PizzaOvenController.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["pizzaovenmodule",{"_index":41,"title":{"modules/PizzaOvenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"modules.html":{},"overview.html":{}}}],["pizzaovenservice",{"_index":2618,"title":{"injectables/PizzaOvenService.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{},"overview.html":{}}}],["pizzas",{"_index":4973,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":5490,"title":{},"body":{"index.html":{}}}],["port",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"injectables/PizzaOvenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5539,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":938,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["post(\"/:id/featured",{"_index":2244,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":3882,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":2732,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":639,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":665,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/summary/generate",{"_index":520,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post(\"/test/generate",{"_index":692,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":3414,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":4042,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":2609,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":1932,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":2196,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3831,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":2726,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":625,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":658,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/summary/generate')@apioperation({operationid",{"_index":497,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":687,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":3363,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":4012,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":5415,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":4545,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["postonboarding",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttopizzaovenservice",{"_index":2579,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["posttopizzaovenservice'})@apiacceptedresponse()@apibadrequestresponse({description",{"_index":2612,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(@body",{"_index":2626,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakeoptionsinfo",{"_index":2608,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakerepoinfo",{"_index":2670,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["postwaitlist",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":5043,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":1060,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1773,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":1075,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":2766,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["prefs.dto",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":3604,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":3607,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":3609,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":4781,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":5360,"title":{},"body":{"index.html":{}}}],["present",{"_index":2738,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["prettier",{"_index":5256,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":5459,"title":{},"body":{"index.html":{}}}],["previous",{"_index":2523,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["previous_month",{"_index":2874,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previously",{"_index":5417,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":2870,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":1697,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1712,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1698,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1677,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":1220,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1229,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1583,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1711,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1352,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1455,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1450,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":2753,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":5144,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["proceed",{"_index":5493,"title":{},"body":{"index.html":{}}}],["process",{"_index":5203,"title":{},"body":{"changelog.html":{}}}],["process.env.ci",{"_index":5607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":5663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":5683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":3532,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":3535,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":3530,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":5232,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1052,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["project's",{"_index":5375,"title":{},"body":{"index.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":1046,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project?'})@column({type",{"_index":1732,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["promise",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all",{"_index":2720,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":2569,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserService.html":{}}}],["promise.all(notifications",{"_index":3983,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["promise.all(repostoremoverequests",{"_index":4100,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":4110,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":4182,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promises",{"_index":3067,"title":{},"body":{"injectables/RepoService.html":{}}}],["promo",{"_index":4565,"title":{},"body":{"changelog.html":{}}}],["proper",{"_index":5124,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":5183,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":469,"title":{"properties.html":{}},"body":{"classes/BakeRepoDto.html":{},"interfaces/ChatResponse.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1223,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":5150,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["provided",{"_index":629,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["providers",{"_index":17,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":2764,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":621,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/UserService.html":{}}}],["prs.merged_by_login",{"_index":4303,"title":{},"body":{"injectables/UserService.html":{}}}],["prs.repo_id=repos.id",{"_index":4302,"title":{},"body":{"injectables/UserService.html":{}}}],["public",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":5003,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":5523,"title":{},"body":{"license.html":{}}}],["published",{"_index":4638,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["pull_request",{"_index":1077,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pull_request'})@column('text",{"_index":1775,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pull_request'})@isstring()@isin(['pull_request",{"_index":1078,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pull_requests",{"_index":1484,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":2841,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":2846,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":2848,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":3049,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":888,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":856,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontroller",{"_index":2690,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":2723,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":2730,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":2710,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":42,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":2795,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":2796,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":2705,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":2818,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":870,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":2711,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":2801,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":2802,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5548,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":5167,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":5007,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":3106,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":3112,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":3150,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":3188,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":3234,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":3115,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":3153,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":3190,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":3237,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":3813,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3100,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3141,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3179,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3221,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3104,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3145,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3182,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3224,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3796,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":2759,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":2966,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":2965,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":5464,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1678,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":4704,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":865,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":733,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":3994,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":4288,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere(\"repos.id",{"_index":2876,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":3993,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":3946,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(sql",{"_index":3957,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":848,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getmany",{"_index":849,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getone",{"_index":739,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":3789,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":2858,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.getrawone",{"_index":2780,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.groupby(\"users.login\").orderby(\"count(reactions.user_id",{"_index":4282,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.innerjoin",{"_index":3054,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":735,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1919,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":2050,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.setparameters",{"_index":2777,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":2445,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"baked_repo_id",{"_index":766,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"commit_author_id",{"_index":767,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":841,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":1152,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":1153,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":2051,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":2069,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":737,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":2355,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":3262,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":3457,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":3051,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":3050,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":3677,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":3965,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":4229,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":3958,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(`users.email",{"_index":4340,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(sql",{"_index":3956,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":1168,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":1187,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5495,"title":{},"body":{"index.html":{}}}],["range",{"_index":787,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":4951,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":3362,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":4641,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":3613,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":1816,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["reaction",{"_index":1332,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":3846,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1811,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1793,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["reaction.entity.ts",{"_index":1788,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:107",{"_index":1804,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:115",{"_index":1794,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":1800,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:37",{"_index":1799,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:47",{"_index":1805,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:57",{"_index":1796,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:68",{"_index":1791,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:79",{"_index":1802,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:83",{"_index":1792,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:91",{"_index":1801,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:99",{"_index":1798,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1809,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1797,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1810,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1803,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1790,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction_users",{"_index":1814,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":4000,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":4001,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1331,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":2222,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactions.highlight_id",{"_index":4278,"title":{},"body":{"injectables/UserService.html":{}}}],["reactionsquerybuilder",{"_index":4235,"title":{},"body":{"injectables/UserService.html":{}}}],["reactors",{"_index":4393,"title":{},"body":{"changelog.html":{}}}],["read",{"_index":1849,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["read_at",{"_index":1834,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1469,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":4974,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["real",{"_index":4685,"title":{},"body":{"changelog.html":{}}}],["rebaseable",{"_index":1504,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":1742,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive_collaboration",{"_index":3606,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":1958,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":891,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":3608,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recieved",{"_index":4497,"title":{},"body":{"changelog.html":{}}}],["recipient",{"_index":979,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["recipient_user_id",{"_index":971,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation",{"_index":4557,"title":{},"body":{"changelog.html":{}}}],["recommendation.controller",{"_index":4122,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":4188,"title":{},"body":{"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["recommendation.controller.ts:23",{"_index":4195,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":4197,"title":{},"body":{"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["recommended",{"_index":4193,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":1981,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["record'})@apiokresponse({type",{"_index":1933,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":3418,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1566,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":654,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{}}}],["refactoring",{"_index":4503,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":5045,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":1249,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{}}}],["references",{"_index":4792,"title":{},"body":{"changelog.html":{}}}],["regex",{"_index":4586,"title":{},"body":{"changelog.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":3953,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["registeras(\"api",{"_index":5599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":5653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":5665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"pizza",{"_index":5675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":5679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":3469,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":5131,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":5074,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":5272,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":5091,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":4744,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":4478,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["releasing",{"_index":4689,"title":{},"body":{"changelog.html":{}}}],["relevantevents",{"_index":3371,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":3424,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":5085,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":2026,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["remove(id",{"_index":2045,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":2226,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":3090,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":3904,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":3935,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":2416,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2427,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":2293,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":2320,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":2301,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":2329,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":2348,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":4010,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":4023,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2388,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2394,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":2303,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":3663,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":3672,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":3620,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":3658,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":3634,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":3755,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":3769,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removing",{"_index":4620,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":4456,"title":{},"body":{"changelog.html":{}}}],["repeat",{"_index":901,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"changelog.html":{}}}],["repo",{"_index":472,"title":{},"body":{"classes/BakeRepoDto.html":{},"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":2915,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":1320,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1298,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":2979,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.dto",{"_index":2617,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["repo.dto.ts",{"_index":468,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["repo.dto.ts:11",{"_index":477,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:19",{"_index":484,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.entity",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCommits.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1199,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:15",{"_index":1863,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:19",{"_index":1214,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:22",{"_index":1864,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":1879,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":1207,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":1884,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":1216,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":1210,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:43",{"_index":1444,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:46",{"_index":1862,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:50",{"_index":1441,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:60",{"_index":1438,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:67",{"_index":1877,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":1439,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:75",{"_index":1883,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:78",{"_index":1443,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:8",{"_index":1828,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:83",{"_index":1881,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":2399,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2398,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":4096,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":3055,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":1618,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1607,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1633,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1624,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1652,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1643,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":1887,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":1880,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":1667,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1658,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2409,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2386,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":2393,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":2395,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":2390,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":1013,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3226,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":2891,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":972,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":774,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":2901,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":2983,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":2785,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":2751,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":829,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":2090,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":1006,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":4095,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":43,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":794,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":2980,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":1949,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":2060,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":2905,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":2995,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":3002,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":5444,"title":{},"body":{"index.html":{}}}],["repos",{"_index":1000,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":3048,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":3698,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":4072,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":3227,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":4203,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repos.dto.ts:13",{"_index":4204,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.dto.ts:23",{"_index":4376,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":4374,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.id",{"_index":2956,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":4211,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":4212,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":4214,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":4217,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":4221,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":4223,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":4220,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":4222,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":4752,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":2909,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":2890,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":1072,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["repository",{"_index":713,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":3075,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":3120,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":3282,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":3253,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":4104,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":4108,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":4092,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":4098,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":4097,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":3158,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":3449,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":4107,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":5065,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":5067,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":5069,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":5071,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":3194,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":4354,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5504,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1281,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":3365,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":3417,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3635,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":504,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":3625,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":4029,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":2788,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":2691,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":2703,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:40",{"_index":2706,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:50",{"_index":2700,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":1487,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:105",{"_index":1572,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:125",{"_index":1552,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:135",{"_index":1542,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:142",{"_index":1522,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:149",{"_index":1520,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:15",{"_index":1539,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:159",{"_index":1518,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:169",{"_index":1517,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:179",{"_index":1532,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:189",{"_index":1529,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:199",{"_index":1557,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:206",{"_index":1559,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:216",{"_index":1581,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:22",{"_index":1563,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:226",{"_index":1554,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:233",{"_index":1530,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:240",{"_index":1513,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:247",{"_index":1534,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:254",{"_index":1526,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:265",{"_index":1537,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:29",{"_index":1561,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:36",{"_index":1570,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:43",{"_index":1536,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:50",{"_index":1556,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:57",{"_index":1555,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:64",{"_index":1562,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:71",{"_index":1580,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:81",{"_index":1568,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:91",{"_index":1574,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:98",{"_index":1565,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":2086,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":2786,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":871,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":2806,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:112",{"_index":2826,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:153",{"_index":2834,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:18",{"_index":2817,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:190",{"_index":2828,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:208",{"_index":2824,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:245",{"_index":2830,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:25",{"_index":2819,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:282",{"_index":2836,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:31",{"_index":2820,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:47",{"_index":2822,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:69",{"_index":2832,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":5698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":1721,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":1722,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":1723,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":3626,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester",{"_index":3650,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["requester.role",{"_index":3652,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requesting",{"_index":4741,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":638,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"changelog.html":{},"index.html":{}}}],["requests'})@apibody({type",{"_index":3628,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":619,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":2103,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":872,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":596,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":3321,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":5296,"title":{},"body":{"changelog.html":{}}}],["reserved",{"_index":3595,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["resp.status",{"_index":2684,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["response",{"_index":556,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["response.decorator",{"_index":869,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":5313,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":3466,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":3496,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":3477,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":3493,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":3482,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:128",{"_index":3475,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:134",{"_index":3500,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":3509,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":3501,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":3479,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":3471,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":3490,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":3472,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":3505,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":3487,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":3489,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":3484,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":3467,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":3483,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":3498,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":3508,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":3504,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":3468,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":614,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":612,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2280,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":5519,"title":{},"body":{"license.html":{}}}],["results",{"_index":24,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[index",{"_index":3074,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieve",{"_index":4732,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":4962,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1965,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["retrieving",{"_index":4610,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":4847,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":4846,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":4964,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":5521,"title":{},"body":{"license.html":{}}}],["ritadee",{"_index":1824,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["rogue",{"_index":5099,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["root",{"_index":5471,"title":{},"body":{"index.html":{}}}],["rounded",{"_index":2133,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":4667,"title":{},"body":{"changelog.html":{}}}],["rsa:4096",{"_index":5403,"title":{},"body":{"index.html":{}}}],["rule",{"_index":5446,"title":{},"body":{"index.html":{}}}],["rules",{"_index":5038,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":5163,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":5212,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":5207,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["russian",{"_index":940,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["rxjs",{"_index":2675,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["same",{"_index":5418,"title":{},"body":{"index.html":{}}}],["san",{"_index":3494,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":1087,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":1061,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":3580,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/ai",{"_index":1091,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/api",{"_index":4380,"title":{},"body":{"changelog.html":{}}}],["sauced/api.opensauced.pizza",{"_index":4571,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5579,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5583,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5581,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":1319,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1308,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":489,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1440,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":476,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":2096,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights.git",{"_index":1230,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights.git'})@column({type",{"_index":1203,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights/pull/1",{"_index":1086,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1778,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":1083,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1759,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":994,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":987,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/open",{"_index":4596,"title":{},"body":{"changelog.html":{}}}],["saucedopen",{"_index":3503,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":3590,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":4886,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":4899,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":5077,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":5096,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":5239,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":5247,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":5290,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":2919,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequestcontributors",{"_index":854,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":855,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":2694,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":2715,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":2704,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":858,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["secretkey",{"_index":5680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":5690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":5392,"title":{},"body":{"index.html":{}}}],["see",{"_index":5486,"title":{},"body":{"index.html":{}}}],["select",{"_index":1235,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["select(\"author_login",{"_index":2866,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"count(distinct",{"_index":3022,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"current_month.author_login",{"_index":2862,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"emoji_id",{"_index":3987,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"previous_month.author_login",{"_index":2872,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":2853,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"users.login",{"_index":2066,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/UserService.html":{}}}],["select(['repo.id",{"_index":3028,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":2765,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char(now",{"_index":2769,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1466,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":2339,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["self",{"_index":5398,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5527,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":4477,"title":{},"body":{"changelog.html":{}}}],["sending",{"_index":4430,"title":{},"body":{"changelog.html":{}}}],["sent",{"_index":1426,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":4691,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["server.crt",{"_index":5396,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":5397,"title":{},"body":{"index.html":{}}}],["servers",{"_index":4948,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":5088,"title":{},"body":{"changelog.html":{}}}],["services.module",{"_index":2018,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["services.module.ts",{"_index":16,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["services/user.service",{"_index":3641,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["session",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":3331,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":3330,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":3372,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setparameters",{"_index":4281,"title":{},"body":{"injectables/UserService.html":{}}}],["setting",{"_index":5369,"title":{},"body":{"index.html":{}}}],["settings",{"_index":5385,"title":{},"body":{"index.html":{}}}],["setup",{"_index":4504,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":5536,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1063,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":1057,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["short",{"_index":1396,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1377,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":4392,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1545,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1541,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":3416,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1589,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1579,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":3419,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":5399,"title":{},"body":{"index.html":{}}}],["simple",{"_index":5040,"title":{},"body":{"changelog.html":{}}}],["simplify",{"_index":4627,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2545,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["slow",{"_index":4922,"title":{},"body":{"changelog.html":{}}}],["small",{"_index":4642,"title":{},"body":{"changelog.html":{}}}],["snippet",{"_index":650,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["soft",{"_index":5048,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":5362,"title":{},"body":{"index.html":{},"license.html":{}}}],["solution",{"_index":2469,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["sort",{"_index":4763,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"index.html":{}}}],["source_branch",{"_index":1505,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":973,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":974,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1506,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1482,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":2775,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1461,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":2962,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":2961,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2383,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":934,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["spec",{"_index":5200,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":744,"title":{},"body":{"classes/CommitsDto.html":{},"changelog.html":{}}}],["specifications",{"_index":545,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["split",{"_index":4787,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":3480,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":1184,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":5590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":5343,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../db",{"_index":5592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":5344,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":5355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../openai.config.ts",{"_index":5594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":5345,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pizza.config.ts",{"_index":5595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pull",{"_index":5347,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":5348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5588,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":5349,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:214",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:129",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:142",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:173",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:187",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:206",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":3465,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":4183,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":3510,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":3513,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":3521,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":3519,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":3516,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":5309,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blogs/dtos/create",{"_index":924,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["src/blogs/issue",{"_index":491,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"coverage.html":{}}}],["src/common/constants/order",{"_index":5350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":5312,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":2089,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":2515,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":2501,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":2509,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":2505,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":2931,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":1155,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":2266,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/services/api",{"_index":15,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":2559,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":2563,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":5318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":5320,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":5321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":5324,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":5326,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/pizza.config.ts",{"_index":5327,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":5328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":1269,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:101",{"_index":1309,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:109",{"_index":1299,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:27",{"_index":1293,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:37",{"_index":1301,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:47",{"_index":1278,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:54",{"_index":1297,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:64",{"_index":1289,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:74",{"_index":1306,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:81",{"_index":1291,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:91",{"_index":1274,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":773,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":823,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":826,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":830,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":780,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":2877,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/contributor/contributor",{"_index":880,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":852,"title":{},"body":{"controllers/ContributorController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":864,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":920,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/customer/customer.entity.ts",{"_index":1321,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1323,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1325,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":1131,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":1135,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":1145,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":1149,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":1147,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":1144,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":1140,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1889,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":1897,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1908,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1911,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1913,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1915,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1916,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1329,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1343,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1345,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1351,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:46",{"_index":1340,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:56",{"_index":1333,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:66",{"_index":1349,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:73",{"_index":1334,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:77",{"_index":1348,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":968,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":3550,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":2073,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":1922,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":1959,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:123",{"_index":1962,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:138",{"_index":1943,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":1935,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":1951,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":1948,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":1955,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":1968,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":2016,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":2021,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:11",{"_index":2028,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:110",{"_index":2044,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:124",{"_index":2046,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:18",{"_index":2030,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:22",{"_index":2032,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:26",{"_index":2033,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:37",{"_index":2035,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:48",{"_index":2037,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:61",{"_index":2039,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:77",{"_index":2040,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:91",{"_index":2042,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1357,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1361,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:21",{"_index":1360,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:28",{"_index":1363,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:35",{"_index":1365,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:42",{"_index":1368,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:49",{"_index":1370,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:59",{"_index":1372,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:69",{"_index":1358,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/health/health.controller.ts",{"_index":2137,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":2143,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":2146,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":2183,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1813,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1827,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":2186,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:102",{"_index":2223,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:113",{"_index":2217,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:34",{"_index":2214,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:45",{"_index":2207,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:59",{"_index":2203,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:76",{"_index":2227,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:90",{"_index":2211,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2262,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":997,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":2372,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":3553,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1408,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1375,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:106",{"_index":1382,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:114",{"_index":1404,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:118",{"_index":1395,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:32",{"_index":1384,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:42",{"_index":1405,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:52",{"_index":1392,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:59",{"_index":1390,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:66",{"_index":1389,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:76",{"_index":1399,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:86",{"_index":1379,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:96",{"_index":1402,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":2324,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":2291,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:32",{"_index":2300,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:47",{"_index":2306,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2405,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2413,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":2419,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":2423,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":2426,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":2422,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":2430,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":2428,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":2425,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":4006,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/issues/dtos/create",{"_index":1026,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["src/issues/issue",{"_index":2447,"title":{},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":1094,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":1033,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1447,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1453,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1452,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1449,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1451,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1448,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":2477,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":2481,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":2487,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":2484,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":5331,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/open",{"_index":578,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["src/pizza/commit",{"_index":707,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts",{"_index":749,"title":{},"body":{"injectables/CommitsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts:11",{"_index":754,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:18",{"_index":756,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:24",{"_index":758,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:37",{"_index":760,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:50",{"_index":762,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/dtos/baked",{"_index":467,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts",{"_index":699,"title":{},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts:11",{"_index":704,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commits.dto.ts",{"_index":741,"title":{},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commits.dto.ts:11",{"_index":746,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/entities/baked",{"_index":1198,"title":{},"body":{"entities/DbBakedRepo.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts",{"_index":1232,"title":{},"body":{"entities/DbCommitAuthors.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:19",{"_index":1239,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:27",{"_index":1236,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:31",{"_index":1238,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commits.entity.ts",{"_index":1241,"title":{},"body":{"entities/DbCommits.html":{},"coverage.html":{}}}],["src/pizza/entities/commits.entity.ts:20",{"_index":1261,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:30",{"_index":1260,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:40",{"_index":1259,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:49",{"_index":1253,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:57",{"_index":1250,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:66",{"_index":1257,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:74",{"_index":1255,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/pizza",{"_index":2571,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["src/pull",{"_index":618,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":2967,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":5333,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1601,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:26",{"_index":1606,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:33",{"_index":1614,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:40",{"_index":1610,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:50",{"_index":1603,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:60",{"_index":1611,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:67",{"_index":1604,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:75",{"_index":1613,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:83",{"_index":1608,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1619,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:26",{"_index":1623,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:33",{"_index":1630,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:40",{"_index":1626,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:50",{"_index":1621,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:60",{"_index":1627,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:67",{"_index":1622,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:75",{"_index":1629,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:83",{"_index":1625,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1634,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:26",{"_index":1639,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:33",{"_index":1649,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:40",{"_index":1645,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:47",{"_index":1642,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:57",{"_index":1637,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:67",{"_index":1646,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:74",{"_index":1638,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:82",{"_index":1648,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:90",{"_index":1644,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1653,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:26",{"_index":1657,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:33",{"_index":1664,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:40",{"_index":1660,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:50",{"_index":1655,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:60",{"_index":1661,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:67",{"_index":1656,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:75",{"_index":1663,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:83",{"_index":1659,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":2902,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":2912,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:33",{"_index":2916,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:44",{"_index":2907,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:55",{"_index":2910,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":2978,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":2996,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:146",{"_index":3009,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":3001,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:160",{"_index":3010,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:174",{"_index":3007,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:208",{"_index":3008,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":3015,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:257",{"_index":3012,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:37",{"_index":3005,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:62",{"_index":3004,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":3076,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":3246,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":3248,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":3254,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":3258,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":3256,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":3252,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":3121,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":3275,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":3277,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":3283,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":3287,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":3285,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":3281,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":3354,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":3300,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":3302,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":3311,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":3307,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":3309,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":3305,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":3159,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":3442,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":3444,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":3450,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":3454,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":3452,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":3448,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1668,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1861,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":1040,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/top",{"_index":3541,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":3564,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/top",{"_index":1714,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1718,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/services/user.service.ts",{"_index":4230,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/services/user.service.ts:106",{"_index":4253,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:180",{"_index":4247,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:19",{"_index":4243,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:217",{"_index":4266,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:242",{"_index":4262,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:257",{"_index":4268,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:267",{"_index":4264,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:27",{"_index":4245,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:277",{"_index":4260,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:281",{"_index":4258,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:288",{"_index":4249,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:33",{"_index":4256,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:39",{"_index":4255,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:69",{"_index":4251,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user",{"_index":3615,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":3686,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:35",{"_index":3709,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":3704,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":3695,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":3699,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:94",{"_index":3713,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":5339,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":4115,"title":{},"body":{"modules/UserModule.html":{}}}],["src/vote/repo",{"_index":3195,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":4346,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":4348,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":4355,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":4358,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":4362,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":4357,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":4353,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":4360,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stable",{"_index":5242,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":1109,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1641,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1620,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":3086,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":3247,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":3077,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:116",{"_index":3094,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:35",{"_index":3098,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:55",{"_index":3102,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:74",{"_index":3105,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:97",{"_index":3091,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":3109,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":3250,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":3257,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":3264,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":3265,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1602,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":3276,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":3122,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:100",{"_index":3133,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:122",{"_index":3136,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:35",{"_index":3139,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:55",{"_index":3143,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:77",{"_index":3146,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":3148,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":3279,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":3286,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":5023,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":3292,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":3293,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":45,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":3126,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":3140,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":3127,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":3144,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":3037,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":2990,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":3147,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":44,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":3081,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":3113,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":3099,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":3082,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":3103,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":3097,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":2984,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":2991,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":3108,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":675,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbSubscription.html":{},"injectables/PullRequestService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":5435,"title":{},"body":{"index.html":{}}}],["started",{"_index":4378,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":2278,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stash",{"_index":4633,"title":{},"body":{"changelog.html":{}}}],["state",{"_index":1507,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":5303,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":4630,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1679,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":2282,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"controllers/PizzaOvenController.html":{}}}],["statusmessage",{"_index":2283,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":5371,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":5041,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":4784,"title":{},"body":{"changelog.html":{}}}],["stress",{"_index":4634,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(process.env.api_codename",{"_index":5601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":5667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":5674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":5669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_host",{"_index":5676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_port",{"_index":5677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":5689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":5687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":5681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":5685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":5682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":5631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":5645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":5639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":5650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":5632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":5646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":5637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":5649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":5634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":5647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":5642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":5651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":5635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":5648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":1164,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":1181,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":929,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":2123,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":3313,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":3433,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":3301,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":3428,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":1143,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":457,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":356,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":46,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":3335,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":3353,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":47,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":4780,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":5575,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":4988,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":2132,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["styles",{"_index":4928,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1710,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1694,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":5661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":3425,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":3426,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":5407,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5532,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5525,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1636,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":3168,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":3036,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":2989,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":3186,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":3443,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":3160,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:100",{"_index":3170,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:122",{"_index":3173,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:35",{"_index":3177,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:55",{"_index":3180,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:77",{"_index":3183,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":3185,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":3446,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":3453,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":3461,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":3459,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":3460,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":48,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":3164,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":3178,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":3165,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":3181,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":3184,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":3176,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":3016,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount",{"_index":2999,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":3013,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":2749,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":2757,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":2986,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1684,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":3395,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":3394,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":3397,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":3430,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1669,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1693,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1683,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1687,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1706,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1705,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1695,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1708,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1703,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1696,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1699,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1700,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1685,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1688,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1692,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1691,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":3402,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":3389,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":3393,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":3392,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":3336,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":3337,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":3339,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":3344,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":3346,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":3342,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":3391,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":3406,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":3404,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":3388,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":3368,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":5684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":3343,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1709,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["subscriptionsessioncancelurl",{"_index":5688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":5686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5538,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":3326,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":5009,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":5624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":553,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":674,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":641,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":2790,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":655,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:22",{"_index":661,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":662,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":2110,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":2112,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":2114,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":2115,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":2113,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":2111,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":664,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":667,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":672,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":671,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":669,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestions",{"_index":4601,"title":{},"body":{"changelog.html":{}}}],["suite",{"_index":5436,"title":{},"body":{"index.html":{}}}],["summaries",{"_index":4444,"title":{},"body":{"changelog.html":{}}}],["summarize",{"_index":558,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["summary.controller",{"_index":529,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.controller.ts",{"_index":492,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{},"coverage.html":{}}}],["summary.controller.ts:22",{"_index":505,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.dto",{"_index":513,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.dto.ts",{"_index":925,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["summary.dto.ts:13",{"_index":946,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:23",{"_index":948,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:32",{"_index":954,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:42",{"_index":943,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:49",{"_index":931,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:56",{"_index":930,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:63",{"_index":1031,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["summary.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["summary.module.ts",{"_index":528,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service",{"_index":516,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service.ts",{"_index":532,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["summary.service.ts:10",{"_index":542,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:20",{"_index":538,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["summary.service.ts:21",{"_index":2463,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:7",{"_index":536,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summarylength",{"_index":928,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["supabase",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":583,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":5377,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":5378,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":5376,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":364,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5587,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":3526,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":368,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":3534,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":3531,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":3533,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":458,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":3529,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":3528,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":1120,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":3539,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":1127,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":1125,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":1123,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":3538,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":1126,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":4802,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":501,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["supporting",{"_index":4810,"title":{},"body":{"changelog.html":{}}}],["sure",{"_index":5473,"title":{},"body":{"index.html":{}}}],["svg",{"_index":5561,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":4403,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["switch",{"_index":4946,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":607,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"changelog.html":{}}}],["systemmessage",{"_index":608,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":2504,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":5695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":5081,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":5340,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":5156,"title":{},"body":{"changelog.html":{}}}],["tagged",{"_index":1071,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["tagged_repos",{"_index":1751,"title":{},"body":{"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["taggedrepos",{"_index":1058,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["tagging",{"_index":5134,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1577,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":4831,"title":{},"body":{"changelog.html":{}}}],["taken",{"_index":2465,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["target",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":1508,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1509,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":4956,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":3025,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1015,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["team'})@column({type",{"_index":1391,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":1004,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":5178,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":5584,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":588,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["temporary",{"_index":4997,"title":{},"body":{"changelog.html":{}}}],["tense",{"_index":2467,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":689,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":2791,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":684,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"coverage.html":{}}}],["test.suggestion.controller.ts:22",{"_index":690,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":5445,"title":{},"body":{"index.html":{}}}],["tester",{"_index":4635,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":4492,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":5443,"title":{},"body":{"index.html":{}}}],["text",{"_index":681,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1594,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{}}}],["th3nn3ss'})@column('text",{"_index":1521,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1590,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1567,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":4069,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":4021,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbbakedrepo)@apiokresponse({type",{"_index":2592,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommitauthors)@apiokresponse({type",{"_index":2598,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommits)@apiokresponse({type",{"_index":2602,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":2884,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1894,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":1947,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2702,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":862,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":2906,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":2206,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":2210,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":3312,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":4175,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.bakedreporepository.createquerybuilder(\"baked_repos",{"_index":2677,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":3061,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":734,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.blogsummaryservice.generateblogsummary(genereateblogsummarydto",{"_index":522,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":642,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":666,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":693,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.commitauthorservice.findallcommitauthors(pageoptionsdto",{"_index":2643,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorservice.findcommitauthorbyid(id",{"_index":2638,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorsrepository.createquerybuilder(\"commit_authors",{"_index":732,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["this.commitsrepository.createquerybuilder(\"commits",{"_index":765,"title":{},"body":{"injectables/CommitsService.html":{}}}],["this.commitsservice.findallcommitsbybakedrepoid(pageoptionsdto",{"_index":2649,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findallcommitsbycommitauthorid(pageoptionsdto",{"_index":2652,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findcommitbyid(id",{"_index":2646,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":2082,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":2167,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":2169,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":2182,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":2174,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":2178,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":2180,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":2176,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":2172,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":2162,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":2164,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":601,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":605,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"pizza.host",{"_index":2680,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"pizza.port",{"_index":2681,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":3324,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":3329,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":3327,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":3421,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":838,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":2897,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":1151,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":1154,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":3381,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":2513,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":2160,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":2168,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":2165,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1918,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1905,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":2048,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":2063,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":2049,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":2070,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":1985,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":1988,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":2006,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":3746,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":2008,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":3749,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":1991,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":1995,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":1999,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":2002,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":2011,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":2849,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":4312,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":697,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":567,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(0",{"_index":2861,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getcontributorrangequerybuilder(range",{"_index":2871,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getvotequery(repoid",{"_index":4366,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hasnextpage",{"_index":2542,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2541,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":2159,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":2181,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":2173,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":2177,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":2179,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":2175,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":2171,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":2354,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":2356,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":2358,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":2357,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":4050,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":4045,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":4039,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":4041,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":4056,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":4064,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":4062,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2397,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2400,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2433,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2438,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2440,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2439,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":2359,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":4109,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":4085,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":4099,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":4082,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":4077,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":2318,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":4037,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":2322,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":4086,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.issuesummaryservice.generateissuesummary(generateissuesummarydto",{"_index":2457,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["this.itemcount",{"_index":2538,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2536,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":1185,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":1195,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":1191,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":1190,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2284,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":1188,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":3413,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":2289,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":1194,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2287,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":1193,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":2491,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":2492,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":1122,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":1124,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":3429,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":3436,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":4167,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":2161,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":2163,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":2514,"title":{},"body":{"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":566,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2534,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":2539,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":736,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["this.pizzaovenservice.findallbakedrepos(pageoptionsdto",{"_index":2634,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.findbakedrepobyid(id",{"_index":2631,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakeoptionsinfo",{"_index":2627,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":2763,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":2733,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":2838,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":2850,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":2714,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":3722,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallchurncontributors(pageoptionsdto",{"_index":915,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":878,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":913,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallrepeatcontributors(pageoptionsdto",{"_index":917,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":2716,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":911,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":2722,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.reactionsquerybuilder",{"_index":4273,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":2767,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":3026,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":3065,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":2925,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":2927,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":2896,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":2900,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":4201,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":3289,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":3294,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":3295,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":3296,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":3261,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":3267,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":3268,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":3270,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":3456,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":3462,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":3463,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":3464,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":4364,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":4368,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":4369,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":4370,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":3156,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":3152,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":3118,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":3114,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":1189,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":3317,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":3316,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":3383,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":3423,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":3408,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":3192,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":3189,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":3034,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":2776,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":3348,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":3349,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":3676,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":3678,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":3680,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":3679,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":3648,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":3653,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":3661,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":3657,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":3773,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":3785,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":3787,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":3788,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":3814,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.findallfollowers(userid",{"_index":3978,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":3812,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":3816,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":3997,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":3986,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":4002,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":4004,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":4005,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":3967,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":3941,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":3976,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":3985,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":3984,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2247,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":3871,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":3886,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":3881,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":3891,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2240,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":3724,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2243,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2256,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2253,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":3880,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":3875,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":3873,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":3890,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findtop(pageoptionsdto",{"_index":2259,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2249,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":3876,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":4157,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":4168,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":4181,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":3786,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(newhighlight.id",{"_index":3981,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.adduserhighlightreactionnotification(userid",{"_index":4003,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":4131,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":4227,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":4225,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":4228,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":4272,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":4318,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":4323,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(user.id",{"_index":4314,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":4048,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":3651,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":3649,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2005,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":3729,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":3410,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":3240,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":3233,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":3236,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":2166,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":523,"title":{},"body":{"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":1178,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":4923,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":1280,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":562,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/IssueSummaryService.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":5279,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":5621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":3369,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":3396,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":3398,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":3401,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":3400,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":3399,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":3403,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":3407,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":3405,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1479,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":1984,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["token.guard",{"_index":1977,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":2074,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":2077,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":2080,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":541,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":5454,"title":{},"body":{"index.html":{}}}],["top",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2378,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":2958,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":2957,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":2959,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":2091,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["topics",{"_index":4815,"title":{},"body":{"changelog.html":{}}}],["toprepos",{"_index":3727,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":3540,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["tort",{"_index":5556,"title":{},"body":{"license.html":{}}}],["total",{"_index":1275,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":1012,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":554,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1704,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1680,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1681,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":4706,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":3959,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@column({type",{"_index":1770,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["true})@isarray()@isstring({each",{"_index":1073,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["true})@isboolean",{"_index":4375,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@isoptional",{"_index":1818,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@isstring({each",{"_index":1817,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@type(undefined",{"_index":2508,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":2507,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["turbo",{"_index":5672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":3502,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["twitter_username",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":5585,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":594,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeorm/query",{"_index":2564,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":2149,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":1158,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":4123,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbbakedrepo",{"_index":2659,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":1134,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":1910,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":2020,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":2412,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":2480,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":923,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":778,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":3338,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2264,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":4213,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":5083,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":5477,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":4758,"title":{},"body":{"changelog.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":5638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":2131,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["unable",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":2307,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":5299,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":595,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":3838,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["undefined})@column({type",{"_index":1516,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":3611,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":795,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":805,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":2797,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":2981,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isoptional",{"_index":2120,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":1010,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":3594,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["undo",{"_index":5098,"title":{},"body":{"changelog.html":{}}}],["unfeaturehighlight",{"_index":2194,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":2224,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":3132,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":3155,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":3130,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":3794,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":3804,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":3806,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":1271,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":4398,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unix",{"_index":5691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":507,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":552,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":4074,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":3499,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":1730,"title":{},"body":{"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["update",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":4882,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":1400,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1312,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":4058,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":4061,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":4060,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":3655,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferences",{"_index":4236,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":4257,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":3549,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":3864,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":3877,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":3828,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":3861,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2417,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2429,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":2305,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":4088,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":4087,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":4105,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":4094,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":4066,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":4071,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":2330,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":2350,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":3557,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":4059,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":4237,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":4259,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":4238,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":4261,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":4239,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":4263,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":4240,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":4265,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercollaboration",{"_index":3621,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":3637,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":3563,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":3656,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":322,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":323,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":3905,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":3937,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":332,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":4241,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":4267,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":4756,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":3386,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":3340,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":3345,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/PizzaOvenService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["url'})@column({type",{"_index":1366,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":5662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":4614,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":4680,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":2267,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":2268,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":557,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"index.html":{}}}],["usefactory",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":1980,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useless",{"_index":3951,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1429,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apiokresponse()@useguards(supabaseguard",{"_index":4194,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3842,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":3632,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apiokresponse({type",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":4326,"title":{},"body":{"injectables/UserService.html":{}}}],["user.collaborations",{"_index":1746,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.collaborations)@joincolumn({name",{"_index":1740,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.company",{"_index":4329,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":4118,"title":{},"body":{"modules/UserModule.html":{}}}],["user.discord_url",{"_index":4335,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_email",{"_index":4338,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":4331,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":3569,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":3581,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":3586,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":3576,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":3579,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":3572,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":3599,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":3597,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":3574,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":3584,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":3578,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":3589,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":3583,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":4325,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1744,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.from_user_notifications",{"_index":1860,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.from_user_notifications)@joincolumn({name",{"_index":1835,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.github_sponsors_url",{"_index":4333,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1786,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1780,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":3725,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1407,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":1403,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":4337,"title":{},"body":{"injectables/UserService.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":4200,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.is_open_sauced_member",{"_index":4313,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":4334,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":4330,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":4324,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":4339,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1617,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1612,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1632,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1628,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1651,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1647,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1666,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1662,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":1747,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.request_collaborations)@joincolumn({name",{"_index":1735,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":3963,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.timezone",{"_index":4332,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":1886,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":1882,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":4328,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":4327,"title":{},"body":{"injectables/UserService.html":{}}}],["user/collaborations",{"_index":3617,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/update",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":3732,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{}}}],["user/highlights",{"_index":3819,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":4008,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":4125,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":4189,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/services/user.service",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user/user",{"_index":2231,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user_collaborations",{"_index":1745,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows",{"_index":4295,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows.deleted_at",{"_index":4296,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows.user_id=users.id",{"_index":3775,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_follows_deleted_at",{"_index":3783,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1806,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["user_highlight_reactions.user_id=users.id",{"_index":3990,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights",{"_index":1784,"title":{},"body":{"entities/DbUserHighlight.html":{},"injectables/UserService.html":{}}}],["user_highlights.deleted_at",{"_index":4292,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights.id",{"_index":4279,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights.user_id",{"_index":3949,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["user_highlights.user_id=users.id",{"_index":3942,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":3944,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":3947,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1378,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_id=:userid",{"_index":3950,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_metadata",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":1856,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":4285,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":4284,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":4158,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_repos",{"_index":1865,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":1885,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":3659,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":3660,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":3614,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":3666,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":3642,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":3685,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["userendorsementcontroller",{"_index":3730,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":3759,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":3790,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":3750,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":3889,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":3907,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userhighlightrepository",{"_index":3909,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":3817,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":2230,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2407,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2406,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["userinterests",{"_index":3066,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":3073,"title":{},"body":{"injectables/RepoService.html":{}}}],["usermessage",{"_index":587,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":49,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/EndorsementController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":3798,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":3807,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":3708,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3702,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":4306,"title":{},"body":{"injectables/UserService.html":{}}}],["usernames",{"_index":1815,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":4149,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":4172,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":4171,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":4173,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":4169,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":4170,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":4116,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":4140,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":3757,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":1852,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":4176,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightcreated",{"_index":4179,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":4178,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":309,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":4117,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["userrelations",{"_index":3006,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":3053,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":4202,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["userreporepository",{"_index":4218,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":4244,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":50,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":4210,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":3409,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/EndorsementService.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["users'})@apiokresponse({type",{"_index":3712,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":3717,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.dto.ts",{"_index":3542,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:14",{"_index":3544,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.dto.ts:21",{"_index":3547,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.dto.ts:33",{"_index":3543,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.dto.ts:35",{"_index":3548,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":3715,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.entity.ts",{"_index":1715,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["users.entity.ts:8",{"_index":1717,"title":{},"body":{"classes/DbTopUser.html":{}}}],["users.id",{"_index":4276,"title":{},"body":{"injectables/UserService.html":{}}}],["users_email",{"_index":4289,"title":{},"body":{"injectables/UserService.html":{}}}],["users_followers_count",{"_index":4298,"title":{},"body":{"injectables/UserService.html":{}}}],["users_following_count",{"_index":4297,"title":{},"body":{"injectables/UserService.html":{}}}],["users_highlights_count",{"_index":4293,"title":{},"body":{"injectables/UserService.html":{}}}],["users_is_maintainer",{"_index":4304,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":4286,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1615,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1631,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1650,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1665,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1876,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":354,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":859,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["utc",{"_index":3587,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":2276,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":3370,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1341,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1354,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1795,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1419,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1342,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":677,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["validate",{"_index":3515,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["validate(user",{"_index":3520,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":2512,"title":{},"body":{"classes/PageDto.html":{}}}],["validation",{"_index":4699,"title":{},"body":{"changelog.html":{}}}],["validator",{"_index":488,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["value",{"_index":790,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":4686,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["varchar",{"_index":1771,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["variable",{"_index":5151,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":5141,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":1205,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["velocity",{"_index":4561,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":1100,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":1113,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":5284,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":5243,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":5292,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":4479,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":5019,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":5498,"title":{},"body":{"index.html":{}}}],["view",{"_index":2299,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":3558,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1807,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":1002,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visit",{"_index":5372,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5503,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":4998,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":5502,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5506,"title":{},"body":{"index.html":{}}}],["vite",{"_index":5012,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":5456,"title":{},"body":{"index.html":{}}}],["void",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":5187,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":5219,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":1318,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":1273,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":5261,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":3478,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1654,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":3205,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":4347,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":3196,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:113",{"_index":3207,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:132",{"_index":3210,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:36",{"_index":3214,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:54",{"_index":3219,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:71",{"_index":3222,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:90",{"_index":3225,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":3229,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":4351,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":4361,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":3213,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["votedrepodto",{"_index":3218,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["voteexists",{"_index":4365,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":4367,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":51,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":3201,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":3235,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":3220,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":3202,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":3223,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":3035,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":2988,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":3228,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":4619,"title":{},"body":{"changelog.html":{}}}],["wait",{"_index":470,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/PizzaOvenService.html":{}}}],["waitlist",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":3488,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":1101,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":1115,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warnings",{"_index":4650,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":5544,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5540,"title":{},"body":{"license.html":{}}}],["watch",{"_index":5437,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":2985,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":5442,"title":{},"body":{"index.html":{}}}],["web",{"_index":2139,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":4874,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":3356,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":3358,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":3367,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":3364,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":3357,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":5334,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":3355,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":3420,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3506,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":1858,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":1851,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":2053,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"id",{"_index":4287,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":2360,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2434,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2441,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(login",{"_index":4305,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"lower(repos.full_name",{"_index":2058,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":3290,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":4372,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"reactions.deleted_at",{"_index":4280,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":3683,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.following_user_id",{"_index":3776,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_follows.user_id",{"_index":3778,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":3991,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":3945,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":4160,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":3024,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`(:topic",{"_index":3070,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":2842,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`now",{"_index":3962,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`pull_requests.updated_at",{"_index":2867,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":1754,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"license.html":{}}}],["withdeleted",{"_index":3999,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["without",{"_index":1286,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"license.html":{}}}],["work",{"_index":5093,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":4515,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["workflows",{"_index":4475,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":5035,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":5451,"title":{},"body":{"index.html":{}}}],["writing",{"_index":4985,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["written",{"_index":548,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x509",{"_index":5401,"title":{},"body":{"index.html":{}}}],["xa",{"_index":1550,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":4410,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":4711,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":831,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["yml",{"_index":4597,"title":{},"body":{"changelog.html":{}}}],["you'})@column({type",{"_index":1842,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":5383,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":5381,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":5382,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":5380,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5500,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":2770,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":1287,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogSummaryModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            IssueSummaryModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport {\n  ApiConfig,\n  DbApiConfig,\n  DbLoggingConfig,\n  EndpointConfig,\n  StripeConfig,\n  OpenAIConfig,\n  PizzaConfig,\n} from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { DbBakedRepo } from \"./pizza/entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./pizza/entities/commit_authors.entity\";\nimport { DbCommits } from \"./pizza/entities/commits.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\nimport { IssueSummaryModule } from \"./issues/issue-summary.module\";\nimport { BlogSummaryModule } from \"./blogs/issue-summary.module\";\nimport { PizzaOvenModule } from \"./pizza/pizza-oven.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig, OpenAIConfig, PizzaConfig],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n            DbBakedRepo,\n            DbCommitAuthors,\n            DbCommits,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    IssueSummaryModule,\n    BlogSummaryModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n    PizzaOvenModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { UserService } from \"../user/services/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { SupabaseGuard } from \"./supabase.guard\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BakeRepoDto.html":{"url":"classes/BakeRepoDto.html","title":"class - BakeRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BakeRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/baked-repo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                url\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo clone URL', type: String, example: 'https://github.com/open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Option to wait for Pizza service to finish baking repo', type: String, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsString } from \"class-validator\";\n\nexport class BakeRepoDto {\n  @ApiProperty({\n    description: \"Repo clone URL\",\n    type: String,\n    example: \"https://github.com/open-sauced/insights\",\n  })\n  @IsString()\n  url: string;\n\n  @ApiProperty({\n    description: \"Option to wait for Pizza service to finish baking repo\",\n    type: String,\n    example: false,\n  })\n  @IsBoolean()\n  wait: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogSummaryController.html":{"url":"controllers/BlogSummaryController.html","title":"controller - BlogSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blogs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                genereateBlogSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        genereateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    genereateBlogSummary(genereateBlogSummaryDto: CreateBlogSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateBlogSummary', summary: 'Generate a summary for a markdown supported blog'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateBlogSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/blogs/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genereateBlogSummaryDto\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\nimport { BlogSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"blogs\")\n@ApiTags(\"Blog summary service\")\nexport class BlogSummaryController {\n  constructor(private readonly blogSummaryService: BlogSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateBlogSummary\",\n    summary: \"Generate a summary for a markdown supported blog\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateBlogSummaryDto })\n  async genereateBlogSummary(@Body() genereateBlogSummaryDto: CreateBlogSummaryDto) {\n    const summary = await this.blogSummaryService.generateBlogSummary(genereateBlogSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogSummaryModule.html":{"url":"modules/BlogSummaryModule.html","title":"module - BlogSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_imports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blogs/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { BlogSummaryService } from \"./issue-summary.service\";\nimport { BlogSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [BlogSummaryController],\n  providers: [BlogSummaryService],\n  exports: [BlogSummaryService],\n})\nexport class BlogSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogSummaryService.html":{"url":"injectables/BlogSummaryService.html","title":"injectable - BlogSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBlogSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/blogs/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBlogSummary(options: CreateBlogSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/issue-summary.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\n\n@Injectable()\nexport class BlogSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate a blog summary for a blog with the specifications mentioned below`,\n      `The summary should be written in ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the blog.\",\n    ].join(\"\\n\");\n  }\n\n  async generateBlogSummary(options: CreateBlogSummaryDto) {\n    const content = `Blog Title: ${options.blogTitle}\\n\\nBlog Content: ${options.blogMarkdown}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitAuthorDto.html":{"url":"classes/CommitAuthorDto.html","title":"class - CommitAuthorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitAuthorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commit_authors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Public Commit Author Email', type: String, example: 'hello@opensauced.pizza'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commit_authors.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitAuthorDto {\n  @ApiProperty({\n    description: \"Public Commit Author Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsString()\n  author_email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitAuthorsService.html":{"url":"injectables/CommitAuthorsService.html","title":"injectable - CommitAuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitAuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commit-authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitAuthors\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitAuthorsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commit-authors.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitAuthorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\n\n@Injectable()\nexport class CommitAuthorsService {\n  constructor(\n    @InjectRepository(DbCommitAuthors, \"ApiConnection\")\n    private commitAuthorsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitAuthorsRepository.createQueryBuilder(\"commit_authors\");\n\n    return builder;\n  }\n\n  async findAllCommitAuthors(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitAuthorById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitsDto.html":{"url":"classes/CommitsDto.html","title":"class - CommitsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commits.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commit_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hash for a specific commit', type: String, example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commits.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitsDto {\n  @ApiProperty({\n    description: \"Hash for a specific commit\",\n    type: String,\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @IsString()\n  commit_hash: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitsService.html":{"url":"injectables/CommitsService.html","title":"injectable - CommitsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commits.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                findAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commits.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Injectable()\nexport class CommitsService {\n  constructor(\n    @InjectRepository(DbCommits, \"ApiConnection\")\n    private commitsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitsRepository.createQueryBuilder(\"commits\");\n\n    return builder;\n  }\n\n  async findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"baked_repo_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"commit_author_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllChurnPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRepeatPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/churn')@ApiOperation({operationId: 'findAllChurnPullRequestContributors', summary: 'Gets all recent churned contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repeat')@ApiOperation({operationId: 'findAllRepeatPullRequestContributors', summary: 'Gets all recent repeat contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n\n  @Get(\"/churn\")\n  @ApiOperation({\n    operationId: \"findAllChurnPullRequestContributors\",\n    summary: \"Gets all recent churned contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllChurnPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllChurnContributors(pageOptionsDto);\n  }\n\n  @Get(\"/repeat\")\n  @ApiOperation({\n    operationId: \"findAllRepeatPullRequestContributors\",\n    summary: \"Gets all recent repeat contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRepeatPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRepeatContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorController } from \"./contributor.controller\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogSummaryDto.html":{"url":"classes/CreateBlogSummaryDto.html","title":"class - CreateBlogSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/dtos/create-blog-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blogMarkdown\n                            \n                            \n                                blogTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blogMarkdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Markdown', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blogTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateBlogSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Blog Title\",\n    type: String,\n  })\n  @IsString()\n  blogTitle: string;\n\n  @ApiProperty({\n    description: \"Blog Markdown\",\n    type: String,\n  })\n  @IsString()\n  blogMarkdown: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: Number, example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: Number, example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: Number,\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: Number,\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIssueSummaryDto.html":{"url":"classes/CreateIssueSummaryDto.html","title":"class - CreateIssueSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIssueSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/dtos/create-issue-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issueComments\n                            \n                            \n                                issueDescription\n                            \n                            \n                                issueTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        issueComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Comments', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Description', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateIssueSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Issue Title\",\n    type: String,\n  })\n  @IsString()\n  issueTitle: string;\n\n  @ApiProperty({\n    description: \"Issue Description\",\n    type: String,\n  })\n  @IsString()\n  issueDescription: string;\n\n  @ApiProperty({\n    description: \"Issue Comments\",\n    type: String,\n  })\n  @IsString()\n  issueComments: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                taggedRepos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taggedRepos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"pull_request\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight type', type: String, example: 'pull_request'})@IsString()@IsIn(['pull_request', 'blog_post', 'issue', 'milestone'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsDateString, IsIn, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n\n  @ApiProperty({\n    description: \"Highlight type\",\n    type: String,\n    example: \"pull_request\",\n  })\n  @IsString()\n  @IsIn([\"pull_request\", \"blog_post\", \"issue\", \"milestone\"])\n  public type = \"pull_request\";\n\n  @ApiProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public taggedRepos: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_CustomerModule_exports\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbBakedRepo.html":{"url":"entities/DbBakedRepo.html","title":"entity - DbBakedRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbBakedRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/baked-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clone_url\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clone_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository clone url', example: 'https://github.com/open-sauced/insights.git'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.baked_repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repository identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 12345678})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"baked_repos\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbBakedRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Baked repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository clone url\",\n    example: \"https://github.com/open-sauced/insights.git\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public clone_url: string;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 12345678,\n  })\n  @PrimaryColumn(\"bigint\")\n  public repo_id!: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.baked_repo)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommitAuthors.html":{"url":"entities/DbCommitAuthors.html","title":"entity - DbCommitAuthors","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommitAuthors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commit_authors.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commit_author_email\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.commit_author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"commit_authors\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommitAuthors extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public commit_author_email: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.commit_author)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommits.html":{"url":"entities/DbCommits.html","title":"entity - DbCommits","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commits.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                baked_repo\n                            \n                            \n                                    Public\n                                baked_repo_id\n                            \n                            \n                                    Public\n                                commit_author\n                            \n                            \n                                    Public\n                                commit_author_id\n                            \n                            \n                                    Public\n                                commit_date\n                            \n                            \n                                    Public\n                                commit_hash\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbBakedRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, baked_repo => baked_repo.commits)@JoinColumn({name: 'baked_repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repo identifier', example: 57568598})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommitAuthors\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, commit_author => commit_author.commits)@JoinColumn({name: 'commit_author_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 9876543})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Date for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Hash for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, JoinColumn, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbBakedRepo } from \"./baked-repo.entity\";\nimport { DbCommitAuthors } from \"./commit_authors.entity\";\n\n@Entity({\n  name: \"commits\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommits extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Hash for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_hash: string;\n\n  @ApiModelProperty({\n    description: \"Date for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_date: string;\n\n  @ApiModelProperty({\n    description: \"Baked repo identifier\",\n    example: 57568598,\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public baked_repo_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbBakedRepo, (baked_repo) => baked_repo.commits)\n  @JoinColumn({\n    name: \"baked_repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public baked_repo!: DbBakedRepo;\n\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 9876543,\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public commit_author_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbCommitAuthors, (commit_author) => commit_author.commits)\n  @JoinColumn({\n    name: \"commit_author_id\",\n    referencedColumnName: \"id\",\n  })\n  public commit_author!: DbCommitAuthors;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:101\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbInsightRepo } from \"./insight-repo.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:70\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_by_login\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:240\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:254\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:233\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:247\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:265\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:226\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:199\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_by_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request merged by username', example: 'bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:216\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request merged by username\",\n    example: \"bdougie\",\n  })\n  @Column(\"text\")\n  public merged_by_login?: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations)@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations)\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                tagged_repos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:183\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tagged_repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@Column({type: 'varchar', array: true, default: '{}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:167\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight type', example: 'pull_request'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:175\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Highlight type\",\n    example: \"pull_request\",\n  })\n  @Column(\"text\")\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @Column({\n    type: \"varchar\",\n    array: true,\n    default: \"{}\",\n  })\n  public tagged_repos: string[];\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                reaction_users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reaction_users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Usernames of users who reacted with this emoji', example: undefined, isArray: true})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                from_user\n                            \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.from_user_notifications)@JoinColumn({name: 'from_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn, JoinColumn, ManyToOne } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.from_user_notifications)\n  @JoinColumn({\n    name: \"from_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public from_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserCreatedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/services/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_imports\n\n\n\ncluster_EndorsementModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                findTopHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopHighlights(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'findTopHighlights', summary: 'Finds top highlights for the day range and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"findTopHighlights\",\n    summary: \"Finds top highlights for the day range and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findTopHighlights(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findTop(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { HighlightController } from \"./highlight.controller\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n} from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsight(insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssueSummaryController.html":{"url":"controllers/IssueSummaryController.html","title":"controller - IssueSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssueSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(generateIssueSummaryDto: CreateIssueSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateIssueSummary', summary: 'Generate a summary for an issue'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateIssueSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/issues/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateIssueSummaryDto\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"issues\")\n@ApiTags(\"Issue summary service\")\nexport class IssueSummaryController {\n  constructor(private readonly issueSummaryService: IssueSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateIssueSummary\",\n    summary: \"Generate a summary for an issue\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateIssueSummaryDto })\n  async generateIssueSummary(@Body() generateIssueSummaryDto: CreateIssueSummaryDto) {\n    const summary = await this.issueSummaryService.generateIssueSummary(generateIssueSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssueSummaryModule.html":{"url":"modules/IssueSummaryModule.html","title":"module - IssueSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    IssueSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issues/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IssueSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\nimport { IssueSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [IssueSummaryController],\n  providers: [IssueSummaryService],\n  exports: [IssueSummaryService],\n})\nexport class IssueSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueSummaryService.html":{"url":"injectables/IssueSummaryService.html","title":"injectable - IssueSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssueSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/issues/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(options: CreateIssueSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\n\n@Injectable()\nexport class IssueSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt issue summary for an issue taken from github issues with the specifications mentioned below`,\n      `The summary should be written in past tense and ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"If the issue or its comments include a solution, include it in the summary.\",\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the issue.\",\n    ].join(\"\\n\");\n  }\n\n  async generateIssueSummary(options: CreateIssueSummaryDto) {\n    const content = `Issue Title: ${options.issueTitle}\\nIssue Description: ${options.issueDescription}\\nIssue Comments: ${options.issueComments}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"./page-meta.dto\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PizzaOvenController.html":{"url":"controllers/PizzaOvenController.html","title":"controller - PizzaOvenController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PizzaOvenController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bake\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                            \n                                    Async\n                                listAllBakedRepos\n                            \n                            \n                                    Async\n                                listAllCommitAuthors\n                            \n                            \n                                    Async\n                                listAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                listAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('repos/:id')@ApiOperation({operationId: 'findBakedRepoById', summary: 'Finds a baked repo by :id'})@ApiOkResponse({type: DbBakedRepo})@ApiNotFoundResponse({description: 'Baked repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commit-authors/:id')@ApiOperation({operationId: 'findCommitAuthorById', summary: 'Finds a commit author by :id'})@ApiOkResponse({type: DbCommitAuthors})@ApiNotFoundResponse({description: 'Commit author not found'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commits/:id')@ApiOperation({operationId: 'findCommitById', summary: 'Finds a commit by :id'})@ApiOkResponse({type: DbCommits})@ApiNotFoundResponse({description: 'Commit not found'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'listAllBakedRepos', summary: 'Finds all baked repos and paginates them'})@ApiPaginatedResponse(DbBakedRepo)@ApiOkResponse({type: DbBakedRepo})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commit-authors/list')@ApiOperation({operationId: 'listAllCommitAuthors', summary: 'Finds all commit authors and paginates them'})@ApiPaginatedResponse(DbCommitAuthors)@ApiOkResponse({type: DbCommitAuthors})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/repo/:id')@ApiOperation({operationId: 'listAllCommitsByBakedRepoId', summary: 'Finds all commits by baked repo :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/commit-author/:id')@ApiOperation({operationId: 'listAllCommitsByCommitAuthorId', summary: 'Finds all commits by commit author :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeOptionsInfo: BakeRepoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'Bake a repository with the pizza oven microservice', summary: 'postToPizzaOvenService'})@ApiAcceptedResponse()@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: BakeRepoDto})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeOptionsInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, ParseIntPipe, Post, Query } from \"@nestjs/common\";\nimport {\n  ApiAcceptedResponse,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Controller(\"bake\")\n@ApiTags(\"Pizza oven service\")\nexport class PizzaOvenController {\n  constructor(\n    private readonly pizzaOvenService: PizzaOvenService,\n    private readonly commitAuthorService: CommitAuthorsService,\n    private readonly commitsService: CommitsService\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"Bake a repository with the pizza oven microservice\",\n    summary: \"postToPizzaOvenService\",\n  })\n  @ApiAcceptedResponse()\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: BakeRepoDto })\n  async postToPizzaOvenService(@Body() bakeOptionsInfo: BakeRepoDto) {\n    const statusCode = await this.pizzaOvenService.postToPizzaOvenService(bakeOptionsInfo);\n\n    if (statusCode !== 202) {\n      throw new BadRequestException();\n    }\n  }\n\n  @Get(\"repos/:id\")\n  @ApiOperation({\n    operationId: \"findBakedRepoById\",\n    summary: \"Finds a baked repo by :id\",\n  })\n  @ApiOkResponse({ type: DbBakedRepo })\n  @ApiNotFoundResponse({ description: \"Baked repository not found\" })\n  async findBakedRepoById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pizzaOvenService.findBakedRepoById(id);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"listAllBakedRepos\",\n    summary: \"Finds all baked repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbBakedRepo)\n  @ApiOkResponse({ type: DbBakedRepo })\n  async listAllBakedRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pizzaOvenService.findAllBakedRepos(pageOptionsDto);\n  }\n\n  @Get(\"commit-authors/:id\")\n  @ApiOperation({\n    operationId: \"findCommitAuthorById\",\n    summary: \"Finds a commit author by :id\",\n  })\n  @ApiOkResponse({ type: DbCommitAuthors })\n  @ApiNotFoundResponse({ description: \"Commit author not found\" })\n  async findCommitAuthorById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitAuthorService.findCommitAuthorById(id);\n  }\n\n  @Get(\"/commit-authors/list\")\n  @ApiOperation({\n    operationId: \"listAllCommitAuthors\",\n    summary: \"Finds all commit authors and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommitAuthors)\n  @ApiOkResponse({ type: DbCommitAuthors })\n  async listAllCommitAuthors(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.commitAuthorService.findAllCommitAuthors(pageOptionsDto);\n  }\n\n  @Get(\"commits/:id\")\n  @ApiOperation({\n    operationId: \"findCommitById\",\n    summary: \"Finds a commit by :id\",\n  })\n  @ApiOkResponse({ type: DbCommits })\n  @ApiNotFoundResponse({ description: \"Commit not found\" })\n  async findCommitById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitsService.findCommitById(id);\n  }\n\n  @Get(\"/commits/list/repo/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByBakedRepoId\",\n    summary: \"Finds all commits by baked repo :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  async listAllCommitsByBakedRepoId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByBakedRepoId(pageOptionsDto, id);\n  }\n\n  @Get(\"/commits/list/commit-author/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByCommitAuthorId\",\n    summary: \"Finds all commits by commit author :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  async listAllCommitsByCommitAuthorId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByCommitAuthorId(pageOptionsDto, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PizzaOvenModule.html":{"url":"modules/PizzaOvenModule.html","title":"module - PizzaOvenModule","body":"\n                   \n\n\n\n\n    Modules\n    PizzaOvenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_imports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pizza/pizza-oven.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PizzaOvenController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { PizzaOvenController } from \"./pizza-oven.controller\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { DbCommits } from \"./entities/commits.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    HttpModule,\n    TypeOrmModule.forFeature([DbBakedRepo, DbCommitAuthors, DbCommits], \"ApiConnection\"),\n  ],\n  controllers: [PizzaOvenController],\n  providers: [PizzaOvenService, CommitAuthorsService, CommitsService],\n  exports: [PizzaOvenService, CommitAuthorsService, CommitsService],\n})\nexport class PizzaOvenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PizzaOvenService.html":{"url":"injectables/PizzaOvenService.html","title":"injectable - PizzaOvenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PizzaOvenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllBakedRepos\n                            \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bakedRepoRepository: Repository, httpService: HttpService, configService: ConfigService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/pizza-oven.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bakedRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeRepoInfo: BakeRepoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeRepoInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { lastValueFrom, map } from \"rxjs\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\n\n@Injectable()\nexport class PizzaOvenService {\n  constructor(\n    @InjectRepository(DbBakedRepo, \"ApiConnection\")\n    private bakedRepoRepository: Repository,\n    private readonly httpService: HttpService,\n    private configService: ConfigService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.bakedRepoRepository.createQueryBuilder(\"baked_repos\");\n\n    return builder;\n  }\n\n  async postToPizzaOvenService(bakeRepoInfo: BakeRepoDto): Promise {\n    const data = {\n      url: bakeRepoInfo.url,\n      wait: bakeRepoInfo.wait,\n    };\n\n    const host: string = this.configService.get(\"pizza.host\")!;\n    const port: string = this.configService.get(\"pizza.port\")!;\n\n    return lastValueFrom(this.httpService.post(`${host}:${port}/bake`, data).pipe(map((resp) => resp.status)));\n  }\n\n  async findBakedRepoById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllBakedRepos(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs(\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_exports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest, DbPRInsight], \"ApiConnection\"), RepoFilterModule, OpenAiModule],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n  ],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllChurnContributors\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllRepeatContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start: number, range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addGroupBy(\"author_login\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const currentMonthQuery = this.getContributorRangeQueryBuilder(0, range, repoIds);\n\n    queryBuilder\n      .select(\"current_month.author_login\")\n      .distinct()\n      .from(`(${currentMonthQuery.getQuery()})`, \"current_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= NOW() - INTERVAL '${range + range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(0, range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllChurnContributors(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= now() - INTERVAL '${range} days'`)\n            .andWhere(\"pull_requests.updated_at > {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= now() - INTERVAL '${range} days'`)\n            .andWhere(\"pull_requests.updated_at = NOW() - INTERVAL '${range} days'`)\n      .andWhere(`pull_requests.updated_at  0) {\n      queryBuilder.andWhere(\"repos.id IN (:...repoIds)\", { repoIds });\n    }\n\n    return queryBuilder;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ContributionService } from \"./contribution.service\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:85\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StarService } from \"./star.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StargazeService } from \"./stargaze.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SubmitService } from \"./submit.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { VoteService } from \"./vote.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/services/user.service\";\nimport { toDateTime } from \"./utils\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n  })\n  readonly notification_count?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID to filter followings from the list'})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:35\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    description: \"User ID to filter followings from the list\",\n  })\n  @IsOptional()\n  @Type(() => Number)\n  readonly userId?: number = 0;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserService } from \"./services/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllFollowers\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowers(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findAllFollowers(userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.following_user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n\n    return entities;\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      ...updateHighlightDto,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                findTop\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, userFollowService: UserFollowService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowService\n                                                  \n                                                        \n                                                                        UserFollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:296\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:328\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:279\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTop\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTop(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\nimport { UserFollowService } from \"./user-follow.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private userFollowService: UserFollowService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findTop(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .addSelect(\n        `\n        (SELECT COUNT(id) FROM user_highlight_reactions\n        WHERE highlight_id=user_highlights.id\n        AND deleted_at IS NULL)\n      `,\n        \"reactions\"\n      )\n      .where(`now() - INTERVAL '${range} days' ({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n      type: highlight.type,\n      tagged_repos: highlight.taggedRepos,\n    });\n\n    const newHighlight = await this.userHighlightRepository.save(newUserHighlight);\n\n    const followers = await this.userFollowService.findAllFollowers(userId);\n\n    const notifications = followers.map(async (follower) =>\n      this.userNotificationService.addUserHighlightNotification(newHighlight.id, userId, follower.user_id)\n    );\n\n    await Promise.all(notifications);\n\n    return newHighlight;\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .addSelect(\"ARRAY_AGG(users.login)\", \"reaction_users\")\n      .innerJoin(\"users\", \"users\", \"user_highlight_reactions.user_id=users.id\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .addGroupBy(\"emoji_id\");\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserService } from \"../user/services/user.service\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n      ],\n      \"ApiConnection\"\n    ),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n  ],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService, EndorsementService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, OmitType } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserNotification, [\"read_at\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserHighlightReactionNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReactionNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .innerJoinAndSelect(\"user_notifications.from_user\", \"from_user\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .orderBy(\"user_notifications.notified_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const notificationIds = entities\n      .filter((notification) => !notification.read_at)\n      .map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightCreated,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} created a new highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiOkResponse()@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiOkResponse()\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_UserReposModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findTopUsers\n                            \n                            \n                                reactionsQueryBuilder\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userHighlightReactionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/services/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionsQueryBuilder\n                        \n                    \n                \n            \n            \n                \nreactionsQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:277\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"../user.entity\";\nimport { UpdateUserDto } from \"../dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"../entities/user-notification.constants\";\nimport { DbUserHighlightReaction } from \"../entities/user-highlight-reaction.entity\";\nimport { DbTopUser } from \"../entities/top-users.entity\";\nimport { TopUsersDto } from \"../dtos/top-users.dto\";\nimport { PageDto } from \"../../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  reactionsQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    return builder;\n  }\n\n  async findTopUsers(pageOptionsDto: TopUsersDto): Promise> {\n    const queryBuilder = this.reactionsQueryBuilder();\n\n    const { userId } = pageOptionsDto;\n\n    queryBuilder\n      .select(\"users.login as login\")\n      .from(DbUser, \"users\")\n      .innerJoin(\"user_highlights\", \"user_highlights\", \"user_highlights.user_id = users.id\")\n      .innerJoin(\"user_highlight_reactions\", \"reactions\", \"reactions.highlight_id = user_highlights.id\")\n      .where(\"reactions.deleted_at IS NULL\");\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\n          \"users.id NOT IN (SELECT following_user_id FROM users_to_users_followers WHERE user_id = :userId AND deleted_at IS NULL)\"\n        )\n        .setParameters({ userId });\n    }\n\n    queryBuilder.groupBy(\"users.login\").orderBy(\"COUNT(reactions.user_id)\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getRawMany()]);\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findOneById(id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\"\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_highlights\".\"id\"), 0)\n        FROM user_highlights\n        WHERE user_id = users.id\n        AND user_highlights.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_highlights_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_following_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE following_user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_followers_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"pull_requests\".\"id\"), 0)\n        FROM pull_requests\n        WHERE LOWER(author_login) = :username\n        AND now() - INTERVAL '30 days'  0 THEN true\n              ELSE false\n            END\n          FROM pull_requests prs\n          JOIN repos on prs.repo_id=repos.id\n          WHERE prs.merged_by_login = :username\n        )::BOOLEAN`,\n        \"users_is_maintainer\"\n      )\n      .where(\"LOWER(login) = :username\", { username: username.toLowerCase() })\n      .setParameters({ username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async checkAddUser(user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter((identity) => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      const user = await this.findOneById(id, true);\n\n      if (!user.is_open_sauced_member) {\n        await this.userRepository.update(user.id, {\n          is_open_sauced_member: true,\n          connected_at: new Date(),\n        });\n      }\n\n      return user;\n    } catch (e) {\n      // create new user\n      const newUser = await this.userRepository.save({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : new Date(),\n      });\n\n      return newUser;\n    }\n  }\n\n  async updateUser(id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n        discord_url: user.discord_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding(id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus(id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole(id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests(id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail(email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.46.0-beta.7 (2023-08-24)\n🍕 Features\n\nremove following users from top users when a user id is provided (#275) (4c7261b)\n\n1.46.0-beta.6 (2023-08-23)\n🍕 Features\n\nshow reactors who reacted to highlights (#268) (cc2a57c)\n\n1.46.0-beta.5 (2023-08-23)\n🐛 Bug Fixes\n\nadd unit test for user-collaboration service and controller (#267) (670e3f9)\n\n1.46.0-beta.4 (2023-08-22)\n🐛 Bug Fixes\n\nadd Swagger API doc fixes for code generation (#270) (1fca4b0)\n\n1.46.0-beta.3 (2023-08-18)\n🍕 Features\n\nAdd Swagger YAML (#266) (177882b)\n\n1.46.0-beta.2 (2023-08-17)\n🐛 Bug Fixes\n\nremove extra query parameters from new contributors endpoint (#265) (bffc229)\n\n1.46.0-beta.1 (2023-08-17)\n🍕 Features\n\nadd tagged repos to user highlights (#263) (ae5415b)\n\n1.45.0 (2023-08-16)\n🐛 Bug Fixes\n\nadd highlight id to user notification metadata (#260) (94dbf47)\nAligns pizza post request with post JSON body (#256) (480aab6)\nupdate query for sending notifications for created highlights (#257) (de83f90)\n\n🍕 Features\n\nadd flag whether the user is a maintainer of repos (#259) (20d1957)\nadd merge author to pull requests table (#255) (6cf8091)\n\n1.45.0-beta.5 (2023-08-15)\n🍕 Features\n\nadd flag whether the user is a maintainer of repos (#259) (20d1957)\n\n1.45.0-beta.4 (2023-08-15)\n🐛 Bug Fixes\n\nadd highlight id to user notification metadata (#260) (94dbf47)\n\n1.45.0-beta.3 (2023-08-15)\n🐛 Bug Fixes\n\nupdate query for sending notifications for created highlights (#257) (de83f90)\n\n1.45.0-beta.2 (2023-08-15)\n🐛 Bug Fixes\n\nAligns pizza post request with post JSON body (#256) (480aab6)\n\n1.45.0-beta.1 (2023-08-15)\n🍕 Features\n\nadd merge author to pull requests table (#255) (6cf8091)\n\n1.44.0 (2023-08-14)\n🍕 Features\n\naccept highlight type during highlight creation (#242) (35d4f6b)\nadd endpoint to generate a summary for an issue (#245) (a46bd58)\nadd endpoint to generate blog summaries (#251) (de24c6b)\nadd endpoints for churned and repeat contributors (#249) (cc0b4de)\nadd source user info to the user notifications (#248) (69319cc)\nnotify followers when a highlight is created (#244) (892ef0f)\n\n🐛 Bug Fixes\n\nAdd documentation for pizza oven service (81d7777)\nrename Dockerfile to do.Dockerfile for deployment (27e2e8f)\n\n1.44.0-beta.8 (2023-08-14)\n🐛 Bug Fixes\n\nAdd documentation for pizza oven service (81d7777)\n\n1.44.0-beta.7 (2023-08-14)\n🍕 Features\n\nadd endpoint to generate blog summaries (#251) (de24c6b)\n\n1.44.0-beta.6 (2023-08-12)\n🍕 Features\n\nadd source user info to the user notifications (#248) (69319cc)\n\n1.44.0-beta.5 (2023-08-10)\n🍕 Features\n\nnotify followers when a highlight is created (#244) (892ef0f)\n\n1.44.0-beta.4 (2023-08-10)\n🍕 Features\n\nadd endpoints for churned and repeat contributors (#249) (cc0b4de)\n\n1.44.0-beta.3 (2023-08-08)\n🍕 Features\n\nadd endpoint to generate a summary for an issue (#245) (a46bd58)\n\n1.44.0-beta.2 (2023-08-07)\n🐛 Bug Fixes\n\nrename Dockerfile to do.Dockerfile for deployment (bda124c)\n\n1.43.2 (2023-08-07)\n🐛 Bug Fixes\n\nrename Dockerfile to do.Dockerfile for deployment (bda124c)\n\n1.43.1 (2023-08-04)\n🐛 Bug Fixes\n\nupdate package name (8a2cba4)\n\n1.43.0 (2023-08-04)\n🍕 Features\n\nadd endpoint to list top highlights for the date range (#236) (0eb60f2)\nadd pagination to notifications endpoint (#238) (27f5115)\n\n🐛 Bug Fixes\n\nupdate workflows to use GitHub app for semantic release versioning (#239) (ee86c56)\n\n1.43.0-beta.2 (2023-08-04)\n🐛 Bug Fixes\n\nupdate workflows to use GitHub app for semantic release versioning (#239) (ee86c56)\n\n1.43.0-beta.1 (2023-08-04)\n🍕 Features\n\nadd endpoint to list top highlights for the date range (#236) (0eb60f2)\nadd pagination to notifications endpoint (#238) (27f5115)\n\n1.42.0 (2023-08-03)\n🍕 Features\n\nadd endpoint for all recent contributors (#227) (88bc55a)\nadd type field to user highlights table (#232) (13db3c6)\nreturn all notifications even if they have been read (#230) (cc526bc)\n\n✅ Tests\n\nadd unit tests for user service (#219) (9ca3e9b)\nadd unit tests for vote service (#217) (411c595)\n\n🐛 Bug Fixes\n\nreturn top users based on no, of reactions recieved (#233) (26f0f76)\n\n1.42.0-beta.5 (2023-08-03)\n✅ Tests\n\nadd unit tests for user service (#219) (9ca3e9b)\n\n🐛 Bug Fixes\n\nreturn top users based on no, of reactions recieved (#233) (26f0f76)\n\n1.42.0-beta.4 (2023-08-02)\n🍕 Features\n\nreturn all notifications even if they have been read (#230) (cc526bc)\n\n1.42.0-beta.3 (2023-08-01)\n🍕 Features\n\nadd type field to user highlights table (#232) (13db3c6)\n\n1.42.0-beta.2 (2023-07-31)\n✅ Tests\n\nadd unit tests for vote service (#217) (411c595)\n\n1.42.0-beta.1 (2023-07-31)\n🍕 Features\n\nadd endpoint for all recent contributors (#227) (88bc55a)\n\n1.41.0 (2023-07-24)\n🧑‍💻 Code Refactoring\n\nsetup eslint for unit tests (#214) (758b2d2)\n\n🍕 Features\n\nadd limit query params and pagination to top users endpoint (#216) (58e4723)\n\n1.41.0-beta.1 (2023-07-20)\n🍕 Features\n\nadd limit query params and pagination to top users endpoint (#216) (58e4723)\n\n1.40.1-beta.1 (2023-07-18)\n🧑‍💻 Code Refactoring\n\nsetup eslint for unit tests (#214) (758b2d2)\n\n1.40.0 (2023-07-17)\n🔁 Continuous Integration\n\nadd build workflow to CI (#201) (9134f41)\n\n🐛 Bug Fixes\n\nadd missing api service module imports (06dcc23)\nremove id in swagger docs for highlights endpoint (#208) (802fd4b)\n\n🧑‍💻 Code Refactoring\n\nadd pager service and drop duplicated code (#199) (4828464)\nsetup unit tests (#207) (39e7ff4)\n\n🍕 Features\n\nadd discord url to user profile (#211) (9b75deb)\nadd endpoint to check if authed user has voted the repo (#210) (9f75a41)\nadd featured highlights endpoints (#198) (7f618bf)\nimplement to 10 users feature (#200) (452a769)\n\n🤖 Build System\n\nenable local development setup with Docker and PostgreSQL (#205) (84af9ff)\n\n1.40.0-beta.9 (2023-07-17)\n🤖 Build System\n\nenable local development setup with Docker and PostgreSQL (#205) (84af9ff)\n\n1.40.0-beta.8 (2023-07-17)\n🍕 Features\n\nadd discord url to user profile (#211) (9b75deb)\nadd endpoint to check if authed user has voted the repo (#210) (9f75a41)\n\n1.40.0-beta.7 (2023-07-14)\n🧑‍💻 Code Refactoring\n\nsetup unit tests (#207) (39e7ff4)\n\n1.40.0-beta.6 (2023-07-14)\n🐛 Bug Fixes\n\nremove id in swagger docs for highlights endpoint (#208) (802fd4b)\n\n1.40.0-beta.5 (2023-07-12)\n🔁 Continuous Integration\n\nadd build workflow to CI (#201) (9134f41)\n\n1.40.0-beta.4 (2023-07-12)\n🐛 Bug Fixes\n\nadd missing api service module imports (06dcc23)\n\n1.40.0-beta.3 (2023-07-12)\n🍕 Features\n\nimplement to 10 users feature (#200) (452a769)\n\n1.40.0-beta.2 (2023-07-11)\n🧑‍💻 Code Refactoring\n\nadd pager service and drop duplicated code (#199) (4828464)\n\n1.40.0-beta.1 (2023-07-06)\n🍕 Features\n\nadd featured highlights endpoints (#198) (7f618bf)\n\n1.39.0 (2023-07-05)\n🐛 Bug Fixes\n\nadd checks for requester and recipient for collaboration requests (#189) (f212fb2)\nchange swagger docs response for highlight reactions (#192) (56eb3bd)\nremove limit from repo recommendation query (638f9ec)\n\n🍕 Features\n\nadd endpoint for repo recommendations (#191) (0b6d16a)\nadd followers, following, recent pull requests and velocity counts to user info (#195) (109d081)\nenable promo codes with Stripe checkout (#190) (ad2c624)\n\n1.39.0-beta.5 (2023-07-05)\n🍕 Features\n\nadd followers, following, recent pull requests and velocity counts to user info (#195) (109d081)\n\n1.39.0-beta.4 (2023-07-03)\n🐛 Bug Fixes\n\nchange swagger docs response for highlight reactions (#192) (56eb3bd)\n\n1.39.0-beta.3 (2023-06-30)\n🐛 Bug Fixes\n\nremove limit from repo recommendation query (638f9ec)\n\n1.39.0-beta.2 (2023-06-29)\n🍕 Features\n\nadd endpoint for repo recommendations (#191) (0b6d16a)\n\n1.39.0-beta.1 (2023-06-29)\n🍕 Features\n\nenable promo codes with Stripe checkout (#190) (ad2c624)\n\n1.38.3-beta.1 (2023-06-28)\n🐛 Bug Fixes\n\nadd checks for requester and recipient for collaboration requests (#189) (f212fb2)\n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.38.2 (2023-06-21)\n🐛 Bug Fixes\n\nupdate query for merged pull requests for repositories (#185) (f9defe2)\n\n1.38.2-beta.1 (2023-06-21)\n🐛 Bug Fixes\n\nupdate query for merged pull requests for repositories (#185) (f9defe2)\n\n1.38.1 (2023-06-16)\n🐛 Bug Fixes\n\nupdate existing user after they connect their account (#182) (b8e8c88)\n\n1.38.1-beta.1 (2023-06-16)\n🐛 Bug Fixes\n\nupdate existing user after they connect their account (#182) (b8e8c88)\n\n1.38.0 (2023-06-13)\n🍕 Features\n\ngenerate code test, explanation on PR (#179) (c292277)\n\n1.38.0-beta.1 (2023-06-12)\n🍕 Features\n\ngenerate code test, explanation on PR (#179) (c292277)\n\n1.37.0 (2023-06-06)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\nadd endpoints for managing endorsements (#176) (487c1a2)\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.37.0-beta.4 (2023-06-01)\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\n\n1.37.0-beta.3 (2023-05-31)\n🍕 Features\n\nadd endpoints for managing endorsements (#176) (487c1a2)\n\n1.37.0-beta.2 (2023-05-31)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n1.37.0-beta.1 (2023-05-24)\n🍕 Features\n\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.36.0 (2023-05-23)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.36.0-beta.2 (2023-05-22)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\n\n1.36.0-beta.1 (2023-05-22)\n🍕 Features\n\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.35.0 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.35.0-beta.1 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.34.0 (2023-05-16)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.2 (2023-05-16)\n🍕 Features\n\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.1 (2023-05-15)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\n\n1.33.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.1-beta.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.0 (2023-05-11)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd endpoint for fetching user notifications (#155) (01301c9)\nadd first commit and pull request date (08f1679)\nadd user notification count to session data (#158) (1c3378e)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect misaligned migrations to real values (bb26d27)\ncorrect npm package not releasing (672ea80)\ncorrect server versioning (1225197)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\nnormalize pull requests status for queries (a057e0e)\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.9 (2023-05-11)\n🐛 Bug Fixes\n\nnormalize pull requests status for queries (a057e0e)\n\n1.33.0-beta.8 (2023-05-11)\n🐛 Bug Fixes\n\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.7 (2023-05-11)\n🍕 Features\n\nadd user notification count to session data (#158) (1c3378e)\n\n1.33.0-beta.6 (2023-05-11)\n🍕 Features\n\nadd endpoint for fetching user notifications (#155) (01301c9)\n\n🐛 Bug Fixes\n\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\n\n1.33.0-beta.5 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect server versioning (1225197)\n\n1.33.0-beta.4 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect misaligned migrations to real values (bb26d27)\n\n1.33.0-beta.3 (2023-05-05)\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\n\n1.33.0-beta.2 (2023-05-04)\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n1.33.0-beta.1 (2023-05-04)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n1.33.0-alpha.3 (2023-05-04)\n🤖 Build System\n\nupdate dependencies (abb24de)\n\n1.33.0-alpha.2 (2023-05-03)\n🐛 Bug Fixes\n\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n1.33.0-alpha.1 (2023-05-03)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\n\n1.32.0-alpha.1 (2023-04-28)\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\n\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n1.29.0-alpha.3 (2023-03-21)\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n🍕 Features\n\nexperimental build improvements (70a6e7b)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\n\n1.32.0 (2023-05-02)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.32.0-beta.1 (2023-04-26)\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blogs/dtos/create-blog-summary.dto.ts\n            \n            class\n            CreateBlogSummaryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/blogs/issue-summary.controller.ts\n            \n            controller\n            BlogSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/blogs/issue-summary.service.ts\n            \n            injectable\n            BlogSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            injectable\n            PagerService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            interface\n            PaginationInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/pizza.config.ts\n            \n            variable\n            PizzaConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contributor/contributor-insights.controller.ts\n            \n            controller\n            ContributorInsightsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contributor/contributor.controller.ts\n            \n            controller\n            ContributorController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            DbUserHighlightReactionResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issues/dtos/create-issue-summary.dto.ts\n            \n            class\n            CreateIssueSummaryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.controller.ts\n            \n            controller\n            IssueSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.service.ts\n            \n            injectable\n            IssueSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            injectable\n            OpenAiService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/commit-authors.service.ts\n            \n            injectable\n            CommitAuthorsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pizza/commits.service.ts\n            \n            injectable\n            CommitsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pizza/dtos/baked-repo.dto.ts\n            \n            class\n            BakeRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commit_authors.dto.ts\n            \n            class\n            CommitAuthorDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commits.dto.ts\n            \n            class\n            CommitsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/entities/baked-repo.entity.ts\n            \n            entity\n            DbBakedRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commit_authors.entity.ts\n            \n            entity\n            DbCommitAuthors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commits.entity.ts\n            \n            entity\n            DbCommits\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.controller.ts\n            \n            controller\n            PizzaOvenController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.service.ts\n            \n            injectable\n            PizzaOvenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.controller.ts\n            \n            controller\n            CodeExplanationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.service.ts\n            \n            injectable\n            CodeExplanationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test-suggestion.service.ts\n            \n            injectable\n            CodeTestSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test.suggestion.controller.ts\n            \n            controller\n            CodeTestSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-explanation.dto.ts\n            \n            class\n            GenerateCodeExplanationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n            \n            class\n            GenerateCodeTestSuggestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n            \n            class\n            PullRequestContributorInsightsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n            \n            class\n            PullRequestContributorOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor.dto.ts\n            \n            class\n            DbPullRequestContributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            VotedRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dtos/top-users.dto.ts\n            \n            class\n            TopUsersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/entities/top-users.entity.ts\n            \n            class\n            DbTopUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user-recommendation.controller.ts\n            \n            controller\n            UserRecommendationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 HighlightCreated\n                            \n                        \n                        \n                            \n                                Value : highlight_created\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n🕺 OpenAPI Swagger Doc\nWhen the server is run, an OpenAPI swagger doc is generated into the project's\nroot directory. When making API changes, make sure to run npm run start:dev\nto test your changes and generate any new Swagger document bits.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🍕 Pizza service integration\nThis API integrates with the pizza service\nto accept requests for ingesting commits to the database.\nThe environment variables for this are:\nPIZZA_OVEN_HOST=\"http://example.com\"\nPIZZA_OVEN_API=80🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssueSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PizzaOvenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        28 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    32 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    27 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    39 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    47 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.46.0-beta.7\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            PizzaConfig   (src/.../pizza.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/pizza.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PizzaConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"pizza\", () => ({\n  host: String(process.env.PIZZA_OVEN_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.PIZZA_OVEN_PORT ?? \"80\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"highlight_created\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
