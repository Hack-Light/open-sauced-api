var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.978,1,2.54]],["body/modules/AppModule.html",[0,1.301,1,5.142,2,1.359,3,2.092,4,3.036,5,3.036,6,4.146,7,0.021,8,4.146,9,4.146,10,4.146,11,4.146,12,4.146,13,4.146,14,3.84,15,4.146,16,2.217,17,1.519,18,1.359,19,0.243,20,0.219,21,0.196,22,3.544,23,2.536,24,0.514,25,0.652,26,1.819,27,1.222,28,4.882,29,5.155,30,3.036,31,4.882,32,3.544,33,4.182,34,2.701,35,4.882,36,3.544,37,3.544,38,5.584,39,1.16,40,3.544,41,4.882,42,3.544,43,4.882,44,3.544,45,4.882,46,3.544,47,3.544,48,1.114,49,1.436,50,1.978,51,2.086,52,2.217,53,3.036,54,2.092,55,2.252,56,2.092,57,2.252,58,2.092,59,2.252,60,2.092,61,2.252,62,3.544,63,3.544,64,3.544,65,3.544,66,3.544,67,3.544,68,3.036,69,3.544,70,3.036,71,3.544,72,2.452,73,3.544,74,3.544,75,0.427,76,3.544,77,3.544,78,3.544,79,3.036,80,3.544,81,3.544,82,3.544,83,3.544,84,3.544,85,2.452,86,3.544,87,3.544,88,1.978,89,1.436,90,3.544,91,3.544,92,1.046,93,1.709,94,0.243,95,0.109,96,0.994,97,1.102,98,0.013,99,0.013]],["title/controllers/AuthController.html",[100,1.084,101,2.54]],["body/controllers/AuthController.html",[7,0.02,19,0.224,20,0.203,21,0.181,24,0.449,25,0.602,75,0.766,88,1.87,92,0.965,94,0.224,95,0.101,96,0.917,97,1.016,98,0.012,99,0.012,100,0.965,101,3.193,102,2.801,103,1.679,104,3.4,105,0.368,106,1.511,107,2.222,108,5.349,109,6.129,110,6.129,111,3.27,112,4.978,113,1.286,114,3.27,115,4.616,116,3.265,117,2.532,118,3.954,119,3.27,120,3.27,121,0.879,122,3.27,123,1.663,124,0.931,125,0.931,126,1.986,127,1.751,128,2.313,129,3.27,130,1.171,131,3.27,132,5.811,133,4.02,134,5.815,135,4.616,136,4.616,137,5.811,138,2.491,139,3.27,140,2.649,141,3.27,142,3.27,143,4.02,144,3.27,145,3.27,146,3.27,147,3.27,148,2.078,149,3.693,150,2.934,151,2.802,152,2.984,153,1.679,154,0.828,155,1.485,156,2.801,157,2.493,158,1.925,159,3.27,160,4.02,161,3.27,162,3.27,163,3.149,164,3.27,165,3.27,166,3.27,167,1.485,168,3.27,169,3.4,170,2.746,171,3.27,172,1.678,173,3.701,174,3.954,175,3.954,176,3.954,177,1.771,178,1.87,179,2.801,180,2.801,181,1.363,182,3.519,183,4.978,184,4.583,185,1.128,186,4.583,187,2.801,188,2.801,189,1.485,190,2.262,191,2.262,192,3.4,193,3.701,194,4.616,195,1.255,196,3.27,197,2.801,198,2.801,199,3.27,200,1.5,201,3.27,202,3.27,203,3.27,204,1.363,205,3.27,206,3.27,207,3.27]],["title/modules/AuthModule.html",[0,0.978,6,2.334]],["body/modules/AuthModule.html",[0,1.578,2,1.825,3,2.539,6,4.729,7,0.02,14,4.166,16,2.69,17,2.039,18,1.825,19,0.326,20,0.295,21,0.264,23,2.69,24,0.486,25,0.876,68,4.076,92,1.749,93,2.856,94,0.326,95,0.146,98,0.016,99,0.016,101,4.462,155,3.379,156,4.076,208,4.076,209,4.076,210,4.758,211,4.076,212,4.729,213,4.758,214,3.041,215,5.923,216,3.627,217,4.758,218,4.758]],["title/modules/ContributionModule.html",[0,0.978,8,2.334]],["body/modules/ContributionModule.html",[0,1.595,2,1.857,3,2.566,7,0.02,8,4.663,16,2.719,17,2.075,18,1.857,19,0.332,20,0.3,21,0.268,23,2.198,24,0.494,25,0.891,26,2.485,27,1.67,48,1.366,49,1.962,52,2.719,92,1.768,93,2.887,94,0.332,95,0.149,98,0.016,99,0.016,214,3.074,219,4.147,220,4.147,221,4.147,222,4.39,223,2.327,224,4.841,225,4.496,226,3.69,227,2.198,228,4.147,229,1.048,230,4.841,231,2.85]],["title/classes/ContributionPageOptionsDto.html",[95,0.113,232,2.334]],["body/classes/ContributionPageOptionsDto.html",[7,0.02,19,0.29,20,0.262,21,0.234,24,0.419,75,0.778,94,0.377,95,0.169,98,0.015,99,0.015,105,0.475,113,1.553,121,1.062,125,1.233,130,1.011,154,1.07,177,2.107,178,2.226,185,1.458,232,3.491,233,2.319,234,4.188,235,2.008,236,2.686,237,3.013,238,2.367,239,1.622,240,2.748,241,4.652,242,3.491,243,4.188,244,5.105,245,2.748,246,3.544,247,5.228,248,4.188,249,4.652,250,3.8,251,4.227,252,4.227,253,4.188,254,3.592,255,3.222,256,3.222,257,3.222,258,5.228,259,3.621,260,3.592,261,2.686,262,3.222,263,3.621,264,3.222,265,3.621,266,3.8,267,3.222,268,4.188,269,2.924,270,2.924,271,1.812,272,3.8,273,3.8,274,4.188,275,4.188,276,4.227]],["title/injectables/ContributionService.html",[222,2.162,277,1.03]],["body/injectables/ContributionService.html",[7,0.02,19,0.293,20,0.264,21,0.237,24,0.487,25,0.786,27,1.473,39,1.398,52,1.939,75,0.666,89,1.73,94,0.293,95,0.131,96,1.551,97,1.327,98,0.015,99,0.015,105,0.48,106,1.81,107,2.007,121,0.909,123,1.719,124,0.962,125,0.962,127,1.398,128,2.011,130,1.129,172,2.443,195,2.121,200,1.198,222,3.255,226,3.255,232,4.122,235,1.327,238,2.115,244,3.255,247,3.658,260,2.514,261,2.714,270,2.954,271,1.83,277,1.551,278,1.939,279,3.658,280,4.675,281,4.27,282,2.016,283,4.27,284,5.53,285,3.255,286,4.374,287,4.27,288,3.658,289,2.342,290,1.83,291,2.192,292,3.658,293,3.255,294,3.818,295,3.255,296,3.658,297,4.27,298,3.364,299,4.27,300,3.658,301,3.658,302,4.27,303,3.658,304,3.658,305,4.27,306,3.658,307,3.658,308,3.658,309,3.825,310,3.658,311,3.658,312,2.37,313,3.658]],["title/entities/DbContribution.html",[52,1.668,314,1.141]],["body/entities/DbContribution.html",[7,0.02,19,0.191,20,0.173,21,0.155,24,0.37,39,0.913,48,1.231,49,1.13,52,1.868,75,0.858,88,2.187,89,1.13,94,0.191,95,0.086,98,0.011,99,0.011,105,0.313,113,1.596,121,1.091,124,0.939,125,1.048,126,1.154,130,1.177,138,1.763,154,0.706,177,1.876,178,1.981,181,1.699,185,1.861,189,3.359,204,1.888,229,1.246,237,1.53,239,1.215,245,2.453,273,3.382,274,3.727,275,4.388,282,1.279,314,1.279,315,2.389,316,2.682,317,2.776,318,4.388,319,1.962,320,3.304,321,2.846,322,3.397,323,3.177,324,2.389,325,4.114,326,4.114,327,4.114,328,4.114,329,2.788,330,3.136,331,4.114,332,3.136,333,4.114,334,2.788,335,4.114,336,2.788,337,3.283,338,2.257,339,3.565,340,3.092,341,4.219,342,1.984,343,2.771,344,2.603,345,1.53,346,3.283,347,3.283,348,3.507,349,2.96,350,2.788,351,1.53,352,2.771,353,2.788,354,2.603,355,2.788,356,2.788,357,2.771,358,3.525,359,3.136,360,2.788,361,2.788,362,1.641,363,2.788,364,2.422,365,2.788,366,2.788,367,2.788,368,1.984,369,2.112,370,2.112,371,1.53,372,2.788,373,3.136,374,4.114,375,3.525,376,2.788,377,2.788,378,3.304,379,3.136,380,2.126,381,2.422,382,2.422,383,2.257,384,2.257,385,2.257,386,2.682,387,3.417,388,2.682,389,1.53,390,1.345,391,1.53,392,1.772,393,2.788,394,2.126,395,1.641,396,2.788,397,2.112,398,1.53,399,1.929,400,2.788,401,2.389]],["title/entities/DbRepo.html",[48,0.838,314,1.141]],["body/entities/DbRepo.html",[7,0.02,19,0.122,20,0.227,21,0.098,24,0.39,39,0.581,48,0.661,50,1.714,51,1.045,52,1.921,53,1.521,54,1.813,56,1.813,58,1.813,60,1.813,75,0.868,88,2.425,89,0.72,94,0.122,95,0.055,98,0.008,99,0.008,105,0.2,113,1.65,121,1.128,124,1.017,125,1.017,126,1.478,130,1.233,138,1.241,154,0.449,177,1.407,178,1.486,181,1.376,185,0.999,189,3.4,204,1.992,237,0.974,239,0.855,241,1.354,245,2.505,282,2.082,314,0.9,316,2.011,318,3.552,319,2.22,320,3.407,321,2.004,322,3.417,323,3.235,325,4.456,326,4.456,327,4.456,328,3.81,330,4.19,335,4.456,337,3.001,338,2.011,339,3.318,340,2.566,341,2.688,342,1.397,343,1.487,344,1.397,345,0.974,346,3.001,347,3.001,348,3.207,349,2.741,351,0.974,352,2.566,354,2.04,357,2.172,362,1.045,364,1.705,368,2.04,369,2.172,370,2.172,371,0.974,373,2.208,378,3.458,379,2.208,380,1.354,381,1.705,382,1.705,383,1.589,384,1.589,385,1.589,386,3.118,387,3.458,388,2.32,389,0.974,390,0.856,391,0.974,392,2.331,394,1.354,395,1.045,397,0.912,398,0.974,402,1.521,403,3.667,404,3.667,405,3.223,406,4.659,407,3.667,408,2.961,409,3.667,410,3.552,411,3.552,412,3.552,413,3.552,414,3.176,415,3.552,416,2.247,417,3.552,418,3.992,419,2.896,420,1.776,421,1.776,422,1.776,423,2.896,424,2.208,425,2.896,426,2.208,427,2.566,428,1.776,429,1.776,430,2.208,431,2.896,432,2.896,433,1.776,434,1.776,435,1.776,436,1.705,437,1.841,438,2.208,439,2.896,440,2.004,441,2.896,442,1.354,443,1.776,444,1.776,445,1.776,446,2.896,447,1.776,448,4.23,449,1.776,450,1.776,451,2.896,452,1.776,453,2.896,454,1.776,455,1.776,456,1.776,457,2.208,458,1.776,459,1.776,460,2.896,461,1.776,462,2.896,463,1.776,464,2.896,465,1.776,466,2.896,467,1.776,468,1.776,469,1.776,470,1.776,471,1.776,472,1.776,473,2.896,474,1.776,475,1.776,476,1.776,477,1.776,478,1.487,479,1.776,480,1.776,481,1.776,482,1.776,483,4.281,484,1.776,485,1.776,486,1.776,487,1.776,488,0.856,489,1.521,490,1.521,491,1.776,492,1.776,493,1.776,494,1.776,495,1.776,496,1.776,497,1.705,498,1.776,499,1.776,500,1.229,501,1.776,502,1.776]],["title/entities/DbRepoToUserStargazers.html",[60,1.574,314,1.141]],["body/entities/DbRepoToUserStargazers.html",[7,0.02,19,0.222,20,0.201,21,0.18,24,0.419,39,1.061,48,1.32,50,2.345,51,1.908,60,1.966,75,0.837,88,1.858,89,1.313,94,0.222,95,0.1,98,0.012,99,0.012,105,0.364,113,1.601,121,1.095,124,0.926,125,1.104,126,1.829,130,1.167,138,1.966,154,0.82,177,2.042,178,2.157,181,1.925,185,1.582,189,3.363,204,1.803,229,1.322,239,1.354,245,2.22,282,1.426,314,1.426,316,2.92,317,2.945,320,2.92,322,3.311,337,3.256,338,2.516,339,3.526,340,2.971,342,2.211,343,2.354,344,2.211,345,1.777,346,3.256,347,3.256,348,3.478,349,3.175,351,1.777,352,2.354,354,3.058,357,2.354,362,2.7,364,3.407,368,2.211,369,2.354,370,2.354,371,1.777,378,2.92,381,3.133,382,3.133,383,2.516,384,2.516,385,2.516,386,3.175,387,3.175,388,2.92,389,1.777,390,1.563,391,1.777,395,1.908,397,1.664,398,1.777,416,2.945,503,2.776,504,4.834,505,3.24,506,3.24,507,2.242,508,3.24,509,3.24,510,3.24,511,2.242,512,3.24,513,3.24,514,3.24,515,3.24,516,2.242,517,3.24,518,3.173,519,2.242,520,3.24,521,2.242,522,1.908,523,3.24,524,2.776]],["title/entities/DbRepoToUserStars.html",[56,1.574,314,1.141]],["body/entities/DbRepoToUserStars.html",[7,0.02,19,0.222,20,0.201,21,0.18,24,0.419,39,1.061,48,1.32,50,2.345,51,1.908,56,1.966,75,0.837,88,1.858,89,1.313,94,0.222,95,0.1,98,0.012,99,0.012,105,0.364,113,1.601,121,1.095,124,0.926,125,1.104,126,1.829,130,1.167,138,1.966,154,0.82,177,2.042,178,2.157,181,1.925,185,1.582,189,3.363,204,1.803,229,1.322,239,1.354,245,2.22,282,1.426,314,1.426,316,2.92,317,2.945,320,2.92,322,3.311,337,3.256,338,2.516,339,3.526,340,2.971,342,2.211,343,2.354,344,2.211,345,1.777,346,3.256,347,3.256,348,3.478,349,3.175,351,1.777,352,2.354,354,3.058,357,2.354,362,2.7,364,3.407,368,2.211,369,2.354,370,2.354,371,1.777,378,2.92,381,3.133,382,3.133,383,2.516,384,2.516,385,2.516,386,3.175,387,3.175,388,2.92,389,1.777,390,1.563,391,1.777,395,1.908,397,1.664,398,1.777,416,2.945,507,2.242,511,2.242,516,2.242,518,3.173,519,2.242,521,2.242,522,1.908,525,2.776,526,4.387,527,3.24,528,3.24,529,3.24,530,3.24,531,3.24,532,3.24,533,3.24,534,3.24,535,3.24,536,3.24,537,3.24,538,3.24,539,2.776]],["title/entities/DbRepoToUserSubmissions.html",[58,1.574,314,1.141]],["body/entities/DbRepoToUserSubmissions.html",[7,0.02,19,0.211,20,0.19,21,0.17,24,0.41,39,1.005,48,1.288,50,2.288,51,1.807,58,1.891,75,0.836,88,2.424,89,1.244,94,0.211,95,0.094,98,0.012,99,0.012,105,0.345,113,1.607,121,1.099,124,0.899,125,1.143,126,1.8,130,1.146,138,1.891,154,0.777,177,1.982,178,2.093,181,1.895,185,1.522,189,3.368,204,1.839,229,1.295,239,1.303,245,2.295,282,1.371,314,1.371,316,2.833,317,2.885,320,3.098,322,3.348,337,3.198,338,2.42,339,3.485,340,3.198,342,2.127,343,2.265,344,2.127,345,1.684,346,3.198,347,3.198,348,3.416,349,3.098,351,1.684,352,2.265,354,3.003,357,2.265,362,2.597,364,3.324,368,2.127,369,2.265,370,2.265,371,1.684,378,3.098,381,3.04,382,3.04,383,2.42,384,2.42,385,2.42,386,3.098,387,3.281,388,2.833,389,1.684,390,1.48,391,1.684,395,1.807,397,1.576,398,1.684,416,2.885,427,2.265,436,2.597,437,2.804,442,2.34,497,2.597,507,2.123,511,2.123,516,2.123,518,3.052,519,2.123,521,2.123,522,1.807,540,2.629,541,4.425,542,5.005,543,3.069,544,3.069,545,3.069,546,4.412,547,4.412,548,3.069,549,3.069,550,3.069,551,3.069,552,3.069,553,3.069,554,3.069,555,3.069,556,3.069,557,3.069,558,2.629]],["title/entities/DbRepoToUserVotes.html",[54,1.574,314,1.141]],["body/entities/DbRepoToUserVotes.html",[7,0.02,19,0.222,20,0.201,21,0.18,24,0.419,39,1.061,48,1.32,50,2.345,51,1.908,54,1.966,75,0.837,88,1.858,89,1.313,94,0.222,95,0.1,98,0.012,99,0.012,105,0.364,113,1.601,121,1.095,124,0.926,125,1.104,126,1.829,130,1.167,138,1.966,154,0.82,177,2.042,178,2.157,181,1.925,185,1.582,189,3.363,204,1.803,229,1.322,239,1.354,245,2.22,282,1.426,314,1.426,316,2.92,317,2.945,320,2.92,322,3.311,337,3.256,338,2.516,339,3.526,340,2.971,342,2.211,343,2.354,344,2.211,345,1.777,346,3.256,347,3.256,348,3.478,349,3.175,351,1.777,352,2.354,354,3.058,357,2.354,362,2.7,364,3.407,368,2.211,369,2.354,370,2.354,371,1.777,378,2.92,381,3.133,382,3.133,383,2.516,384,2.516,385,2.516,386,3.175,387,3.175,388,2.92,389,1.777,390,1.563,391,1.777,395,1.908,397,1.664,398,1.777,416,2.945,507,2.242,511,2.242,516,2.242,518,3.173,519,2.242,521,2.242,522,1.908,559,2.776,560,4.387,561,3.24,562,3.24,563,3.24,564,3.24,565,3.24,566,3.24,567,3.24,568,3.24,569,3.24,570,3.24,571,3.24,572,3.24,573,2.776]],["title/entities/DbUser.html",[50,1.488,314,1.141]],["body/entities/DbUser.html",[7,0.02,19,0.157,20,0.142,21,0.127,24,0.413,39,0.75,48,1.114,49,0.928,50,1.437,54,2.093,55,1.455,56,2.093,57,1.455,58,2.093,59,1.455,60,2.093,61,1.455,75,0.851,88,2.801,89,0.928,94,0.157,95,0.07,97,1.102,98,0.009,99,0.009,105,0.257,113,1.65,121,1.128,124,0.755,125,0.972,126,1.875,130,1.108,133,2.453,138,1.52,143,2.453,154,0.58,173,3.654,177,1.664,178,1.758,181,1.281,185,1.822,189,3.406,190,1.584,192,2.757,193,3.001,204,1.864,229,0.767,237,1.256,239,1.047,245,2.503,314,1.102,316,2.379,319,1.289,320,3.301,321,2.453,322,3.373,323,2.874,324,1.962,325,2.703,326,2.703,327,2.703,328,2.703,330,2.703,335,2.703,337,2.868,338,1.945,339,3.241,340,2.507,342,1.71,343,1.82,344,1.71,345,1.256,346,2.868,347,2.868,348,3.064,349,2.678,351,1.256,352,2.507,354,1.71,357,1.82,368,1.71,369,1.82,370,1.82,371,1.256,378,3.389,379,2.703,380,1.746,383,1.945,384,1.945,385,1.945,386,3.301,387,3.389,388,2.379,389,1.256,390,1.104,391,1.256,394,1.746,397,1.176,398,1.256,399,1.584,405,2.453,410,4.026,411,4.026,412,4.026,413,4.026,418,4.525,427,1.82,436,3.716,437,3.825,438,4.588,440,3.864,442,3.722,483,4.785,488,2.092,522,1.348,574,1.962,575,4.337,576,4.337,577,4.337,578,4.026,579,4.337,580,2.29,581,2.29,582,2.29,583,2.29,584,2.29,585,2.29,586,4.183,587,2.29,588,3.545,589,2.29,590,2.703,591,3.545,592,3.545,593,3.545,594,3.037,595,2.29,596,2.29,597,2.29,598,3.545,599,2.29,600,2.29,601,3.545,602,2.29,603,3.545,604,2.29,605,3.545,606,2.29,607,3.545,608,2.29,609,3.545,610,2.29,611,2.703,612,2.29,613,2.29,614,2.29,615,2.29]],["title/controllers/HealthController.html",[100,1.084,616,2.54]],["body/controllers/HealthController.html",[7,0.02,19,0.268,20,0.242,21,0.216,24,0.43,25,0.718,29,5.028,30,3.344,34,2.976,85,2.7,92,1.152,94,0.268,95,0.12,96,1.095,97,2.087,98,0.014,99,0.014,100,1.152,103,2.004,105,0.439,106,1.706,107,2.423,113,1.253,116,3.215,121,0.857,127,1.706,151,2.83,152,3.013,153,2.004,154,0.988,167,3.113,170,2.676,200,1.462,240,1.497,427,3.215,497,3.687,616,3.606,617,3.344,618,5.751,619,6.713,620,3.903,621,5.212,622,4.975,623,5.212,624,3.903,625,3.974,626,3.903,627,5.212,628,3.903,629,5.212,630,5.212,631,5.212,632,5.868,633,5.212,634,5.212,635,3.903,636,3.903,637,3.903,638,3.903,639,3.903,640,3.903,641,4.466,642,5.212,643,3.903,644,3.903,645,3.903,646,3.903,647,3.903,648,3.903,649,5.212,650,3.903,651,4.466,652,3.903,653,3.903,654,3.903,655,3.903,656,3.903,657,3.903,658,3.903,659,3.903,660,3.903,661,3.903,662,3.903,663,3.903,664,3.903,665,3.903,666,3.903]],["title/modules/HealthModule.html",[0,0.978,9,2.334]],["body/modules/HealthModule.html",[0,1.725,2,2.115,7,0.02,9,4.115,19,0.378,20,0.341,21,0.306,23,2.504,24,0.472,25,1.015,33,5.547,34,4.203,92,1.912,94,0.378,95,0.169,98,0.017,99,0.017,616,4.756,667,5.514,668,5.514]],["title/classes/PageDto.html",[95,0.113,290,1.574]],["body/classes/PageDto.html",[7,0.02,19,0.315,20,0.284,21,0.254,24,0.457,72,4.007,75,0.858,94,0.315,95,0.195,96,1.625,98,0.015,99,0.015,105,0.516,113,1.392,121,1.043,123,1.427,124,0.799,125,0.799,154,1.162,233,2.519,235,1.427,239,1.71,240,2.691,269,3.177,290,2.483,294,4.241,295,3.5,669,3.934,670,6.01,671,4.526,672,4.592,673,5.237,674,5.792,675,4.592,676,4.592,677,4.592,678,4.592,679,4.592,680,4.592,681,4.837,682,6.345,683,6.345,684,3.934,685,4.592,686,3.934,687,4.592,688,4.592]],["title/classes/PageMetaDto.html",[95,0.113,294,2.162]],["body/classes/PageMetaDto.html",[7,0.02,19,0.256,20,0.231,21,0.207,24,0.347,72,3.5,75,0.816,88,2.05,94,0.256,95,0.115,96,1.419,98,0.013,99,0.013,105,0.42,113,1.593,121,1.114,123,1.161,124,0.65,125,0.65,130,1.338,154,0.945,185,2.217,204,1.957,233,2.048,235,2.233,238,1.288,239,1.494,240,2.835,242,3.647,254,3.621,294,2.978,309,4.447,322,3.464,426,3.857,436,3.621,437,3.909,438,4.689,671,2.373,681,5.167,689,4.77,690,3.199,691,5.738,692,5.738,693,5.738,694,3.734,695,4.255,696,5.059,697,5.678,698,5.059,699,3.734,700,5.269,701,6.151,702,5.059,703,3.734,704,5.059,705,3.734,706,4.334,707,3.734,708,4.334,709,3.734,710,3.734,711,4.916,712,3.734,713,4.334,714,3.734,715,3.734,716,3.734,717,3.734,718,3.734,719,3.734]],["title/interfaces/PageMetaParameters.html",[695,2.54,720,2.54]],["body/interfaces/PageMetaParameters.html",[7,0.02,19,0.373,20,0.336,21,0.301,24,0.373,75,0.773,94,0.373,98,0.017,99,0.017,105,0.61,130,1.257,235,1.688,238,2.562,239,1.895,271,2.327,309,4.883,671,3.451,689,3.756,695,4.439,720,3.756,721,5.43,722,4.652]],["title/classes/PageOptionsDto.html",[95,0.113,238,1.266]],["body/classes/PageOptionsDto.html",[7,0.02,19,0.283,20,0.255,21,0.228,24,0.439,75,0.821,94,0.283,95,0.185,98,0.014,99,0.014,105,0.463,113,1.449,121,1.052,125,1.186,130,1.279,154,1.043,185,2.207,200,1.156,233,2.261,235,1.874,236,2.62,238,1.864,239,1.596,240,2.735,242,3.832,243,4.596,245,2.735,246,3.307,248,3.142,249,4.12,253,4.12,254,4.196,255,4.12,256,4.12,257,3.142,260,4.089,261,3.832,262,3.142,264,3.142,266,4.427,267,3.142,268,4.878,269,2.852,272,2.852,293,3.142,684,3.532,689,4.596,711,3.532,713,3.532,723,5.404,724,5.165,725,4.122,726,4.122,727,4.122,728,4.122,729,4.122,730,6.029,731,4.122,732,4.122,733,4.122,734,5.404,735,5.404,736,4.122,737,4.122]],["title/controllers/RepoContributionsController.html",[100,1.084,225,2.54]],["body/controllers/RepoContributionsController.html",[7,0.02,19,0.254,20,0.229,21,0.205,24,0.472,25,0.681,52,2.594,75,0.738,92,1.093,94,0.254,95,0.114,96,1.038,97,1.563,98,0.013,99,0.013,100,1.093,103,1.9,105,0.416,106,1.646,107,2.164,113,1.209,116,3.146,121,0.827,123,1.563,124,0.875,125,0.875,127,1.646,128,2.228,130,1.051,150,3.133,151,2.754,152,2.933,153,1.9,154,0.937,167,2.284,170,2.582,172,1.828,181,1.809,195,1.929,200,1.411,204,1.485,222,3.362,223,1.87,225,3.479,226,2.821,227,1.681,228,3.171,229,1.572,232,4.297,235,1.15,238,2.28,240,1.929,271,1.586,290,1.586,291,1.9,296,3.171,319,2.403,341,2.352,392,3.895,478,3.146,488,1.785,738,4.894,739,3.171,740,6.408,741,6.408,742,3.701,743,3.701,744,2.96,745,5.25,746,6.128,747,5.029,748,5.029,749,3.607,750,3.701,751,3.701,752,3.701,753,5.029,754,3.701,755,2.179,756,3.362,757,1.9,758,2.179,759,1.785,760,2.179,761,2.179,762,2.179,763,3.701,764,5.029,765,2.179,766,2.758,767,2.179,768,5.029,769,5.029,770,3.701,771,2.179,772,2.179,773,2.179]],["title/controllers/RepoController.html",[100,1.084,774,2.54]],["body/controllers/RepoController.html",[7,0.02,19,0.255,20,0.231,21,0.206,24,0.465,25,0.685,48,1.465,75,0.797,92,1.099,94,0.255,95,0.114,96,1.044,97,1.157,98,0.013,99,0.013,100,1.099,103,1.911,105,0.419,106,1.653,107,2.286,113,1.377,116,3.4,121,0.942,123,1.781,124,0.997,125,0.997,127,1.876,128,2.408,130,1.055,150,3.143,151,2.962,152,3.154,153,1.911,154,0.942,167,1.691,170,2.942,181,1.692,200,1.607,204,1.491,223,1.876,229,1.512,235,1.157,238,1.741,240,1.428,271,1.596,280,4.895,282,1.91,285,2.838,290,1.596,291,1.911,319,2.408,478,3.154,488,2.763,744,3.898,749,3.616,755,2.192,756,2.972,757,1.911,758,2.192,759,1.795,760,2.192,761,2.192,762,2.192,765,2.192,767,2.192,771,2.192,772,2.192,773,2.192,774,3.493,775,3.19,776,4.895,777,5.501,778,2.962,779,3.723,780,3.209,781,2.366,782,3.723,783,2.838,784,3.723,785,3.723,786,5.049,787,3.723,788,3.19,789,3.723,790,3.723,791,3.723,792,3.19,793,2.838,794,3.19,795,3.723,796,3.723,797,3.723,798,2.366,799,2.366]],["title/modules/RepoModule.html",[0,0.978,10,2.334]],["body/modules/RepoModule.html",[0,1.638,2,1.94,3,2.635,7,0.02,10,4.62,16,2.792,17,2.167,18,1.94,19,0.347,20,0.313,21,0.28,23,2.296,24,0.485,25,0.931,26,2.596,27,1.744,48,1.154,92,1.815,93,2.965,94,0.347,95,0.155,98,0.016,99,0.016,214,3.157,223,2.455,774,4.584,792,4.332,793,3.855,800,4.332,801,4.332,802,5.056,803,5.056,804,5.056,805,5.056]],["title/classes/RepoPageOptionsDto.html",[95,0.113,778,1.771]],["body/classes/RepoPageOptionsDto.html",[7,0.02,19,0.28,20,0.253,21,0.226,24,0.412,75,0.768,94,0.368,95,0.165,98,0.014,99,0.014,105,0.459,113,1.532,121,1.048,124,0.934,125,1.224,130,0.988,154,1.033,177,2.06,178,2.176,185,1.408,233,2.239,235,1.981,236,2.594,237,2.945,238,2.345,239,1.585,240,2.729,241,4.574,242,3.412,243,4.093,245,2.729,246,3.497,248,4.093,249,4.574,250,4.795,253,4.093,254,3.532,255,3.112,256,3.112,257,3.112,258,5.14,259,3.497,260,3.532,261,2.594,262,3.112,263,3.497,264,3.112,265,3.497,266,3.715,267,3.112,268,4.093,269,2.824,270,2.824,271,1.75,272,3.715,405,3.715,414,3.412,415,4.093,417,4.093,778,2.589,806,4.093,807,5.14,808,4.082,809,4.082,810,4.093,811,3.715,812,4.093,813,4.093,814,3.715,815,4.082]],["title/injectables/RepoService.html",[223,1.202,277,1.03]],["body/injectables/RepoService.html",[7,0.02,19,0.203,20,0.184,21,0.164,24,0.446,25,0.545,27,1.022,39,0.97,48,0.676,52,1.954,54,1.27,56,1.27,58,1.27,60,1.27,75,0.741,89,1.201,94,0.203,95,0.091,96,1.207,97,0.921,98,0.011,99,0.011,105,0.333,106,1.408,107,2.17,121,1.011,123,1.913,124,1.105,125,1.027,126,0.831,127,1.931,128,2.238,130,1.133,140,2.494,172,2.508,181,1.742,195,2.132,200,1.655,223,1.408,229,1.277,235,0.921,238,1.746,245,1.137,246,1.626,250,2.05,260,1.745,261,1.884,270,2.05,271,1.27,277,1.207,278,1.346,280,3.86,282,1.727,285,2.259,288,3.685,289,1.626,290,1.27,291,1.522,292,2.539,293,2.259,294,3.271,295,2.259,298,3.483,300,2.539,301,2.539,303,2.539,304,2.539,306,2.539,307,2.539,308,2.539,309,2.976,310,2.539,311,2.539,312,2.381,313,2.539,314,1.574,319,2.6,392,2.734,401,2.539,414,2.734,478,2.209,524,2.539,539,2.539,558,2.539,573,2.539,673,2.259,766,3.376,776,3.86,777,4.338,778,2.679,783,2.259,788,2.539,793,2.259,794,2.539,807,2.539,810,2.259,811,2.05,812,2.259,813,2.259,814,2.05,816,2.539,817,3.271,818,5.064,819,2.964,820,2.964,821,4.302,822,2.964,823,5.064,824,2.964,825,2.964,826,2.964,827,2.964,828,4.76,829,5.064,830,4.338,831,2.964,832,5.064,833,2.981,834,2.964,835,4.302,836,2.964,837,4.302,838,2.964,839,2.964,840,2.964,841,2.964,842,2.964,843,2.532,844,2.964,845,2.964,846,2.964,847,2.964,848,2.964,849,2.964,850,2.964,851,5.9,852,5.9,853,2.539,854,2.259,855,2.539,856,2.964,857,2.964,858,2.964,859,2.964,860,2.964,861,2.981,862,2.964,863,2.532,864,2.532,865,2.964,866,2.964,867,2.964,868,2.964,869,2.964,870,2.964,871,2.964,872,2.964,873,2.964]],["title/controllers/RepoStarController.html",[100,1.084,874,2.54]],["body/controllers/RepoStarController.html",[7,0.02,19,0.169,20,0.153,21,0.137,24,0.449,25,0.454,48,1.037,49,1,56,2.342,57,1.569,75,0.817,92,0.729,94,0.169,95,0.076,96,0.692,97,1.167,98,0.01,99,0.01,100,0.729,103,1.268,105,0.278,106,1.229,107,2.242,113,1.313,116,3.307,117,2.06,121,0.898,123,1.698,124,0.951,125,0.951,126,1.053,127,2.199,128,2.342,130,1.308,140,2.933,148,1.569,149,3.657,150,2.997,151,2.775,152,2.955,153,1.268,154,0.625,155,1.121,167,1.706,169,3.473,170,2.805,172,1.847,181,1.82,195,1.948,200,1.533,204,1.96,223,1.488,227,1.121,229,1.61,235,0.767,238,1.295,240,1.441,271,1.058,290,1.058,291,1.268,319,2.414,414,1.569,478,3.165,488,2.192,526,4.991,744,3.791,749,2.99,755,1.453,756,2.211,757,1.268,758,1.453,759,1.191,760,1.453,761,1.453,762,1.453,765,2.211,766,2.786,767,2.211,771,2.211,772,2.211,773,2.211,778,2.449,780,2.387,781,1.569,798,1.569,799,1.569,874,2.598,875,4.93,876,2.115,877,5.464,878,5.464,879,5.464,880,5.464,881,5.464,882,2.469,883,2.469,884,3.872,885,3.872,886,5.079,887,5.079,888,3.514,889,3.165,890,2.99,891,2.469,892,2.469,893,2.469,894,2.469,895,2.469,896,2.469,897,4.387,898,2.469,899,2.469,900,2.469,901,3.872,902,2.469,903,2.469,904,2.469,905,2.469,906,1.569,907,1.708,908,3.78,909,2.676,910,2.115,911,1.708,912,1.708,913,1.708,914,1.708,915,2.469,916,2.469,917,3.756,918,2.469,919,2.469,920,3.756,921,2.469]],["title/controllers/RepoStargazeController.html",[100,1.084,922,2.54]],["body/controllers/RepoStargazeController.html",[7,0.02,19,0.171,20,0.155,21,0.138,24,0.451,25,0.46,48,1.045,49,1.012,60,2.354,61,1.588,75,0.819,92,0.738,94,0.171,95,0.077,96,0.701,97,1.178,98,0.01,99,0.01,100,0.738,103,1.283,105,0.281,106,1.241,107,2.247,113,1.32,116,3.317,117,2.079,121,0.903,123,1.707,124,0.956,125,0.956,126,1.063,127,2.205,128,2.349,130,1.31,140,2.936,148,1.588,149,3.674,150,3.013,151,2.788,152,2.968,153,1.283,154,0.632,155,1.135,167,1.721,169,3.491,170,2.82,172,1.858,181,1.827,195,1.96,200,1.541,204,1.965,223,1.499,227,1.135,229,1.619,235,0.777,238,1.307,240,1.454,271,1.071,290,1.071,291,1.283,319,2.42,478,3.177,488,2.208,504,3.49,744,3.803,749,3.008,755,1.471,756,2.231,757,1.283,758,1.471,759,1.205,760,1.471,761,1.471,762,1.471,765,2.231,766,2.803,767,2.231,771,2.231,772,2.231,773,2.231,778,2.464,780,2.408,781,1.588,798,1.588,799,1.588,855,2.141,888,3.535,889,3.177,906,1.588,907,1.729,908,3.8,911,1.729,912,1.729,913,1.729,914,1.729,922,2.622,923,4.953,924,2.141,925,5.493,926,5.493,927,5.493,928,5.493,929,5.493,930,2.499,931,2.499,932,3.79,933,6.803,934,5.11,935,4.378,936,2.499,937,2.499,938,2.499,939,2.499,940,2.499,941,2.499,942,4.953,943,2.499,944,2.499,945,2.499,946,3.79,947,2.499,948,2.499,949,2.499,950,2.499,951,2.695,952,2.141,953,2.499,954,2.499,955,3.79,956,3.79,957,2.499,958,2.499,959,3.79,960,3.79,961,2.499]],["title/controllers/RepoSubmitController.html",[100,1.084,962,2.54]],["body/controllers/RepoSubmitController.html",[7,0.02,19,0.169,20,0.153,21,0.137,24,0.449,25,0.454,48,1.037,49,1,58,2.342,59,1.569,75,0.817,92,0.729,94,0.169,95,0.076,96,0.692,97,1.167,98,0.01,99,0.01,100,0.729,103,1.268,105,0.278,106,1.229,107,2.242,113,1.313,116,3.307,117,2.06,121,0.898,123,1.698,124,0.951,125,0.951,126,1.053,127,2.199,128,2.342,130,1.308,140,2.933,148,1.569,149,3.657,150,2.997,151,2.775,152,2.955,153,1.268,154,0.625,155,1.121,167,1.706,169,3.473,170,2.805,172,1.847,181,1.82,195,1.948,200,1.533,204,1.96,223,1.488,227,1.121,229,1.61,235,0.767,238,1.295,240,1.441,271,1.058,290,1.058,291,1.268,319,2.414,478,3.165,488,2.192,542,5.481,744,3.791,749,2.99,755,1.453,756,2.211,757,1.268,758,1.453,759,1.191,760,1.453,761,1.453,762,1.453,765,2.211,766,2.786,767,2.211,771,2.211,772,2.211,773,2.211,778,2.449,780,2.387,781,1.569,798,1.569,799,1.569,854,1.882,884,3.872,885,3.872,888,3.514,889,3.165,890,2.99,901,3.872,906,1.569,907,1.708,908,3.78,911,1.708,912,1.708,913,1.708,914,1.708,962,2.598,963,4.93,964,2.115,965,5.464,966,5.464,967,5.464,968,5.464,969,5.464,970,2.469,971,2.469,972,5.079,973,5.079,974,2.469,975,2.469,976,2.469,977,2.469,978,2.469,979,2.469,980,4.93,981,2.469,982,2.469,983,2.469,984,2.469,985,2.469,986,2.469,987,2.469,988,2.676,989,2.115,990,1.882,991,2.469,992,2.469,993,3.756,994,2.469,995,2.469,996,3.756,997,2.469]],["title/controllers/RepoVoteController.html",[100,1.084,998,2.54]],["body/controllers/RepoVoteController.html",[7,0.02,19,0.169,20,0.153,21,0.137,24,0.449,25,0.454,48,1.037,49,1,54,2.342,55,1.569,75,0.817,92,0.729,94,0.169,95,0.076,96,0.692,97,1.167,98,0.01,99,0.01,100,0.729,103,1.268,105,0.278,106,1.229,107,2.242,113,1.313,116,3.307,117,2.06,121,0.898,123,1.698,124,0.951,125,0.951,126,1.053,127,2.199,128,2.342,130,1.308,140,2.933,148,1.569,149,3.657,150,2.997,151,2.775,152,2.955,153,1.268,154,0.625,155,1.121,167,1.706,169,3.473,170,2.805,172,1.847,181,1.82,195,1.948,200,1.533,204,1.96,223,1.488,227,1.121,229,1.61,235,0.767,238,1.295,240,1.441,271,1.058,290,1.058,291,1.268,319,2.414,478,3.165,488,2.192,560,4.991,744,3.791,749,2.99,755,1.453,756,2.211,757,1.268,758,1.453,759,1.191,760,1.453,761,1.453,762,1.453,765,2.211,766,2.786,767,2.211,771,2.211,772,2.211,773,2.211,778,2.449,780,2.387,781,1.569,798,1.569,799,1.569,853,2.115,884,3.872,885,3.872,888,3.514,889,3.165,890,2.99,901,3.872,906,1.569,907,1.708,908,3.78,911,1.708,912,1.708,913,1.708,914,1.708,998,2.598,999,4.93,1000,2.115,1001,5.464,1002,5.464,1003,5.464,1004,5.464,1005,5.464,1006,2.469,1007,2.469,1008,5.079,1009,5.079,1010,2.469,1011,2.469,1012,2.469,1013,2.469,1014,2.469,1015,2.469,1016,4.387,1017,2.469,1018,2.469,1019,2.469,1020,2.469,1021,2.469,1022,2.469,1023,2.469,1024,2.676,1025,2.115,1026,2.469,1027,2.469,1028,3.756,1029,2.469,1030,2.469,1031,3.756,1032,2.469]],["title/modules/StarModule.html",[0,0.978,11,2.334]],["body/modules/StarModule.html",[0,1.595,2,1.857,3,2.566,7,0.02,11,4.663,16,2.719,17,2.075,18,1.857,19,0.332,20,0.3,21,0.268,23,2.198,24,0.494,25,0.891,26,2.485,27,1.67,48,1.366,49,1.962,56,2.566,57,3.077,92,1.768,93,2.887,94,0.332,95,0.149,98,0.016,99,0.016,214,3.074,223,2.327,227,2.198,229,1.048,231,2.85,874,4.496,909,4.39,910,4.147,1033,4.147,1034,4.147,1035,4.147,1036,4.841,1037,4.841]],["title/injectables/StarService.html",[277,1.03,909,2.162]],["body/injectables/StarService.html",[7,0.02,19,0.266,20,0.24,21,0.215,24,0.428,25,0.713,27,1.336,39,1.268,56,1.66,57,2.461,75,0.704,94,0.266,95,0.119,96,1.454,97,1.204,98,0.014,99,0.014,105,0.435,106,1.697,107,2.193,121,1.026,123,1.817,124,1.017,125,1.017,127,1.914,128,2.27,130,1.33,140,2.907,172,2.366,195,2.395,200,1.751,229,1.122,277,1.454,278,1.759,282,1.941,286,4.475,289,2.125,298,3.424,312,2.506,317,1.868,416,1.868,526,2.68,817,3.675,833,2.28,843,3.052,861,3.052,863,3.052,864,3.441,889,2.662,890,2.28,897,3.953,909,3.052,1038,3.318,1039,5.846,1040,5.846,1041,3.873,1042,3.873,1043,5.185,1044,3.873,1045,3.873,1046,3.873,1047,3.873,1048,3.873,1049,2.68,1050,3.873,1051,3.873,1052,2.68,1053,5.185,1054,5.185,1055,6.698,1056,5.185,1057,3.587,1058,3.873,1059,3.873,1060,2.68,1061,3.873]],["title/modules/StargazeModule.html",[0,0.978,12,2.334]],["body/modules/StargazeModule.html",[0,1.595,2,1.857,3,2.566,7,0.02,12,4.663,16,2.719,17,2.075,18,1.857,19,0.332,20,0.3,21,0.268,23,2.198,24,0.494,25,0.891,26,2.485,27,1.67,48,1.366,49,1.962,60,2.566,61,3.077,92,1.768,93,2.887,94,0.332,95,0.149,98,0.016,99,0.016,214,3.074,223,2.327,227,2.198,229,1.048,231,2.85,922,4.496,951,4.39,952,4.147,1062,4.147,1063,4.147,1064,4.147,1065,4.841,1066,4.841]],["title/injectables/StargazeService.html",[277,1.03,951,2.162]],["body/injectables/StargazeService.html",[7,0.02,19,0.266,20,0.24,21,0.215,24,0.428,25,0.713,27,1.336,39,1.268,60,1.66,61,2.461,75,0.704,94,0.266,95,0.119,96,1.454,97,1.204,98,0.014,99,0.014,105,0.435,106,1.697,107,2.193,121,1.026,123,1.817,124,1.017,125,1.017,127,1.914,128,2.27,130,1.33,140,2.907,172,2.366,195,2.395,200,1.751,229,1.265,277,1.454,278,1.759,282,1.941,286,4.475,289,2.125,298,3.424,312,2.506,317,1.868,416,1.868,817,3.675,833,2.28,843,3.052,861,3.052,863,3.052,864,3.441,889,2.662,935,4.442,942,3.318,951,3.052,1049,2.68,1052,2.68,1057,3.587,1060,2.68,1067,3.318,1068,5.846,1069,5.846,1070,3.873,1071,3.873,1072,5.185,1073,3.873,1074,3.873,1075,3.873,1076,3.873,1077,3.873,1078,3.873,1079,3.873,1080,5.185,1081,5.185,1082,6.698,1083,5.185,1084,3.873,1085,3.873,1086,3.873]],["title/modules/SubmitModule.html",[0,0.978,13,2.334]],["body/modules/SubmitModule.html",[0,1.595,2,1.857,3,2.566,7,0.02,13,4.663,16,2.719,17,2.075,18,1.857,19,0.332,20,0.3,21,0.268,23,2.198,24,0.494,25,0.891,26,2.485,27,1.67,48,1.366,49,1.962,58,2.566,59,3.077,92,1.768,93,2.887,94,0.332,95,0.149,98,0.016,99,0.016,214,3.074,223,2.327,227,2.198,229,1.048,231,2.85,962,4.496,988,4.39,989,4.147,1087,4.147,1088,4.147,1089,4.147,1090,4.841,1091,4.841]],["title/injectables/SubmitService.html",[277,1.03,988,2.162]],["body/injectables/SubmitService.html",[7,0.02,19,0.266,20,0.24,21,0.215,24,0.428,25,0.713,27,1.336,39,1.268,58,1.66,59,2.461,75,0.704,94,0.266,95,0.119,96,1.454,97,1.204,98,0.014,99,0.014,105,0.435,106,1.697,107,2.193,121,1.026,123,1.817,124,1.017,125,1.017,127,1.914,128,2.27,130,1.33,140,2.907,172,2.366,195,2.395,200,1.751,229,1.122,277,1.454,278,1.759,282,1.941,286,4.475,289,2.125,298,3.424,312,2.506,317,1.868,416,1.868,817,3.675,833,2.28,843,3.052,861,3.052,863,3.052,864,3.441,889,2.662,890,2.28,988,3.052,990,2.953,1049,2.68,1052,2.68,1057,3.587,1060,2.68,1092,3.318,1093,5.846,1094,5.846,1095,3.873,1096,3.873,1097,5.185,1098,3.873,1099,3.873,1100,3.873,1101,3.873,1102,3.873,1103,3.873,1104,3.873,1105,5.185,1106,5.185,1107,6.698,1108,5.185,1109,5.185,1110,3.873,1111,3.873,1112,3.873]],["title/classes/SupabaseAuthDto.html",[95,0.113,160,2.54]],["body/classes/SupabaseAuthDto.html",[7,0.02,19,0.199,20,0.18,21,0.161,24,0.199,75,0.818,88,2.228,94,0.199,95,0.089,98,0.011,99,0.011,104,4.364,105,0.326,113,1.632,117,3.766,121,1.116,124,0.737,125,1.258,126,2.027,130,0.779,138,1.814,154,0.734,158,4.172,160,2.928,173,4.363,174,5.01,175,4.283,176,4.283,177,1.918,178,2.026,181,1.476,182,3.811,183,3.626,184,4.283,185,2.311,186,3.626,192,3.177,193,3.459,204,2.005,233,1.59,239,1.25,240,2.861,266,4.697,319,2.577,321,2.928,322,3.51,323,2.492,339,3.319,340,3.319,342,2.041,343,3.319,344,3.117,354,2.041,357,2.823,397,3.319,399,2.928,436,3.236,437,3.494,522,2.492,578,3.227,586,3.626,590,4.191,611,3.227,681,3.227,697,2.483,1113,5.883,1114,2.483,1115,6.7,1116,4.233,1117,4.233,1118,2.898,1119,2.898,1120,4.233,1121,2.898,1122,2.898,1123,2.898,1124,5.498,1125,2.898,1126,2.898,1127,4.233,1128,2.898,1129,2.898,1130,2.898,1131,2.898]],["title/injectables/SupabaseGuard.html",[155,1.668,277,1.03]],["body/injectables/SupabaseGuard.html",[7,0.02,19,0.387,20,0.349,21,0.312,24,0.45,25,1.038,94,0.387,95,0.173,98,0.017,99,0.017,155,2.979,216,4.298,237,3.093,277,1.84,278,2.56,1132,4.83,1133,5.638,1134,5.638]],["title/injectables/SupabaseStrategy.html",[212,2.334,277,1.03]],["body/injectables/SupabaseStrategy.html",[7,0.02,19,0.321,20,0.29,21,0.259,24,0.46,25,0.861,75,0.706,94,0.321,95,0.144,96,1.795,98,0.016,99,0.016,104,2.973,105,0.526,106,1.918,107,2.095,112,5.747,121,1.052,123,1.822,124,1.02,125,1.02,126,1.644,127,1.918,157,3.566,158,3.45,189,2.661,200,1.312,212,3.724,216,3.566,237,2.566,277,1.644,278,2.124,625,3.566,1135,4.007,1136,6.399,1137,6.399,1138,4.678,1139,4.678,1140,6.399,1141,4.678,1142,5.86,1143,4.678,1144,4.678,1145,4.678,1146,5.86,1147,4.678,1148,4.678,1149,4.678,1150,5.86,1151,4.678,1152,4.678,1153,4.678,1154,4.678,1155,4.678,1156,4.678,1157,4.678,1158,4.678,1159,4.678,1160,4.678,1161,4.678,1162,4.678]],["title/modules/UserModule.html",[0,0.978,14,2.162]],["body/modules/UserModule.html",[0,1.648,2,1.96,3,2.652,7,0.02,14,4.289,16,2.81,17,2.189,18,1.96,19,0.35,20,0.316,21,0.283,23,2.32,24,0.475,25,0.94,26,2.623,27,1.762,50,2.507,93,2.983,94,0.35,95,0.157,98,0.016,99,0.016,163,4.42,214,3.176,231,3.007,1163,4.376,1164,4.376,1165,4.376,1166,5.108,1167,4.376,1168,5.108]],["title/injectables/UserService.html",[163,2.162,277,1.03]],["body/injectables/UserService.html",[7,0.021,19,0.233,20,0.21,21,0.188,24,0.426,25,0.624,27,1.169,39,1.11,50,1.918,72,3.275,75,0.748,88,1.374,94,0.233,95,0.104,96,1.328,97,1.054,98,0.013,99,0.013,105,0.381,106,1.55,107,2.314,121,1.057,123,1.931,124,1.081,125,1.081,126,1.965,127,2.033,128,2.147,130,1.289,133,2.345,138,2.029,143,2.345,163,2.787,172,2.258,177,1.3,179,2.904,180,2.904,181,2.069,182,3.609,188,5.058,192,2.154,193,3.275,195,2.468,197,5.058,198,5.058,200,1.742,277,1.328,278,1.539,282,1.835,289,1.859,298,1.859,312,2.758,319,1.233,440,3.275,578,2.584,766,3.407,776,4.158,783,2.584,817,3.475,828,4.673,833,2.787,843,2.787,861,1.995,863,1.995,864,3.211,1167,2.904,1169,2.904,1170,5.454,1171,5.454,1172,5.454,1173,3.39,1174,3.39,1175,4.734,1176,3.39,1177,3.39,1178,3.39,1179,3.39,1180,3.39,1181,3.39,1182,3.39,1183,3.39,1184,3.39,1185,3.39,1186,3.39,1187,3.39,1188,3.39,1189,4.734,1190,3.39,1191,2.904,1192,4.734,1193,5.454,1194,2.904,1195,4.734,1196,3.39,1197,3.39,1198,2.904,1199,3.39,1200,3.39,1201,4.734,1202,4.734]],["title/modules/VoteModule.html",[0,0.978,15,2.334]],["body/modules/VoteModule.html",[0,1.595,2,1.857,3,2.566,7,0.02,15,4.663,16,2.719,17,2.075,18,1.857,19,0.332,20,0.3,21,0.268,23,2.198,24,0.494,25,0.891,26,2.485,27,1.67,48,1.366,49,1.962,54,2.566,55,3.077,92,1.768,93,2.887,94,0.332,95,0.149,98,0.016,99,0.016,214,3.074,223,2.327,227,2.198,229,1.048,231,2.85,998,4.496,1024,4.39,1025,4.147,1203,4.147,1204,4.147,1205,4.147,1206,4.841,1207,4.841]],["title/injectables/VoteService.html",[277,1.03,1024,2.162]],["body/injectables/VoteService.html",[7,0.02,19,0.266,20,0.24,21,0.215,24,0.428,25,0.713,27,1.336,39,1.268,54,1.66,55,2.461,75,0.704,94,0.266,95,0.119,96,1.454,97,1.204,98,0.014,99,0.014,105,0.435,106,1.697,107,2.193,121,1.026,123,1.817,124,1.017,125,1.017,127,1.914,128,2.27,130,1.33,140,2.907,172,2.366,195,2.395,200,1.751,229,1.122,277,1.454,278,1.759,282,1.941,286,4.475,289,2.125,298,3.424,312,2.506,317,1.868,416,1.868,560,2.68,817,3.675,833,2.28,843,3.052,861,3.052,863,3.052,864,3.441,889,2.662,890,2.28,1016,3.953,1024,3.052,1049,2.68,1052,2.68,1057,3.587,1060,2.68,1208,3.318,1209,5.846,1210,5.846,1211,3.873,1212,3.873,1213,5.185,1214,3.873,1215,3.873,1216,3.873,1217,3.873,1218,3.873,1219,3.873,1220,3.873,1221,5.185,1222,5.185,1223,6.698,1224,5.185,1225,3.873,1226,3.873,1227,3.873]],["title/changelog.html",[1228,2.125,1229,2.341,1230,2.631]],["body/changelog.html",[3,1.864,7,0.02,18,0.405,21,0.138,39,1.339,48,0.425,50,0.754,52,0.845,54,1.29,56,1.29,58,1.29,60,1.29,70,1.595,75,0.224,85,2.374,89,2.006,98,0.005,99,0.005,100,1.284,104,1.912,113,0.447,117,3.069,118,3.726,124,0.712,126,1.621,133,2.082,134,2.578,138,2.353,143,0.731,158,2.02,167,1.72,173,1.288,181,0.55,185,0.861,187,1.595,189,0.845,190,1.288,191,1.288,192,1.183,200,0.844,229,1.35,239,1.706,242,0.671,246,0.579,254,0.622,272,1.288,273,1.288,282,1.271,312,1.29,314,1.739,318,0.805,323,0.622,332,1.419,337,0.956,341,1.912,342,0.509,344,2.207,347,0.956,352,1.282,359,1.419,368,3.476,369,3.116,370,0.956,373,2.294,390,2.698,392,1.912,410,1.419,411,1.419,412,1.419,413,1.419,424,1.419,427,0.542,430,1.419,436,1.096,440,1.288,457,3.117,488,2.207,504,1.419,526,1.288,541,1.595,542,0.805,560,2.082,594,3.244,611,1.419,618,0.905,622,0.805,641,0.905,671,1.912,706,0.905,708,2.139,745,2.578,759,0.898,811,0.731,814,0.731,830,2.139,854,1.419,897,1.419,906,1.912,980,1.595,990,1.419,1016,1.419,1191,1.595,1194,0.905,1198,3.726,1228,0.731,1230,1.595,1231,0.905,1232,1.862,1233,2.578,1234,1.862,1235,0.905,1236,2.578,1237,4.951,1238,6.239,1239,6.106,1240,1.056,1241,1.056,1242,1.056,1243,6.07,1244,6.13,1245,1.056,1246,1.056,1247,1.056,1248,0.805,1249,1.903,1250,1.056,1251,1.056,1252,2.496,1253,3.432,1254,4.349,1255,1.862,1256,1.862,1257,3.631,1258,2.139,1259,1.862,1260,1.862,1261,4.349,1262,1.862,1263,2.496,1264,1.056,1265,2.496,1266,4.241,1267,4.576,1268,6.708,1269,1.595,1270,1.862,1271,1.862,1272,2.94,1273,3.009,1274,3.009,1275,1.595,1276,1.862,1277,3.787,1278,1.595,1279,1.862,1280,3.244,1281,3.787,1282,3.244,1283,1.862,1284,1.595,1285,1.862,1286,1.862,1287,1.862,1288,1.862,1289,4.496,1290,5.249,1291,1.862,1292,1.862,1293,2.578,1294,1.862,1295,1.862,1296,1.862,1297,3.009,1298,4.339,1299,1.862,1300,1.862,1301,2.139,1302,3.009,1303,1.862,1304,1.862,1305,1.862,1306,1.862,1307,1.862,1308,1.862,1309,1.595,1310,2.139,1311,1.862,1312,1.862,1313,5.936,1314,4.089,1315,6.239,1316,6.289,1317,3.432,1318,3.432,1319,1.862,1320,4.091,1321,1.862,1322,2.578,1323,1.595,1324,3.726,1325,1.862,1326,1.862,1327,1.862,1328,1.862,1329,3.787,1330,1.862,1331,1.862,1332,5.691,1333,1.862,1334,1.862,1335,1.862,1336,1.862,1337,1.862,1338,1.862,1339,1.862,1340,1.862,1341,1.862,1342,1.862,1343,1.862,1344,4.091,1345,1.862,1346,1.862,1347,1.862,1348,1.862,1349,1.862,1350,3.432,1351,1.862,1352,1.862,1353,1.862,1354,1.862,1355,2.496,1356,1.862,1357,1.862,1358,1.862,1359,4.951,1360,1.862,1361,1.595,1362,1.862,1363,1.862,1364,2.496,1365,4.775,1366,1.862,1367,1.862,1368,3.009,1369,1.862,1370,2.496,1371,2.496,1372,1.862,1373,1.862,1374,1.595,1375,3.787,1376,3.787,1377,1.862,1378,1.862,1379,1.862,1380,1.862,1381,3.009,1382,3.787,1383,1.862,1384,1.862,1385,1.862,1386,1.862,1387,1.862,1388,1.862,1389,1.862,1390,2.496,1391,1.862,1392,1.862,1393,1.862,1394,1.862,1395,1.862,1396,1.862,1397,1.862,1398,1.862,1399,1.862,1400,5.596,1401,1.862,1402,1.862,1403,1.862,1404,1.862,1405,1.862,1406,1.862,1407,1.862,1408,1.862,1409,1.862,1410,1.862,1411,1.862,1412,3.787,1413,1.419,1414,1.862,1415,1.862,1416,2.578,1417,1.862,1418,1.862,1419,2.578,1420,1.862,1421,1.862,1422,1.862,1423,1.862,1424,1.862,1425,1.862,1426,1.862,1427,1.862,1428,3.432,1429,1.862,1430,1.862,1431,1.862,1432,1.862,1433,1.862,1434,1.862,1435,1.862,1436,1.862,1437,1.862,1438,1.862,1439,2.496,1440,1.862,1441,3.009,1442,1.862,1443,1.056,1444,1.056,1445,1.056,1446,5.108,1447,1.056,1448,1.056,1449,1.056,1450,1.056,1451,1.056,1452,4.576,1453,1.056,1454,1.056,1455,1.056,1456,1.056,1457,1.056,1458,3.009,1459,1.056,1460,1.056,1461,1.056,1462,1.862,1463,1.862,1464,1.862,1465,2.496,1466,1.056,1467,2.496,1468,1.056,1469,1.862,1470,1.056,1471,1.056,1472,1.056,1473,1.056,1474,3.787,1475,2.578,1476,3.009,1477,1.862,1478,2.496,1479,1.862,1480,1.862,1481,1.862,1482,2.496,1483,3.432,1484,1.862,1485,1.862,1486,1.862,1487,3.787,1488,1.862,1489,1.862,1490,2.496,1491,1.862,1492,1.862,1493,3.432,1494,6.596,1495,1.056,1496,1.056,1497,1.056,1498,4.241,1499,1.056,1500,1.056,1501,1.056,1502,1.056,1503,1.056,1504,1.056,1505,3.503,1506,1.056,1507,1.056,1508,1.056,1509,1.056,1510,2.496,1511,1.419,1512,1.056,1513,1.056,1514,1.056,1515,1.862,1516,1.056,1517,1.056,1518,1.056,1519,1.595,1520,1.056,1521,1.056,1522,0.905,1523,1.595,1524,1.056,1525,1.056,1526,0.905,1527,1.056,1528,1.056,1529,3.92,1530,1.056,1531,1.056,1532,1.056,1533,1.056,1534,1.595,1535,1.056,1536,1.056,1537,1.056,1538,0.905,1539,0.905,1540,1.056,1541,1.056,1542,1.056,1543,1.056,1544,1.056,1545,1.056,1546,1.056,1547,1.056,1548,3.726,1549,1.056,1550,1.056,1551,1.056,1552,1.056,1553,1.862,1554,1.056,1555,1.056,1556,1.056,1557,1.056,1558,1.056,1559,1.056,1560,1.056,1561,1.056,1562,0.905,1563,1.056,1564,1.056,1565,3.432,1566,1.862,1567,0.805,1568,1.056,1569,1.056,1570,1.056,1571,1.056,1572,1.056,1573,1.056,1574,1.056,1575,1.056,1576,1.056,1577,1.056,1578,1.056,1579,1.056,1580,1.056,1581,1.056,1582,1.056,1583,1.056,1584,1.056,1585,1.056,1586,1.056,1587,1.056,1588,1.056,1589,1.056,1590,2.139,1591,1.056,1592,1.056,1593,1.056,1594,1.056,1595,1.056,1596,1.056,1597,1.056,1598,1.056,1599,1.056,1600,1.056,1601,1.056,1602,1.056,1603,1.056,1604,1.056,1605,1.056,1606,1.056,1607,2.496,1608,1.056,1609,1.056,1610,1.056,1611,1.056,1612,1.056,1613,1.056,1614,1.056,1615,0.905,1616,1.056,1617,1.056,1618,1.056,1619,0.905,1620,1.056,1621,1.056,1622,1.862,1623,1.056,1624,1.056,1625,1.056,1626,1.056,1627,1.056,1628,1.056,1629,1.056,1630,1.056,1631,1.595,1632,1.056,1633,1.595,1634,1.056,1635,1.056,1636,1.056,1637,1.862,1638,1.862,1639,1.862,1640,1.595,1641,1.862,1642,1.056,1643,2.496,1644,1.056,1645,1.862,1646,1.056,1647,1.862,1648,1.862,1649,1.056,1650,1.056,1651,1.056,1652,1.056,1653,1.056,1654,1.056,1655,1.056,1656,1.056,1657,1.056,1658,1.056,1659,1.056,1660,1.056,1661,1.056,1662,1.056,1663,1.862,1664,1.056,1665,1.056,1666,1.056,1667,1.056,1668,0.905,1669,1.056,1670,1.056,1671,1.056,1672,1.056,1673,1.056,1674,1.056,1675,1.056,1676,1.056,1677,1.056,1678,1.056,1679,1.056,1680,1.056,1681,1.056,1682,1.056,1683,1.056,1684,1.056,1685,1.056,1686,1.056,1687,1.056,1688,1.056,1689,1.056,1690,0.905,1691,0.905,1692,1.056,1693,1.056,1694,1.056,1695,1.056,1696,1.056,1697,1.056,1698,1.056,1699,1.056,1700,1.056,1701,1.056,1702,1.056,1703,1.056,1704,1.056,1705,1.056]],["title/coverage.html",[1706,3.813]],["body/coverage.html",[7,0.02,21,0.209,48,0.861,50,1.529,52,1.714,54,1.617,56,1.617,58,1.617,60,1.617,75,0.454,95,0.204,98,0.014,99,0.014,100,2.041,101,2.611,102,3.233,104,2.398,126,1.058,140,1.529,155,1.714,160,2.611,163,2.221,191,2.611,212,2.398,222,2.221,223,1.235,225,2.611,232,2.398,234,2.877,235,1.584,236,3.666,238,1.301,277,1.964,279,3.233,290,1.617,294,2.221,312,1.617,314,2.112,315,3.233,323,4.482,354,1.82,402,3.233,503,3.233,525,3.233,540,3.233,559,3.233,574,3.233,616,2.611,617,3.233,669,3.233,671,2.398,689,3.991,690,3.233,695,2.611,720,2.611,722,3.233,738,3.233,739,3.233,757,1.937,759,1.82,774,2.611,775,3.233,778,1.82,806,2.877,816,3.233,874,2.611,875,3.233,876,3.233,909,2.221,922,2.611,923,3.233,924,3.233,951,2.221,962,2.611,963,3.233,964,3.233,988,2.221,998,2.611,999,3.233,1000,3.233,1024,2.221,1038,3.233,1067,3.233,1092,3.233,1113,3.233,1114,3.233,1132,3.233,1135,3.233,1169,3.233,1208,3.233,1257,2.611,1269,3.233,1523,5.292,1706,2.877,1707,3.774,1708,6.451,1709,3.774,1710,7.242,1711,3.884,1712,3.233,1713,3.233,1714,6.177,1715,3.774,1716,3.233,1717,3.233,1718,6.648,1719,3.233,1720,3.233,1721,5.096,1722,6.177,1723,3.774]],["title/miscellaneous/enumerations.html",[1724,1.577,1725,3.781]],["body/miscellaneous/enumerations.html",[7,0.02,98,0.016,99,0.016,105,0.539,124,1.036,177,2.596,178,2.742,234,3.655,235,2.103,236,4.301,244,4.536,246,4.163,250,4.117,260,3.503,273,4.117,274,4.536,275,4.536,405,4.117,414,3.782,415,4.536,417,4.536,489,5.098,490,5.098,806,3.655,810,4.536,811,4.117,812,4.536,813,4.536,814,4.117,1724,2.462,1725,4.107,1726,4.794,1727,4.794,1728,5.951,1729,4.794,1730,4.794]],["title/miscellaneous/functions.html",[1724,1.577,1731,3.781]],["body/miscellaneous/functions.html",[7,0.018,98,0.018,99,0.018,105,0.656,1719,4.999,1720,6.028,1724,2.996,1731,4.999,1732,5.836]],["title/index.html",[105,0.345,1228,2.125,1229,2.341]],["body/index.html",[7,0.019,17,1.371,18,1.227,20,0.198,79,2.741,85,3.981,98,0.012,99,0.012,158,3.578,167,1.453,190,2.213,191,2.213,229,0.692,235,0.994,245,1.743,282,1.413,312,1.371,319,1.163,332,3.464,341,2.033,359,2.439,408,2.033,424,3.464,426,2.439,427,3.242,430,2.439,457,2.439,497,3.387,500,2.213,622,4.633,651,2.741,673,2.439,724,2.741,1231,2.741,1233,5.207,1239,3.893,1248,4.029,1249,3.464,1257,2.213,1258,2.741,1266,4.528,1275,2.741,1278,3.893,1280,2.741,1282,4.528,1284,2.741,1289,4.93,1293,4.528,1298,3.464,1301,2.741,1309,2.741,1310,2.741,1320,4.93,1322,5.207,1323,5.207,1324,2.741,1361,2.741,1413,2.439,1416,2.741,1419,4.93,1475,3.893,1498,2.741,1505,4.93,1529,5.41,1534,2.741,1538,2.741,1539,6.264,1548,4.93,1562,2.741,1567,2.439,1590,3.893,1615,3.893,1619,4.528,1631,2.741,1668,2.741,1690,6.088,1691,2.741,1706,2.439,1733,3.199,1734,3.199,1735,4.544,1736,3.199,1737,3.199,1738,3.199,1739,5.565,1740,2.741,1741,3.199,1742,3.199,1743,3.199,1744,3.199,1745,3.199,1746,3.199,1747,3.199,1748,4.544,1749,3.199,1750,3.199,1751,4.544,1752,3.199,1753,3.199,1754,3.199,1755,3.199,1756,6.496,1757,3.199,1758,3.199,1759,3.199,1760,2.741,1761,4.544,1762,3.199,1763,3.199,1764,3.199,1765,3.199,1766,3.199,1767,3.199,1768,3.199,1769,3.199,1770,3.199,1771,4.544,1772,3.199,1773,3.199,1774,4.544,1775,3.199,1776,3.199,1777,3.199,1778,3.199,1779,3.199,1780,3.199,1781,3.199,1782,3.199,1783,4.544,1784,3.199,1785,4.544,1786,4.544,1787,3.199,1788,3.199,1789,3.199,1790,4.544,1791,3.199,1792,3.199,1793,3.199,1794,3.199,1795,3.199,1796,3.199,1797,3.199,1798,3.199,1799,3.199,1800,3.199,1801,3.199,1802,4.544,1803,4.544,1804,4.544,1805,3.199,1806,2.741,1807,3.199,1808,3.199,1809,3.199,1810,4.544,1811,3.199,1812,3.199,1813,4.544,1814,4.544,1815,3.199,1816,3.199,1817,3.199,1818,2.741,1819,3.199,1820,3.199,1821,4.544,1822,3.199,1823,4.544,1824,4.544,1825,3.199,1826,3.199,1827,3.199,1828,3.199,1829,3.199,1830,3.199,1831,4.544,1832,4.544,1833,3.199,1834,3.199,1835,3.199,1836,3.199,1837,3.199,1838,3.199,1839,3.199,1840,3.199,1841,3.199,1842,3.199,1843,3.199,1844,4.544,1845,3.199,1846,3.199,1847,3.199,1848,3.199,1849,3.199,1850,3.199,1851,3.199,1852,3.199,1853,3.199,1854,3.199,1855,3.199,1856,3.199,1857,3.199,1858,3.199,1859,3.199,1860,4.544,1861,3.199,1862,3.199,1863,3.199,1864,3.199,1865,3.199,1866,3.199]],["title/license.html",[408,1.952,1228,2.125,1229,2.341]],["body/license.html",[7,0.016,18,1.868,98,0.016,99,0.016,346,3.346,358,4.171,368,2.348,408,3.095,427,2.5,497,2.866,500,3.369,590,3.712,1248,4.58,1257,3.369,1526,4.171,1567,4.58,1739,4.171,1740,6.292,1760,4.171,1806,5.147,1818,4.171,1867,6.516,1868,4.869,1869,6.008,1870,4.869,1871,4.869,1872,4.869,1873,4.869,1874,4.869,1875,4.869,1876,4.869,1877,4.869,1878,4.869,1879,4.869,1880,4.869,1881,4.869,1882,4.869,1883,4.869,1884,4.869,1885,4.869,1886,4.869,1887,6.008,1888,4.869,1889,4.869,1890,4.869,1891,4.869,1892,4.869,1893,4.869,1894,6.008,1895,6.008,1896,4.869,1897,4.869,1898,4.869,1899,4.869,1900,4.869,1901,4.869,1902,4.869,1903,4.869,1904,4.869,1905,4.869,1906,4.869,1907,4.869,1908,4.869,1909,4.869,1910,4.869,1911,4.869,1912,4.869,1913,4.869,1914,4.869,1915,4.869,1916,4.869,1917,4.869,1918,4.869,1919,4.869,1920,4.869,1921,4.869,1922,4.869]],["title/modules.html",[2,1.919]],["body/modules.html",[1,3.677,2,2.039,6,3.377,7,0.017,8,3.377,9,3.377,10,3.377,11,3.377,12,3.377,13,3.377,14,3.128,15,3.377,98,0.017,99,0.017,1923,7.449,1924,7.449,1925,7.449,1926,7.486,1927,4.553,1928,5.314]],["title/overview.html",[1929,4.285]],["body/overview.html",[1,5.156,2,1.47,3,2.207,4,3.283,5,3.283,6,4.551,7,0.02,8,4.407,9,3.695,10,4.244,11,4.407,12,4.407,13,4.407,14,4.016,15,4.407,16,2.338,17,1.642,18,1.47,89,1.553,92,1.131,98,0.014,99,0.014,155,3.098,163,4.016,185,1.321,208,3.283,209,3.283,211,3.283,212,4.336,219,3.283,220,3.283,221,3.283,222,4.016,223,2.361,233,2.102,254,2.256,278,1.74,720,2.651,800,3.283,801,3.283,909,4.016,951,4.016,988,4.016,1024,4.016,1033,3.283,1034,3.283,1035,3.283,1062,3.283,1063,3.283,1064,3.283,1087,3.283,1088,3.283,1089,3.283,1163,3.283,1164,3.283,1165,3.283,1203,3.283,1204,3.283,1205,3.283,1640,3.283,1929,3.283,1930,3.832,1931,3.832,1932,3.832]],["title/properties.html",[239,1.303,1933,3.071]],["body/properties.html",[7,0.02,98,0.017,99,0.017,157,4.077,158,3.148,204,1.579,239,1.579,282,1.663,375,5.448,399,3.7,408,3.399,427,3.265,497,3.744,500,3.7,1235,4.582,1236,4.582,1272,4.582,1298,4.077,1374,4.582,1522,4.582,1633,4.582,1927,4.582,1934,5.349,1935,5.349,1936,5.349,1937,5.349,1938,5.349,1939,5.349,1940,5.349,1941,5.349,1942,5.349,1943,5.349,1944,5.349,1945,5.349,1946,5.349,1947,5.349,1948,5.349,1949,5.349,1950,5.349]],["title/miscellaneous/typealiases.html",[1724,1.577,1951,4.414]],["body/miscellaneous/typealiases.html",[7,0.018,75,0.703,98,0.018,99,0.018,105,0.656,1711,4.449,1724,2.996,1952,5.836,1953,6.692,1954,4.999]],["title/miscellaneous/variables.html",[1511,3.365,1724,1.577]],["body/miscellaneous/variables.html",[7,0.02,75,0.562,98,0.016,99,0.016,105,0.525,126,1.642,140,2.372,151,2.251,172,2.128,200,1.642,204,1.379,239,1.379,245,2.572,246,3.677,312,2.001,319,2.128,390,3.083,625,4.462,670,4,686,4,700,4,757,3.005,759,2.823,1249,4.462,1344,4,1413,3.559,1511,3.559,1519,5.015,1711,3.559,1712,4,1713,5.015,1716,4,1717,5.015,1724,2.397,1954,5.015,1955,4.669,1956,4.669,1957,4.669,1958,4.669,1959,4.669,1960,4.669,1961,4.669,1962,4.669,1963,5.853,1964,4.669,1965,4.669,1966,5.853,1967,4.669,1968,4.669,1969,4.669,1970,5.853,1971,5.853,1972,5.853,1973,5.853,1974,4.669,1975,4.669]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":323,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"coverage.html":{}}}],["0/1",{"_index":1710,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1709,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1714,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1708,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1718,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1722,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1721,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1715,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":1271,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":1449,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":1292,"title":{},"body":{"changelog.html":{}}}],["04082d7",{"_index":1408,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":1493,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":1446,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1494,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":369,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["0848443",{"_index":1605,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":1237,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":1358,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":254,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":1684,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":1681,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":1679,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":1675,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":1264,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":1252,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":1235,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.2.0",{"_index":1672,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":1666,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":1661,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":1658,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":1656,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":1627,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":1621,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":1589,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":1585,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":1582,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":1579,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":1574,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":1572,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":1564,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":1560,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":1617,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":1614,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":1611,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":1609,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":1606,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":1602,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":1599,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":1596,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":1555,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":1551,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":1501,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":1497,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":1495,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":1533,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":1528,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":1525,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":1521,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":1517,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":1513,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":1509,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":1504,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":1474,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":1471,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":1466,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":1313,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"overview.html":{}}}],["100",{"_index":702,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["10})@column({default",{"_index":612,"title":{},"body":{"entities/DbUser.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(50)@isoptional",{"_index":257,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["11756",{"_index":495,"title":{},"body":{"entities/DbRepo.html":{}}}],["11756})@column({type",{"_index":470,"title":{},"body":{"entities/DbRepo.html":{}}}],["12",{"_index":1467,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":393,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":355,"title":{},"body":{"entities/DbContribution.html":{}}}],["13",{"_index":1490,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":397,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":360,"title":{},"body":{"entities/DbContribution.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":345,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["14",{"_index":1333,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":1386,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":396,"title":{},"body":{"entities/DbContribution.html":{}}}],["155e99e",{"_index":1307,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":334,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":1265,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":1653,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":1353,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":1662,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":1481,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":1465,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":344,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":521,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["196})@primarygeneratedcolumn",{"_index":507,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["1bbeaf6",{"_index":1424,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":1312,"title":{},"body":{"changelog.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":264,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["20",{"_index":1355,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":343,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":368,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{},"license.html":{}}}],["2073883",{"_index":1288,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":1516,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":1527,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":1359,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":1357,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":398,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":371,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["22:04:39.000000",{"_index":496,"title":{},"body":{"entities/DbRepo.html":{}}}],["22:04:39.000000'})@column({type",{"_index":458,"title":{},"body":{"entities/DbRepo.html":{}}}],["22d3cc1",{"_index":1623,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":1565,"title":{},"body":{"changelog.html":{}}}],["237133",{"_index":522,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":516,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["237133})@primarycolumn('bigint",{"_index":584,"title":{},"body":{"entities/DbUser.html":{}}}],["24",{"_index":1364,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":1385,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1458,"title":{},"body":{"changelog.html":{}}}],["255",{"_index":328,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["26",{"_index":1456,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":1253,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":1705,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":1678,"title":{},"body":{"changelog.html":{}}}],["274",{"_index":492,"title":{},"body":{"entities/DbRepo.html":{}}}],["274})@column({type",{"_index":444,"title":{},"body":{"entities/DbRepo.html":{}}}],["28",{"_index":370,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["29",{"_index":1452,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":1346,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":1383,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":1695,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":1578,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":1373,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":1314,"title":{},"body":{"changelog.html":{}}}],["3001",{"_index":1753,"title":{},"body":{"index.html":{}}}],["31e4d60",{"_index":1508,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1255,"title":{},"body":{"changelog.html":{}}}],["3282435",{"_index":1392,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":1348,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":1616,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":1680,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":1401,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":1644,"title":{},"body":{"changelog.html":{}}}],["4552c66",{"_index":1486,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":1276,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":615,"title":{},"body":{"entities/DbUser.html":{}}}],["498})@column({type",{"_index":599,"title":{},"body":{"entities/DbUser.html":{}}}],["4b264d5",{"_index":1283,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":1291,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":493,"title":{},"body":{"entities/DbRepo.html":{}}}],["50",{"_index":256,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["500",{"_index":1294,"title":{},"body":{"changelog.html":{}}}],["5473",{"_index":494,"title":{},"body":{"entities/DbRepo.html":{}}}],["5473})@column({type",{"_index":481,"title":{},"body":{"entities/DbRepo.html":{}}}],["5699f6a",{"_index":1256,"title":{},"body":{"changelog.html":{}}}],["57568598",{"_index":491,"title":{},"body":{"entities/DbRepo.html":{}}}],["57568598})@column({type",{"_index":479,"title":{},"body":{"entities/DbRepo.html":{}}}],["58bf922",{"_index":1697,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":1380,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":1339,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":1689,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":1540,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":1641,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":468,"title":{},"body":{"entities/DbRepo.html":{}}}],["6",{"_index":1932,"title":{},"body":{"overview.html":{}}}],["607cf5d",{"_index":1660,"title":{},"body":{"changelog.html":{}}}],["618225f",{"_index":1389,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":1407,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":1655,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":1492,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":1669,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":1544,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":448,"title":{},"body":{"entities/DbRepo.html":{}}}],["673dca9",{"_index":1503,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":1433,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":1442,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":1512,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1640,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["71359796",{"_index":395,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["71359796})@column",{"_index":511,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["71359796})@column({type",{"_index":366,"title":{},"body":{"entities/DbContribution.html":{}}}],["71359796})@primarycolumn('bigint",{"_index":434,"title":{},"body":{"entities/DbRepo.html":{}}}],["7249714",{"_index":1418,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":1683,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":1595,"title":{},"body":{"changelog.html":{}}}],["79bf61d",{"_index":1537,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":1520,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":1701,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":1584,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":1626,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":1930,"title":{},"body":{"overview.html":{}}}],["8080:3001",{"_index":1786,"title":{},"body":{"index.html":{}}}],["81e8bbc",{"_index":1636,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":1420,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":1404,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":1299,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":1554,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":1427,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":1620,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":1931,"title":{},"body":{"overview.html":{}}}],["911df68",{"_index":1591,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":1406,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":1598,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":1321,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a08abfd",{"_index":1384,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":1646,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":1536,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":1496,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":1240,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":1893,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":1667,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":1665,"title":{},"body":{"changelog.html":{}}}],["accessing",{"_index":1592,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":723,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["action",{"_index":1917,"title":{},"body":{"license.html":{}}}],["activity",{"_index":598,"title":{},"body":{"entities/DbUser.html":{}}}],["add",{"_index":1239,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["add_table_nametest",{"_index":1835,"title":{},"body":{"index.html":{}}}],["added",{"_index":1309,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adding",{"_index":1827,"title":{},"body":{"index.html":{}}}],["additional",{"_index":1409,"title":{},"body":{"changelog.html":{}}}],["addorderby(`\"${orderfield",{"_index":303,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":305,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":873,"title":{},"body":{"injectables/RepoService.html":{}}}],["adds",{"_index":901,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["addselect(qb",{"_index":851,"title":{},"body":{"injectables/RepoService.html":{}}}],["adjust",{"_index":1258,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":1649,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1340,"title":{},"body":{"changelog.html":{}}}],["advised",{"_index":1797,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":1394,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":1242,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":1491,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":1577,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":829,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":1952,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":835,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":837,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":836,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":838,"title":{},"body":{"injectables/RepoService.html":{}}}],["allof",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":1325,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":889,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":1885,"title":{},"body":{"license.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":1081,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":1054,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":1106,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":1222,"title":{},"body":{"injectables/VoteService.html":{}}}],["api",{"_index":1298,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["api.opensauced.pizza",{"_index":1735,"title":{},"body":{"index.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":1787,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiconfig",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["apiconflictresponse",{"_index":908,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apidocs",{"_index":1477,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":386,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@column({default",{"_index":582,"title":{},"body":{"entities/DbUser.html":{}}}],["apihideproperty()@column({type",{"_index":450,"title":{},"body":{"entities/DbRepo.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":351,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":362,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":418,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["apimodelproperty",{"_index":387,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelproperty({description",{"_index":320,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelpropertyoptional",{"_index":388,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apimodelpropertyoptional({description",{"_index":338,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["apinotfoundresponse",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiokresponse",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apipaginatedresponse",{"_index":757,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":764,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":798,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apiproperty",{"_index":681,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apiproperty({description",{"_index":697,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apiproperty({type",{"_index":679,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":266,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["apipropertyoptional({description",{"_index":1115,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["apipropertyoptional({enum",{"_index":248,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":253,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["apitags",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"authentication",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":636,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"repository",{"_index":762,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["app",{"_index":1752,"title":{},"body":{"index.html":{}}}],["app.opensauced",{"_index":588,"title":{},"body":{"entities/DbUser.html":{}}}],["appearing",{"_index":1411,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":1749,"title":{},"body":{"index.html":{}}}],["apply",{"_index":1833,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":546,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":1327,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":1921,"title":{},"body":{"license.html":{}}}],["array",{"_index":686,"title":{},"body":{"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["artifact",{"_index":1607,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":490,"title":{},"body":{"entities/DbRepo.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":1807,"title":{},"body":{"index.html":{}}}],["assign",{"_index":1600,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1876,"title":{},"body":{"license.html":{}}}],["async",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":1673,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":1317,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/supabase.guard",{"_index":911,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["auth/supabase.user.decorator",{"_index":912,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["authcontroller",{"_index":101,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1136,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":1139,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["authguard",{"_index":1133,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":1134,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1949,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1911,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":869,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":870,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1928,"title":{},"body":{"modules.html":{}}}],["await",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["b0169e7",{"_index":1343,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":1532,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":1573,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":1305,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":1397,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":1671,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":1524,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":1654,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":1608,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":1402,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":1328,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":1563,"title":{},"body":{"changelog.html":{}}}],["backed",{"_index":1811,"title":{},"body":{"index.html":{}}}],["backend",{"_index":1936,"title":{},"body":{"properties.html":{}}}],["badge",{"_index":1377,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":1480,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":1531,"title":{},"body":{"changelog.html":{}}}],["baseentity",{"_index":379,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["baseline",{"_index":1642,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":817,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":1549,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":1676,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":1559,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":1630,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":1798,"title":{},"body":{"index.html":{}}}],["being",{"_index":1761,"title":{},"body":{"index.html":{}}}],["below",{"_index":1861,"title":{},"body":{"index.html":{}}}],["beneficial",{"_index":1763,"title":{},"body":{"index.html":{}}}],["beta",{"_index":593,"title":{},"body":{"entities/DbUser.html":{}}}],["beta.1",{"_index":1236,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.10",{"_index":1455,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":1454,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":1453,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":1451,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":1450,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":1448,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":1447,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":1445,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":1444,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":1443,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":1263,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":1464,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":1463,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":1462,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":1461,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":1460,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":1459,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":1457,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":1736,"title":{},"body":{"index.html":{}}}],["better",{"_index":1482,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":335,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["binaries",{"_index":1741,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":436,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":1720,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":359,"title":{},"body":{"entities/DbContribution.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":1794,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":1337,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1926,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1923,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1243,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1945,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1289,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":843,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builds",{"_index":1783,"title":{},"body":{"index.html":{}}}],["business",{"_index":1770,"title":{},"body":{"index.html":{}}}],["c",{"_index":1868,"title":{},"body":{"license.html":{}}}],["c013b70",{"_index":1571,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":1575,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":1634,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":1399,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":1762,"title":{},"body":{"index.html":{}}}],["catch",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":1650,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":1686,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":1581,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":1610,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":1500,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":1441,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":1230,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1233,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channel",{"_index":1859,"title":{},"body":{"index.html":{}}}],["character",{"_index":325,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["charge",{"_index":1873,"title":{},"body":{"license.html":{}}}],["check",{"_index":622,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":1170,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":1177,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["checks",{"_index":1685,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":1468,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":1750,"title":{},"body":{"index.html":{}}}],["claim",{"_index":1914,"title":{},"body":{"license.html":{}}}],["class",{"_index":95,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":233,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"overview.html":{}}}],["clean",{"_index":1390,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":1840,"title":{},"body":{"index.html":{}}}],["client",{"_index":1938,"title":{},"body":{"properties.html":{}}}],["closes",{"_index":1332,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":219,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":221,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_providers",{"_index":220,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":800,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":801,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_providers",{"_index":802,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_stargazemodule",{"_index":1062,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":1063,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_providers",{"_index":1064,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":1033,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":1035,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_providers",{"_index":1034,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_submitmodule",{"_index":1087,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":1089,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_providers",{"_index":1088,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1163,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1164,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1165,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":1203,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":1204,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_providers",{"_index":1205,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["code",{"_index":1266,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collection",{"_index":701,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["column",{"_index":378,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["column(\"text",{"_index":498,"title":{},"body":{"entities/DbRepo.html":{}}}],["column('text",{"_index":428,"title":{},"body":{"entities/DbRepo.html":{}}}],["command",{"_index":1756,"title":{},"body":{"index.html":{}}}],["commands",{"_index":1808,"title":{},"body":{"index.html":{}}}],["comments",{"_index":1625,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":1688,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":1799,"title":{},"body":{"index.html":{}}}],["common/constants/order",{"_index":292,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":758,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["common/dtos/page",{"_index":270,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["common/dtos/page.dto",{"_index":291,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["community",{"_index":1851,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1805,"title":{},"body":{"index.html":{}}}],["completing",{"_index":1306,"title":{},"body":{"changelog.html":{}}}],["complexity",{"_index":1939,"title":{},"body":{"properties.html":{}}}],["component",{"_index":1668,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["concurrency",{"_index":1541,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":1892,"title":{},"body":{"license.html":{}}}],["config/api.config",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["config/endpoint.config",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["configservice.get(\"db.connection",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.database",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.host",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.password",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.port",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"db.username",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1643,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":1809,"title":{},"body":{"index.html":{}}}],["confirmation",{"_index":1117,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":1049,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"you",{"_index":1057,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["connect",{"_index":1810,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1818,"title":{},"body":{"index.html":{},"license.html":{}}}],["console.log",{"_index":1396,"title":{},"body":{"changelog.html":{}}}],["console.log(querybuilder.getsql",{"_index":308,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["const",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":733,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(contributionrepository",{"_index":281,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(data",{"_index":672,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(reporepository",{"_index":819,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":1070,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":1041,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":1095,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":1211,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(undefined",{"_index":694,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userrepository",{"_index":1173,"title":{},"body":{"injectables/UserService.html":{}}}],["container",{"_index":1498,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contents",{"_index":1568,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":1519,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":1315,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":1918,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1846,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":331,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":1844,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":341,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":226,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.repo",{"_index":419,"title":{},"body":{"entities/DbRepo.html":{}}}],["contribution.service",{"_index":228,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{}}}],["contribution/contribution.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":244,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":247,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":232,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":284,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":392,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":230,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":739,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":754,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":750,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":849,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":810,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":222,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":275,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":100,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"health",{"_index":635,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"repos",{"_index":761,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":1854,"title":{},"body":{"index.html":{}}}],["copies",{"_index":1887,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1567,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copying",{"_index":1817,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":1867,"title":{},"body":{"license.html":{}}}],["correct",{"_index":1268,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":1296,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":273,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":1415,"title":{},"body":{"changelog.html":{}}}],["couple",{"_index":1801,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1706,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":1194,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["created",{"_index":1638,"title":{},"body":{"changelog.html":{}}}],["created_at",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":384,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["createparamdecorator",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":1594,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":342,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["current",{"_index":706,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["cypress",{"_index":1780,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":1388,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":1405,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":1547,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":1308,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":1437,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":1479,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1915,"title":{},"body":{"license.html":{}}}],["data",{"_index":670,"title":{},"body":{"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["datasource",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":337,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["date().tostring",{"_index":1197,"title":{},"body":{"injectables/UserService.html":{}}}],["db",{"_index":1696,"title":{},"body":{"changelog.html":{}}}],["db:changesif",{"_index":1830,"title":{},"body":{"index.html":{}}}],["db:commit",{"_index":1834,"title":{},"body":{"index.html":{}}}],["db:push",{"_index":1839,"title":{},"body":{"index.html":{}}}],["db:resetpush",{"_index":1838,"title":{},"body":{"index.html":{}}}],["db:startmake",{"_index":1826,"title":{},"body":{"index.html":{}}}],["dbc66f3",{"_index":1387,"title":{},"body":{"changelog.html":{}}}],["dbconfig",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["dbcontribution",{"_index":52,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":748,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbrepo",{"_index":48,"title":{"entities/DbRepo.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":60,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":934,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":56,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":887,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":58,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":973,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":54,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":1009,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":786,"title":{},"body":{"controllers/RepoController.html":{}}}],["dbuser",{"_index":50,"title":{"entities/DbUser.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dd5e668",{"_index":1473,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1877,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1922,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1561,"title":{},"body":{"changelog.html":{}}}],["decorator",{"_index":1664,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["default",{"_index":245,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":906,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["delete(\"/:id/star",{"_index":919,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":958,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":995,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":1030,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":921,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":961,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":997,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":1032,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":883,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":931,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":971,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1007,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":893,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":938,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":976,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1012,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["deleted_at",{"_index":316,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["deletedatecolumn",{"_index":383,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["demo",{"_index":1542,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["deploy",{"_index":1329,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":1475,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deps",{"_index":1694,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":489,"title":{},"body":{"entities/DbRepo.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["designed",{"_index":1937,"title":{},"body":{"properties.html":{}}}],["developer",{"_index":1552,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":1323,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagram",{"_index":1843,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":1478,"title":{},"body":{"changelog.html":{}}}],["difference",{"_index":1829,"title":{},"body":{"index.html":{}}}],["digital",{"_index":1375,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":293,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disable",{"_index":1199,"title":{},"body":{"injectables/UserService.html":{}}}],["discord.find",{"_index":1855,"title":{},"body":{"index.html":{}}}],["disk",{"_index":639,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":634,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1275,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["distribute",{"_index":1883,"title":{},"body":{"license.html":{}}}],["dit",{"_index":1788,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1529,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":1746,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":1637,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":1318,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":1469,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":1484,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":1257,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1234,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":1535,"title":{},"body":{"changelog.html":{}}}],["dot",{"_index":1934,"title":{},"body":{"properties.html":{}}}],["down",{"_index":1351,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":1039,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":1045,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":1068,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":1074,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":925,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":930,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":926,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":937,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":877,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":882,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":878,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":892,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":1093,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":1099,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":965,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":970,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":966,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":975,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":1209,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":1215,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":1001,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":1006,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":1002,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":1011,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dry",{"_index":1538,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dtos",{"_index":1422,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":296,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/repo",{"_index":794,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["during",{"_index":1793,"title":{},"body":{"index.html":{}}}],["e",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["e0d38ca",{"_index":1369,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":1613,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":1550,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":1354,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":1426,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":1295,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":1674,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":685,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":1485,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":1518,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":1363,"title":{},"body":{"changelog.html":{}}}],["email",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["emoji",{"_index":1260,"title":{},"body":{"changelog.html":{}}}],["encounter",{"_index":1759,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":1845,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1254,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints",{"_index":641,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":623,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":1699,"title":{},"body":{"changelog.html":{}}}],["entities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"changelog.html":{},"overview.html":{}}}],["entities/repo.entity",{"_index":793,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entity",{"_index":314,"title":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":272,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":1725,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":249,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["env",{"_index":1515,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1510,"title":{},"body":{"changelog.html":{}}}],["environments",{"_index":1734,"title":{},"body":{"index.html":{}}}],["error",{"_index":1191,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["errors",{"_index":1282,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["eslint",{"_index":1198,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["event",{"_index":1526,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["everything",{"_index":1831,"title":{},"body":{"index.html":{}}}],["example",{"_index":322,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["exception/responses",{"_index":1250,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":1300,"title":{},"body":{"changelog.html":{}}}],["executioncontext",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":885,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["explain",{"_index":1702,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":1580,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1902,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1545,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":237,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["extra",{"_index":1391,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":1147,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1160,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":1159,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f0304d4",{"_index":1470,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":1403,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":1430,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":1247,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":1414,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":1588,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":1262,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":1347,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":1279,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":1356,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":1349,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":1331,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["false})@column({default",{"_index":442,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{}}}],["fcaddb5",{"_index":1251,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":1659,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":1335,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":1601,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":594,"title":{},"body":{"entities/DbUser.html":{},"changelog.html":{}}}],["features",{"_index":1238,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":1246,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":1342,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":1489,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":1760,"title":{},"body":{"index.html":{},"license.html":{}}}],["find",{"_index":753,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findall",{"_index":280,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findall(pageoptionsdto",{"_index":285,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findallbyownerandrepo",{"_index":740,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":742,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid",{"_index":741,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":751,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findalluserstargazed",{"_index":927,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":940,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":879,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":895,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":967,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":978,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":1003,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":1014,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyid",{"_index":776,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":783,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":777,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":788,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["finds",{"_index":744,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["fine",{"_index":1832,"title":{},"body":{"index.html":{}}}],["first",{"_index":1278,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fitness",{"_index":1907,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1795,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":1244,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":437,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["flight",{"_index":1612,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":1773,"title":{},"body":{"index.html":{}}}],["follow",{"_index":933,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["followed",{"_index":942,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["following",{"_index":1739,"title":{},"body":{"index.html":{},"license.html":{}}}],["follows",{"_index":955,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows'})@apiokresponse({description",{"_index":946,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["fork",{"_index":439,"title":{},"body":{"entities/DbRepo.html":{}}}],["formatit",{"_index":1796,"title":{},"body":{"index.html":{}}}],["found",{"_index":749,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":888,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["free",{"_index":1872,"title":{},"body":{"license.html":{}}}],["from(entity",{"_index":840,"title":{},"body":{"injectables/RepoService.html":{}}}],["full",{"_index":430,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":403,"title":{},"body":{"entities/DbRepo.html":{}}}],["function",{"_index":1269,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":1352,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":1731,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1890,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1301,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generation",{"_index":1622,"title":{},"body":{"changelog.html":{}}}],["get(\"/:id",{"_index":795,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:id/contributions",{"_index":763,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo",{"_index":796,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":770,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/list",{"_index":797,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":953,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":915,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":991,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":1026,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/service",{"_index":640,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/web",{"_index":654,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":784,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":752,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":789,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":743,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":779,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":941,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":896,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":979,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1015,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":620,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":626,"title":{},"body":{"controllers/HealthController.html":{}}}],["getdomain",{"_index":1717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":728,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getting",{"_index":1228,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["ghcr.io/open",{"_index":1789,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":1947,"title":{},"body":{"properties.html":{}}}],["github",{"_index":373,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"changelog.html":{}}}],["granted",{"_index":1871,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1927,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["guard",{"_index":1372,"title":{},"body":{"changelog.html":{}}}],["guarded",{"_index":914,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":1362,"title":{},"body":{"changelog.html":{}}}],["guide",{"_index":1848,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":1849,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1190,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":1360,"title":{},"body":{"changelog.html":{}}}],["has_stars_data",{"_index":575,"title":{},"body":{"entities/DbUser.html":{}}}],["hasnextpage",{"_index":691,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":692,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":1334,"title":{},"body":{"changelog.html":{}}}],["health",{"_index":618,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":668,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":632,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":629,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":616,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":9,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":621,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":627,"title":{},"body":{"controllers/HealthController.html":{}}}],["hereby",{"_index":1870,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":1274,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":1297,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1912,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1943,"title":{},"body":{"properties.html":{}}}],["host",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["hot",{"_index":1366,"title":{},"body":{"changelog.html":{}}}],["http",{"_index":637,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":630,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["https://app.opensauced.pizza",{"_index":501,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://app.opensauced.pizza'})@column({type",{"_index":474,"title":{},"body":{"entities/DbRepo.html":{}}}],["https://github.com/open",{"_index":375,"title":{},"body":{"entities/DbContribution.html":{},"properties.html":{}}}],["httpstatus",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apiokresponse({type",{"_index":785,"title":{},"body":{"controllers/RepoController.html":{}}}],["identifier",{"_index":354,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identify",{"_index":425,"title":{},"body":{"entities/DbRepo.html":{}}}],["image",{"_index":1841,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":1628,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1365,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":1903,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":1277,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":1648,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1896,"title":{},"body":{"license.html":{}}}],["including",{"_index":1806,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":105,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1124,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":438,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["information",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["information'})@apiokresponse({type",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["inherited",{"_index":258,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["initial",{"_index":1687,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":277,"title":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":278,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectrepository",{"_index":289,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":297,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbrepo",{"_index":834,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":1078,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":1050,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":1103,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":1219,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbuser",{"_index":1186,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":868,"title":{},"body":{"injectables/RepoService.html":{}}}],["insights",{"_index":611,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["insights_role",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insights_role_id",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["inspection",{"_index":1576,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":1748,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1742,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1813,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1558,"title":{},"body":{"changelog.html":{}}}],["integration",{"_index":1316,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":1941,"title":{},"body":{"properties.html":{}}}],["interface",{"_index":720,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":721,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["is_accepted",{"_index":541,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_fork",{"_index":404,"title":{},"body":{"entities/DbRepo.html":{}}}],["is_onboarded",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":576,"title":{},"body":{"entities/DbUser.html":{}}}],["is_private",{"_index":577,"title":{},"body":{"entities/DbUser.html":{}}}],["is_waitlisted",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":682,"title":{},"body":{"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":675,"title":{},"body":{"classes/PageDto.html":{}}}],["isenum",{"_index":267,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":276,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":737,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":815,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":730,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isoptional",{"_index":268,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["issues",{"_index":405,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["item",{"_index":766,"title":{},"body":{"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":769,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":309,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/RepoService.html":{}}}],["items",{"_index":700,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":499,"title":{},"body":{"entities/DbRepo.html":{}}}],["javascript'})@column({type",{"_index":447,"title":{},"body":{"entities/DbRepo.html":{}}}],["job",{"_index":1506,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":1635,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":1853,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":382,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["js",{"_index":1185,"title":{},"body":{"injectables/UserService.html":{}}}],["jwt",{"_index":1149,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["keywords",{"_index":1942,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1901,"title":{},"body":{"license.html":{}}}],["language",{"_index":406,"title":{},"body":{"entities/DbRepo.html":{}}}],["last",{"_index":357,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_fetched_contributors_at",{"_index":407,"title":{},"body":{"entities/DbRepo.html":{}}}],["last_merged_at",{"_index":274,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["latest",{"_index":1336,"title":{},"body":{"changelog.html":{}}}],["leave",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":848,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":846,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":847,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":327,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["leverage",{"_index":1778,"title":{},"body":{"index.html":{}}}],["liability",{"_index":1916,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1913,"title":{},"body":{"license.html":{}}}],["lib",{"_index":1772,"title":{},"body":{"index.html":{}}}],["license",{"_index":408,"title":{"license.html":{}},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":242,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{}}}],["limit(pageoptionsdto.limit",{"_index":307,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":1879,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1904,"title":{},"body":{"license.html":{}}}],["line",{"_index":1200,"title":{},"body":{"injectables/UserService.html":{}}}],["link",{"_index":1379,"title":{},"body":{"changelog.html":{}}}],["linked",{"_index":473,"title":{},"body":{"entities/DbRepo.html":{}}}],["links",{"_index":1476,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":1281,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":1790,"title":{},"body":{"index.html":{}}}],["lintthis",{"_index":1792,"title":{},"body":{"index.html":{}}}],["list",{"_index":1344,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listing",{"_index":745,"title":{},"body":{"controllers/RepoContributionsController.html":{},"changelog.html":{}}}],["live",{"_index":1733,"title":{},"body":{"index.html":{}}}],["load",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":856,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":859,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":860,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":858,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":857,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":1322,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["localhost:54321",{"_index":1825,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1824,"title":{},"body":{"index.html":{}}}],["logging",{"_index":1562,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["logic",{"_index":1771,"title":{},"body":{"index.html":{}}}],["login",{"_index":578,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["machines",{"_index":1743,"title":{},"body":{"index.html":{}}}],["main",{"_index":1330,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":1431,"title":{},"body":{"changelog.html":{}}}],["managed",{"_index":1341,"title":{},"body":{"changelog.html":{}}}],["managing",{"_index":1820,"title":{},"body":{"index.html":{}}}],["manual",{"_index":1286,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":1416,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":381,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["matching",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":717,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":731,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(50",{"_index":736,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":255,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["memory",{"_index":638,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":633,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1906,"title":{},"body":{"license.html":{}}}],["merge",{"_index":358,"title":{},"body":{"entities/DbContribution.html":{},"license.html":{}}}],["meta",{"_index":671,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":295,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"injectables/RepoService.html":{}}}],["meta.dto.ts",{"_index":690,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":705,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":703,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":709,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":699,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":696,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":707,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1488,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["migration",{"_index":1310,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["migrations",{"_index":1821,"title":{},"body":{"index.html":{}}}],["min",{"_index":732,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":735,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimal",{"_index":1645,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":734,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minor",{"_index":1647,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1724,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1802,"title":{},"body":{"index.html":{}}}],["mit",{"_index":500,"title":{},"body":{"entities/DbRepo.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["mit'})@column({type",{"_index":454,"title":{},"body":{"entities/DbRepo.html":{}}}],["mkdocs",{"_index":1553,"title":{},"body":{"changelog.html":{}}}],["mocking",{"_index":1782,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1758,"title":{},"body":{"index.html":{}}}],["model",{"_index":390,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":1881,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/HealthModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1434,"title":{},"body":{"changelog.html":{}}}],["mount",{"_index":1603,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":1569,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":1769,"title":{},"body":{"index.html":{}}}],["much",{"_index":1285,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1429,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":1270,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":1738,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1776,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1631,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestjs",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["nestjs/passport",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":389,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["nestjs/terminus",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["never",{"_index":1140,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":312,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":1195,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":426,"title":{},"body":{"entities/DbRepo.html":{},"classes/PageMetaDto.html":{},"index.html":{}}}],["node",{"_index":1692,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":1744,"title":{},"body":{"index.html":{}}}],["non",{"_index":1273,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":1910,"title":{},"body":{"license.html":{}}}],["notable",{"_index":1232,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":833,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":1202,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":1060,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":1894,"title":{},"body":{"license.html":{}}}],["now",{"_index":349,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["npm",{"_index":1690,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":1745,"title":{},"body":{"index.html":{}}}],["null",{"_index":1189,"title":{},"body":{"injectables/UserService.html":{}}}],["number",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["oas3",{"_index":1935,"title":{},"body":{"properties.html":{}}}],["obtaining",{"_index":1875,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":1376,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":1864,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":306,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["onboarded",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onetomany",{"_index":483,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["open",{"_index":427,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_issues",{"_index":579,"title":{},"body":{"entities/DbUser.html":{}}}],["openapi",{"_index":1412,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":1800,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1367,"title":{},"body":{"changelog.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operationid",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["opted",{"_index":591,"title":{},"body":{"entities/DbUser.html":{}}}],["optional",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["options.dto",{"_index":271,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["options.dto.ts",{"_index":236,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:15",{"_index":727,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":252,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":725,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":809,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":726,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":729,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.interface",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["order",{"_index":1293,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["orderby",{"_index":241,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":871,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":243,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["orderdirectionenum",{"_index":260,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":872,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":261,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["orderfield",{"_index":300,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["origin",{"_index":374,"title":{},"body":{"entities/DbContribution.html":{}}}],["otherwise",{"_index":1920,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1587,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":1507,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1929,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":1857,"title":{},"body":{"index.html":{}}}],["owner",{"_index":478,"title":{},"body":{"entities/DbRepo.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owner}/${repo",{"_index":866,"title":{},"body":{"injectables/RepoService.html":{}}}],["p",{"_index":1785,"title":{},"body":{"index.html":{}}}],["package",{"_index":1933,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":1803,"title":{},"body":{"index.html":{}}}],["page",{"_index":235,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["pagecount",{"_index":693,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":290,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":313,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pagemetadto",{"_index":294,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":680,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":695,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":238,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":714,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":301,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":304,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":712,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto:15",{"_index":265,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pageoptionsdto:27",{"_index":259,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pageoptionsdto:32",{"_index":263,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["pages",{"_index":708,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginated",{"_index":759,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":780,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["paginating",{"_index":746,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":1663,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":755,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"id",{"_index":765,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"owner",{"_index":771,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":772,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["parameters",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["parameters.dto",{"_index":710,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":722,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["particular",{"_index":1908,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1148,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1146,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":651,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["per",{"_index":704,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":1698,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1869,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1888,"title":{},"body":{"license.html":{}}}],["person",{"_index":1874,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1889,"title":{},"body":{"license.html":{}}}],["pipelines",{"_index":1704,"title":{},"body":{"changelog.html":{}}}],["pizzas",{"_index":1259,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":1847,"title":{},"body":{"index.html":{}}}],["port",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["portions",{"_index":1898,"title":{},"body":{"license.html":{}}}],["post",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/onboarding",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/waitlist",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":1812,"title":{},"body":{"index.html":{}}}],["postonboarding",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":1374,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["prefix",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["prerequisites",{"_index":1737,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":1651,"title":{},"body":{"changelog.html":{}}}],["preview",{"_index":1784,"title":{},"body":{"index.html":{}}}],["previous",{"_index":698,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["primarycolumn",{"_index":380,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["primarycolumn(\"bigint",{"_index":394,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["primarygeneratedcolumn",{"_index":518,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["print",{"_index":1514,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":1850,"title":{},"body":{"index.html":{}}}],["process",{"_index":1586,"title":{},"body":{"changelog.html":{}}}],["process.env.domain",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":1155,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":1158,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":1153,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":1619,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["profile",{"_index":592,"title":{},"body":{"entities/DbUser.html":{}}}],["programming",{"_index":446,"title":{},"body":{"entities/DbRepo.html":{}}}],["project",{"_index":424,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["promise",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proper",{"_index":1487,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":1566,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":239,"title":{"properties.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":391,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["provide",{"_index":1522,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":1899,"title":{},"body":{"license.html":{}}}],["providers",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["public",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["public.users",{"_index":1311,"title":{},"body":{"changelog.html":{}}}],["publicuser",{"_index":1192,"title":{},"body":{"injectables/UserService.html":{}}}],["publish",{"_index":1882,"title":{},"body":{"license.html":{}}}],["pull",{"_index":332,"title":{},"body":{"entities/DbContribution.html":{},"changelog.html":{},"index.html":{}}}],["purpose",{"_index":1909,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1543,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":457,"title":{},"body":{"entities/DbRepo.html":{},"changelog.html":{},"index.html":{}}}],["pushed_at",{"_index":409,"title":{},"body":{"entities/DbRepo.html":{}}}],["put",{"_index":907,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["put(\"/:id/star",{"_index":916,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":954,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":992,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":1027,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":918,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":957,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":994,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":1029,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":900,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":945,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":983,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1019,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":904,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":949,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":986,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":1022,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["quality",{"_index":1791,"title":{},"body":{"index.html":{}}}],["query",{"_index":756,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["querybuilder",{"_index":298,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getcount",{"_index":310,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["querybuilder.getmany",{"_index":311,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["querybuilder.getone",{"_index":863,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.where(\"id",{"_index":1188,"title":{},"body":{"injectables/UserService.html":{}}}],["questions",{"_index":1852,"title":{},"body":{"index.html":{}}}],["re",{"_index":1593,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":1777,"title":{},"body":{"index.html":{}}}],["readme",{"_index":1261,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":240,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{}}}],["received",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1267,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":1378,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":364,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["registration",{"_index":1116,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":1499,"title":{},"body":{"changelog.html":{}}}],["relation",{"_index":1410,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":1670,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":1428,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1320,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["remaining",{"_index":1421,"title":{},"body":{"changelog.html":{}}}],["remote",{"_index":1814,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1272,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["removed",{"_index":890,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removes",{"_index":884,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["rename",{"_index":1400,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":229,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":790,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":401,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":363,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":804,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":519,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["repo.id",{"_index":850,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":524,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":509,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":539,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":530,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":558,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":549,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotouservotes",{"_index":573,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":564,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":792,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{}}}],["repo.to.user.stargazers.entity",{"_index":487,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.stars.entity",{"_index":485,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.submissions.entity",{"_index":486,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.to.user.votes.entity",{"_index":484,"title":{},"body":{"entities/DbRepo.html":{}}}],["repo.user",{"_index":601,"title":{},"body":{"entities/DbUser.html":{}}}],["repo/dtos/repo",{"_index":913,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo/entities/repo.entity",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUser.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["repo/repo.service",{"_index":227,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo_id",{"_index":317,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":225,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":774,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repoid",{"_index":286,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repomodule",{"_index":10,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":250,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":807,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repopageoptionsdto",{"_index":778,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["reporepository",{"_index":821,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":1766,"title":{},"body":{"index.html":{}}}],["repos",{"_index":488,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["reposervice",{"_index":223,"title":{"injectables/RepoService.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"coverage.html":{},"overview.html":{}}}],["repository",{"_index":282,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":874,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":922,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":1072,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":1043,"title":{},"body":{"injectables/StarService.html":{}}}],["reposubmitcontroller",{"_index":962,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":1097,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotouserstargazers",{"_index":410,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstargazers.repo",{"_index":460,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstargazers.user",{"_index":603,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouserstars",{"_index":411,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouserstars.repo",{"_index":462,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouserstars.user",{"_index":605,"title":{},"body":{"entities/DbUser.html":{}}}],["repotousersubmissions",{"_index":412,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotousersubmissions.repo",{"_index":464,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotousersubmissions.user",{"_index":607,"title":{},"body":{"entities/DbUser.html":{}}}],["repotouservotes",{"_index":413,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["repotouservotes.repo",{"_index":466,"title":{},"body":{"entities/DbRepo.html":{}}}],["repotouservotes.user",{"_index":609,"title":{},"body":{"entities/DbUser.html":{}}}],["repovotecontroller",{"_index":998,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":1213,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":1863,"title":{},"body":{"index.html":{}}}],["representing",{"_index":340,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":1142,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["request",{"_index":1249,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user?.user_metadata.sub",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":333,"title":{},"body":{"entities/DbContribution.html":{}}}],["requirements",{"_index":1700,"title":{},"body":{"changelog.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"index.html":{},"overview.html":{}}}],["response",{"_index":1435,"title":{},"body":{"changelog.html":{}}}],["response.decorator",{"_index":760,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["response.decorator.ts",{"_index":1713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":1114,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":1131,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":1129,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":1121,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":1118,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":1128,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":1119,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":1130,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":1125,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":1126,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":1123,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":1122,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["restriction",{"_index":1878,"title":{},"body":{"license.html":{}}}],["results",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve/update",{"_index":1241,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":1618,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":1245,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":1880,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":1439,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["route",{"_index":1440,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":1768,"title":{},"body":{"index.html":{}}}],["rules",{"_index":1368,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1539,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":1597,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":1590,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced",{"_index":497,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced'})@column({type",{"_index":432,"title":{},"body":{"entities/DbRepo.html":{}}}],["sauced/api.opensauced.pizza",{"_index":1231,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":1944,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":1948,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":1946,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":400,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":376,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/open",{"_index":431,"title":{},"body":{"entities/DbRepo.html":{}}}],["schema",{"_index":1413,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":1436,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":1629,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1639,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":1691,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["see",{"_index":1842,"title":{},"body":{"index.html":{}}}],["select",{"_index":352,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":839,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(['repo.id",{"_index":845,"title":{},"body":{"injectables/RepoService.html":{}}}],["selectquerybuilder",{"_index":828,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":1886,"title":{},"body":{"license.html":{}}}],["service",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":1425,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["settings",{"_index":1819,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1895,"title":{},"body":{"license.html":{}}}],["short",{"_index":423,"title":{},"body":{"entities/DbRepo.html":{}}}],["sign",{"_index":1127,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["simple",{"_index":1370,"title":{},"body":{"changelog.html":{}}}],["simplest",{"_index":1836,"title":{},"body":{"index.html":{}}}],["skip",{"_index":724,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["soft",{"_index":1381,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":1740,"title":{},"body":{"index.html":{},"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["sources",{"_index":441,"title":{},"body":{"entities/DbRepo.html":{}}}],["spdx",{"_index":453,"title":{},"body":{"entities/DbRepo.html":{}}}],["spec",{"_index":1583,"title":{},"body":{"changelog.html":{}}}],["split",{"_index":1393,"title":{},"body":{"changelog.html":{}}}],["src/.../api",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../endpoint.config.ts",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":1954,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:83",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":1113,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":1132,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":1135,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":1138,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":1145,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":1141,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":1711,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":1730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":1712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/page",{"_index":689,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":669,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":678,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":674,"title":{},"body":{"classes/PageDto.html":{}}}],["src/config/endpoint.config.ts",{"_index":1716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":315,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":365,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":356,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":367,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":336,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":361,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":350,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":372,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":353,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":329,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":377,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":224,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":279,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":283,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":287,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":234,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":738,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":617,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":624,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":628,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":667,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1719,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/repo/dtos/repo",{"_index":806,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":402,"title":{},"body":{"entities/DbRepo.html":{},"coverage.html":{}}}],["src/repo/entities/repo.entity.ts:103",{"_index":421,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:113",{"_index":472,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:123",{"_index":459,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:131",{"_index":452,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:138",{"_index":422,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:148",{"_index":456,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:158",{"_index":433,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:165",{"_index":429,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:175",{"_index":449,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:185",{"_index":455,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:195",{"_index":475,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:203",{"_index":477,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:207",{"_index":420,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:211",{"_index":467,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:215",{"_index":463,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:219",{"_index":465,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:223",{"_index":461,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:36",{"_index":435,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:46",{"_index":480,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:56",{"_index":445,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:66",{"_index":469,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:76",{"_index":482,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:86",{"_index":471,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.entity.ts:93",{"_index":443,"title":{},"body":{"entities/DbRepo.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":503,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":508,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":517,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":512,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":505,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":513,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":506,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":515,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":510,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":525,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":529,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":536,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":532,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":527,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":533,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":528,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":535,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":531,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":540,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":545,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":555,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":551,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":548,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":543,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":552,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":544,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":554,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":550,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":559,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":563,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":570,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":566,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":561,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":567,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":562,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":569,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":565,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":775,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:21",{"_index":787,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":791,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:48",{"_index":782,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":803,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":816,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:12",{"_index":820,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":831,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:28",{"_index":822,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:52",{"_index":825,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:67",{"_index":826,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:82",{"_index":824,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":875,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":1036,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":1038,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":1044,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":1048,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":1046,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":1042,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":923,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":1065,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":1067,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":1073,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":1077,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":1075,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":1071,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/submit/repo",{"_index":963,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":1090,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":1092,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":1098,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":1102,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":1100,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":1096,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/user/user.entity.ts",{"_index":574,"title":{},"body":{"entities/DbUser.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:102",{"_index":587,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:109",{"_index":596,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:116",{"_index":613,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:120",{"_index":602,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:124",{"_index":610,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:128",{"_index":606,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:132",{"_index":608,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:136",{"_index":604,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:27",{"_index":585,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:37",{"_index":600,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:44",{"_index":583,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:51",{"_index":595,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:58",{"_index":589,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:68",{"_index":580,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:78",{"_index":614,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:88",{"_index":597,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.entity.ts:95",{"_index":581,"title":{},"body":{"entities/DbUser.html":{}}}],["src/user/user.module.ts",{"_index":1166,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1169,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":1176,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1179,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":1178,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1181,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":1183,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":1174,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":999,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":1206,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":1208,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":1214,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":1218,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:45",{"_index":1216,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":1212,"title":{},"body":{"injectables/VoteService.html":{}}}],["stable",{"_index":1632,"title":{},"body":{"changelog.html":{}}}],["staff",{"_index":547,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":526,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":886,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":1037,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":876,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":891,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":894,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":898,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":902,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":905,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":910,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":1040,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":1047,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":1055,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":1056,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":504,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":1066,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":924,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":936,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":939,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":943,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":947,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":950,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":952,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":1069,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":1076,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":1345,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":1082,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":1083,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":12,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":928,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":944,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":929,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":948,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":855,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":813,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":951,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":11,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":880,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":899,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":881,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":903,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":897,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":414,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":814,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":909,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":1751,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1754,"title":{},"body":{"index.html":{}}}],["started",{"_index":1229,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":1707,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1534,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":440,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["strategy",{"_index":1371,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":1395,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":319,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(user_name",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["structure",{"_index":1615,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":1940,"title":{},"body":{"properties.html":{}}}],["studio",{"_index":1823,"title":{},"body":{"index.html":{}}}],["stuff",{"_index":1287,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":1398,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":1280,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["subdomain",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":1891,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1884,"title":{},"body":{"license.html":{}}}],["submission",{"_index":542,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":972,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":854,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":812,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":990,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":1091,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":964,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":974,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":977,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":981,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":984,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":987,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":989,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":1094,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":1101,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":1109,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":1107,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":1108,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":13,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":968,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":982,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":969,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":985,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":988,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":980,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":832,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount",{"_index":818,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":827,"title":{},"body":{"injectables/RepoService.html":{}}}],["subscribers",{"_index":415,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["substantial",{"_index":1897,"title":{},"body":{"license.html":{}}}],["successful",{"_index":1319,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suite",{"_index":1755,"title":{},"body":{"index.html":{}}}],["summary",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["supabase",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":1184,"title":{},"body":{"injectables/UserService.html":{}}}],["supabase>=0.18.0",{"_index":1747,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":160,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":1953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":1150,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":155,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":1157,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":1154,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":1156,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":212,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":1152,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1151,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":1162,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.validate(user",{"_index":1161,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["support",{"_index":1924,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1925,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1483,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1290,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":673,"title":{},"body":{"classes/PageDto.html":{},"injectables/RepoService.html":{},"index.html":{}}}],["table",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["tables",{"_index":1417,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1723,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1530,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":1502,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1382,"title":{},"body":{"changelog.html":{}}}],["take",{"_index":1556,"title":{},"body":{"changelog.html":{}}}],["target",{"_index":830,"title":{},"body":{"injectables/RepoService.html":{},"changelog.html":{}}}],["target}.id",{"_index":842,"title":{},"body":{"injectables/RepoService.html":{}}}],["tech",{"_index":1557,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":1950,"title":{},"body":{"properties.html":{}}}],["temporary",{"_index":1302,"title":{},"body":{"changelog.html":{}}}],["terminusmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":1548,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":1767,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1505,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":1765,"title":{},"body":{"index.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":747,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":781,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["thing",{"_index":1822,"title":{},"body":{"index.html":{}}}],["this.basequerybuilder",{"_index":861,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":650,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":653,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":666,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":658,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":662,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":664,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":660,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":656,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":645,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":647,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":299,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":768,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.data",{"_index":687,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":643,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":652,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":648,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findonebyid(id",{"_index":1193,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":719,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":718,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":642,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":665,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":657,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":661,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":663,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":659,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":655,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.itemcount",{"_index":715,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":713,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":644,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":646,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":688,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":711,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":716,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":844,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":799,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":767,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":773,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":1079,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":1084,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":1085,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":1086,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":1051,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":1058,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":1059,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":1061,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":1104,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":1110,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":1111,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":1112,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":1220,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":1225,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":1226,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":1227,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":960,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":956,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":920,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":917,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":996,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":993,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":852,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.userrepository.create",{"_index":1196,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":1187,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":1201,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":1031,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":1028,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":649,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":864,"title":{},"body":{"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":347,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"changelog.html":{}}}],["timestamp",{"_index":339,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["tld",{"_index":1677,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_timestamp(0",{"_index":451,"title":{},"body":{"entities/DbRepo.html":{}}}],["token",{"_index":1546,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":1779,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1919,"title":{},"body":{"license.html":{}}}],["total",{"_index":330,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["transformer",{"_index":684,"title":{},"body":{"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["true",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":677,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":676,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["type",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1951,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":631,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":231,"title":{},"body":{"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":805,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forrootasync",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1419,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":1804,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":1652,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1816,"title":{},"body":{"index.html":{}}}],["unable",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["unblock",{"_index":1703,"title":{},"body":{"changelog.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":251,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":262,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":808,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["undo",{"_index":1438,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":935,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":959,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":932,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unique",{"_index":321,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":1775,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":625,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SupabaseStrategy.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1350,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["updated",{"_index":1866,"title":{},"body":{"index.html":{}}}],["updated_at",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":385,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["updateonboarding",{"_index":1171,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":1180,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatewaitliststatus",{"_index":1172,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":1182,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":318,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"changelog.html":{}}}],["url(`https://${subdomain",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":1472,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1248,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["useguards(supabaseguard",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["user",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":586,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apiokresponse({type",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.entity",{"_index":1167,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.repos",{"_index":502,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repos)@joincolumn({name",{"_index":476,"title":{},"body":{"entities/DbRepo.html":{}}}],["user.repotouserstargazers",{"_index":523,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":514,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":538,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":534,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":557,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":553,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":572,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":568,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.service",{"_index":1168,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.entity",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_id",{"_index":416,"title":{},"body":{"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["user_metadata",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodule",{"_index":14,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["userrelations",{"_index":823,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":867,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepository",{"_index":1175,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"changelog.html":{},"index.html":{}}}],["users_to_repos_stargazers",{"_index":520,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":537,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":556,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":571,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["userservice",{"_index":163,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":1137,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":1144,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":683,"title":{},"body":{"classes/PageDto.html":{}}}],["validator",{"_index":269,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{}}}],["value",{"_index":246,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1423,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":1523,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":1511,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":326,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbUser.html":{}}}],["verify",{"_index":1682,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":1633,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":1693,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":1338,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":1815,"title":{},"body":{"index.html":{}}}],["videos",{"_index":1856,"title":{},"body":{"index.html":{}}}],["view",{"_index":1303,"title":{},"body":{"changelog.html":{}}}],["visual",{"_index":1862,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":1304,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":1860,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":1865,"title":{},"body":{"index.html":{}}}],["visually",{"_index":1828,"title":{},"body":{"index.html":{}}}],["vite",{"_index":1326,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":1781,"title":{},"body":{"index.html":{}}}],["void",{"_index":1143,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":1570,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":1604,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":399,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":324,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUser.html":{}}}],["vortex/api.opensauced.pizza",{"_index":1657,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":1120,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":560,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":1008,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":1207,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":1000,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":1010,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":1013,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":1017,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":1020,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":1023,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":1025,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":1210,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":1217,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":1016,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":1223,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":1224,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":15,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":1004,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":1018,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":1005,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":1021,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":853,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":811,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":1024,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["waitlist",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbUser.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["warranties",{"_index":1905,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1900,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1757,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":417,"title":{},"body":{"entities/DbRepo.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":1764,"title":{},"body":{"index.html":{}}}],["way",{"_index":1837,"title":{},"body":{"index.html":{}}}],["web",{"_index":619,"title":{},"body":{"controllers/HealthController.html":{}}}],["where(\"contribution.repo_id",{"_index":302,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":1080,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":1053,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":1105,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":1221,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":865,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":862,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":841,"title":{},"body":{"injectables/RepoService.html":{}}}],["whether",{"_index":590,"title":{},"body":{"entities/DbUser.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["withdeleted",{"_index":1052,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":346,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{},"license.html":{}}}],["work",{"_index":1432,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":1324,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":1361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":1774,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1284,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yaml",{"_index":1624,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":288,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["youtube",{"_index":1858,"title":{},"body":{"index.html":{}}}],["zone",{"_index":348,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUser.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { DataSource } from \"typeorm\";\n\nimport { RepoModule } from \"./repo/repo.module\";\nimport apiConfig from \"./config/api.config\";\nimport dbConfig from \"./config/database.config\";\nimport endpointConfig from \"./config/endpoint.config\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        apiConfig,\n        dbConfig,\n        endpointConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: configService.get(\"db.connection\"),\n        host: configService.get(\"db.host\"),\n        port: configService.get(\"db.port\"),\n        username: configService.get(\"db.username\"),\n        password: configService.get(\"db.password\"),\n        database: configService.get(\"db.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n        ],\n        synchronize: false,\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {\n  constructor (private dataSource: DataSource) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (private userService: UserService) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let onboarded = false;\n    let insights_role = 10;\n    let waitlisted = false;\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role_id } = await this.userService.checkAddUser(user);\n\n      onboarded = is_onboarded;\n      insights_role = insights_role_id;\n      waitlisted = is_waitlisted;\n    } catch (e) {\n      // leave onboarded as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      is_onboarded: onboarded,\n      insights_role,\n      is_waitlisted: waitlisted,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateOnboarding(userId);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [PassportModule, UserModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nContributionService \n\nContributionService \n\n\n\nContributionModule\n\nContributionModule\n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbContribution,\n  ])],\n  controllers: [RepoContributionsController],\n  providers: [RepoService, ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution)\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    // console.log(queryBuilder.getSql());\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepo.html":{"url":"entities/DbRepo.html","title":"entity - DbRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributions\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_fork\n                            \n                            \n                                    Public\n                                issues\n                            \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                    Optional\n                                last_fetched_contributors_at\n                            \n                            \n                                    Public\n                                license\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pushed_at\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                stars\n                            \n                            \n                                    Public\n                                subscribers\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                watchers\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbContribution[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, contribution => contribution.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository short description', example: '🍕This is a project to identify your next open source contribution! 🍕'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:165\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository full name', example: 'open-sauced/open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:158\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_fork\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating fork status, false for sources', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of issues', example: 274})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository programming language', example: 'JavaScript'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:175\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_fetched_contributors_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'timestamp without time zone', default: () => to_timestamp(0), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        license\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository SPDX license', example: 'MIT'})@Column({type: 'character varying', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository unique name', example: 'open-sauced'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pushed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last push', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:219\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:211\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of stars', example: 5})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of subscribers', example: 11756})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository GitHub linked URL', example: 'https://app.opensauced.pizza'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:195\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Owner user identifier', example: 57568598})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        watchers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of watchers', example: 5473})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.entity.ts:76\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  JoinColumn,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbContribution } from \"../../contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({\n  name: \"repos\",\n  orderBy: {\n    stars: \"DESC\",\n    name: \"ASC\",\n  },\n})\nexport class DbRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Owner user identifier\",\n    example: 57568598,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of issues\",\n    example: 274,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public issues: number;\n\n  @ApiModelProperty({\n    description: \"Total number of stars\",\n    example: 5,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public stars: number;\n\n  @ApiModelProperty({\n    description: \"Total number of watchers\",\n    example: 5473,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public watchers: number;\n\n  @ApiModelProperty({\n    description: \"Total number of subscribers\",\n    example: 11756,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public subscribers: number;\n\n  @ApiModelProperty({\n    description: \"Flag indicating fork status, false for sources\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_fork: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing repository last push\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pushed_at?: Date;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"to_timestamp(0)\",\n    select: false,\n  })\n  public last_fetched_contributors_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Repository unique name\",\n    example: \"open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Repository full name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public full_name: string;\n\n  @ApiModelProperty({\n    description: \"Repository short description\",\n    example: \"🍕This is a project to identify your next open source contribution! 🍕\",\n  })\n  @Column(\"text\")\n  public description: string;\n\n  @ApiModelProperty({\n    description: \"Repository programming language\",\n    example: \"JavaScript\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public language: string;\n\n  @ApiModelProperty({\n    description: \"Repository SPDX license\",\n    example: \"MIT\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 64,\n  })\n  public license: string;\n\n  @ApiModelProperty({\n    description: \"Repository GitHub linked URL\",\n    example: \"https://app.opensauced.pizza\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbContribution, contribution => contribution.repo)\n  public contributions: DbContribution[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.repo)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.repo)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.repo)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.repo)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUser.html":{"url":"entities/DbUser.html","title":"entity - DbUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                has_stars_data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_onboarded\n                            \n                            \n                                    Public\n                                is_open_sauced_member\n                            \n                            \n                                    Public\n                                is_private\n                            \n                            \n                                    Public\n                                is_waitlisted\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                open_issues\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                repoToUserStargazers\n                            \n                            \n                                    Public\n                                repoToUserStars\n                            \n                            \n                                    Public\n                                repoToUserSubmissions\n                            \n                            \n                                    Public\n                                repoToUserVotes\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        has_stars_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({default: false, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's onboarding status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_open_sauced_member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating app.opensauced user status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating whether user opted to have a private profile (beta feature', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating user's waitlist status', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User unique login name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open_issues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of open issues user has across public activity', example: 498})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repo => repo.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStargazers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStargazers[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStargazers => repoToUserStargazers.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserStars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserStars[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserStars => repoToUserStars.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserSubmissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserSubmissions[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserSubmissions => repoToUserSubmissions.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repoToUserVotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, repoToUserVotes => repoToUserVotes.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insights Role', example: 10})@Column({default: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  OneToMany,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users\" })\nexport class DbUser extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of open issues user has across public activity\",\n    example: 498,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public open_issues: number;\n\n  @ApiHideProperty()\n  @Column({\n    default: false,\n    select: false,\n  })\n  public has_stars_data: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating whether user opted to have a private profile (beta feature\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_private: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating app.opensauced user status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_open_sauced_member: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"User unique login name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public login: string;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's onboarding status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_onboarded: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating user's waitlist status\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_waitlisted: boolean;\n\n  @ApiModelProperty({\n    description: \"Insights Role\",\n    example: 10,\n  })\n  @Column({ default: 10 })\n  public role: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepo, repo => repo.user)\n  public repos: DbRepo[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserVotes, repoToUserVotes => repoToUserVotes.user)\n  public repoToUserVotes: DbRepoToUserVotes[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStars, repoToUserStars => repoToUserStars.user)\n  public repoToUserStars: DbRepoToUserStars[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserSubmissions, repoToUserSubmissions => repoToUserSubmissions.user)\n  public repoToUserSubmissions: DbRepoToUserSubmissions[];\n\n  @ApiHideProperty()\n  @OneToMany(() => DbRepoToUserStargazers, repoToUserStargazers => repoToUserStargazers.user)\n  public repoToUserStargazers: DbRepoToUserStargazers[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsInt, IsOptional, Max, Min } from \"class-validator\";\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\") id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoService \n\nRepoService \n\n\n\nRepoModule\n\nRepoModule\n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo])],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo)\n    private repoRepository: Repository,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    // console.log(queryBuilder.getSql());\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\n\nStarService \n\nStarService \n\n\n\nStarModule\n\nStarModule\n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStars,\n  ])],\n  controllers: [RepoStarController],\n  providers: [RepoService, StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars)\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nStargazeService \n\nStargazeService \n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nRepoService\n\nRepoService\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserStargazers,\n  ])],\n  controllers: [RepoStargazeController],\n  providers: [RepoService, StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers)\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_SubmitModule_exports\n\n\n\n\nSubmitService \n\nSubmitService \n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nRepoService\n\nRepoService\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserSubmissions,\n  ])],\n  controllers: [RepoSubmitController],\n  providers: [RepoService, SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions)\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n    ]),\n  ],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser)\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const { user_metadata: { sub: id, user_name } } = user;\n\n    try {\n      const publicUser = await this.findOneById(id as number);\n\n      return publicUser;\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id: id as number,\n        login: user_name as string,\n        created_at: new Date().toString(), // eslint-disable-line\n      });\n\n      // return new user\n      return newUser;\n    }\n  }\n\n  async updateOnboarding (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_onboarded: true, is_waitlisted: false });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nVoteService \n\nVoteService \n\n\n\nVoteModule\n\nVoteModule\n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nRepoService\n\nRepoService\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    DbRepo,\n    DbRepoToUserVotes,\n  ])],\n  controllers: [RepoVoteController],\n  providers: [RepoService, VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes)\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Nest Supabase API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\nsupabase>=0.18.0\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database commands\nThe API is configured to connect to a local Docker backed PostGres instance however \nyou can also connect to a remote Supabase instance by logging in via the UI and \ncopying the connection string from the settings page.\nManaging supabase migrations\nFirst thing we have to do for local development is start the studio locally at localhost:54321:\nnpm run db:startMake changes\nIf we are adding a new table structure, first do it visually in the Supabase Studio and test locally.\nCheck the migration difference with the following command:\nnpm run db:changesIf everything is fine we can run the following command to apply the changes to the database:\nnpm run db:commit add_table_nameTest changes\nSimplest way to test the migrations are working is to reset the local database:\nnpm run db:resetPush changes\nIf everything is fine we can push the changes to the remote database:\nnpm run db:push🔑 Supabase structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nContributionModule -->\n\nRepoService->ContributionModule\n\n\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nStarModule -->\n\nRepoService->StarModule\n\n\n\nStargazeModule -->\n\nRepoService->StargazeModule\n\n\n\nSubmitModule -->\n\nRepoService->SubmitModule\n\n\n\nVoteModule -->\n\nRepoService->VoteModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.12.0-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user?.user_metadata.sub as string;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
